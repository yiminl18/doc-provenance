[
  {
    "0424590c": {
      "question": "What is the significance of AQUA for Amazon Redshift?",
      "answer": "AQUA (Advanced Query Accelerator) for Amazon Redshift provides a speed boost for queries by leveraging custom hardware accelerators.",
      "provenance": [
        {
          "provenance_id": 0,
          "input_sentence_ids": [
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            11,
            12,
            13,
            14,
            15,
            16,
            17,
            18,
            19,
            20,
            21,
            22,
            23,
            24,
            25,
            26,
            27,
            28,
            29,
            30,
            31,
            32,
            33,
            34,
            35,
            36,
            37,
            38,
            39,
            40,
            41,
            42,
            43,
            44,
            45,
            46,
            47,
            48,
            49,
            50,
            51,
            52,
            53,
            54,
            55,
            56,
            57,
            58,
            59,
            60,
            61,
            62,
            63,
            64,
            65,
            66,
            67,
            68,
            69,
            70,
            71,
            72,
            73,
            74,
            75,
            76,
            77,
            78,
            79,
            80,
            81,
            82,
            83,
            84,
            85,
            86,
            87,
            88,
            89,
            90,
            91,
            92,
            93,
            94,
            95,
            96,
            97,
            98,
            99,
            100,
            101,
            102,
            103,
            104,
            105,
            106,
            107,
            108,
            109,
            110,
            111,
            112,
            113,
            114,
            115,
            116,
            117,
            118,
            119,
            120,
            121,
            122,
            123,
            124,
            125,
            126,
            127,
            128,
            129,
            130,
            131,
            132,
            133,
            134,
            135,
            136,
            137,
            138,
            139,
            140,
            141,
            142,
            143,
            144,
            145,
            146,
            147,
            148,
            149,
            150,
            151,
            152,
            153,
            154,
            155,
            156,
            157,
            158,
            159,
            160,
            161,
            162,
            163,
            164,
            165,
            166,
            167,
            168,
            169,
            170,
            171,
            172,
            173,
            174,
            175,
            176,
            177,
            178,
            179,
            180,
            181,
            182,
            183,
            184,
            185,
            186,
            187,
            188,
            189,
            190,
            191,
            192,
            193,
            194,
            195,
            196,
            197,
            198,
            199,
            200,
            201,
            202,
            203,
            204,
            205,
            206,
            207,
            208,
            209,
            210,
            211,
            212,
            213,
            214,
            215,
            216,
            217,
            218,
            219,
            220,
            221,
            222,
            223,
            224,
            225,
            226,
            227,
            228,
            229,
            230,
            231,
            232,
            233,
            234,
            235,
            236,
            237,
            238,
            239,
            240,
            241,
            242,
            243,
            244,
            245,
            246,
            247,
            248,
            249,
            250,
            251,
            252,
            253,
            254,
            255,
            256,
            257,
            258,
            259,
            260,
            261,
            262,
            263,
            264,
            265,
            266,
            267,
            268,
            269,
            270,
            271,
            272,
            273,
            274,
            275,
            276,
            277,
            278,
            279,
            280,
            281,
            282,
            283,
            284,
            285,
            286,
            287,
            288,
            289,
            290,
            291,
            292,
            293,
            294,
            295,
            296,
            297,
            298,
            299,
            300,
            301,
            302,
            303,
            304,
            305,
            306,
            307,
            308,
            309,
            310,
            311,
            312,
            313,
            314,
            315,
            316,
            317,
            318,
            319,
            320,
            321,
            322,
            323,
            324,
            325,
            326,
            327,
            328,
            329,
            330,
            331,
            332,
            333,
            334,
            335,
            336,
            337,
            338,
            339,
            340,
            341,
            342,
            343,
            344,
            345,
            346,
            347,
            348,
            349,
            350,
            351,
            352,
            353,
            354,
            355,
            356,
            357,
            358,
            359,
            360,
            361,
            362,
            363,
            364,
            365,
            366,
            367,
            368,
            369,
            370,
            371,
            372,
            373,
            374,
            375,
            376,
            377,
            378,
            379,
            380,
            381,
            382,
            383,
            384,
            385,
            386,
            387,
            388,
            389,
            390,
            391,
            392,
            393,
            394,
            395,
            396,
            397,
            398,
            399,
            400,
            401,
            402,
            403,
            404,
            405,
            406,
            407,
            408,
            409,
            410,
            411,
            412,
            413,
            414,
            415,
            416,
            417,
            418,
            419,
            420,
            421,
            422,
            423,
            424,
            425,
            426,
            427,
            428,
            429,
            430,
            431,
            432,
            433,
            434,
            435,
            436,
            437,
            438,
            439,
            440,
            441,
            442,
            443,
            444,
            445,
            446,
            447,
            448,
            449,
            450,
            451,
            452,
            453,
            454,
            455,
            456,
            457,
            458,
            459,
            460,
            461,
            462,
            463,
            464,
            465,
            466,
            467,
            468,
            469,
            470,
            471,
            472,
            473,
            474,
            475,
            476,
            477,
            478,
            479,
            480,
            481,
            482,
            483,
            484,
            485,
            486,
            487,
            488,
            489,
            490,
            491,
            492,
            493,
            494,
            495,
            496,
            497,
            498,
            499,
            500,
            501,
            502,
            503,
            504,
            505,
            506,
            507,
            508,
            509,
            510,
            511,
            512,
            513,
            514,
            515,
            516,
            517,
            518,
            519,
            520,
            521,
            522,
            523,
            524,
            525,
            526,
            527,
            528,
            529,
            530,
            531,
            532,
            533,
            534,
            535,
            536,
            537,
            538,
            539,
            540,
            541,
            542,
            543,
            544,
            545,
            546,
            547,
            548,
            549,
            550,
            551,
            552,
            553,
            554,
            555,
            556,
            557,
            558,
            559,
            560,
            561,
            562,
            563,
            564,
            565,
            566,
            567,
            568,
            569,
            570,
            571,
            572,
            573,
            574,
            575,
            576,
            577,
            578,
            579,
            580,
            581,
            582,
            583,
            584,
            585,
            586,
            587,
            588,
            589,
            590,
            591,
            592,
            593,
            594,
            595,
            596,
            597,
            598,
            599,
            600,
            601,
            602,
            603,
            604,
            605,
            606,
            607,
            608,
            609,
            610,
            611,
            612,
            613,
            614,
            615,
            616,
            617,
            618,
            619,
            620,
            621,
            622,
            623,
            624,
            625,
            626,
            627,
            628,
            629,
            630,
            631,
            632,
            633,
            634,
            635,
            636,
            637,
            638,
            639,
            640,
            641,
            642,
            643,
            644,
            645,
            646,
            647,
            648,
            649,
            650,
            651,
            652,
            653,
            654,
            655,
            656,
            657,
            658,
            659,
            660,
            661,
            662,
            663,
            664,
            665,
            666,
            667,
            668,
            669,
            670,
            671,
            672,
            673,
            674,
            675,
            676,
            677,
            678,
            679,
            680,
            681,
            682,
            683,
            684,
            685,
            686,
            687,
            688,
            689,
            690,
            691,
            692,
            693,
            694,
            695,
            696,
            697,
            698,
            699,
            700,
            701,
            702,
            703,
            704,
            705,
            706,
            707,
            708,
            709,
            710,
            711,
            712,
            713,
            714,
            715,
            716,
            717,
            718,
            719,
            720,
            721,
            722,
            723,
            724,
            725,
            726,
            727,
            728,
            729,
            730,
            731,
            732,
            733,
            734,
            735,
            736,
            737,
            738,
            739,
            740,
            741,
            742,
            743,
            744,
            745,
            746,
            747,
            748,
            749,
            750,
            751,
            752,
            753,
            754,
            755,
            756,
            757,
            758,
            759,
            760,
            761,
            762,
            763,
            764,
            765,
            766,
            767,
            768,
            769,
            770,
            771,
            772,
            773,
            774,
            775,
            776,
            777,
            778,
            779,
            780,
            781,
            782,
            783,
            784,
            785,
            786,
            787,
            788,
            789,
            790,
            791,
            792,
            793,
            794,
            795,
            796,
            797,
            798,
            799,
            800,
            801,
            802,
            803,
            804,
            805,
            806,
            807,
            808,
            809,
            810,
            811,
            812,
            813,
            814,
            815,
            816,
            817,
            818,
            819,
            820,
            821,
            822,
            823,
            824,
            825,
            826,
            827,
            828,
            829,
            830,
            831,
            832,
            833,
            834,
            835,
            836,
            837,
            838,
            839,
            840,
            841,
            842,
            843,
            844,
            845,
            846,
            847,
            848,
            849,
            850,
            851,
            852,
            853,
            854,
            855,
            856,
            857,
            858,
            859,
            860,
            861,
            862,
            863,
            864,
            865,
            866,
            867,
            868,
            869,
            870,
            871,
            872,
            873,
            874,
            875,
            876,
            877,
            878,
            879,
            880,
            881,
            882,
            883,
            884,
            885,
            886,
            887,
            888,
            889,
            890,
            891,
            892,
            893,
            894,
            895,
            896,
            897,
            898,
            899,
            900,
            901,
            902,
            903,
            904,
            905,
            906,
            907,
            908,
            909,
            910,
            911,
            912,
            913,
            914,
            915,
            916,
            917,
            918,
            919,
            920,
            921,
            922,
            923,
            924,
            925,
            926,
            927,
            928,
            929,
            930,
            931,
            932,
            933,
            934,
            935,
            936,
            937,
            938,
            939,
            940,
            941,
            942,
            943,
            944,
            945,
            946,
            947,
            948,
            949,
            950,
            951,
            952,
            953,
            954,
            955,
            956,
            957,
            958,
            959,
            960,
            961,
            962,
            963
          ],
          "provenance_ids": [
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            11,
            12,
            13,
            14,
            15,
            16,
            17,
            18,
            19,
            21,
            22,
            23,
            24,
            25,
            26,
            27,
            28,
            29,
            30,
            31,
            33,
            34,
            35,
            36,
            37,
            38,
            39,
            40,
            41,
            42,
            43,
            52,
            53,
            54,
            56,
            57,
            58,
            59,
            60,
            61,
            62,
            63,
            64,
            65,
            66,
            68,
            69,
            70,
            71,
            72,
            73,
            74,
            75,
            76,
            77,
            78,
            79,
            80,
            82,
            83,
            84,
            85,
            86,
            87,
            88,
            89,
            90,
            91,
            92,
            93,
            94,
            95,
            96,
            97,
            98,
            99,
            101,
            102,
            103,
            104,
            106,
            107,
            108,
            109,
            110,
            111,
            112,
            113,
            114,
            115,
            116,
            119,
            120,
            121,
            123,
            124,
            125,
            126,
            127,
            128,
            129,
            130,
            132,
            133,
            134,
            135,
            136,
            137,
            138,
            139,
            140,
            141,
            142,
            143,
            144,
            145,
            146,
            147,
            148,
            149,
            150,
            151,
            152,
            153,
            154,
            155,
            156,
            157,
            158,
            159,
            160,
            161,
            162,
            163,
            164,
            166,
            167,
            168,
            169,
            170,
            171,
            172,
            173,
            174,
            175,
            176,
            177,
            178,
            179,
            180,
            181,
            182,
            183,
            184,
            185,
            186,
            187,
            188,
            189,
            190,
            191,
            192,
            193,
            194,
            195,
            196,
            197,
            198,
            199,
            200,
            201,
            202,
            203,
            204,
            205,
            206,
            207,
            208,
            209,
            210,
            211,
            212,
            213,
            214,
            215,
            216,
            217,
            218,
            219,
            220,
            221,
            222,
            223,
            224,
            225,
            226,
            227,
            228,
            229,
            230,
            231,
            232,
            233,
            234,
            235,
            236,
            237,
            238,
            239,
            240,
            241,
            242,
            243,
            244,
            245,
            246,
            247,
            248,
            249,
            250,
            251,
            252,
            253,
            254,
            255,
            256,
            257,
            258,
            259,
            260,
            261,
            262,
            263,
            264,
            265,
            266,
            267,
            268,
            269,
            270,
            271,
            272,
            273,
            274,
            275,
            276,
            277,
            278,
            279,
            280,
            281,
            282,
            283,
            284,
            286,
            287,
            289,
            290,
            291,
            292,
            293,
            294,
            295,
            296,
            297,
            298,
            299,
            300,
            301,
            302,
            303,
            304,
            305,
            306,
            307,
            308,
            309,
            310,
            311,
            312,
            313,
            314,
            315,
            316,
            317,
            318,
            319,
            320,
            321,
            322,
            323,
            324,
            325,
            326,
            327,
            328,
            329,
            330,
            331,
            333,
            334,
            336,
            337,
            338,
            339,
            340,
            341,
            343,
            344,
            345,
            346,
            347,
            348,
            349,
            350,
            351,
            352,
            353,
            354,
            355,
            357,
            358,
            359,
            360,
            362,
            363,
            364,
            365,
            366,
            367,
            368,
            369,
            370,
            371,
            372,
            373,
            374,
            375,
            376,
            377,
            378,
            380,
            381,
            382,
            383,
            384,
            385,
            386,
            387,
            388,
            389,
            390,
            391,
            392,
            393,
            394,
            395,
            396,
            397,
            398,
            399,
            400,
            401,
            402,
            403,
            404,
            405,
            406,
            407,
            408,
            409,
            410,
            411,
            412,
            413,
            414,
            415,
            416,
            417,
            418,
            419,
            420,
            421,
            422,
            423,
            424,
            425,
            426,
            427,
            428,
            429,
            430,
            431,
            432,
            433,
            434,
            435,
            436,
            437,
            439,
            441,
            442,
            444,
            445,
            446,
            447,
            449,
            450,
            451,
            452,
            453,
            454,
            455,
            456,
            457,
            458,
            459,
            461,
            462,
            463,
            464,
            465,
            469,
            470,
            471,
            473,
            474,
            479,
            481,
            482,
            483,
            484,
            485,
            486,
            488,
            489,
            495,
            496,
            497,
            499,
            501,
            502,
            503,
            504,
            505,
            506,
            508,
            509,
            510,
            512,
            513,
            514,
            515,
            516,
            518,
            520,
            521,
            522,
            523,
            528,
            529,
            530,
            531,
            533,
            598,
            599,
            600,
            627,
            628,
            636,
            653,
            663,
            679,
            681,
            682,
            699,
            700,
            704,
            705,
            706,
            707,
            712,
            713,
            721,
            726,
            727,
            728,
            730,
            739,
            740,
            741,
            749,
            750,
            758,
            760,
            761,
            762,
            763,
            764,
            765,
            766,
            768,
            769,
            771,
            772,
            773,
            774,
            786,
            788,
            789,
            792,
            793,
            794,
            795,
            799,
            819,
            820,
            821,
            822,
            823,
            825,
            826,
            827,
            828,
            829,
            830,
            831,
            832,
            833,
            835,
            836,
            837,
            838,
            839,
            840,
            841,
            842,
            843,
            844,
            845,
            847,
            848,
            849,
            850,
            851,
            852,
            853,
            854,
            856,
            858,
            859,
            860,
            861,
            862,
            863,
            864,
            865,
            867,
            868,
            869,
            870,
            871,
            875,
            878,
            879,
            880,
            881,
            883,
            888,
            889,
            890,
            891,
            892,
            893,
            895,
            896,
            897,
            898,
            899,
            900,
            901,
            903,
            905,
            906,
            907,
            908,
            910,
            911,
            912,
            913,
            914,
            915,
            916,
            917,
            918,
            920,
            922,
            923,
            924,
            925,
            926,
            930,
            931,
            933,
            934,
            935,
            936,
            937,
            953,
            954,
            955,
            957,
            959,
            960,
            961,
            963
          ],
          "provenance": "What Goes Around Comes Around... And Around...\n\nMichael Stonebraker\nMassachusetts Institute of Technology\nstonebraker@csail.mit.edu\n\nAndrew Pavlo\nCarnegie Mellon University\npavlo@cs.cmu.edu\n\nABSTRACT\nTwo decades ago, one of us co-authored a paper com-\nmenting on the previous 40 years of data modelling re-\nsearch and development [188].That paper demonstrated\nthat the relational model (RM) and SQL are the prevail-\ning choice for database management systems (DBMSs),\ndespite efforts to replace either them.Instead, SQL ab-\nsorbed the best ideas from these alternative approaches.We revisit this issue and argue that this same evolu-\ntion has continued since 2005.Once again there have\nbeen repeated efforts to replace either SQL or the RM.But the RM continues to be the dominant data model\nand SQL has been extended to capture the good ideas\nfrom others.As such, we expect more of the same in\nthe future, namely the continued evolution of SQL and\nrelational DBMSs (RDBMSs).We also discuss DBMS\nimplementations and argue that the major advancements\nhave been in the RM systems, primarily driven by chang-\ning hardware characteristics.1 Introduction\nIn 2005, one of the authors participated in writing a\nchapter for the Red Book titled “What Goes Around\nComes Around” [188].That paper examined the major\ndata modelling movements since the 1960s:\n\nHierarchical (e.g., IMS): late 1960s and 1970s\nNetwork (e.g., CODASYL): 1970s\nRelational: 1970s and early 1980s\nEntity-Relationship: 1970s\nExtended Relational: 1980s\nSemantic: late 1970s and 1980s\nObject-Oriented: late 1980s and early 1990s\nObject-Relational: late 1980s and early 1990s\nSemi-structured (e.g., XML): late 1990s and 2000s\n\n•\n•\n•\n•\n•\n•\n•\n•\n•\n\nOur conclusion was that the relational model with an\nextendable type system (i.e., object-relational) has dom-\ninated all comers, and nothing else has succeeded in\nthe marketplace.Although many of the non-relational\nDBMSs covered in 2005 still exist today, their vendors\nhave relegated them to legacy maintenance mode and\nnobody is building new applications on them.This per-\nsistence is more of a testament to the “stickiness” of data\n\nrather than the lasting power of these systems.In other\nwords, there still are many IBM IMS databases running\ntoday because it is expensive and risky to switch them\nto use a modern DBMS.But no start-up would willingly\nchoose to build a new application on IMS.A lot has happened in the world of databases since our\n2005 survey.During this time, DBMSs have expanded\nfrom their roots in business data processing and are now\nused for almost every kind of data.This led to the “Big\nData” era of the early 2010s and the current trend of inte-\ngrating machine learning (ML) with DBMS technology.In this paper, we analyze the last 20 years of data\nmodel and query language activity in databases.We\nstructure our commentary into the following areas: (1)\nMapReduce Systems, (2) Key-value Stores, (3) Docu-\nment Databases, (4) Column Family / Wide-Column,\n(5) Text Search Engines, (6) Array Databases, (7)\nVector Databases, and (8) Graph Databases.We contend that most systems that deviated from\nSQL or the RM have not dominated the DBMS land-\nscape and often only serve niche markets.Such systems are now on a path to conver-\ngence with RDBMSs.Meanwhile, SQL incorporated\nthe best query language ideas to expand its support for\nmodern applications and remain relevant.Although there has not been much change in RM\nfundamentals, there were dramatic changes in RM sys-\ntem implementations.The second part of this paper\ndiscusses advancements in DBMS architectures that ad-\ndress modern applications and hardware: (1) Columnar\nSystems, (2) Cloud Databases, (3) Data Lakes / Lake-\nhouses, (4) NewSQL Systems, (5) Hardware Acceler-\nators, and (6) Blockchain Databases.Some of these\nare profound changes to DBMS implementations, while\nothers are merely trends based on faulty premises.We ﬁnish with a discussion of important considera-\ntions for the next generation of DBMSs and provide part-\ning comments on our hope for the future of databases in\nboth research and commercial settings.SIGMOD Record, June 2024 (Vol. 53, No.2)\n\n21\n\n\f2 Data Models & Query Languages\nFor our discussion here, we group the research and de-\nvelopment thrusts in data models and query languages\nfor database into eight categories.2.1 MapReduce Systems\nGoogle constructed their MapReduce (MR) framework\nin 2003 as a “point solution” for processing its periodic\ncrawl of the internet [122].At the time, Google had\nlittle expertise in DBMS technology, and they built MR\nto meet their crawl needs.In database terms, Map is a\nuser-deﬁned function (UDF) that performs computation\nand/or ﬁltering while Reduce is a GROUP BY operation.Rather, it was up to the\nMap and Reduce functions written in a procedural MR\nprogram to parse and decipher the contents of data ﬁles.There was a lot of interest in MR-based systems at\nother companies in the late 2000s.Yahoo! developed\nan open-source version of MR in 2005, called Hadoop.It ran on top of a distributed ﬁle system HDFS that was\na clone of the Google File System [134].Several start-\nups were formed to support Hadoop in the commercial\nmarketplace.We will use MR to refer to the Google\nimplementation and Hadoop to refer to the open-source\nversion.They are functionally similar.There was a controversy about the value of Hadoop\ncompared to RDBMSs designed for OLAP workloads.This culminated in a 2009 study that showed that data\nwarehouse DBMSs outperformed Hadoop [172].This\ngenerated dueling articles from Google and the DBMS\ncommunity [123, 190].Google argued that with care-\nful engineering, a MR system will beat DBMSs, and a\nuser does not have to load data with a schema before\nrunning queries on it.Developers\nfound it difﬁcult to shoehorn their application into the\n\nrestricted MR/Hadoop paradigm.There were consider-\nable efforts to provide a SQL and RM interface on top\nof Hadoop, most notable was Meta’s Hive [30, 197].The next event occurred eight months after the CACM\narticle when Google announced that they were moving\ntheir crawl processing from MR to BigTable [164].Google ﬁnally announced in 2014 that MR had no\nplace in their technology stack and killed it off [194].The ﬁrst event left the three leading Hadoop vendors\n(Cloudera, Hortonworks, MapR) without a viable prod-\nuct to sell.Cloudera rebranded Hadoop to mean the\nwhole stack (application, Hadoop, HDFS).In a further\nsleight-of-hand, Cloudera built a RDBMS, Impala [150],\non top of HDFS but not using Hadoop.They realized\nthat Hadoop had no place as an internal interface in a\nSQL DBMS, and they conﬁgured it out of their stack\nwith software built directly on HDFS.In a similar vein,\nMapR built Drill [22] directly on HDFS, and Meta cre-\nated Presto [185] to replace Hive.Discussion: MR’s deﬁciencies were so signiﬁcant that\nit could not be saved despite the adoption and enthu-\nsiasm from the developer community.Hadoop died\nabout a decade ago, leaving a legacy of HDFS clusters\nin enterprises and a collection of companies dedicated\nto making money from them.At present, HDFS has\nlost its luster, as enterprises realize that there are better\ndistributed storage alternatives [124].Meanwhile, dis-\ntributed RDBMSs are thriving, especially in the cloud.Some aspects of MR system implementations related\nto scalability, elasticity, and fault tolerance are carried\nover into distributed RDBMSs.3.3). Hadoop’s lim-\nitations opened the door for other data processing plat-\nforms, namely Spark [201] and Flink [109].Both sys-\ntems started as better implementations of MR with pro-\ncedural APIs but have since added support for SQL [105].2.2 Key/Value Stores\nThe key/value (KV) data model is the simplest model\npossible.It represents the following binary relation:\n\n(key,value)\n\nA KV DBMS represents a collection of data as an as-\nsociative array that maps a key to a value.The value is\ntypically an untyped array of bytes (i.e., a blob), and the\nDBMS is unaware of its contents.It is up to the appli-\ncation to maintain the schema and parse the value into\nits corresponding parts.Most KV DBMSs only provide\nget/set/delete operations on a single value.In the 2000s, several new Internet companies built\ntheir own shared-nothing, distributed KV stores for nar-\n\n22\n\nSIGMOD Record, June 2024 (Vol.53, No. 2)\n\n\frowly focused applications, like caching and storing ses-\nsion data.For caching, Memcached [131] is the most\nwell-known example of this approach.Redis [67] mar-\nkets itself as a Memcached replacement, offering a more\nrobust query API with checkpointing support.For more\npersistent application data, Amazon created the Dynamo\nKV store in 2007 [125].Such systems offer higher and\nmore predictable performance, compared to a RDBMS,\nin exchange for more limited functionality.One of the ﬁrst stan-\ndalone embedded KV DBMSs was BerkeleyDB from\nthe early 1990s [170].Recent notable entries include\nGoogle’s LevelDB [37], which Meta later forked as\nRocksDB [68].Discussion: Key/value stores provide a quick “out-of-\nthe-box” way for developers to store data, compared to\nthe more laborious effort required to set up a table in a\nRDBMS.Of course, it is dangerous to use a KV store\nin a complex application that requires more than just a\nbinary relation.If an application requires multiple ﬁelds\nin a record, then KV stores are probably a bad idea.Not\nonly must the application parse record ﬁelds, but also\nthere are no secondary indexes to retrieve other ﬁelds\nby value.Likewise, developers must implement joins or\nmulti-get operations in their application.To deal with these issues, several systems began as\na KV store and then morphed into a more feature-rich\nrecord store.Such systems replace the opaque value\nwith a semi-structured value, such as a JSON docu-\nment.Examples of this transition are Amazon’s Dy-\nnamoDB [129] and Aerospike [9].It is not trivial to re-\nengineer a KV store to make it support a complex data\nmodel, whereas RDBMSs easily emulates KV stores\nwithout any changes.If an application needs an embed-\nded DBMS, there are full-featured choices available to-\nday, including SQLite [71] and DuckDB [180].Hence,\na RDBMS may be a better choice, even for simple appli-\ncations, because they offer a path forward if the applica-\ntion’s complexity increases.One new architecture trend from the last 20 years is\nusing embedded KV stores as the underlying storage\nmanager for full-featured DBMSs.Prior to this, build-\ning a new DBMS requires engineers to build a custom\nstorage manager that is natively integrated in the DBMS.MySQL was the ﬁrst DBMS to expose an API that al-\nlowed developers to replace its default KV storage man-\nager.This API enabled Meta to build RocksDB to re-\nplace InnoDB for its massive ﬂeet of MySQL databases.Similarly, MongoDB discarded their ill-fated MMAP-\nbased storage manager in favor of WiredTiger’s KV\nstore in 2014 [120, 138].2.3 Document Databases\n\nThe document data model represents a database as a col-\nlection of record objects.Each document contains a hier-\narchy of ﬁeld/value pairs, where each ﬁeld is identiﬁed\nby a name and a ﬁeld’s value can be either a scalar type,\nan array of values, or another document.The following\nexample in JSON is a customer document that contain\na nested list of purchase order records with their corre-\nsponding order items.{ “name”: “First Last”,\n\n“orders”: [ { “id”: 123, “items”: [...] },\n\n{ “id”: 456, “items”: [...] }, ] }\n\nDocument data models have been an active ﬁeld of\neffort for several decades.Despite\nthe buzz with XML databases in the late 1990s, we\ncorrectly predicted in 2005 they would not supplant\nRDBMSs [188].JSON has since overtaken XML to\nbecome the standard for data exchange for web-based\napplications.JavaScript’s popularity with developers\nand the accompanying ubiquity of JSON led several\ncompanies to create document-oriented systems that na-\ntively stored JSON in the 2000s.The inability of OLTP RDBMSs to scale in the 2000s\nushered in dozens of document DBMSs that marketed\nthemselves using the catchphrase NoSQL [110].There\nwere two marketing messages for such systems that res-\nonated with developers.First, SQL and joins are slow,\nand one should use a “faster” lower-level, record-at-a-\ntime interface.Second, ACID transactions are unneces-\nsary for modern applications, so the DBMS should only\nprovide weaker notion of it (i.e., BASE [179]).Because of these two thrusts, NoSQL came to stand\nfor a DBMS that stored records or documents as JSON,\nsupported a lower-level API, and weak or non-existent\ntransactions.There are dozens of such systems, of\nwhich MongoDB [41] is the most popular.Discussion: Document DBMSs are essentially the same\nas object-oriented DBMSs from the 1980s and XML\nDBMSs from the late 1990s.Proponents of document\nDBMSs make the same argument as their OO/XML\npredecessors: storing data as documents removes the\nimpedance mismatch between how application OO code\ninteracts with data and how relational databases store\nthem.SIGMOD Record, June 2024 (Vol. 53, No.2)\n\n23\n\n\fDespite strong protestations that SQL was terrible, by\nthe end of the 2010s, almost every NoSQL DBMS added\na SQL interface.Notable examples include DynamoDB\nPartiQL [56], Cassandra CQL [15], Aerospike AQL [9],\nand Couchbase SQL++ [72].Instead of supporting the SQL standard for\nDDL and DML operations, NoSQL vendors claim that\nthey support their own proprietary query language de-\nrived or inspired from SQL.For most applications, these\ndistinctions are without merit.Any language differences\nbetween SQL and NoSQL derivatives are mostly due to\nJSON extensions and maintenance operations.Many of the remaining NoSQL DBMSs also added\nstrongly consistent (ACID) transactions (see Sec. 3.4).As such, the NoSQL message has morphed from “Do\nnot use SQL – it is too slow!” to “Not only SQL” (i.e.,\nSQL is ﬁne for some things).Adding SQL and ACID to a NoSQL DBMS lowers\ntheir intellectual distance from RDBMSs.The main\ndifferences between them seems to be JSON support\nand the fact that NoSQL vendors allow “schema later”\ndatabases.But the SQL standard added a JSON data\ntype and operations in 2016 [165, 178].Higher level languages are almost universally pre-\nferred to record-at-a-time notations as they require less\ncode and provide greater data independence.Although\nwe acknowledge that the ﬁrst SQL optimizers were slow\nand ineffective, they have improved immensely in the\nlast 50 years.But the optimizer remains the hardest part\nof building a DBMS.We suspect that this engineering\nburden was a contributing factor to why NoSQL systems\noriginally chose to not support SQL.2.4 Column-Family Databases\nThere is another category of NoSQL systems that uses\na data model called column-family (aka wide-column).Despite its name, column-family is not a columnar data\nmodel.Instead, it is a reduction of the document data\nmodel that only supports one level of nesting instead\nof arbitrary nesting; it is relation-like, but each record\ncan have optional attributes, and cells can contain an ar-\nray of values.The following example shows a mapping\nfrom user identiﬁer keys to JSON documents that con-\ntain each user’s varying proﬁle information:\n\nUser1000 → { “name”: “Alice”,\n\n“accounts”: [ 123, 456 ],\n“email”: \"xxx@xxx.edu” }\n\nUser1001 → { “name”: “Bob”,\n\n“email”: [ “yyy@yyy.org”, “zzz@zzz.com” ] }\n\nThe ﬁrst column-family model DBMS was Google’s\nBigTable in 2004 [111].Instead of adopting SQL and\n\nemerging columnar storage, Google used this data model\nwith procedural client APIs.Other systems adopted the\ncolumn-family model in an attempt to copy Google’s be-\nspoke implementation.Most notable are Cassandra [14]\nand HBase [28].They also copied BigTable’s limita-\ntions, including the lack of joins and secondary indexes.Discussion: All our comments in Sec.2.3 about the\ndocument model are also applicable here.In the early\n2010s, Google built RDBMSs on top of BigTable, in-\ncluding MegaStore [99] and the ﬁrst version of Span-\nner.Since then, Google rewrote Spanner to remove\nthe BigTable remnants [98], and it is now the primary\ndatabase for many of its internal applications.Several\nNoSQL DBMSs deprecated their proprietary APIs in\nfavor of SQL but still retain their non-relational archi-\ntectures.Cassandra replaced their Thrift-API with a\nSQL-like language called CQL [15], and HBase now\nrecommends the Phoenix SQL-frontend [57].Google\nstill offers BigTable as a cloud service, but the column-\nfamily model is a singular outlier with the same disad-\nvantages as NoSQL DBMSs.2.5 Text Search Engines\nText search engines have existed for a long time, begin-\nning with the seminal SMART system in the 1960s [184].SMART pioneered information retrieval and the vector\nspace model, now nearly universal in modern search\nengines, by tokenizing documents into a “bag of words”\nand then building full-text indexes (aka inverted indexes)\non those tokens to support queries on their contents.The\nsystem was also cognizant of noise words (e.g., “the”,\n“a”), synonyms (e.g., “The Big Apple” is a synonym for\n“New York City”), salient keywords, and distance (e.g.,\n“drought” often appears close to “climate change”).The leading text search systems today include Elastic-\nsearch [23] and Solr [70], which both use Lucene [38]\nas their internal search library.These systems offer\ngood support for storing and indexing text data but offer\nnone-to-limited transaction capabilities.This limitation\nmeans that a DBMS has to recover from data corruption\nby rebuilding the document index from scratch, which\nresults in signiﬁcant downtime.All the leading RDBMSs support full-text search in-\ndexes, including Oracle [52], Microsoft SQL Server [52],\nMySQL [43], and PostgreSQL [62].Their search fea-\ntures have improved recently and are generally on par\nwith the special-purpose systems above.They also have\nthe advantage of built-in transaction support.But their\nintegration of search operations in SQL is often clunky\nand differs between DBMSs.Discussion: Text data is inherently unstructured, which\nmeans that there is no data model.Instead, a DBMS\nseeks to extract structure (i.e., meta-data, indexes) from\ntext to avoid “needle in the haystack” sequential searches.24\n\nSIGMOD Record, June 2024 (Vol. 53, No.2)\n\n\fThere are three ways to manage text data in application.This approach allows one to run “best of breed” systems\nbut requires additional ETL plumbing to push data from\nthe operational DBMS to the text DBMS and to rewrite\napplications to route queries to the right DBMSs based\non their needs.Alternatively, one can run a RDBMS\nwith good text-search integration capabilities but with\ndivergent APIs in SQL.This latter issue is often over-\ncome by application frameworks that hide this complex-\nity (e.g., Django Haystack [20]).The third option is\na polystore system [187] that masks the system differ-\nences via middleware that exposes a uniﬁed interface.Inverted index-centric search engines based on SMART\n\nare used for exact match searches.These methods have\nbeen supplanted in recent years by similarity search us-\ning ML-generated embeddings (see Sec.2.7). 2.6 Array Databases\nThere are many areas of computing where arrays are an\nobvious data representation.We use the term “array” to\nmean all variants of them [182]: vectors (one dimen-\nsion – see Sec.2.7), matrices (two dimensions), and\ntensors (three or more dimensions).For example, sci-\nentiﬁc surveys for geographic regions usually represent\ndata as a multi-dimensional array that stores sensor mea-\nsurements using location/time-based coordinates:\n\n(latitude, longitude, time, [vector-of-values])\n\nSeveral other data sets look like this, including ge-\nnomic sequencing and computational ﬂuid dynamics.Arrays are also the core of most ML data sets.Although array-based programming languages have\nexisted since the 1960s (APL [142]), the initial work\non array DBMSs began in the 1980s.PICDMS is con-\nsidered to be the ﬁrst DBMS implementation using the\narray data model [114].The two oldest array DBMSs\nstill being developed today are Rasdaman [66, 103] and\nkdb+ [34].Newer array DBMSs include SciDB [54,\n191] and TileDB [76].HDF5 [29] and NetCDF [46] are\npopular array ﬁle formats for scientiﬁc data.There are several system challenges with storing and\nquerying real-world array data sets.Foremost is that ar-\nray data does not always align to a regular integer grid;\nfor example, geospatial data is often split into irregular\nshapes.An application can map such grids to integer\ncoordinates via metadata describing this mapping [166].Hence, most applications maintain array and non-array\ndata together in a single database.Unlike row- or column-based DBMSs, querying array\ndata in arbitrary dimensions presents unique challenges.The difﬁculty arises from storing multi-dimensional ar-\nray data on a linear physical storage medium like a disk.To overcome these challenges, array DBMSs must em-\n\nploy indexing and data structures to support efﬁcient\ntraversal across array dimensions.Discussion: Array DBMSs are a niche market that has\nonly seen adoption in speciﬁc verticals (we discuss vec-\ntor DBMSs next).For example, they have considerable\ntraction in the genomics space.HDF5 is popular for\nsatellite imagery and other gridded scientiﬁc data.But\nbusiness applications rarely use dedicated array DBMSs,\nwhich is necessary for any product to survive.No ma-\njor cloud provider offers a hosted array DBMS service,\nmeaning they do not see a sizable market.The challenge that array DBMS vendors have al-\nways faced is that the SQL includes support for or-\ndered arrays as ﬁrst-class data types (despite this be-\ning against the original RM proposal [115]).The ﬁrst\nproposal to extend the unordered set-based RM with\nordered rasters was in 1993 [155].An early exam-\nple of this was Illustra’s temporal (one-dimensional)\ndata plugin [31].SQL:1999 introduced limited sup-\nport for single-dimension, ﬁxed-length array data types.SQL:2003 expanded to support nested arrays without a\npredeﬁned maximum cardinality.Later entrants include\nOracle Georaster [4] and Teradata [73].Data cubes are\nspecial-purpose arrays [135], but columnar RDBMSs\nhave eclipsed them for OLAP workloads because of\ntheir better ﬂexibility and lower engineering costs [113].More recently, the SQL:2023 standard includes sup-\nport for true multi-dimensional arrays (SQL/MDA) that\nis heavily inspired by Rasdaman’s RQL [166].This\nupdate allows SQL to represent arrays with arbitrary\nIn effect,\ndimensions using integer-based coordinates.this allows data cubes to exist in a SQL framework, but\ncolumnar DBMSs now dominate this market.2.7 Vector Databases\nSimilar to how the column-family model is a reduction\nof the document model, the vector data model simpliﬁes\nthe array data model to one-dimensional rasters.Given\nthat vector DBMSs are attracting the most attention\nright now from developers and investors (similar to the\nNoSQL fad), it is necessary to discuss them separately.The reason for this interest is because developers use\nthem to store single-dimension embeddings generated\nfrom AI tools.These tools use learned transformations\nto convert a record’s data (e.g., text, image) into a vec-\ntor representing its latent semantics.For example, one\ncould convert each Wikipedia article into an embedding\nusing Google BERT and store them in a vector database\nalong with additional article meta-data:\n\n(title, date, author, [embedding-vector])\n\nThe size of these embedding vectors range from 100s\nof dimensions for simple transformers to 1000s for high-\nend models; these sizes will obviously grow over time\nwith the development of more sophisticated models.SIGMOD Record, June 2024 (Vol. 53, No.2)\n\n25\n\n\fThe key difference between vector and array DBMSs\nis their query patterns.The former are designed for\nsimilarity searches that ﬁnd records whose vectors have\nthe shortest distance to a given input vector in a high-\ndimensional space.The input vector is another embed-\nding generated with the same transformer used to popu-\nlate the database.Unlike array DBMSs, applications do\nnot use vector DBMSs to search for matches at an off-\nset in a vector nor extract slices across multiple vectors.Instead, the dominant use case is this similarity search.To avoid brute force scans for ﬁnding the most sim-\nilar records, vector DBMSs build indexes to accelerate\napproximate nearest neighbor (ANN) searches.Appli-\ncations issue queries with predicates on both the em-\nbedding index and non-embedding attributes (i.e., meta-\ndata).The DBMS then chooses whether to use the non-\nembedding predicate on records before (pre-ﬁlter) or af-\nter (post-ﬁlter) the vector search.There are dozens of new DBMSs in this emerging\ncategory, with Pinecone [58], Milvus [40], and Weav-\niate [84] as the leading systems.Text search engines,\nincluding Elasticsearch [23], Solr [70], and Vespa [79],\nexpanded their APIs to support vector search.Other\nDBMSs rebranded themselves as vector databases to\njump on the bandwagon, such as Kdb+ [34].One compelling feature of vector DBMSs is that\nthey provide better integration with AI tools (e.g., Chat-\nGPT [16], LangChain [36]) than RDBMSs.These sys-\ntems natively support transforming a record’s data into\nan embedding upon insertion using these tools and then\nuses the same transformation to convert a query’s in-\nput arguments into an embedding to perform the ANN\nsearch; other DBMSs require the application to perform\nthese transformations outside of the database.Discussion: Unlike array DBMSs that require a cus-\ntomized storage manager and execution engine to sup-\nport efﬁcient operations on multi-dimensional data, vec-\ntor DBMSs are essentially document-oriented DBMSs\nwith specialized ANN indexes.Such indexes are a fea-\nture, not the foundation of a new system architecture.After LLMs became “mainstream” with ChatGPT in\nlate 2022, it took less than one year for several RDBMSs\nIn 2023,\nto add their own vector search extensions.many of the major RDBMSs added vector indexes, in-\ncluding Oracle [7], SingleStore [137], Rockset [8], and\nClickhouse [157].Contrast this with JSON support in\nRDBMSs.NoSQL systems like MongoDB and CouchDB\nbecame popular in the late 2000s and it took several\nyears for RDBMSs to add support for it.There are two likely explanations for the quick pro-\nliferation of vector indexes.The ﬁrst is that similarity\nsearch via embeddings is such a compelling use case\nthat every DBMS vendor rushed out their version and\nannounced it immediately.The second is that the en-\ngineering effort to introduce a new index data structure\n\nis small enough that it did not take that much work for\nthe DBMS vendors to add vector search.Most of them\ndid not write their vector index from scratch and instead\nintegrated an open-source library (e.g., pgVector [145],\nDiskANN [19], FAISS [24]).We anticipate that vector DBMSs will undergo the\nsame evolution as document DBMSs by adding features\nto become more relational-like (e.g., SQL, transactions,\nextensibility).Meanwhile, relational incumbents will\nhave added vector indexes to their already long list of\nfeatures and moved on to the next emerging trend.2.8 Graph Databases\nThere has been a lot of academic and industry interest\nin the last decade in graph databases [183].Many appli-\ncations use knowledge graphs to model semi-structured\ninformation.Social media applications inherently con-\ntain graph-oriented relationships (“likes”, “friend-of”).Relational design tools provide users with an entity-\nrelationship (ER) model of their database.An ER dia-\ngram is a graph; thus, this paradigm has clear use cases.The two most prevalent approaches to represent graphs\nare (1) the resource description framework (RDF) and\n(2) property graphs [126].With property graphs, the\nDBMS maintains a directed multi-graph structure that\nsupports key/value labels for nodes and edges.RDF\ndatabases (aka triplestores) only model a directed graph\nwith labeled edges.Since property graphs are more com-\nmon and are a superset of RDF, we will only discuss\nthem.We consider two use cases for graph DBMSs and\ndiscuss the problems that will limit their adoption.The ﬁrst category of systems are for operational /\nOLTP workloads: an application, for example, adds a\nfriend link in the database by updating a single record,\npresumably in a transactional manner.Neo4j [44] is the\nmost popular graph DBMS for OLTP applications.It\nsupports edges using pointers (as in CODASYL) but it\ndoes not cluster nodes with their “parent” or “offspring”.Such an architecture is advantageous for traversing long\nedge chains since it will do pointer chasing, whereas a\nRDBMS has to do this via joins.But their potential mar-\nket success comes down to whether there are enough\n“long chain” scenarios that merit forgoing a RDBMS.The second use case is analytics, which seeks to de-\nrive information from the graph.An example of this\nscenario is ﬁnding which user has the most friends un-\nder 30 years old.Notable entries like Tigergraph [74]\nand JanusGraph [32] focus on query languages and\nstorage on a graph DBMS.Other systems, such as Gi-\nraph [26] and Turi [78] (formerly Graphlab [27]) pro-\nvide a computing fabric to support parallel execution of\ngraph-oriented programs, typically written by a user.Unlike queries in relational analytics that are charac-\nterized by chains of joins, queries for graph analytics\ncontain operations like shortest path, cut set, or clique\n\n26\n\nSIGMOD Record, June 2024 (Vol.53, No. 2)\n\n\fdetermination. Algorithm choice and data representa-\ntion will determine a DBMS’s performance.This argues\nfor a computing fabric that allows developers to write\ntheir own algorithms using an abstraction that hides\nthe underlying system topology.However, previous\nresearch shows that distributed algorithms rarely out-\nperform single-node implementations because of com-\nmunication costs [160].A better strategy is to compress\na graph into a space-efﬁcient data structure that ﬁts in\nmemory on a single node and then run the query against\nthis data structure.All but the largest graph databases\nare probably best handled this way.Discussion: Regardless of whether a graph DBMS tar-\ngets OLTP or OLAP workloads, the key challenge these\nsystems have to overcome is that it is possible to simu-\nlate a graph as a collection of tables:\n\nNode (node_id, node_data)\nEdge (node_id_1, node_id_2, edge_data)\n\nThis means that RDBMSs are always an option to sup-\nport graphs.But “vanilla” SQL is not expressive enough\nfor graph queries and thus require multiple client-server\nroundtrips for traversal operations.Some RDBMSs, including MSSQL [3] and Oracle [50],\n\nprovide built-in SQL extensions that make storing and\nquerying graph data easier.Other DBMSs use a transla-\ntion layer on top of relations to support graph-oriented\nAPIs.Amazon Neptune [45] is a graph-oriented veneer\non top of Aurora MySQL.Apache AGE provides an\nOpenCypher interface on top of PostgreSQL [10].More recently, SQL:2023 introduced property graph\nqueries (SQL/PGQ) for deﬁning and traversing graphs\nin a RDBMS [196].The syntax builds on existing lan-\nguages (e.g., Neo4j’s Cypher [49], Oracle’s PGQL [51],\nand TigerGraph’s GSQL [75]), and shares aspects of the\nemerging GQL standard [126].Thus, SQL/PGQ further\nnarrows the functionality difference between RDBMSs\nand native graph DBMSs.The question is whether graph DBMS vendors can\nmake their specialized systems fast enough to over-\ncome the above disadvantages.There have been several\nperformance studies showing that graph simulation on\nRDBMSs outperform graph DBMSs [130, 143].More\nrecent work showed how SQL/PGQ in DuckDB outper-\nforms a leading graph DBMS by up to 10\n[196].This\ntrend will continue with further improvements in worst-\ncase optimal joins [132, 168] and factorized execution\nalgorithms [100] for graph queries in RDBMSs.⇥\n\n2.9 Summary\nA reasonable conclusion from the above section is that\nnon-SQL, non-relational systems are either a niche mar-\nket or are fast becoming SQL/RM systems.Speciﬁcally:\n\n•\n\nMapReduce Systems: They died years ago and are,\nat best, a legacy technology at present.•\n\n•\n\n•\n\n•\n\n•\n\n•\n\n•\n\nKey-value Stores: Many have either matured into\nRM systems or are only used for speciﬁc problems.These can generally be equaled or beaten by modern\nhigh-performance RDBMSs.Document Databases: Such NoSQL systems are on\na collision course with RDBMSs.The differences\nbetween the two kinds of systems have diminished\nover time and should become nearly indistinguish-\nable in the future.Column-Family Systems: These remain a niche\nmarket.Without Google, this paper would not be\ntalking about this category.Text Search Engines: These systems are used for\ntext ﬁelds in a polystore architecture.It would be\nvaluable if RDBMSs had a better story for search so\nthese would not have to be a separate product.Array Databases: Scientiﬁc applications will con-\ntinue to ignore RDBMSs in favor of bespoke array\nsystems.They may become more important because\nRDBMSs cannot efﬁciently store and analyze arrays\ndespite new SQL/MDA enhancements.RM DBMSs should soon provide native support for\nthese data structures and search methods using their\nextendable type system that will render such special-\nized databases unnecessary.Graph Databases: OLTP graph applications will\nbe largely served by RDBMSs.RDBMSs will provide graph-centric\nAPIs on top of SQL or via extensions.We do not ex-\npect specialized graph DBMSs to be a large market.Beyond the above, there are also proposals to rebrand\nprevious data models as something novel.For example,\ngraph-relational [158] is the same as the semantic data\nmodel [202].Likewise, document-relational is the doc-\nument model with foreign keys [199].Others provide a\nnon-SQL veneer over a RDBMS (e.g., PRQL [64], Mal-\nloy [39]).Although these languages deal with some of\nSQL’s shortcomings, they are not compelling enough to\novercome its entrenched userbase and ecosystem.3 System Architectures\nThere have been major new ideas in DBMS architec-\ntures put forward in the last two decades that reﬂect-\ning changing application and hardware characteristics.These ideas range from terriﬁc to questionable, and we\ndiscuss them in turn.3.1 Columnar Systems\nTo understand the appeal of columnar DBMSs, we need\nto explain the origins of the data warehouse (OLAP)\nmarket.Beginning in the mid-1990s, enterprises started\n\nSIGMOD Record, June 2024 (Vol.53, No. 2)\n\n27\n\n\fcollecting their customer facing (usually sales) data.Brick-and-mortar retailers (e.g., Walmart) were at fore-\nfront of constructing historical sales databases.These\ncompanies generally found that a sales data warehouse\nwould pay for itself in better stock ordering and rota-\ntion decisions within six months.Such customer facing\ndatabases are now omnipresent in enterprises.Data warehouse applications have common proper-\n\nties that are distinct from OLTP workloads:\n1.They are historical in nature (i.e., they are loaded\n\nperiodically and then are read-only). 2.Organizations retain everything as long as they can\n\nafford the storage — think terabytes to petabytes.3. Queries typically only access a small subset of at-\ntributes from tables and are ad-hoc in nature.Ralph Kimball was an early proponent of star schema\ndata modelling for data warehouses [148, 149].The idea\nwas to construct a fact table that held item-level trans-\nactional data.The classic example is a fact table that\ncontains a record for every item purchased in a retail en-\nterprise.Then, one surrounds the fact table with dimen-\nsion tables that contain common information factored\nout from the fact table to save space.Again, in a retail\nsetting, these dimension tables would include informa-\ntion about customers, products, stores, and time.Organizing the DBMS’s storage by columns instead\nof rows has several beneﬁts [87].First, compressing\ncolumnar data is more effective than row-based data be-\ncause there is a single value type in a data block of-\nten many repeated bytes.Second, a Volcano-style en-\ngine executes operators once per row.In contrast, a\ncolumn-oriented engine has an inner loop that processes\na whole column using vectorized instructions [106, 147].Lastly, row stores have a large header for each record\n(e.g., 20 bytes) to track nulls and versioning meta-data,\nwhereas column stores have minimal storage overhead\nper record.Discussion: Over the last two decades, all vendors ac-\ntive in the data warehouse market have converted their\nofferings from a row store to a column store.This tran-\nsition brought about signiﬁcant changes in the design\nof DBMSs.In addition, several new vendors have en-\ntered the market in the last two decades with column\nstore offerings, for example Amazon’s Redshift [94] and\nGoogle’s BigQuery [162] along with offerings from in-\ndependent companies (e.g., Snowﬂake [121]).In summary, column stores are new DBMS implemen-\ntations with specialized optimizers, executors, and stor-\nage formats.They have taken over the data warehouse\nmarketplace because of their superior performance.3.2 Cloud Databases\nThe rise of cloud platforms in the late 2000s has also\ngreatly affected the implementation (and sales model) of\n\nDBMSs.Initial cloud DBMS offerings repackaged on-\nprem systems into managed VMs with direct-attached\nstorage.But over the last 20 years, networking band-\nwidth has increased much faster than disk bandwidth,\nmaking network attached storage (NAS) attractive as an\nalternative to attached storage.This has caused a pro-\nfound rethinking of DBMS architectures for the cloud.All major cloud vendors offer NAS via object stores\n(e.g., Amazon S3) with some DBMS functionality (e.g.,\nreplication, ﬁltering).Beyond better economics com-\npared to direct-attached storage, object stores have sev-\neral advantages that compensate for the cost of the\nadded network link.First, because the compute nodes\nare disconnected from the storage nodes, a system can\nprovide per-query elasticity; the DBMS can add new\ncompute nodes dynamically without having to reshufﬂe\ndata.It also allows the DBMS to use different hard-\nware for its storage nodes than compute nodes.Second,\nthe system can reassign compute nodes to other tasks\nif a DBMS is underutilized.Lastly, pushing down\ncomputation into the storage nodes is possible (and gen-\nerally advantageous).This execution strategy is known\nas “pushing the query to the data” versus “pulling the\ndata to the query” and is well understood in DBMSs.Other vendors have moved or\nare in the process of moving to a serverless environ-\nment for their cloud offerings.Effective utilization of\nthis model requires a hosted multi-node environment in\nwhich multiple DBMS customers are grouped onto the\nsame node(s) with a multi-tenant execution scheme.Discussion: The advent of cloud databases is another\nexample of “what goes around comes around”.Multi-\nnode shared-disk DBMSs are an old idea that histori-\ncally tended not to work out well.However, it is back in\nvogue with technology change (faster networking) and\nmoving to the cloud.In addition, time-sharing services\nwere popular in the 1970s when computers were big and\nexpensive.Since\nenterprises are moving everything possible to the cloud,\nwe expect this shared-disk to dominate DBMS architec-\ntures.Hence, we do not foresee shared-nothing architec-\ntures resurfacing in the future.The cloud has profoundly impacted DBMSs, causing\nthem to be completely re-architected.The movement\nof computing from on-prem to the cloud generates a\nonce-in-a-lifetime opportunity for enterprises to refac-\ntor codebases and remove bad historical technology de-\ncisions.A cloud environment also provides several ben-\neﬁts to vendors that are not possible with on-prem de-\nployments.Foremost is that vendors can track usage\n\n28\n\nSIGMOD Record, June 2024 (Vol. 53, No.2)\n\n\ftrends for all their customers: they can monitor unex-\npected behavior, performance degradations, and usage\npatterns.Moreover, they can push incremental updates\nand code patches without disrupting service.From a business perspective, open-source DBMSs\nface the danger of becoming too popular and being mon-\netized by the major cloud providers.The public spats\nbetween Amazon and ISVs like MongoDB [153] and\nElasticsearch [101] are notable examples.3.3 Data Lakes / Lakehouses\nAnother trend that the cloud platforms fomented is the\nmovement away from monolithic, dedicated data ware-\nhouses for OLAP workloads and towards data lakes\nbacked by object stores.With legacy data warehouses,\norganizations load data into the DBMS, which the sys-\ntem stashes in managed storage with proprietary for-\nmats.Vendors viewed their DBMSs as the “gatekeepers”\nfor all things related to data in an organization.With a data lake architecture, applications upload ﬁles\nto a distributed object store, bypassing the traditional\nroute through the DBMS [167].Users then execute\nqueries and processing pipelines on these accumulated\nﬁles using a lakehouse (a portmanteau of data ware-\nhouse and data lake) execution engine [93].These lake-\nhouse systems provide a uniﬁed infrastructure support-\ning SQL and non-SQL workloads.The latter is crucial\nas the last decade has shown that data scientists and ML\npractitioners typically use Python-based notebooks that\nuse Panda’s DataFrame API [159] to access data instead\nof SQL.Instead of using DBMS-speciﬁc proprietary ﬁle for-\nmats or inefﬁcient text-based ﬁles (e.g., CSV, JSON),\napplications write data to data lakes using open-source,\ndisk-resident ﬁle formats [203].The two most pop-\nular formats are Twitter/Cloudera’s Parquet [55] and\nMeta’s ORC [53, 140].Both of them borrow tech-\nniques from earlier columnar storage research, such as\nPAX [90], compression [87], and nested-data (JSON)\nshredding [121, 161].Apache Arrow [11] is a similar\nbinary format for exchanging in-memory data between\nsystems.Open-source libraries for reading/writing these\nformats allow disparate applications to create data ﬁles\nthat other systems then parse and consume, thereby en-\nhancing data sharing across services and business units.Discussion: Data lakes are the successor to “Big Data”\nmovement from the early 2010s, partly led by the pop-\nularity of MR systems (Sec.2.1) and column stores\n(Sec. 3.1).At ﬁrst glance, a data lake seems like a terri-\nble idea for an organization: allowing any application to\nwrite arbitrary ﬁles into a centralized repository without\n\nany governance is a recipe for integrity, discovery, and\nversioning problems [167].Lakehouses provide much-\nneeded control over these environments to help mitigate\nmany problems with meta-data, caching, and indexing\nservices [93].Additional middleware that tracks new\ndata and supports transactional updates, such as Delta\nLake [92], Iceberg [6], and Hudi [5], make lakehouses\nlook more like a traditional data warehouse.Data lakes introduce new challenges to query opti-\nmization.DBMSs have always struggled with acquir-\ning precise statistics on data,\nleading to poor query\nplan choices [154].However, a data lake system may\ncompletely lack statistics on newly ingested data ﬁles.Consequently, incorporating adaptive query processing\nstrategies is imperative in the cloud to enable a DBMS to\ndynamically modify query plans during execution based\non observed data characteristics [97, 105, 163].All the major cloud vendors now offer some variation\nof a managed data lake service.Since data lake sys-\ntems backed by object stores are much cheaper per giga-\nbyte than proprietary data warehouses, the legacy OLAP\nvendors (e.g., Teradata, Vertica) have extended their\nDBMSs to support reading data from object stores in re-\nsponse to this pricing pressure.Several independent sys-\ntems are also in this space, including Databricks [105],\nDremio [21], PrestoDB [63], and Trino [77].However, many organizations could not use\nthese NoSQL systems because their applications could\nnot give up strong transactional requirements.But the\nexisting RDBMSs (especially open-source ones) were\nnot able to (natively) scale across multiple machines.In\nresponse, NewSQL systems arrived in the early 2010s\nseeking to provide the scalability of NoSQL systems for\nOLTP workloads while still supporting SQL [95, 171].In other words, these new systems sought to achieve the\nsame scalability of NoSQL DBMSs from the 2000s but\nstill keep the RM and ACID transactions of the legacy\nDBMSs from the 1990s.There were two main groups of NewSQL systems.The ﬁrst was in-memory DBMSs, including H-Store [144,\n189] (commercialized as VoltDB [83]), SingleStore [69],\nMicrosoft Hekaton [128], and HyPer [146].Other start-\nup offerings included disk-oriented, distributed DBMSs\nlike NuoDB [47] and Clustrix [17].Discussion: There has yet to be a dramatic uptake in\nNewSQL DBMS adoption [96].The reason for this lack-\nluster interest is that existing DBMSs were good enough\nfor the time, which means organizations are unwilling to\ntake on the costs and risk of migrating existing applica-\ntions to newer technologies.Companies are more risk-\n\nSIGMOD Record, June 2024 (Vol. 53, No.2)\n\n29\n\n\faverse with changing OLTP DBMSs than with OLAP.If an OLTP DBMS fails, companies cannot execute the\ntransactions they need to generate revenue.In contrast,\nan OLAP DBMS failure could be limited to temporarily\ninconveniencing an analyst or data scientist.There were other restrictions in NewSQL DBMSs,\nsuch as only supporting a subset of standard SQL or\nbad performance on multi-node transactions.Some\nNewSQL products, like Microsoft’s Hekaton, were only\navailable as an extension to a legacy DBMS, requiring\nthe faster engine to use the slower DBMS’s interfaces.NewSQL vendors also incorrectly anticipated that in-\nmemory DBMS adoption would be larger in the last\ndecade.Flash vendors drove down costs while improv-\ning storage densities, bandwidth, and latencies.Higher\nDRAM costs and the collapse of persistent memory\n(e.g., Intel Optane) means that SSDs will remain domi-\nnant for OLTP DBMSs.The aftermath of NewSQL is a new crop of distributed,\ntransactional SQL RDBMSs.These include TiDB [141],\nCockroachDB [195], PlanetScale [60] (based on the\nVitess sharding middleware [80]), and YugabyteDB [86].The major NoSQL vendors also added transactions to\ntheir systems in the last decade despite previously strong\nclaims that they were unnecessary.Notable DBMSs that\nmade the shift include MongoDB, Cassandra, and Dy-\nnamoDB.This is of course due to customer requests\nthat transactions are in fact necessary.Google said this\ncogently when they discarded eventual consistency in\nfavor of real transactions with Spanner in 2012 [119].3.5 Hardware Accelerators\nThere has been a hunt for a cost-effective hardware ac-\ncelerator for DBMSs for the last 50 years.The promise\nis obvious: specialized hardware designed for a DBMS\nshould easily outperform a conventional CPU.In the 1980s, vendors fabricated custom hardware to\naccelerate DBMSs and marketed them as database ma-\nchines [107].Britton-Lee released the ﬁrst commercial\naccelerator product (IDM/500) in 1981 [192] that con-\ntained a conventional CPU with a hardware accelerator\nthat ofﬂoaded portions of a query’s execution.This ac-\ncelerator targeted a small subset of the execution path,\nand was not cost-effective.Teradata introduced its own\ndatabase machine that provided network hardware for\nsorting in-ﬂight tuples (Y-net [1]), but it was dropped\nfor a software-only solution [85].All other custom hard-\nware DBMS acceleration during the 1980s failed.Instead of building custom hardware for DBMSs, the\nlast 20 years have been about using commodity hard-\nware (FPGAs, GPUs) to accelerate queries.This is an\nenticing idea: a vendor can get the beneﬁts of a DBMS\naccelerator without the cost of fabricating the hardware.Netezza was one of the ﬁrst FPGA-based DBMSs\nthat started in the late 1990s as a fork of PostgreSQL.It used an FPGA to accelerate searches on disk-resident\npages, but originally could not search in-memory pages.Netezza corrected this limitation in a later version [2].Swarm64 attempted to sell a FPGA accelerator for Post-\ngreSQL but switched to a software-only architecture\nwithout the FPGA before they were acquired [91].Vitesse’s\nDeepgreen DB [81] is the only remaining FPGA-enhanced\nDBMS available from an ISV.There is more activity in the GPU-accelerated DBMS\nmarket.Notable GPU DBMSs include Kinetica [35],\nSqream [35], Brytlyt [13], and HeavyDB [48].If data\ndoes not ﬁt in GPU memory, then query execution is\nbottlenecked on loading data into the device, thereby\nrendering the hardware’s parallelization beneﬁts moot.Discussion: There are several conclusions that we can\ndraw from the above analysis.First, these systems are\nall focused on the OLAP market and only for RDBMSs;\nthere are essentially no data model implications to the\ndiscussion in this section.Also, OLAP workloads will\ncontinue to move aggressively to the cloud, but special-\npurpose hardware is not likely to ﬁnd acceptance unless\nit is built by the cloud vendor.Creating custom hardware just for a DBMS is not\ncost-effective for most companies.Commodity hard-\nware avoids this problem but there is still the challenge\nof integrating the hardware into a DBMS.The reason\nwhy there are more GPU DBMSs than FPGA systems\nis because there are existing support libraries available\nfor GPUs (e.g., Nvidia CUDA [169]).But cloud CPU-\nbased compute resources are incredibly cheap due to\neconomies of scale.The success of any accelerator is\nlikely to be limited to on-prem databases, but this mar-\nket is not growing at the same rate as cloud databases.Even if one could get an accelerator to market that\nshowed orders of magnitude improvement over existing\ntechnologies, that only solves half the problem needed\nfor adoption and success.A hardware-only company\nmust ﬁnd somebody to add support for its accelerator\nin a DBMS.If the accelerator is an optional add-on to\nthe DBMS, then adoption will be low and thus a DBMS\nvendor will not want to spend engineering time on sup-\nporting it.If the accelerator is a critical component of\nthe DBMS, then no vendor would outsource the devel-\nopment of such an important part to an outside vendor.The only place that custom hardware accelerators will\nsucceed is for the large cloud vendors.They can justify\nthe $50–100m R&D cost of custom hardware at their\nmassive scale.They also control the entire stack (hard-\nware and software) and can integrate their hardware at\ncritical locations.Amazon did this already with their\nRedshift AQUA accelerators [102].Google BigQuery\nhas custom components for in-memory shufﬂes [89].30\n\nSIGMOD Record, June 2024 (Vol. 53, No.These are decentralized log-structured\ndatabases (i.e., ledger) that maintain incremental check-\nsums using some variation of Merkle trees.These in-\ncremental checksums are how a blockchain ensures that\nthe database’s log records are immutable: applications\nuse these checksums to verify that previous database up-\ndates have not been altered.There\nis no centralized authority that controls the ordering of\nupdates to the database.Thus, blockchain implementa-\ntions use a BFT commit protocol to determine which\ntransaction to apply to the database next.At the present time, cryptocurrencies (Bitcoin) are\nthe only use case for blockchains.In addition, there\nhave been attempts to build a usable DBMS on top of\nblockchains, notably Fluree [25], BigChainDB [12], and\nResilientDB [136].Discussion: We are required to place trust in several en-\ntities in today’s society.When one sells a house, they\ntrust the title company to manage the transaction.The\nonly applications without real-world trust are dark web\ninteractions (e.g., money laundering).Legitimate busi-\nnesses are unwilling to pay the performance price (about\nﬁve orders of magnitude) to use a blockchain DBMS.If\norganizations trust each other, they can run a shared dis-\ntributed DBMS more efﬁciently without wasting time\nwith blockchains.To the best of our knowledge, all the\nmajor cryptocurrency exchanges run their businesses off\ntraditional RDBMSs and not blockchain systems.Blockchain proponents make additional meaningless\nclaims of achieving data resiliency through replication\nin a peer-to-peer environment.No sensible company\nwould rely on random participants on the Internet as the\nbackup solution for mission-critical databases.There is possibly a (small) market for private block-\nchain DBMSs.Amazon’s Quantum Ledger Database\n(QLDB) released in 2018 [65] provides the same im-\nmutable and veriﬁable update guarantees as a blockchain,\nbut it is not decentralized (i.e., no BFT commit protocol).Amazon built QLDB after ﬁnding no compelling use\ncase for a fully decentralized blockchain DBMS [108].Cloud Databases: The cloud has upended the con-\nventional wisdom on how to build scalable DBMSs.Except for embedded DBMSs, any product not start-\ning with a cloud offering will likely fail.Data Lakes / Lakehouses: Cloud-based object stor-\nage using open-source formats will be the OLAP\nDBMS archetype for the next ten years.NewSQL Systems: They leverage new ideas but\nhave yet to have the same impact as columnar and\ncloud DBMSs.It has led to new distributed DBMSs\nthat support stronger ACID semantics as a counter\nto NoSQL’s weaker BASE guarantees.•\n\n•\n\n•\n\n•\n\n4 Parting Comments\nOur analysis of the last two decades in databases has sev-\neral takeaways.Unfortunately, some of these are repeats\nof the warnings from the 2005 paper.Never underestimate the value of good marketing for\nbad products.This competition drives vendors to\nclaim that their new technologies will solve all sorts of\nproblems and change developers’ lives for the better.Ev-\nery developer has struggled with databases before, so\nthey are especially amenable to such marketing.All these\nsystems started life as purpose-built applications for a\ntech company.Some times they come from large companies that can\nafford to allocate resources to developing new systems.Notable examples include Meta (Hive [197], Presto [63],\nCassandra [14], RocksDB [68]) and LinkedIn (Kafka [33],\nPinot [59], Voldemort [82]).Other systems are from\nstart-ups building a data-intensive product where they\nfelt the need to also build a DBMS.The most successful\nexamples are 10gen (MongoDB) and PowerSet (HBase),\nbut there also many failed endeavors.This trend to avoid “not invented here” software is\npartly because many companies’ promotion path favors\n\nSIGMOD Record, June 2024 (Vol.53, No. 2)\n\n31\n\n\fengineers who make new internal systems, even if ex-\nisting tools are sufﬁcient.One should be wary of\nsuch systems when a company ﬁrst open-sources them,\nas they are almost always immature technologies.Do not ignore the out-of-box experience.Vendors should also consider additional challenges\nthat customers will inevitably face with databases, in-\ncluding physical design, knob tuning, schema design,\nand query tuning.There is a crucial need for what one\nof us calls “self-driving” DBMSs [173].Developers need to query their database directly.Such lay-\ners translate an application’s high-level requests into\ndatabase queries.One could\nargue that since OLTP developers never write raw SQL\nin their applications, it does not matter what data model\ntheir DBMS uses as these layers hide it.ORMs are a vital tool for rapid prototyping.But they\noften sacriﬁce the ability to push logic into the DBMS\nin exchange for interoperability with multiple DBMSs.Developers fall back to writing explicit database queries\nto override the poor auto-generated queries.This is why\nusing a RDBMS that supports SQL is the better choice.The impact of AI/ML on DBMSs will be signiﬁcant.Although this ﬁeld\nis moving rapidly, we offer a few initial comments.There is a resurgence in using natural languages (NLs)\nto query databases due to advancements in LLMs at\nconverting NL to query code (e.g., SQL) [133].Some\nhave even suggested that such AI-powered query inter-\nfaces will render SQL obsolete.We acknowledge LLMs have im-\npressive results for this task but caution those who think\nNL will replace SQL.Nobody will write OLTP appli-\ncations using an NL, as most generate queries using\n\nORMs.For OLAP databases, NL could prove helpful\nin constructing the initial queries for exploratory anal-\nysis.However, these queries should be exposed to a\ndashboard-like reﬁnement tool since English and other\nNLs are rife with ambiguities and impreciseness.There is a reluctance to depend on current LLM tech-\nnology for decision-making inside the enterprise, espe-\ncially with ﬁnancial data.Sec-\nond, LLM systems require more training data than “tra-\nditional” ML systems (e.g., random forests, Bayesian\nmodels).For these reasons, the uptake of LLMs for enter-\nprise data will be cautiously slow.Lastly, there is a considerable amount of recent re-\nsearch on using AI/ML to optimize the DBMSs [174].Examples include ML-oriented query optimizers [152,\n156], conﬁguration tuners [200, 204], and access meth-\nods [151, 193].Although such ML-assisted optimiza-\ntions are powerful tools to improve the performance of\nDBMSs, it does not obviate the need for high-quality\nsystems engineering.The database re-\nsearch community and marketplace are more robust be-\ncause of it.However, we do not expect these new data\nmodels to supplant the RM.Another concern is the wasted effort of new projects\nreimplementing the same components that are not novel\nbut necessary to have a production-ready DBMS (e.g.,\nconﬁg handlers, parsers, buffer pools).To accelerate\nthe next generation of DBMSs, the community should\nfoster the development of open-source reusable compo-\nnents and services [112, 176].3.3),\nquery optimization (e.g., Calcite [104], Orca [186]), and\nexecution engines (e.g., DataFusion [18], Velox [175]).https://www.oracle.com/database/\n\ngraph/, 2024.\n\nlang.org/, 2024.[51] PGQL – Property Graph Query Language.https://pgql-\n\n[52] Oracle\n\nText.[75] Tigergraph – gsql. https://www.tigergraph.com/gsql/,\n\n2024.[76] Tiledb. https://tiledb.com, 2024.[84] Weaviate. https://weaviate.io, 2024.Open source postgresql on steroids: Swarm64\ndatabase acceleration software for performance improvement\nhttps://www.zdnet.com/article/open-\nand analytics.Amazon redshift re-invented. In Proceedings of the 2022 Inter-\nnational Conference on Management of Data, SIGMOD ’22,\npages 2205–2217, 2022. doi: 10.1145/3514221.3526045.Amazon: NOT OK - why we had to change Elas-\nhttps://www.elastic.co/blog/why-license-\n\ntic licensing.AQUA (Advanced Query Accelerator) –\nfor Your Amazon Redshift Queries.A Speed Boost\nhttps://aws.amazon.com/blogs/aws/new-aqua-advanced-\nquery-accelerator-for-amazon-redshift/, Apr 2021.\\\n\n[109] P. Carbone, A. Katsifodimos, S. Ewen, V. Markl, S. Haridi, and\nK. Tzoumas.Apache ﬂink: Stream and batch processing in a\nsingle engine.Dean, S. Ghemawat, W. C. Hsieh, D. A. Wallach,\nM. Burrows, T. Chandra, A. Fikes, and R. E. Gruber.Bigtable:\nA distributed storage system for structured data.In Proceedings\nof the USENIX Symposium on Operating Systems Design and\nImplementation, OSDI ’06, pages 205–218, 2006.[112] S. Chaudhuri and G. Weikum.[114] M. Chock, A. F. Cardenas, and A. Klinger.Database struc-\nture and manipulation capabilities of a picture database man-\nagement system (picdms).[118] W. W. W. Consortium. Extensible Markup Language (XML).Are you sure you want to use\nMMAP in your database management system?In Conference\non Innovative Data Systems Research. www.cidrdb.org, 2022.[121] B. Dageville, T. Cruanes, M. Zukowski, V. Antonov, A. Avanes,\nJ. Bock, J. Claybaugh, D. Engovatov, M. Hentschel, J. Huang,\nA. W. Lee, A. Motivala, A. Q. Munir, S. Pelley, P. Povinec,\nG. Rahn, S. Triantafyllis, and P. Unterbrunner.national Conference on Management of Data, SIGMOD ’16,\npages 215–226, 2016. doi: 10.1145/2882903.2903741.Storing apache hadoop data on the cloud - hdfs\nhttps://www.xplenty.com/blog/storing-apache-\n\nvs. s3.hadoop-data-cloud-hdfs-vs-s3/, November 2019.[125] G. DeCandia, D. Hastorun, M. Jampani, G. Kakulapati, A. Lak-\nshman, A. Pilchin, S. Sivasubramanian, P. Vosshall, and W. Vo-\ngels.Commun. ACM, 35(6):\n85–98, jun 1992. doi: 10.1145/129888.129894.[128] C. Diaconu, C. Freedman, E. Ismert, P. Larson, P. Mit-\ntal, R. Stonecipher, N. Verma, and M. Zwilling.In Seventh Biennial Conference\non Innovative Data Systems Research, CIDR, 2015.Linux J.,\n\n2004(124):5, aug 2004. ISSN 1075–3583.[132] M. Freitag, M. Bandle, T. Schmidt, A. Kemper, and T. Neu-\nmann.Adopting worst-case optimal joins in relational database\nsystems. Proc.VLDB Endow., 13(12):1891–1904, jul 2020.\ndoi: 10.14778/3407790.3407797.[133] H. Fu, C. Liu, B. Wu, F. Li, J. Tan, and J. Sun.Catsql: To-\nwards real world natural language to sql applications. Proc.VLDB Endow., 16(6):1534–1547, feb 2023. doi: 10.14778/\n3583140.3583165.The google ﬁle\nsystem. SIGOPS Oper.Syst. Rev., 37(5):29–43, oct 2003.Gray, A. Bosworth, A. Layman, and H. Pirahesh.Data\ncube: A relational aggregation operator generalizing group-by,\nIn Proceedings of the International\ncross-tab, and sub-total.Conference on Data Engineering, pages 152–159, 1996. doi:\n10.1109/ICDE.1996.492099.[136] S. Gupta, S. Rahnama, J. Hellings, and M. Sadoghi.In Proceedings of the\n2014 ACM SIGMOD international conference on Management\nof data, pages 1235–1246, 2014.Tidb: A raft-based htap database. Proc.VLDB Endow., 13(12):3072–3084, aug 2020. doi: 10.14778/\n3415478.3415535.[143] A. Jindal, S. Madden, M. Castellanos, and M. Hsu.Graph ana-\nlytics using vertica relational database.In 2015 IEEE Interna-\ntional Conference on Big Data, pages 1191–1200, 2015.[144] R. Kallman, H. Kimura, J. Natkins, A. Pavlo, A. Rasin,\nS. Zdonik, E. P. C. Jones, S. Madden, M. Stonebraker, Y. Zhang,\nJ. Hugg, and D. J. Abadi.[146] A. Kemper and T. Neumann.https://techcrunch.com/2019/01/09/aws-gives-open-\nsource-the-middle-finger/, jan 2019.[154] V. Leis, A. Gubichev, A. Mirchev, P. A. Boncz, A. Kemper,\nand T. Neumann.How good are query optimizers, really?doi: 10.14778/\nProc. VLDB Endow., 9(3):204–215, 2015.2850583.2850594. [155] D. Maier and B. Vance. A call to order.[156] R. Marcus, P. Negi, H. Mao, N. Tatbul, M. Alizadeh, and\nT. Kraska.Bao: Making learned query optimization practical.In Proceedings of the 2021 International Conference on Man-\nagement of Data, SIGMOD ’21, pages 1275–1288, 2021. doi:\n10.1145/3448016.3452838.[157] D. McDiarmid. Vector search with clickhouse.https://\nclickhouse.com/blog/vector-search-clickhouse-p2, May\n2023.SIGMOD Record, June 2024 (Vol.53, No. 2)\n\n35\n\n\f[158] C. McDonnell.The graph-relational database, deﬁned.https://www.edgedb.com/blog/the-graph-relational-\ndatabase-defined, March 2022.In Proceedings of the 9th Python in Science Confer-\nence, volume 445, pages 51–56, 2010.[160] F. McSherry. Scalability! but at what cost?http:\n\n//www.frankmcsherry.org/graph/scalability/cost/2015/\n01/15/COST.html, January 2015.[161] S. Melnik, A. Gubarev, J. J.Long, G. Romer, S. Shivakumar,\nM. Tolton, and T. Vassilakis.Dremel: Interactive analysis of\nweb-scale datasets.Proc. VLDB Endow., 3(12):330–339, sep\n2010.ISSN 2150-8097. doi: 10.14778/1920841.1920886.[162] S. Melnik, A. Gubarev, J. J.Long, G. Romer, S. Shivakumar,\nM. Tolton, T. Vassilakis, H. Ahmadi, D. Delorey, S. Min, M. Pa-\nsumansky, and J. Shute.Dremel: A decade of interactive sql\nanalysis at web scale.ISSN 2150-8097. doi: 10.14778/3415478.3415568.[163] P. Menon, A. Ngom, T. C. Mowry, A. Pavlo, and L. Ma.Per-\nmutable compiled queries: Dynamically adapting compiled\nqueries without recompiling.Proc. VLDB Endow., 14(2):101–\n113, 2020. doi: 10.14778/3425879.3425882.[164] C. Metz. duce. google_caffeine_explained/, September 2010.Google search index splits with mapre-\nhttps://www.theregister.com/2010/09/09/\n\n[165] J. Michels, K. Hare, K. Kulkarni, C. Zuzarte, Z. H. Liu,\nB. Hammerschmidt, and F. Zemke.The new and improved sql:\n2016 standard.SIGMOD Rec., 47(2):51–60, dec 2018. doi:\n10.1145/3299887.3299897.Sql support for multidimen-\nsional arrays.URL https://nbn-resolving.org/urn:nbn:de:gbv:\n579-opus-1007237.[167] F. Nargesian, E. Zhu, R. J. Miller, K. Q. Pu, and P. C. Arocena.Data lake management: Challenges and opportunities. Proc.VLDB Endow., 12(12):1986–1989, aug 2019. doi: 10.14778/\n3352063.3352116.[168] H. Q. Ngo, C. Ré, and A. Rudra.Skew strikes back: New\ndevelopments in the theory of join algorithms.SIGMOD Rec.,\n42(4):5–16, feb 2014. doi: 10.1145/2590989.2590991.[169] NVIDIA, P. Vingelmann, and F. H. Fitzek. Cuda toolkit.[170] M. A. Olson, K. Bostic, and M. I. Seltzer. Berkeley DB.In Pro-\nceedings of the FREENIX Track: 1999 USENIX Annual Tech-\nnical Conference, pages 183–191, 1999.[171] A. Pavlo and M. Aslett. What’s really new with newsql?SIG-\n\nMOD Record, 45(2):45–55, Sep 2016.[172] A. Pavlo, E. Paulson, A. Rasin, D. J. Abadi, D. J. DeWitt,\nS. Madden, and M. Stonebraker.In CIDR 2017,\nSelf-driving database management systems.External vs. internal: An essay\non machine learning agents for autonomous database manage-\nment systems.IEEE Data Eng. Bull., 42(2):32–46, 2019.[175] P. Pedreira, O. Erling, M. Basmanova, K. Wilfong, L. Sakka,\nK. Pai, W. He, and B. Chattopadhyay.Velox: Meta’s uniﬁed\nexecution engine. Proc.[176] P. Pedreira, O. Erling, K. Karanasos, S. Schneider, W. McK-\ninney, S. R. Valluri, M. Zait, and J. Nadeau.VLDB Endow., 13(12):2033–2046, jul 2020. doi: 10.14778/\n3407790.3407807.[178] D. Petkovic. SQL/JSON standard: Properties and deﬁciencies.doi: 10.1007/\n\nDatenbank-Spektrum, 17(3):277–287, 2017.\ns13222-017-0267-4. [179] D. Pritchett.BASE: An Acid Alternative:\n\nIn Partitioned\nDatabases, Trading Some Consistency for Availability Can\nLead to Dramatic Improvements in Scalability.ACM Queue,\n6(3):48–55, may 2008. doi: 10.1145/1394127.1394128.[180] M. Raasveldt and H. Mühleisen.In Proceedings of the 2019 International Con-\nference on Management of Data, SIGMOD ’19, pages 1981–\n1984, 2019. doi: 10.1145/3299869.3320212.[181] M. Rocklin. Dask: Parallel computation with blocked algo-\nrithms and task scheduling.In Proceedings of the 14th Python\nin Science Conference, pages 130–136, 2015.[182] F. Rusu. Multidimensional array data management. Found.doi: 10.1561/\n\nTrends Databases, 12(2-3):69–220, 2023. 1900000069.[183] S. Sakr, A. Bonifati, H. Voigt, A. Iosup, K. Ammar, R. An-\ngles, W. Aref, M. Arenas, M. Besta, P. A. Boncz, K. Daudjee,\nE. D. Valle, S. Dumbrava, O. Hartig, B. Haslhofer, T. Hege-\nman, J. Hidders, K. Hose, A. Iamnitchi, V. Kalavri, H. Kapp,\nW. Martens, M. T. Özsu, E. Peukert, S. Plantikow, M. Ragab,\nM. R. Ripeanu, S. Salihoglu, C. Schulz, P. Selmer, J. F. Se-\nqueda, J. Shinavier, G. Szárnyas, R. Tommasini, A. Tumeo,\nA. Uta, A. L. Varbanescu, H.-Y.Wu, N. Yakovets, D. Yan, and\nE. Yoneki.Commun. ACM, 64(9):62–71, aug\n2021. doi: 10.1145/3434642.The smart automatic document re-\ntrieval systems–an illustration.Commun. ACM, 8(6):391–398,\njun 1965. doi: 10.1145/364955.364990.[185] R. Sethi, M. Traverso, D. Sundstrom, D. Phillips, W. Xie,\nY.Sun, N. Yegitbasi, H. Jin, E. Hwang, N. Shingte, and\nIn 2019 IEEE 35th\nC. Berner. Presto: Sql on everything.[186] M. A. Soliman, L. Antova, V. Raghavan, A. El-Helw, Z. Gu,\nE. Shen, G. C. Caragea, C. Garcia-Alvarado, F. Rahman,\nM. Petropoulos, F. Waas, S. Narayanan, K. Krikellas, and\nR. Baldwin.Orca: a modular query optimizer architecture for\nIn Proceedings of the 2014 ACM SIGMOD Inter-\nbig data.national Conference on Management of Data, SIGMOD ’14,\npages 337–348, 2014. doi: 10.1145/2588555.2595637.[187] M. Stonebraker. The case for polystores.https://\n\nwp.sigmod.org/?p=1629, 2015.[188] M. Stonebraker and J. Hellerstein.Readings in Database Sys-\ntems, chapter What Goes Around Comes Around, pages 2–41. 4th edition, 2005.[189] M. Stonebraker, S. Madden, D. J. Abadi, S. Harizopoulos,\nN. Hachem, and P. Helland.The end of an architectural era:\n(it’s time for a complete rewrite).VLDB Endowment, 2007. [190] M. Stonebraker, D. Abadi, D. J. DeWitt, S. Madden, E. Paulson,\nA. Pavlo, and A. Rasin.Commun. ACM, 53(1):64–71, Jan. 2010.[191] M. Stonebraker, P. Brown, A. Poliakov, and S. Raman. The ar-\nchitecture of scidb.In Scientiﬁc and Statistical Database Man-\nagement - 23rd International Conference, SSDBM 2011, vol-\nume 6809 of Lecture Notes in Computer Science, pages 1–16.Springer, 2011. doi: 10.1007/978-3-642-22351-8\n\n_1. [192] L. Sullivan.Performance issues in mid-sized relational\ndatabase machines.Learned index: A comprehen-\nsive experimental evaluation. Proc.VLDB Endow., 16(8):1992–\n2004, apr 2023. doi: 10.14778/3594512.3594528.in\nfa-\nhttps:\n\nvor of new hyper-scale\n//www.datacenterknowledge.com/archives/2014/06/\n25/google-dumps-mapreduce-favor-new-hyper-scale-\nanalytics-system, June 2014.\n\nanalytics\n\nsystem.[195] R. Taft, I. Sharif, A. Matei, N. VanBenschoten, J. Lewis,\nT. Grieger, K. Niemi, A.Woods, A. Birzin, R. Poss, P. Bardea,\nA. Ranade, B. Darnell, B. Gruneir, J. Jaffray, L. Zhang, and\nP. Mattis.Cockroachdb: The resilient geo-distributed SQL\ndatabase.In Proceedings of the 2020 International Conference\non Management of Data, SIGMOD, pages 1493–1509, 2020.\ndoi: 10.1145/3318464.3386134.Commun. ACM,\n59(11):56–65, oct 2016. doi: 10.1145/2934664.[202] C. Zaniolo. The database language GEM.In SIGMOD, pages\n\n207–218, 1983.An empirical evaluation of columnar storage for-\nmats.URL https:\n//www.vldb.org/pvldb/vol17/p148-zeng.pdf.[204] X. Zhang, Z. Chang, Y. Li, H. Wu, J. Tan, F. Li, and\nB. Cui.Facilitating database tuning with hyper-parameter op-\ntimization: a comprehensive experimental evaluation.SIGMOD Record, June 2024 (Vol. 53, No. 2)\n\n37",
          "time": 1216.1631581783295,
          "input_token_size": 26184,
          "output_token_size": 44,
          "original_provenance_id": 0
        }
      ],
      "metadata": {
        "question_id": "whatgoesaround-sigmodrec2024_0424590c",
        "created_at": 1750200277.5887077,
        "processing_time": 1219.4808599948883,
        "processing_complete": true,
        "max_provenances": 5
      },
      "source_info": {
        "selected_from": "test_outputs",
        "reason": "shorter_provenance",
        "sentence_count": 964,
        "provenance_count": 1,
        "alternatives": [
          {
            "source": "test_outputs",
            "sentence_count": 964,
            "provenance_count": 1,
            "has_answer": true
          }
        ],
        "selection_timestamp": "2025-06-17T16:48:52.922923"
      }
    }
  },
  {
    "05021640": {
      "question": "When did Google discontinue the use of MapReduce?",
      "answer": "2014",
      "provenance": [
        {
          "provenance_id": 0,
          "input_sentence_ids": [
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            11,
            12,
            13,
            14,
            15,
            16,
            17,
            18,
            19,
            20,
            21,
            22,
            23,
            24,
            25,
            26,
            27,
            28,
            29,
            30,
            31,
            32,
            33,
            34,
            35,
            36,
            37,
            38,
            39,
            40,
            41,
            42,
            43,
            44,
            45,
            46,
            47,
            48,
            49,
            50,
            51,
            52,
            53,
            54,
            55,
            56,
            57,
            58,
            59
          ],
          "provenance_ids": [
            56
          ],
          "provenance": "Google ﬁnally announced in 2014 that MR had no\nplace in their technology stack and killed it off [194].",
          "time": 13.829281091690063,
          "input_token_size": 30418,
          "output_token_size": 54,
          "original_provenance_id": 0
        }
      ],
      "metadata": {
        "question_id": "whatgoesaround-sigmodrec2024_05021640",
        "created_at": 1750200153.4814994,
        "processing_time": 20.619290113449097,
        "processing_complete": true,
        "max_provenances": 5
      },
      "source_info": {
        "selected_from": "test_outputs",
        "reason": "shorter_provenance",
        "sentence_count": 60,
        "provenance_count": 1,
        "alternatives": [
          {
            "source": "test_outputs",
            "sentence_count": 60,
            "provenance_count": 1,
            "has_answer": true
          }
        ],
        "selection_timestamp": "2025-06-17T16:48:52.922923"
      }
    }
  },
  {
    "127eb013": {
      "question": "What advancements in DBMS architectures are highlighted in the document concerning cloud databases?",
      "answer": "1. Cloud databases have led to a rethinking of DBMS architectures, particularly with the adoption of network-attached storage (NAS) and object stores.\n2. Cloud databases enable per-query elasticity, allowing dynamic addition of compute nodes without reshuffling data.\n3. The concept of \"pushing the query to the data\" has gained traction, allowing computation to be performed closer to where the data is stored.\n4. The rise of serverless computing has been introduced for cloud-native DBMSs, allowing for multi-tenant execution schemes.\n5. Cloud databases have prompted a shift from monolithic data warehouses to data lakes and lakehouses, utilizing open-source file formats for better data sharing and processing.\n6. NewSQL systems have emerged to provide the scalability of NoSQL systems while maintaining SQL support and ACID transactions.\n7. The cloud has facilitated the development of distributed, transactional SQL RDBMSs that support stronger ACID semantics.",
      "provenance": [],
      "metadata": {
        "question_id": "whatgoesaround-sigmodrec2024_127eb013",
        "created_at": 1749774411.1169803,
        "processing_complete": false,
        "max_provenances": 5
      },
      "source_info": {
        "selected_from": "test_outputs_prev1",
        "reason": "default",
        "sentence_count": 999999,
        "provenance_count": 0,
        "alternatives": [
          {
            "source": "test_outputs_prev1",
            "sentence_count": 999999,
            "provenance_count": 0,
            "has_answer": true
          }
        ],
        "selection_timestamp": "2025-06-17T16:48:52.922923"
      }
    }
  },
  {
    "1ea70be7": {
      "question": "In what ways have hardware advancements impacted DBMS implementations over the past two decades?",
      "answer": "1. Transition to columnar storage for improved performance in OLAP workloads.\n2. Adoption of cloud databases leading to re-architected DBMS implementations.\n3. Emergence of data lakes and lakehouses utilizing object storage.\n4. Development of NewSQL systems to combine scalability of NoSQL with ACID transactions.\n5. Use of hardware accelerators like GPUs and FPGAs for query performance.\n6. Integration of machine learning techniques for query optimization and database management.\n7. Increased reliance on distributed architectures due to advancements in networking and storage technologies.",
      "provenance": [],
      "metadata": {
        "question_id": "whatgoesaround-sigmodrec2024_1ea70be7",
        "created_at": 1749627423.8333051,
        "processing_complete": false,
        "max_provenances": 5
      },
      "source_info": {
        "selected_from": "test_outputs_prev",
        "reason": "default",
        "sentence_count": 999999,
        "provenance_count": 0,
        "alternatives": [
          {
            "source": "test_outputs_prev",
            "sentence_count": 999999,
            "provenance_count": 0,
            "has_answer": true
          }
        ],
        "selection_timestamp": "2025-06-17T16:48:52.922923"
      }
    }
  },
  {
    "2aa7b29a": {
      "question": "What type of databases have increasingly adopted SQL-like interfaces?",
      "answer": "1. NoSQL databases\n2. Document databases\n3. Key-value stores\n4. Column-family databases\n5. Vector databases\n6. Graph databases",
      "provenance": [
        {
          "provenance_id": 0,
          "input_sentence_ids": [
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            11,
            12,
            13,
            14,
            15,
            16,
            17,
            18,
            19,
            20,
            21,
            22,
            23,
            24,
            25,
            26,
            27,
            28,
            29,
            30,
            31,
            32,
            33,
            34,
            35,
            36,
            37,
            38,
            39,
            40,
            41,
            42,
            43,
            44,
            45,
            46,
            47,
            48,
            49,
            50,
            51,
            52,
            53,
            54,
            55,
            56,
            57,
            58,
            59,
            60,
            61,
            62,
            63,
            64,
            65,
            66,
            67,
            68,
            69,
            70,
            71,
            72,
            73,
            74,
            75,
            76,
            77,
            78,
            79,
            80,
            81,
            82,
            83,
            84,
            85,
            86,
            87,
            88,
            89,
            90,
            91,
            92,
            93,
            94,
            95,
            96,
            97,
            98,
            99,
            100,
            101,
            102,
            103,
            104,
            105,
            106,
            107,
            108,
            109,
            110,
            111,
            112,
            113,
            114,
            115,
            116,
            117,
            118,
            119,
            120,
            121,
            122,
            123,
            124,
            125,
            126,
            127,
            128,
            129,
            130,
            131,
            132,
            133,
            134,
            135,
            136,
            137,
            138,
            139,
            140,
            141,
            142,
            143,
            144,
            145,
            146,
            147,
            148,
            149,
            150,
            151,
            152,
            153,
            154,
            155,
            156,
            157,
            158,
            159,
            160,
            161,
            162,
            163,
            164,
            165,
            166,
            167,
            168,
            169,
            170,
            171,
            172,
            173,
            174,
            175,
            176,
            177,
            178,
            179,
            180,
            181,
            182,
            183,
            184,
            185,
            186,
            187,
            188,
            189,
            190,
            191,
            192,
            193,
            194,
            195,
            196,
            197,
            198,
            199,
            200,
            201,
            202,
            203,
            204,
            205,
            206,
            207,
            208,
            209,
            210,
            211,
            212,
            213,
            214,
            215,
            216,
            217,
            218,
            219,
            220,
            221,
            222,
            223,
            224,
            225,
            226,
            227,
            228,
            229,
            230,
            231,
            232,
            233,
            234,
            235,
            236,
            237,
            238,
            239,
            240,
            241,
            242,
            243,
            244,
            245,
            246,
            247,
            248,
            249,
            250,
            251,
            252,
            253,
            254,
            255,
            256,
            257,
            258,
            259,
            260,
            261,
            262,
            263,
            264,
            265,
            266,
            267,
            268,
            269,
            270,
            271,
            272,
            273,
            274,
            275,
            276,
            277,
            278,
            279,
            280,
            281,
            282,
            283,
            284,
            285,
            286,
            287,
            288,
            289,
            290,
            291,
            292,
            293,
            294,
            295,
            296,
            297,
            298,
            299,
            300,
            301,
            302,
            303,
            304,
            305,
            306,
            307,
            308,
            309,
            310,
            311,
            312,
            313,
            314,
            315,
            316,
            317,
            318,
            319,
            320,
            321,
            322,
            323,
            324,
            325,
            326,
            327,
            328,
            329,
            330,
            331,
            332,
            333,
            334,
            335,
            336,
            337,
            338,
            339,
            340,
            341,
            342,
            343,
            344,
            345,
            346,
            347,
            348,
            349,
            350,
            351,
            352,
            353,
            354,
            355,
            356,
            357,
            358,
            359,
            360,
            361,
            362,
            363,
            364,
            365,
            366,
            367,
            368,
            369,
            370,
            371,
            372,
            373,
            374,
            375,
            376,
            377,
            378,
            379,
            380,
            381,
            382,
            383,
            384,
            385,
            386,
            387,
            388,
            389,
            390,
            391,
            392,
            393,
            394,
            395,
            396,
            397,
            398,
            399,
            400,
            401,
            402,
            403,
            404,
            405,
            406,
            407,
            408,
            409,
            410,
            411,
            412,
            413,
            414,
            415,
            416,
            417,
            418,
            419,
            420,
            421,
            422,
            423,
            424,
            425,
            426,
            427,
            428,
            429,
            430,
            431,
            432,
            433,
            434,
            435,
            436,
            437,
            438,
            439,
            440,
            441,
            442,
            443,
            444,
            445,
            446,
            447,
            448,
            449,
            450,
            451,
            452,
            453,
            454,
            455,
            456,
            457,
            458,
            459,
            460,
            461,
            462,
            463,
            464,
            465,
            466,
            467,
            468,
            469,
            470,
            471,
            472,
            473,
            474,
            475,
            476,
            477,
            478,
            479,
            480,
            481,
            482,
            483,
            484,
            485,
            486,
            487,
            488,
            489,
            490,
            491,
            492,
            493,
            494,
            495,
            496,
            497,
            498,
            499,
            500,
            501,
            502,
            503,
            504,
            505,
            506,
            507,
            508,
            509,
            510,
            511,
            512,
            513,
            514,
            515,
            516,
            517,
            518,
            519,
            520,
            521,
            522,
            523,
            524,
            525,
            526,
            527,
            528,
            529,
            530,
            531,
            532,
            533,
            534,
            535,
            536,
            537,
            538,
            539,
            540,
            541,
            542,
            543,
            544,
            545,
            546,
            547,
            548,
            549,
            550,
            551,
            552,
            553,
            554,
            555,
            556,
            557,
            558,
            559,
            560,
            561,
            562,
            563,
            564,
            565,
            566,
            567,
            568,
            569,
            570,
            571,
            572,
            573,
            574,
            575,
            576,
            577,
            578,
            579,
            580,
            581,
            582,
            583,
            584,
            585,
            586,
            587,
            588,
            589,
            590,
            591,
            592,
            593,
            594,
            595,
            596,
            597,
            598,
            599,
            600,
            601,
            602,
            603,
            604,
            605,
            606,
            607,
            608,
            609,
            610,
            611,
            612,
            613,
            614,
            615,
            616,
            617,
            618,
            619,
            620,
            621,
            622,
            623,
            624,
            625,
            626,
            627,
            628,
            629,
            630,
            631,
            632,
            633,
            634,
            635,
            636,
            637,
            638,
            639,
            640,
            641,
            642,
            643,
            644,
            645,
            646,
            647,
            648,
            649,
            650,
            651,
            652,
            653,
            654,
            655,
            656,
            657,
            658,
            659,
            660,
            661,
            662,
            663,
            664,
            665,
            666,
            667,
            668,
            669,
            670,
            671,
            672,
            673,
            674,
            675,
            676,
            677,
            678,
            679,
            680,
            681,
            682,
            683,
            684,
            685,
            686,
            687,
            688,
            689,
            690,
            691,
            692,
            693,
            694,
            695,
            696,
            697,
            698,
            699,
            700,
            701,
            702,
            703,
            704,
            705,
            706,
            707,
            708,
            709,
            710,
            711,
            712,
            713,
            714,
            715,
            716,
            717,
            718,
            719,
            720,
            721,
            722,
            723,
            724,
            725,
            726,
            727,
            728,
            729,
            730,
            731,
            732,
            733,
            734,
            735,
            736,
            737,
            738,
            739,
            740,
            741,
            742,
            743,
            744,
            745,
            746,
            747,
            748,
            749,
            750,
            751,
            752,
            753,
            754,
            755,
            756,
            757,
            758,
            759,
            760,
            761,
            762,
            763,
            764,
            765,
            766,
            767,
            768,
            769,
            770,
            771,
            772,
            773,
            774,
            775,
            776,
            777,
            778,
            779,
            780,
            781,
            782,
            783,
            784,
            785,
            786,
            787,
            788,
            789,
            790,
            791,
            792,
            793,
            794,
            795,
            796,
            797,
            798,
            799,
            800,
            801,
            802,
            803,
            804,
            805,
            806,
            807,
            808,
            809,
            810,
            811,
            812,
            813,
            814,
            815,
            816,
            817,
            818,
            819,
            820,
            821,
            822,
            823,
            824,
            825,
            826,
            827,
            828,
            829,
            830,
            831,
            832,
            833,
            834,
            835,
            836,
            837,
            838,
            839,
            840,
            841,
            842,
            843,
            844,
            845,
            846,
            847,
            848,
            849,
            850,
            851,
            852,
            853,
            854,
            855,
            856,
            857,
            858,
            859,
            860,
            861,
            862,
            863,
            864,
            865,
            866,
            867,
            868,
            869,
            870,
            871,
            872,
            873,
            874,
            875,
            876,
            877,
            878,
            879,
            880,
            881,
            882,
            883,
            884,
            885,
            886,
            887,
            888,
            889,
            890,
            891,
            892,
            893,
            894,
            895,
            896,
            897,
            898,
            899,
            900,
            901,
            902,
            903,
            904,
            905,
            906,
            907,
            908,
            909,
            910,
            911,
            912,
            913,
            914,
            915,
            916,
            917,
            918,
            919,
            920,
            921,
            922,
            923,
            924,
            925,
            926,
            927,
            928,
            929,
            930,
            931,
            932,
            933,
            934,
            935,
            936,
            937,
            938,
            939,
            940,
            941,
            942,
            943,
            944,
            945,
            946,
            947,
            948,
            949,
            950,
            951,
            952,
            953,
            954,
            955,
            956,
            957,
            958,
            959,
            960,
            961,
            962,
            963
          ],
          "provenance_ids": [
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            11,
            12,
            13,
            14,
            15,
            16,
            17,
            20,
            28,
            32,
            33,
            68,
            69,
            70,
            91,
            95,
            96,
            97,
            103,
            104,
            105,
            106,
            107,
            108,
            109,
            111,
            112,
            113,
            114,
            115,
            116,
            118,
            119,
            128,
            129,
            134,
            135,
            136,
            137,
            204,
            206,
            208,
            209,
            213,
            214,
            215,
            216,
            223,
            224,
            225,
            233,
            234,
            267,
            271,
            272,
            273,
            274,
            281,
            282,
            283,
            284,
            285,
            287,
            296,
            312,
            313,
            314,
            942,
            944,
            945,
            946,
            948,
            949,
            950,
            951,
            953,
            954,
            955,
            956,
            962,
            963
          ],
          "provenance": "What Goes Around Comes Around... And Around...\n\nMichael Stonebraker\nMassachusetts Institute of Technology\nstonebraker@csail.mit.edu\n\nAndrew Pavlo\nCarnegie Mellon University\npavlo@cs.cmu.edu\n\nABSTRACT\nTwo decades ago, one of us co-authored a paper com-\nmenting on the previous 40 years of data modelling re-\nsearch and development [188].That paper demonstrated\nthat the relational model (RM) and SQL are the prevail-\ning choice for database management systems (DBMSs),\ndespite efforts to replace either them.Instead, SQL ab-\nsorbed the best ideas from these alternative approaches.We revisit this issue and argue that this same evolu-\ntion has continued since 2005.Once again there have\nbeen repeated efforts to replace either SQL or the RM.But the RM continues to be the dominant data model\nand SQL has been extended to capture the good ideas\nfrom others.As such, we expect more of the same in\nthe future, namely the continued evolution of SQL and\nrelational DBMSs (RDBMSs).We also discuss DBMS\nimplementations and argue that the major advancements\nhave been in the RM systems, primarily driven by chang-\ning hardware characteristics.1 Introduction\nIn 2005, one of the authors participated in writing a\nchapter for the Red Book titled “What Goes Around\nComes Around” [188].That paper examined the major\ndata modelling movements since the 1960s:\n\nHierarchical (e.g., IMS): late 1960s and 1970s\nNetwork (e.g., CODASYL): 1970s\nRelational: 1970s and early 1980s\nEntity-Relationship: 1970s\nExtended Relational: 1980s\nSemantic: late 1970s and 1980s\nObject-Oriented: late 1980s and early 1990s\nObject-Relational: late 1980s and early 1990s\nSemi-structured (e.g., XML): late 1990s and 2000s\n\n•\n•\n•\n•\n•\n•\n•\n•\n•\n\nOur conclusion was that the relational model with an\nextendable type system (i.e., object-relational) has dom-\ninated all comers, and nothing else has succeeded in\nthe marketplace.Although many of the non-relational\nDBMSs covered in 2005 still exist today, their vendors\nhave relegated them to legacy maintenance mode and\nnobody is building new applications on them.This per-\nsistence is more of a testament to the “stickiness” of data\n\nrather than the lasting power of these systems.In other\nwords, there still are many IBM IMS databases running\ntoday because it is expensive and risky to switch them\nto use a modern DBMS.But no start-up would willingly\nchoose to build a new application on IMS.A lot has happened in the world of databases since our\n2005 survey.During this time, DBMSs have expanded\nfrom their roots in business data processing and are now\nused for almost every kind of data.This led to the “Big\nData” era of the early 2010s and the current trend of inte-\ngrating machine learning (ML) with DBMS technology.In this paper, we analyze the last 20 years of data\nmodel and query language activity in databases.Many sys-\ntems that started out rejecting the RM with much fanfare\n(think NoSQL) now expose a SQL-like interface for RM\ndatabases.2)\n\n21\n\n\f2 Data Models & Query Languages\nFor our discussion here, we group the research and de-\nvelopment thrusts in data models and query languages\nfor database into eight categories.To a ﬁrst approximation, MR runs a single query:\n\nSELECT map() FROM crawl_table GROUP BY reduce()\n\nGoogle’s MR approach did not prescribe a speciﬁc\ndata model or query language.Rather, it was up to the\nMap and Reduce functions written in a procedural MR\nprogram to parse and decipher the contents of data ﬁles.3.3). Hadoop’s lim-\nitations opened the door for other data processing plat-\nforms, namely Spark [201] and Flink [109].Both sys-\ntems started as better implementations of MR with pro-\ncedural APIs but have since added support for SQL [105].2.2 Key/Value Stores\nThe key/value (KV) data model is the simplest model\npossible.Examples of this transition are Amazon’s Dy-\nnamoDB [129] and Aerospike [9].One new architecture trend from the last 20 years is\nusing embedded KV stores as the underlying storage\nmanager for full-featured DBMSs.Prior to this, build-\ning a new DBMS requires engineers to build a custom\nstorage manager that is natively integrated in the DBMS.MySQL was the ﬁrst DBMS to expose an API that al-\nlowed developers to replace its default KV storage man-\nager.The following\nexample in JSON is a customer document that contain\na nested list of purchase order records with their corre-\nsponding order items.{ “name”: “First Last”,\n\n“orders”: [ { “id”: 123, “items”: [...] },\n\n{ “id”: 456, “items”: [...] }, ] }\n\nDocument data models have been an active ﬁeld of\neffort for several decades.This has given rise to data\nformats like SGML [117] and XML [118].Despite\nthe buzz with XML databases in the late 1990s, we\ncorrectly predicted in 2005 they would not supplant\nRDBMSs [188].JSON has since overtaken XML to\nbecome the standard for data exchange for web-based\napplications.JavaScript’s popularity with developers\nand the accompanying ubiquity of JSON led several\ncompanies to create document-oriented systems that na-\ntively stored JSON in the 2000s.The inability of OLTP RDBMSs to scale in the 2000s\nushered in dozens of document DBMSs that marketed\nthemselves using the catchphrase NoSQL [110].First, SQL and joins are slow,\nand one should use a “faster” lower-level, record-at-a-\ntime interface.Second, ACID transactions are unneces-\nsary for modern applications, so the DBMS should only\nprovide weaker notion of it (i.e., BASE [179]).Because of these two thrusts, NoSQL came to stand\nfor a DBMS that stored records or documents as JSON,\nsupported a lower-level API, and weak or non-existent\ntransactions.There are dozens of such systems, of\nwhich MongoDB [41] is the most popular.Discussion: Document DBMSs are essentially the same\nas object-oriented DBMSs from the 1980s and XML\nDBMSs from the late 1990s.Proponents of document\nDBMSs make the same argument as their OO/XML\npredecessors: storing data as documents removes the\nimpedance mismatch between how application OO code\ninteracts with data and how relational databases store\nthem.The problems with denormalization/prejoining\nis an old topic that dates back to the 1970s [116]: (1)\nif the join is not one-to-many, then there will be dupli-\ncated data, (2) prejoins are not necessarily faster than\njoins, and (3) there is no data independence.SIGMOD Record, June 2024 (Vol. 53, No.Adding SQL and ACID to a NoSQL DBMS lowers\ntheir intellectual distance from RDBMSs.The main\ndifferences between them seems to be JSON support\nand the fact that NoSQL vendors allow “schema later”\ndatabases.But the optimizer remains the hardest part\nof building a DBMS.We suspect that this engineering\nburden was a contributing factor to why NoSQL systems\noriginally chose to not support SQL.2.4 Column-Family Databases\nThere is another category of NoSQL systems that uses\na data model called column-family (aka wide-column).Despite its name, column-family is not a columnar data\nmodel.2.7 Vector Databases\nSimilar to how the column-family model is a reduction\nof the document model, the vector data model simpliﬁes\nthe array data model to one-dimensional rasters.The reason for this interest is because developers use\nthem to store single-dimension embeddings generated\nfrom AI tools.For example, one\ncould convert each Wikipedia article into an embedding\nusing Google BERT and store them in a vector database\nalong with additional article meta-data:\n\n(title, date, author, [embedding-vector])\n\nThe size of these embedding vectors range from 100s\nof dimensions for simple transformers to 1000s for high-\nend models; these sizes will obviously grow over time\nwith the development of more sophisticated models.SIGMOD Record, June 2024 (Vol. 53, No.Unlike array DBMSs, applications do\nnot use vector DBMSs to search for matches at an off-\nset in a vector nor extract slices across multiple vectors.Instead, the dominant use case is this similarity search.To avoid brute force scans for ﬁnding the most sim-\nilar records, vector DBMSs build indexes to accelerate\napproximate nearest neighbor (ANN) searches.Appli-\ncations issue queries with predicates on both the em-\nbedding index and non-embedding attributes (i.e., meta-\ndata).Discussion: Unlike array DBMSs that require a cus-\ntomized storage manager and execution engine to sup-\nport efﬁcient operations on multi-dimensional data, vec-\ntor DBMSs are essentially document-oriented DBMSs\nwith specialized ANN indexes.Such indexes are a fea-\nture, not the foundation of a new system architecture.After LLMs became “mainstream” with ChatGPT in\nlate 2022, it took less than one year for several RDBMSs\nIn 2023,\nto add their own vector search extensions.We anticipate that vector DBMSs will undergo the\nsame evolution as document DBMSs by adding features\nto become more relational-like (e.g., SQL, transactions,\nextensibility).Meanwhile, relational incumbents will\nhave added vector indexes to their already long list of\nfeatures and moved on to the next emerging trend.The syntax builds on existing lan-\nguages (e.g., Neo4j’s Cypher [49], Oracle’s PGQL [51],\nand TigerGraph’s GSQL [75]), and shares aspects of the\nemerging GQL standard [126].More\nrecent work showed how SQL/PGQ in DuckDB outper-\nforms a leading graph DBMS by up to 10\n[196].This\ntrend will continue with further improvements in worst-\ncase optimal joins [132, 168] and factorized execution\nalgorithms [100] for graph queries in RDBMSs.⇥\n\n2.9 Summary\nA reasonable conclusion from the above section is that\nnon-SQL, non-relational systems are either a niche mar-\nket or are fast becoming SQL/RM systems.Speciﬁcally:\n\n•\n\nMapReduce Systems: They died years ago and are,\nat best, a legacy technology at present.Text Search Engines: These systems are used for\ntext ﬁelds in a polystore architecture.It would be\nvaluable if RDBMSs had a better story for search so\nthese would not have to be a separate product.Array Databases: Scientiﬁc applications will con-\ntinue to ignore RDBMSs in favor of bespoke array\nsystems.They may become more important because\nRDBMSs cannot efﬁciently store and analyze arrays\ndespite new SQL/MDA enhancements.Vector Databases: They are single-purpose DBMSs\nwith indexes to accelerate nearest-neighbor search.Graph Databases: OLTP graph applications will\nbe largely served by RDBMSs.3 System Architectures\nThere have been major new ideas in DBMS architec-\ntures put forward in the last two decades that reﬂect-\ning changing application and hardware characteristics.Again, in a retail\nsetting, these dimension tables would include informa-\ntion about customers, products, stores, and time.Organizing the DBMS’s storage by columns instead\nof rows has several beneﬁts [87].First, compressing\ncolumnar data is more effective than row-based data be-\ncause there is a single value type in a data block of-\nten many repeated bytes.Hive - a petabyte scale\ndata warehouse using hadoop.[198] E. Totoni, T. A. Anderson, and T. Shpeisman.HPAT: high per-\nformance analytics with scripting ease-of-use.In Proceedings\n\nof the International Conference on Supercomputing, pages 9:1–\n9:10, 2017. doi: 10.1145/3079079.3079099.Understanding the document-relational\nhttps://fauna.com/blog/what-is-a-document-\n\n[200] D. Van Aken, A. Pavlo, G. J. Gordon, and B. Zhang.Auto-\nmatic database management system tuning through large-scale\nIn Proceedings of the 2017 ACM Inter-\nmachine learning.national Conference on Management of Data, SIGMOD ’17,\npages 1009–1024, 2017. doi: 10.1145/3035918.3064029.[201] M. Zaharia, R. S. Xin, P. Wendell, T. Das, M. Armbrust,\nA. Dave, X. Meng, J. Rosen, S. Venkataraman, M. J. Franklin,\nA. Ghodsi, J. Gonzalez, S. Shenker, and I. Stoica.Commun. ACM,\n59(11):56–65, oct 2016. doi: 10.1145/2934664.[202] C. Zaniolo. The database language GEM.In SIGMOD, pages\n\n207–218, 1983.[203] X. Zeng, Y. Hui, J. Shen, A. Pavlo, W. McKinney, and\nH. Zhang.Proc. VLDB Endow., 15(9):1808–1821, may 2022. doi: 10.14778/\n3538598.3538604.SIGMOD Record, June 2024 (Vol. 53, No. 2)\n\n37",
          "time": 698.765743970871,
          "input_token_size": 26182,
          "output_token_size": 83,
          "original_provenance_id": 0
        }
      ],
      "metadata": {
        "question_id": "whatgoesaround-sigmodrec2024_2aa7b29a",
        "created_at": 1750200160.863645,
        "processing_time": 707.594518661499,
        "processing_complete": true,
        "max_provenances": 5
      },
      "source_info": {
        "selected_from": "test_outputs",
        "reason": "shorter_provenance",
        "sentence_count": 964,
        "provenance_count": 1,
        "alternatives": [
          {
            "source": "test_outputs",
            "sentence_count": 964,
            "provenance_count": 1,
            "has_answer": true
          }
        ],
        "selection_timestamp": "2025-06-17T16:48:52.923915"
      }
    }
  },
  {
    "2d64b936": {
      "question": "Explain the significance of cloud platforms on DBMS architectures based on the document.",
      "answer": "1. The rise of cloud platforms has greatly affected the implementation and sales model of DBMSs.\n2. Cloud databases have caused a profound rethinking of DBMS architectures.\n3. Major cloud vendors offer NAS via object stores with some DBMS functionality.\n4. Cloud environments provide benefits to vendors that are not possible with on-prem deployments.\n5. The cloud has generated a once-in-a-lifetime opportunity for enterprises to refactor codebases and remove bad historical technology decisions.\n6. The movement of computing from on-prem to the cloud is expected to dominate DBMS architectures.\n7. Cloud-native DBMSs can provide per-query elasticity and allow for dynamic addition of compute nodes.\n8. The shared-disk architecture is back in vogue due to faster networking and the cloud.\n9. Cloud platforms have led to the development of data lakes and lakehouses, moving away from monolithic data warehouses.\n10. Cloud-based object storage using open-source formats will be the OLAP DBMS archetype for the next ten years.",
      "provenance": [],
      "metadata": {
        "question_id": "whatgoesaround-sigmodrec2024_2d64b936",
        "created_at": 1749870250.008258,
        "processing_complete": false,
        "max_provenances": 5
      },
      "source_info": {
        "selected_from": "test_outputs_prev1",
        "reason": "default",
        "sentence_count": 999999,
        "provenance_count": 0,
        "alternatives": [
          {
            "source": "test_outputs_prev1",
            "sentence_count": 999999,
            "provenance_count": 0,
            "has_answer": true
          }
        ],
        "selection_timestamp": "2025-06-17T16:48:52.923915"
      }
    }
  },
  {
    "46495ef4": {
      "question": "Which data processing systems initially gained popularity but later declined, as mentioned in the document?",
      "answer": "1. MapReduce Systems\n2. Key-value Stores\n3. Document Databases\n4. Column-Family Systems\n5. Array Databases\n6. Graph Databases\n7. Blockchain Databases",
      "provenance": [
        {
          "provenance_id": 0,
          "input_sentence_ids": [
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            11,
            12,
            13,
            14,
            15,
            16,
            17,
            18,
            19,
            20,
            21,
            22,
            23,
            24,
            25,
            26,
            27,
            28,
            29,
            30,
            31,
            32,
            33,
            34,
            35,
            36,
            37,
            38,
            39,
            40,
            41,
            42,
            43,
            44,
            45,
            46,
            47,
            48,
            49,
            50,
            51,
            52,
            53,
            54,
            55,
            56,
            57,
            58,
            59,
            60,
            61,
            62,
            63,
            64,
            65,
            66,
            67,
            68,
            69,
            70,
            71,
            72,
            73,
            74,
            75,
            76,
            77,
            78,
            79,
            80,
            81,
            82,
            83,
            84,
            85,
            86,
            87,
            88,
            89,
            90,
            91,
            92,
            93,
            94,
            95,
            96,
            97,
            98,
            99,
            100,
            101,
            102,
            103,
            104,
            105,
            106,
            107,
            108,
            109,
            110,
            111,
            112,
            113,
            114,
            115,
            116,
            117,
            118,
            119,
            120,
            121,
            122,
            123,
            124,
            125,
            126,
            127,
            128,
            129,
            130,
            131,
            132,
            133,
            134,
            135,
            136,
            137,
            138,
            139,
            140,
            141,
            142,
            143,
            144,
            145,
            146,
            147,
            148,
            149,
            150,
            151,
            152,
            153,
            154,
            155,
            156,
            157,
            158,
            159,
            160,
            161,
            162,
            163,
            164,
            165,
            166,
            167,
            168,
            169,
            170,
            171,
            172,
            173,
            174,
            175,
            176,
            177,
            178,
            179,
            180,
            181,
            182,
            183,
            184,
            185,
            186,
            187,
            188,
            189,
            190,
            191,
            192,
            193,
            194,
            195,
            196,
            197,
            198,
            199,
            200,
            201,
            202,
            203,
            204,
            205,
            206,
            207,
            208,
            209,
            210,
            211,
            212,
            213,
            214,
            215,
            216,
            217,
            218,
            219,
            220,
            221,
            222,
            223,
            224,
            225,
            226,
            227,
            228,
            229,
            230,
            231,
            232,
            233,
            234,
            235,
            236,
            237,
            238,
            239,
            240,
            241,
            242,
            243,
            244,
            245,
            246,
            247,
            248,
            249,
            250,
            251,
            252,
            253,
            254,
            255,
            256,
            257,
            258,
            259,
            260,
            261,
            262,
            263,
            264,
            265,
            266,
            267,
            268,
            269,
            270,
            271,
            272,
            273,
            274,
            275,
            276,
            277,
            278,
            279,
            280,
            281,
            282,
            283,
            284,
            285,
            286,
            287,
            288,
            289,
            290,
            291,
            292,
            293,
            294,
            295,
            296,
            297,
            298,
            299,
            300,
            301,
            302,
            303,
            304,
            305,
            306,
            307,
            308,
            309,
            310,
            311,
            312,
            313,
            314,
            315,
            316,
            317,
            318,
            319,
            320,
            321,
            322,
            323,
            324,
            325,
            326,
            327,
            328,
            329,
            330,
            331,
            332,
            333,
            334,
            335,
            336,
            337,
            338,
            339,
            340,
            341,
            342,
            343,
            344,
            345,
            346,
            347,
            348,
            349,
            350,
            351,
            352,
            353,
            354,
            355,
            356,
            357,
            358,
            359,
            360,
            361,
            362,
            363,
            364,
            365,
            366,
            367,
            368,
            369,
            370,
            371,
            372,
            373,
            374,
            375,
            376,
            377,
            378,
            379,
            380,
            381,
            382,
            383,
            384,
            385,
            386,
            387,
            388,
            389,
            390,
            391,
            392,
            393,
            394,
            395,
            396,
            397,
            398,
            399,
            400,
            401,
            402,
            403,
            404,
            405,
            406,
            407,
            408,
            409,
            410,
            411,
            412,
            413,
            414,
            415,
            416,
            417,
            418,
            419,
            420,
            421,
            422,
            423,
            424,
            425,
            426,
            427,
            428,
            429,
            430,
            431,
            432,
            433,
            434,
            435,
            436,
            437,
            438,
            439,
            440,
            441,
            442,
            443,
            444,
            445,
            446,
            447,
            448,
            449,
            450,
            451,
            452,
            453,
            454,
            455,
            456,
            457,
            458,
            459,
            460,
            461,
            462,
            463,
            464,
            465,
            466,
            467,
            468,
            469,
            470,
            471,
            472,
            473,
            474,
            475,
            476,
            477,
            478,
            479,
            480,
            481,
            482,
            483,
            484,
            485,
            486,
            487,
            488,
            489,
            490,
            491,
            492,
            493,
            494,
            495,
            496,
            497,
            498,
            499,
            500,
            501,
            502,
            503,
            504,
            505,
            506,
            507,
            508,
            509,
            510,
            511,
            512,
            513,
            514,
            515,
            516,
            517,
            518,
            519,
            520,
            521,
            522,
            523,
            524,
            525,
            526,
            527,
            528,
            529,
            530,
            531,
            532,
            533,
            534,
            535,
            536,
            537,
            538,
            539,
            540,
            541,
            542,
            543,
            544,
            545,
            546,
            547,
            548,
            549,
            550,
            551,
            552,
            553,
            554,
            555,
            556,
            557,
            558,
            559,
            560,
            561,
            562,
            563,
            564,
            565,
            566,
            567,
            568,
            569,
            570,
            571,
            572,
            573,
            574,
            575,
            576,
            577,
            578,
            579,
            580,
            581,
            582,
            583,
            584,
            585,
            586,
            587,
            588,
            589,
            590,
            591,
            592,
            593,
            594,
            595,
            596,
            597,
            598,
            599,
            600,
            601,
            602,
            603,
            604,
            605,
            606,
            607,
            608,
            609,
            610,
            611,
            612,
            613,
            614,
            615,
            616,
            617,
            618,
            619,
            620,
            621,
            622,
            623,
            624,
            625,
            626,
            627,
            628,
            629,
            630,
            631,
            632,
            633,
            634,
            635,
            636,
            637,
            638,
            639,
            640,
            641,
            642,
            643,
            644,
            645,
            646,
            647,
            648,
            649,
            650,
            651,
            652,
            653,
            654,
            655,
            656,
            657,
            658,
            659,
            660,
            661,
            662,
            663,
            664,
            665,
            666,
            667,
            668,
            669,
            670,
            671,
            672,
            673,
            674,
            675,
            676,
            677,
            678,
            679,
            680,
            681,
            682,
            683,
            684,
            685,
            686,
            687,
            688,
            689,
            690,
            691,
            692,
            693,
            694,
            695,
            696,
            697,
            698,
            699,
            700,
            701,
            702,
            703,
            704,
            705,
            706,
            707,
            708,
            709,
            710,
            711,
            712,
            713,
            714,
            715,
            716,
            717,
            718,
            719,
            720,
            721,
            722,
            723,
            724,
            725,
            726,
            727,
            728,
            729,
            730,
            731,
            732,
            733,
            734,
            735,
            736,
            737,
            738,
            739,
            740,
            741,
            742,
            743,
            744,
            745,
            746,
            747,
            748,
            749,
            750,
            751,
            752,
            753,
            754,
            755,
            756,
            757,
            758,
            759,
            760,
            761,
            762,
            763,
            764,
            765,
            766,
            767,
            768,
            769,
            770,
            771,
            772,
            773,
            774,
            775,
            776,
            777,
            778,
            779,
            780,
            781,
            782,
            783,
            784,
            785,
            786,
            787,
            788,
            789,
            790,
            791,
            792,
            793,
            794,
            795,
            796,
            797,
            798,
            799,
            800,
            801,
            802,
            803,
            804,
            805,
            806,
            807,
            808,
            809,
            810,
            811,
            812,
            813,
            814,
            815,
            816,
            817,
            818,
            819,
            820,
            821,
            822,
            823,
            824,
            825,
            826,
            827,
            828,
            829,
            830,
            831,
            832,
            833,
            834,
            835,
            836,
            837,
            838,
            839,
            840,
            841,
            842,
            843,
            844,
            845,
            846,
            847,
            848,
            849,
            850,
            851,
            852,
            853,
            854,
            855,
            856,
            857,
            858,
            859,
            860,
            861,
            862,
            863,
            864,
            865,
            866,
            867,
            868,
            869,
            870,
            871,
            872,
            873,
            874,
            875,
            876,
            877,
            878,
            879,
            880,
            881,
            882,
            883,
            884,
            885,
            886,
            887,
            888,
            889,
            890,
            891,
            892,
            893,
            894,
            895,
            896,
            897,
            898,
            899,
            900,
            901,
            902,
            903,
            904,
            905,
            906,
            907,
            908,
            909,
            910,
            911,
            912,
            913,
            914,
            915,
            916,
            917,
            918,
            919,
            920,
            921,
            922,
            923,
            924,
            925,
            926,
            927,
            928,
            929,
            930,
            931,
            932,
            933,
            934,
            935,
            936,
            937,
            938,
            939,
            940,
            941,
            942,
            943,
            944,
            945,
            946,
            947,
            948,
            949,
            950,
            951,
            952,
            953,
            954,
            955,
            956,
            957,
            958,
            959,
            960,
            961,
            962,
            963
          ],
          "provenance_ids": [
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            12,
            13,
            14,
            15,
            16,
            17,
            18,
            19,
            20,
            21,
            22,
            23,
            24,
            25,
            26,
            27,
            28,
            29,
            30,
            31,
            32,
            33,
            34,
            35,
            36,
            37,
            39,
            40,
            41,
            42,
            43,
            44,
            45,
            46,
            47,
            48,
            49,
            50,
            51,
            52,
            53,
            54,
            55,
            56,
            57,
            58,
            59,
            60,
            61,
            62,
            63,
            64,
            65,
            66,
            67,
            68,
            69,
            70,
            71,
            72,
            73,
            74,
            75,
            76,
            77,
            78,
            79,
            80,
            82,
            83,
            84,
            85,
            86,
            87,
            88,
            89,
            90,
            91,
            92,
            93,
            94,
            96,
            97,
            98,
            99,
            100,
            101,
            102,
            103,
            104,
            105,
            106,
            110,
            112,
            113,
            115,
            116,
            117,
            119,
            120,
            121,
            125,
            126,
            127,
            128,
            129,
            130,
            133,
            135,
            136,
            137,
            138,
            139,
            142,
            143,
            145,
            146,
            147,
            149,
            150,
            246,
            247,
            248,
            250,
            252,
            253,
            255,
            256,
            257,
            258,
            260,
            262,
            270,
            271,
            272,
            273,
            274,
            275,
            276,
            278,
            279,
            280,
            281,
            286,
            287,
            288,
            289,
            290,
            291,
            298,
            300,
            301,
            302,
            303,
            304,
            370,
            371,
            372,
            373,
            374,
            375,
            377,
            378,
            379,
            380,
            381,
            382,
            383,
            384,
            385,
            386,
            387,
            388,
            389,
            390,
            391,
            392,
            393,
            396,
            397,
            398,
            399,
            401,
            402,
            403,
            405,
            406,
            407,
            408,
            409,
            410,
            415,
            417,
            419,
            420,
            421,
            422,
            424,
            425,
            426,
            427,
            428,
            429,
            430,
            431,
            432,
            434,
            435,
            436,
            437,
            438,
            439,
            440,
            442,
            443,
            444,
            446,
            451,
            452,
            454,
            456,
            458,
            459,
            461,
            462,
            463,
            464,
            465,
            466,
            467,
            468,
            469,
            470,
            471,
            472,
            476,
            479,
            480,
            481,
            482,
            484,
            485,
            486,
            487,
            488,
            489,
            490,
            491,
            492,
            493,
            494,
            495,
            497,
            498,
            499,
            500,
            501,
            503,
            504,
            505,
            506,
            507,
            511,
            512,
            513,
            514,
            515,
            516,
            517,
            519,
            530,
            531,
            532,
            533,
            534,
            535,
            539,
            540,
            541,
            543,
            544,
            546,
            547,
            548,
            549,
            550,
            551,
            552,
            553,
            554,
            555,
            556,
            561,
            563,
            564,
            565,
            566,
            567,
            568,
            569,
            570,
            571,
            572,
            573,
            578,
            579,
            580,
            584,
            585,
            586,
            587,
            588,
            589,
            590,
            591,
            595,
            596,
            597,
            598,
            600,
            601,
            602,
            603,
            604,
            605,
            606,
            607,
            608,
            609,
            610,
            611,
            613,
            617,
            618,
            619,
            620,
            621,
            622,
            623,
            624,
            625,
            626,
            627,
            628,
            629,
            630,
            632,
            633,
            634,
            636,
            637,
            638,
            639,
            640,
            641,
            642,
            643,
            644,
            645,
            646,
            647,
            648,
            649,
            651,
            652,
            653,
            655,
            656,
            658,
            659,
            663,
            664,
            666,
            667,
            668,
            669,
            671,
            672,
            673,
            674,
            675,
            676,
            678,
            679,
            680,
            682,
            683,
            684,
            685,
            686,
            688,
            689,
            690,
            691,
            692,
            698,
            699,
            702,
            703,
            704,
            705,
            706,
            708,
            709,
            710,
            711,
            712,
            713,
            715,
            716,
            717,
            718,
            726,
            727,
            728,
            729,
            730,
            731,
            732,
            733,
            734,
            735,
            736,
            737,
            738,
            739,
            740,
            742,
            743,
            744,
            745,
            748,
            749,
            750,
            751,
            752,
            754,
            755,
            756,
            758,
            759,
            760,
            761,
            762,
            764,
            765,
            766,
            767,
            768,
            769,
            770,
            771,
            772,
            773,
            774,
            775,
            776,
            777,
            778,
            779,
            780,
            781,
            783,
            787,
            791,
            792,
            800,
            803,
            804,
            805,
            807,
            809,
            810,
            811,
            812,
            813,
            814,
            816,
            817,
            818,
            819,
            821,
            822,
            823,
            825,
            826,
            827,
            829,
            830,
            831,
            832,
            833,
            834,
            835,
            836,
            837,
            838,
            839,
            840,
            841,
            842,
            843,
            844,
            845,
            846,
            847,
            849,
            850,
            851,
            852,
            853,
            854,
            855,
            856,
            857,
            859,
            860,
            861,
            862,
            863,
            864,
            865,
            866,
            868,
            869,
            870,
            871,
            872,
            874,
            875,
            876,
            877,
            878,
            879,
            881,
            882,
            883,
            884,
            885,
            886,
            887,
            891,
            892,
            893,
            894,
            895,
            896,
            897,
            900,
            901,
            902,
            903,
            904,
            905,
            906,
            908,
            909,
            910,
            911,
            912,
            913,
            914,
            915,
            916,
            917,
            918,
            919,
            920,
            921,
            922,
            923,
            924,
            926,
            927,
            928,
            929,
            930,
            931,
            932,
            933,
            934,
            935,
            936,
            937,
            938,
            939,
            940,
            941,
            942,
            943,
            944,
            945,
            946,
            947,
            948,
            949,
            951,
            954,
            955,
            956,
            957,
            958,
            959,
            961,
            963
          ],
          "provenance": "What Goes Around Comes Around... And Around...\n\nMichael Stonebraker\nMassachusetts Institute of Technology\nstonebraker@csail.mit.edu\n\nAndrew Pavlo\nCarnegie Mellon University\npavlo@cs.cmu.edu\n\nABSTRACT\nTwo decades ago, one of us co-authored a paper com-\nmenting on the previous 40 years of data modelling re-\nsearch and development [188].That paper demonstrated\nthat the relational model (RM) and SQL are the prevail-\ning choice for database management systems (DBMSs),\ndespite efforts to replace either them.Instead, SQL ab-\nsorbed the best ideas from these alternative approaches.We revisit this issue and argue that this same evolu-\ntion has continued since 2005.Once again there have\nbeen repeated efforts to replace either SQL or the RM.But the RM continues to be the dominant data model\nand SQL has been extended to capture the good ideas\nfrom others.As such, we expect more of the same in\nthe future, namely the continued evolution of SQL and\nrelational DBMSs (RDBMSs).We also discuss DBMS\nimplementations and argue that the major advancements\nhave been in the RM systems, primarily driven by chang-\ning hardware characteristics.1 Introduction\nIn 2005, one of the authors participated in writing a\nchapter for the Red Book titled “What Goes Around\nComes Around” [188].That paper examined the major\ndata modelling movements since the 1960s:\n\nHierarchical (e.g., IMS): late 1960s and 1970s\nNetwork (e.g., CODASYL): 1970s\nRelational: 1970s and early 1980s\nEntity-Relationship: 1970s\nExtended Relational: 1980s\nSemantic: late 1970s and 1980s\nObject-Oriented: late 1980s and early 1990s\nObject-Relational: late 1980s and early 1990s\nSemi-structured (e.g., XML): late 1990s and 2000s\n\n•\n•\n•\n•\n•\n•\n•\n•\n•\n\nOur conclusion was that the relational model with an\nextendable type system (i.e., object-relational) has dom-\ninated all comers, and nothing else has succeeded in\nthe marketplace.Although many of the non-relational\nDBMSs covered in 2005 still exist today, their vendors\nhave relegated them to legacy maintenance mode and\nnobody is building new applications on them.In other\nwords, there still are many IBM IMS databases running\ntoday because it is expensive and risky to switch them\nto use a modern DBMS.But no start-up would willingly\nchoose to build a new application on IMS.A lot has happened in the world of databases since our\n2005 survey.During this time, DBMSs have expanded\nfrom their roots in business data processing and are now\nused for almost every kind of data.This led to the “Big\nData” era of the early 2010s and the current trend of inte-\ngrating machine learning (ML) with DBMS technology.In this paper, we analyze the last 20 years of data\nmodel and query language activity in databases.We\nstructure our commentary into the following areas: (1)\nMapReduce Systems, (2) Key-value Stores, (3) Docu-\nment Databases, (4) Column Family / Wide-Column,\n(5) Text Search Engines, (6) Array Databases, (7)\nVector Databases, and (8) Graph Databases.We contend that most systems that deviated from\nSQL or the RM have not dominated the DBMS land-\nscape and often only serve niche markets.Many sys-\ntems that started out rejecting the RM with much fanfare\n(think NoSQL) now expose a SQL-like interface for RM\ndatabases.Such systems are now on a path to conver-\ngence with RDBMSs.Meanwhile, SQL incorporated\nthe best query language ideas to expand its support for\nmodern applications and remain relevant.Although there has not been much change in RM\nfundamentals, there were dramatic changes in RM sys-\ntem implementations.The second part of this paper\ndiscusses advancements in DBMS architectures that ad-\ndress modern applications and hardware: (1) Columnar\nSystems, (2) Cloud Databases, (3) Data Lakes / Lake-\nhouses, (4) NewSQL Systems, (5) Hardware Acceler-\nators, and (6) Blockchain Databases.Some of these\nare profound changes to DBMS implementations, while\nothers are merely trends based on faulty premises.We ﬁnish with a discussion of important considera-\ntions for the next generation of DBMSs and provide part-\ning comments on our hope for the future of databases in\nboth research and commercial settings.SIGMOD Record, June 2024 (Vol. 53, No.2)\n\n21\n\n\f2 Data Models & Query Languages\nFor our discussion here, we group the research and de-\nvelopment thrusts in data models and query languages\nfor database into eight categories.2.1 MapReduce Systems\nGoogle constructed their MapReduce (MR) framework\nin 2003 as a “point solution” for processing its periodic\ncrawl of the internet [122].At the time, Google had\nlittle expertise in DBMS technology, and they built MR\nto meet their crawl needs.In database terms, Map is a\nuser-deﬁned function (UDF) that performs computation\nand/or ﬁltering while Reduce is a GROUP BY operation.To a ﬁrst approximation, MR runs a single query:\n\nSELECT map() FROM crawl_table GROUP BY reduce()\n\nGoogle’s MR approach did not prescribe a speciﬁc\ndata model or query language.Rather, it was up to the\nMap and Reduce functions written in a procedural MR\nprogram to parse and decipher the contents of data ﬁles.There was a lot of interest in MR-based systems at\nother companies in the late 2000s.Yahoo! developed\nan open-source version of MR in 2005, called Hadoop.It ran on top of a distributed ﬁle system HDFS that was\na clone of the Google File System [134].Several start-\nups were formed to support Hadoop in the commercial\nmarketplace.They are functionally similar.There was a controversy about the value of Hadoop\ncompared to RDBMSs designed for OLAP workloads.This culminated in a 2009 study that showed that data\nwarehouse DBMSs outperformed Hadoop [172].This\ngenerated dueling articles from Google and the DBMS\ncommunity [123, 190].Google argued that with care-\nful engineering, a MR system will beat DBMSs, and a\nuser does not have to load data with a schema before\nrunning queries on it.Thus, MR is better for “one shot”\ntasks, such as text processing and ETL operations.The\nDBMS community argued that MR incurs performance\nproblems due to its design that existing parallel DBMSs\nalready solved.Furthermore, the use of higher-level\nlanguages (SQL) operating over partitioned tables has\nproven to be a good programming model [127].A lot of the discussion in the two papers was on imple-\nmentation issues (e.g., indexing, parsing, push vs. pull\nquery processing, failure recovery).From reading both\npapers a reasonable conclusion would be that there is a\nplace for both kinds of systems.However, two changes\nin the technology world rendered the debate moot.The ﬁrst event was that the Hadoop technology and\nservices market cratered in the 2010s.Many enterprises\nspent a lot of money on Hadoop clusters, only to ﬁnd\nthere was little interest in this functionality.Developers\nfound it difﬁcult to shoehorn their application into the\n\nrestricted MR/Hadoop paradigm.There were consider-\nable efforts to provide a SQL and RM interface on top\nof Hadoop, most notable was Meta’s Hive [30, 197].The next event occurred eight months after the CACM\narticle when Google announced that they were moving\ntheir crawl processing from MR to BigTable [164].The\nreason was that Google needed to interactively update\nits crawl database in real time but MR was a batch sys-\ntem.Google ﬁnally announced in 2014 that MR had no\nplace in their technology stack and killed it off [194].The ﬁrst event left the three leading Hadoop vendors\n(Cloudera, Hortonworks, MapR) without a viable prod-\nuct to sell.Cloudera rebranded Hadoop to mean the\nwhole stack (application, Hadoop, HDFS).In a further\nsleight-of-hand, Cloudera built a RDBMS, Impala [150],\non top of HDFS but not using Hadoop.They realized\nthat Hadoop had no place as an internal interface in a\nSQL DBMS, and they conﬁgured it out of their stack\nwith software built directly on HDFS.In a similar vein,\nMapR built Drill [22] directly on HDFS, and Meta cre-\nated Presto [185] to replace Hive.Discussion: MR’s deﬁciencies were so signiﬁcant that\nit could not be saved despite the adoption and enthu-\nsiasm from the developer community.Hadoop died\nabout a decade ago, leaving a legacy of HDFS clusters\nin enterprises and a collection of companies dedicated\nto making money from them.At present, HDFS has\nlost its luster, as enterprises realize that there are better\ndistributed storage alternatives [124].Meanwhile, dis-\ntributed RDBMSs are thriving, especially in the cloud.Some aspects of MR system implementations related\nto scalability, elasticity, and fault tolerance are carried\nover into distributed RDBMSs.MR also brought about\nthe revival of shared-disk architectures with disaggre-\ngated storage, subsequently giving rise to open-source\nﬁle formats and data lakes (see Sec.3.3). Hadoop’s lim-\nitations opened the door for other data processing plat-\nforms, namely Spark [201] and Flink [109].Both sys-\ntems started as better implementations of MR with pro-\ncedural APIs but have since added support for SQL [105].2.2 Key/Value Stores\nThe key/value (KV) data model is the simplest model\npossible.It represents the following binary relation:\n\n(key,value)\n\nA KV DBMS represents a collection of data as an as-\nsociative array that maps a key to a value.The value is\ntypically an untyped array of bytes (i.e., a blob), and the\nDBMS is unaware of its contents.It is up to the appli-\ncation to maintain the schema and parse the value into\nits corresponding parts.Most KV DBMSs only provide\nget/set/delete operations on a single value.In the 2000s, several new Internet companies built\ntheir own shared-nothing, distributed KV stores for nar-\n\n22\n\nSIGMOD Record, June 2024 (Vol.53, No. 2)\n\n\frowly focused applications, like caching and storing ses-\nsion data.For caching, Memcached [131] is the most\nwell-known example of this approach.Redis [67] mar-\nkets itself as a Memcached replacement, offering a more\nrobust query API with checkpointing support.For more\npersistent application data, Amazon created the Dynamo\nKV store in 2007 [125].Such systems offer higher and\nmore predictable performance, compared to a RDBMS,\nin exchange for more limited functionality.One of the ﬁrst stan-\ndalone embedded KV DBMSs was BerkeleyDB from\nthe early 1990s [170].Recent notable entries include\nGoogle’s LevelDB [37], which Meta later forked as\nRocksDB [68].Discussion: Key/value stores provide a quick “out-of-\nthe-box” way for developers to store data, compared to\nthe more laborious effort required to set up a table in a\nRDBMS.Of course, it is dangerous to use a KV store\nin a complex application that requires more than just a\nbinary relation.If an application requires multiple ﬁelds\nin a record, then KV stores are probably a bad idea.Not\nonly must the application parse record ﬁelds, but also\nthere are no secondary indexes to retrieve other ﬁelds\nby value.Likewise, developers must implement joins or\nmulti-get operations in their application.To deal with these issues, several systems began as\na KV store and then morphed into a more feature-rich\nrecord store.Such systems replace the opaque value\nwith a semi-structured value, such as a JSON docu-\nment.Examples of this transition are Amazon’s Dy-\nnamoDB [129] and Aerospike [9].It is not trivial to re-\nengineer a KV store to make it support a complex data\nmodel, whereas RDBMSs easily emulates KV stores\nwithout any changes.If an application needs an embed-\nded DBMS, there are full-featured choices available to-\nday, including SQLite [71] and DuckDB [180].Hence,\na RDBMS may be a better choice, even for simple appli-\ncations, because they offer a path forward if the applica-\ntion’s complexity increases.Prior to this, build-\ning a new DBMS requires engineers to build a custom\nstorage manager that is natively integrated in the DBMS.MySQL was the ﬁrst DBMS to expose an API that al-\nlowed developers to replace its default KV storage man-\nager.This API enabled Meta to build RocksDB to re-\nplace InnoDB for its massive ﬂeet of MySQL databases.Similarly, MongoDB discarded their ill-fated MMAP-\nbased storage manager in favor of WiredTiger’s KV\nstore in 2014 [120, 138].Using an existing KV store\nallows developers to write a new DBMS in less time.2.3 Document Databases\n\nThe document data model represents a database as a col-\nlection of record objects.Each document contains a hier-\narchy of ﬁeld/value pairs, where each ﬁeld is identiﬁed\nby a name and a ﬁeld’s value can be either a scalar type,\nan array of values, or another document.The following\nexample in JSON is a customer document that contain\na nested list of purchase order records with their corre-\nsponding order items.{ “name”: “First Last”,\n\n“orders”: [ { “id”: 123, “items”: [...] },\n\n{ “id”: 456, “items”: [...] }, ] }\n\nDocument data models have been an active ﬁeld of\neffort for several decades.This has given rise to data\nformats like SGML [117] and XML [118].Despite\nthe buzz with XML databases in the late 1990s, we\ncorrectly predicted in 2005 they would not supplant\nRDBMSs [188].There\nwere two marketing messages for such systems that res-\nonated with developers.Second, ACID transactions are unneces-\nsary for modern applications, so the DBMS should only\nprovide weaker notion of it (i.e., BASE [179]).Because of these two thrusts, NoSQL came to stand\nfor a DBMS that stored records or documents as JSON,\nsupported a lower-level API, and weak or non-existent\ntransactions.Discussion: Document DBMSs are essentially the same\nas object-oriented DBMSs from the 1980s and XML\nDBMSs from the late 1990s.Proponents of document\nDBMSs make the same argument as their OO/XML\npredecessors: storing data as documents removes the\nimpedance mismatch between how application OO code\ninteracts with data and how relational databases store\nthem.They also claim that denormalizing entries into\nnested structures is better for performance because it re-\nmoves the need to dispatch multiple queries to retrieve\ndata related to a given object (i.e., “N+1 problem” in\nORMs).SIGMOD Record, June 2024 (Vol. 53, No.2)\n\n23\n\n\fDespite strong protestations that SQL was terrible, by\nthe end of the 2010s, almost every NoSQL DBMS added\na SQL interface.Notable examples include DynamoDB\nPartiQL [56], Cassandra CQL [15], Aerospike AQL [9],\nand Couchbase SQL++ [72].Any language differences\nbetween SQL and NoSQL derivatives are mostly due to\nJSON extensions and maintenance operations.Many of the remaining NoSQL DBMSs also added\nstrongly consistent (ACID) transactions (see Sec. 3.4).As such, the NoSQL message has morphed from “Do\nnot use SQL – it is too slow!” to “Not only SQL” (i.e.,\nSQL is ﬁne for some things).Adding SQL and ACID to a NoSQL DBMS lowers\ntheir intellectual distance from RDBMSs.The main\ndifferences between them seems to be JSON support\nand the fact that NoSQL vendors allow “schema later”\ndatabases.But the SQL standard added a JSON data\ntype and operations in 2016 [165, 178].Although\nwe acknowledge that the ﬁrst SQL optimizers were slow\nand ineffective, they have improved immensely in the\nlast 50 years.We suspect that this engineering\nburden was a contributing factor to why NoSQL systems\noriginally chose to not support SQL.2.4 Column-Family Databases\nThere is another category of NoSQL systems that uses\na data model called column-family (aka wide-column).Despite its name, column-family is not a columnar data\nmodel.Instead, it is a reduction of the document data\nmodel that only supports one level of nesting instead\nof arbitrary nesting; it is relation-like, but each record\ncan have optional attributes, and cells can contain an ar-\nray of values.The following example shows a mapping\nfrom user identiﬁer keys to JSON documents that con-\ntain each user’s varying proﬁle information:\n\nUser1000 → { “name”: “Alice”,\n\n“accounts”: [ 123, 456 ],\n“email”: \"xxx@xxx.edu” }\n\nUser1001 → { “name”: “Bob”,\n\n“email”: [ “yyy@yyy.org”, “zzz@zzz.com” ] }\n\nThe ﬁrst column-family model DBMS was Google’s\nBigTable in 2004 [111].Most notable are Cassandra [14]\nand HBase [28].They also copied BigTable’s limita-\ntions, including the lack of joins and secondary indexes.2.3 about the\ndocument model are also applicable here.In the early\n2010s, Google built RDBMSs on top of BigTable, in-\ncluding MegaStore [99] and the ﬁrst version of Span-\nner.Since then, Google rewrote Spanner to remove\nthe BigTable remnants [98], and it is now the primary\ndatabase for many of its internal applications.Cassandra replaced their Thrift-API with a\nSQL-like language called CQL [15], and HBase now\nrecommends the Phoenix SQL-frontend [57].Google\nstill offers BigTable as a cloud service, but the column-\nfamily model is a singular outlier with the same disad-\nvantages as NoSQL DBMSs.Neo4j [44] is the\nmost popular graph DBMS for OLTP applications.It\nsupports edges using pointers (as in CODASYL) but it\ndoes not cluster nodes with their “parent” or “offspring”.Such an architecture is advantageous for traversing long\nedge chains since it will do pointer chasing, whereas a\nRDBMS has to do this via joins.The second use case is analytics, which seeks to de-\nrive information from the graph.Notable entries like Tigergraph [74]\nand JanusGraph [32] focus on query languages and\nstorage on a graph DBMS.Other systems, such as Gi-\nraph [26] and Turi [78] (formerly Graphlab [27]) pro-\nvide a computing fabric to support parallel execution of\ngraph-oriented programs, typically written by a user.53, No. 2)\n\n\fdetermination. Algorithm choice and data representa-\ntion will determine a DBMS’s performance.This argues\nfor a computing fabric that allows developers to write\ntheir own algorithms using an abstraction that hides\nthe underlying system topology.However, previous\nresearch shows that distributed algorithms rarely out-\nperform single-node implementations because of com-\nmunication costs [160].A better strategy is to compress\na graph into a space-efﬁcient data structure that ﬁts in\nmemory on a single node and then run the query against\nthis data structure.Discussion: Regardless of whether a graph DBMS tar-\ngets OLTP or OLAP workloads, the key challenge these\nsystems have to overcome is that it is possible to simu-\nlate a graph as a collection of tables:\n\nNode (node_id, node_data)\nEdge (node_id_1, node_id_2, edge_data)\n\nThis means that RDBMSs are always an option to sup-\nport graphs.Some RDBMSs, including MSSQL [3] and Oracle [50],\n\nprovide built-in SQL extensions that make storing and\nquerying graph data easier.There have been several\nperformance studies showing that graph simulation on\nRDBMSs outperform graph DBMSs [130, 143].More\nrecent work showed how SQL/PGQ in DuckDB outper-\nforms a leading graph DBMS by up to 10\n[196].This\ntrend will continue with further improvements in worst-\ncase optimal joins [132, 168] and factorized execution\nalgorithms [100] for graph queries in RDBMSs.⇥\n\n2.9 Summary\nA reasonable conclusion from the above section is that\nnon-SQL, non-relational systems are either a niche mar-\nket or are fast becoming SQL/RM systems.Speciﬁcally:\n\n•\n\nMapReduce Systems: They died years ago and are,\nat best, a legacy technology at present.•\n\n•\n\n•\n\n•\n\n•\n\n•\n\n•\n\nKey-value Stores: Many have either matured into\nRM systems or are only used for speciﬁc problems.These can generally be equaled or beaten by modern\nhigh-performance RDBMSs.The differences\nbetween the two kinds of systems have diminished\nover time and should become nearly indistinguish-\nable in the future.Column-Family Systems: These remain a niche\nmarket.Without Google, this paper would not be\ntalking about this category.Text Search Engines: These systems are used for\ntext ﬁelds in a polystore architecture.RM DBMSs should soon provide native support for\nthese data structures and search methods using their\nextendable type system that will render such special-\nized databases unnecessary.Graph Databases: OLTP graph applications will\nbe largely served by RDBMSs.In addition, ana-\nlytic graph applications have unique requirements\nthat are best done in main memory with specialized\ndata structures.RDBMSs will provide graph-centric\nAPIs on top of SQL or via extensions.We do not ex-\npect specialized graph DBMSs to be a large market.Beyond the above, there are also proposals to rebrand\nprevious data models as something novel.3.1 Columnar Systems\nTo understand the appeal of columnar DBMSs, we need\nto explain the origins of the data warehouse (OLAP)\nmarket.53, No. 2)\n\n27\n\n\fcollecting their customer facing (usually sales) data.Brick-and-mortar retailers (e.g., Walmart) were at fore-\nfront of constructing historical sales databases.These\ncompanies generally found that a sales data warehouse\nwould pay for itself in better stock ordering and rota-\ntion decisions within six months.Such customer facing\ndatabases are now omnipresent in enterprises.Data warehouse applications have common proper-\n\nties that are distinct from OLTP workloads:\n1.Lakehouses provide much-\nneeded control over these environments to help mitigate\nmany problems with meta-data, caching, and indexing\nservices [93].Additional middleware that tracks new\ndata and supports transactional updates, such as Delta\nLake [92], Iceberg [6], and Hudi [5], make lakehouses\nlook more like a traditional data warehouse.Data lakes introduce new challenges to query opti-\nmization.DBMSs have always struggled with acquir-\ning precise statistics on data,\nleading to poor query\nplan choices [154].However, a data lake system may\ncompletely lack statistics on newly ingested data ﬁles.Consequently, incorporating adaptive query processing\nstrategies is imperative in the cloud to enable a DBMS to\ndynamically modify query plans during execution based\non observed data characteristics [97, 105, 163].Since data lake sys-\ntems backed by object stores are much cheaper per giga-\nbyte than proprietary data warehouses, the legacy OLAP\nvendors (e.g., Teradata, Vertica) have extended their\nDBMSs to support reading data from object stores in re-\nsponse to this pricing pressure.Several independent sys-\ntems are also in this space, including Databricks [105],\nDremio [21], PrestoDB [63], and Trino [77].3.4 NewSQL Systems\nIn the late 2000s, there were multiple distributed NoSQL\nDBMSs available designed to scale horizontally to sup-\nport online applications with large number of concurrent\nusers [110].However, many organizations could not use\nthese NoSQL systems because their applications could\nnot give up strong transactional requirements.But the\nexisting RDBMSs (especially open-source ones) were\nnot able to (natively) scale across multiple machines.In\nresponse, NewSQL systems arrived in the early 2010s\nseeking to provide the scalability of NoSQL systems for\nOLTP workloads while still supporting SQL [95, 171].In other words, these new systems sought to achieve the\nsame scalability of NoSQL DBMSs from the 2000s but\nstill keep the RM and ACID transactions of the legacy\nDBMSs from the 1990s.There were two main groups of NewSQL systems.The ﬁrst was in-memory DBMSs, including H-Store [144,\n189] (commercialized as VoltDB [83]), SingleStore [69],\nMicrosoft Hekaton [128], and HyPer [146].Other start-\nup offerings included disk-oriented, distributed DBMSs\nlike NuoDB [47] and Clustrix [17].Discussion: There has yet to be a dramatic uptake in\nNewSQL DBMS adoption [96].The reason for this lack-\nluster interest is that existing DBMSs were good enough\nfor the time, which means organizations are unwilling to\ntake on the costs and risk of migrating existing applica-\ntions to newer technologies.Companies are more risk-\n\nSIGMOD Record, June 2024 (Vol. 53, No.2)\n\n29\n\n\faverse with changing OLTP DBMSs than with OLAP.If an OLTP DBMS fails, companies cannot execute the\ntransactions they need to generate revenue.In contrast,\nan OLAP DBMS failure could be limited to temporarily\ninconveniencing an analyst or data scientist.There were other restrictions in NewSQL DBMSs,\nsuch as only supporting a subset of standard SQL or\nbad performance on multi-node transactions.Flash vendors drove down costs while improv-\ning storage densities, bandwidth, and latencies.Higher\nDRAM costs and the collapse of persistent memory\n(e.g., Intel Optane) means that SSDs will remain domi-\nnant for OLTP DBMSs.The aftermath of NewSQL is a new crop of distributed,\ntransactional SQL RDBMSs.These include TiDB [141],\nCockroachDB [195], PlanetScale [60] (based on the\nVitess sharding middleware [80]), and YugabyteDB [86].Notable DBMSs that\nmade the shift include MongoDB, Cassandra, and Dy-\nnamoDB.This is of course due to customer requests\nthat transactions are in fact necessary.Google said this\ncogently when they discarded eventual consistency in\nfavor of real transactions with Spanner in 2012 [119].The promise\nis obvious: specialized hardware designed for a DBMS\nshould easily outperform a conventional CPU.In the 1980s, vendors fabricated custom hardware to\naccelerate DBMSs and marketed them as database ma-\nchines [107].Britton-Lee released the ﬁrst commercial\naccelerator product (IDM/500) in 1981 [192] that con-\ntained a conventional CPU with a hardware accelerator\nthat ofﬂoaded portions of a query’s execution.This ac-\ncelerator targeted a small subset of the execution path,\nand was not cost-effective.Teradata introduced its own\ndatabase machine that provided network hardware for\nsorting in-ﬂight tuples (Y-net [1]), but it was dropped\nfor a software-only solution [85].All other custom hard-\nware DBMS acceleration during the 1980s failed.Netezza corrected this limitation in a later version [2].Vitesse’s\nDeepgreen DB [81] is the only remaining FPGA-enhanced\nDBMS available from an ISV.Notable GPU DBMSs include Kinetica [35],\nSqream [35], Brytlyt [13], and HeavyDB [48].If data\ndoes not ﬁt in GPU memory, then query execution is\nbottlenecked on loading data into the device, thereby\nrendering the hardware’s parallelization beneﬁts moot.Discussion: There are several conclusions that we can\ndraw from the above analysis.First, these systems are\nall focused on the OLAP market and only for RDBMSs;\nthere are essentially no data model implications to the\ndiscussion in this section.Creating custom hardware just for a DBMS is not\ncost-effective for most companies.Commodity hard-\nware avoids this problem but there is still the challenge\nof integrating the hardware into a DBMS.The reason\nwhy there are more GPU DBMSs than FPGA systems\nis because there are existing support libraries available\nfor GPUs (e.g., Nvidia CUDA [169]).But cloud CPU-\nbased compute resources are incredibly cheap due to\neconomies of scale.The success of any accelerator is\nlikely to be limited to on-prem databases, but this mar-\nket is not growing at the same rate as cloud databases.Even if one could get an accelerator to market that\nshowed orders of magnitude improvement over existing\ntechnologies, that only solves half the problem needed\nfor adoption and success.A hardware-only company\nmust ﬁnd somebody to add support for its accelerator\nin a DBMS.If the accelerator is an optional add-on to\nthe DBMS, then adoption will be low and thus a DBMS\nvendor will not want to spend engineering time on sup-\nporting it.If the accelerator is a critical component of\nthe DBMS, then no vendor would outsource the devel-\nopment of such an important part to an outside vendor.They can justify\nthe $50–100m R&D cost of custom hardware at their\nmassive scale.They also control the entire stack (hard-\nware and software) and can integrate their hardware at\ncritical locations.Amazon did this already with their\nRedshift AQUA accelerators [102].Google BigQuery\nhas custom components for in-memory shufﬂes [89].In spite of the long odds, we predict that there will be\nmany attempts in this space over the next two decades.30\n\nSIGMOD Record, June 2024 (Vol. 53, No.2)\n\n\f3.6 Blockchain Databases\nAs of this writing, a waning database technology fad\nis blockchains.These in-\ncremental checksums are how a blockchain ensures that\nthe database’s log records are immutable: applications\nuse these checksums to verify that previous database up-\ndates have not been altered.The ideal use case for blockchain databases is peer-to-\npeer applications where one cannot trust anybody.There\nis no centralized authority that controls the ordering of\nupdates to the database.At the present time, cryptocurrencies (Bitcoin) are\nthe only use case for blockchains.The\nonly applications without real-world trust are dark web\ninteractions (e.g., money laundering).Legitimate busi-\nnesses are unwilling to pay the performance price (about\nﬁve orders of magnitude) to use a blockchain DBMS.To the best of our knowledge, all the\nmajor cryptocurrency exchanges run their businesses off\ntraditional RDBMSs and not blockchain systems.No sensible company\nwould rely on random participants on the Internet as the\nbackup solution for mission-critical databases.Amazon’s Quantum Ledger Database\n(QLDB) released in 2018 [65] provides the same im-\nmutable and veriﬁable update guarantees as a blockchain,\nbut it is not decentralized (i.e., no BFT commit protocol).Amazon built QLDB after ﬁnding no compelling use\ncase for a fully decentralized blockchain DBMS [108].Cloud Databases: The cloud has upended the con-\nventional wisdom on how to build scalable DBMSs.Except for embedded DBMSs, any product not start-\ning with a cloud offering will likely fail.Data Lakes / Lakehouses: Cloud-based object stor-\nage using open-source formats will be the OLAP\nDBMS archetype for the next ten years.NewSQL Systems: They leverage new ideas but\nhave yet to have the same impact as columnar and\ncloud DBMSs.It has led to new distributed DBMSs\nthat support stronger ACID semantics as a counter\nto NoSQL’s weaker BASE guarantees.Hardware Accelerators: We do not see a use case\nfor specialized hardware outside of the major cloud\nvendors, though start-ups will continue to try.Blockchain Databases: An inefﬁcient technology\nlooking for an application.History has shown this is\nthe wrong way to approach systems development.•\n\n•\n\n•\n\n•\n\n4 Parting Comments\nOur analysis of the last two decades in databases has sev-\neral takeaways.Unfortunately, some of these are repeats\nof the warnings from the 2005 paper.Never underestimate the value of good marketing for\nbad products.The database market is highly competi-\ntive and lucrative.These\nsystems got enough traction early on to buy them time\nto ﬁx the engineering debt they accumulated earlier.All these\nsystems started life as purpose-built applications for a\ntech company.The company then releases the DBMS\nas an open-source project (often pushed to the Apache\nFoundation for stewardship) in hopes to achieve “free”\ndevelopment from external users.Some times they come from large companies that can\nafford to allocate resources to developing new systems.Notable examples include Meta (Hive [197], Presto [63],\nCassandra [14], RocksDB [68]) and LinkedIn (Kafka [33],\nPinot [59], Voldemort [82]).The most successful\nexamples are 10gen (MongoDB) and PowerSet (HBase),\nbut there also many failed endeavors.This trend to avoid “not invented here” software is\npartly because many companies’ promotion path favors\n\nSIGMOD Record, June 2024 (Vol.53, No. 2)\n\n31\n\n\fengineers who make new internal systems, even if ex-\nisting tools are sufﬁcient.But this perversion led many\nteams without DBMS engineering experience to under-\ntake building a new system.One should be wary of\nsuch systems when a company ﬁrst open-sources them,\nas they are almost always immature technologies.Do not ignore the out-of-box experience.One of the\nsalient selling points of many non-relational DBMSs is\na better “out-of-box” experience than RDBMSs.Most\nSQL systems require one ﬁrst to create a database and\nthen deﬁne their tables before they can load data.This\nis why data scientists use Python notebooks to analyze\ndata ﬁles quickly.Every DBMS should, therefore, make\nit easy to perform in situ processing of local and cloud-\nstorage ﬁles.DuckDB’s rising popularity is partly due\nto its ability to do this well.Vendors should also consider additional challenges\nthat customers will inevitably face with databases, in-\ncluding physical design, knob tuning, schema design,\nand query tuning.Developers need to query their database directly.Most OLTP applications created in the last 20 years pri-\nmarily interact with databases via an abstraction layer,\nsuch as an endpoint API (e.g., REST, GraphQL) or\nan object-relational mapper (ORM) library.Such lay-\ners translate an application’s high-level requests into\ndatabase queries.ORMs also automatically handle main-\ntenance tasks, such as schema migrations.One could\nargue that since OLTP developers never write raw SQL\nin their applications, it does not matter what data model\ntheir DBMS uses as these layers hide it.But they\noften sacriﬁce the ability to push logic into the DBMS\nin exchange for interoperability with multiple DBMSs.Developers fall back to writing explicit database queries\nto override the poor auto-generated queries.This is why\nusing a RDBMS that supports SQL is the better choice.The impact of AI/ML on DBMSs will be signiﬁcant.How DBMSs should interact with modern AI/ML tools\nhas recently become a crucial question, especially with\nthe advent of LLMs (e.g., ChatGPT).NL interfaces are an\nold research topic that dates back to the 1970s [139],\nbut which historically has poor outcomes and thus little\nwidespread use [88].We acknowledge LLMs have im-\npressive results for this task but caution those who think\nNL will replace SQL.Nobody will write OLTP appli-\ncations using an NL, as most generate queries using\n\nORMs.For OLAP databases, NL could prove helpful\nin constructing the initial queries for exploratory anal-\nysis.However, these queries should be exposed to a\ndashboard-like reﬁnement tool since English and other\nNLs are rife with ambiguities and impreciseness.There is a reluctance to depend on current LLM tech-\nnology for decision-making inside the enterprise, espe-\ncially with ﬁnancial data.The biggest issue is that the\noutput of an LLM is not explainable to a human.Companies generally cannot outsource the cre-\nation of training data for these models to unskilled peo-\nple.Another concern is the wasted effort of new projects\nreimplementing the same components that are not novel\nbut necessary to have a production-ready DBMS (e.g.,\nconﬁg handlers, parsers, buffer pools).To accelerate\nthe next generation of DBMSs, the community should\nfoster the development of open-source reusable compo-\nnents and services [112, 176].There are some efforts to-\nwards this goal, including for ﬁle formats (see Sec.3.3),\nquery optimization (e.g., Calcite [104], Orca [186]), and\nexecution engines (e.g., DataFusion [18], Velox [175]).We contend that the database community should strive\nfor a POSIX-like standard of DBMS internals to accel-\nerate interoperability.We caution developers to learn from history.2)\n\n\fReferences\n\n[1] TeraData Forums.https://downloads.teradata.com/forum/\ndatabase/what-is-the-difference-between-a-ynet-and-\nbynet, September 2011.[2] Netezza TwinFin Architecture.[3] Graph processing with sql server and azure sql database.https://docs.microsoft.com/en-us/sql/relational-\ndatabases/graphs/sql-graph-overview, 2021.https://www.oracle.com/a/\n\ntech/docs/georaster-2021.pdf, mar 2021.[5] Apache Hudi. https://hudi.apache.org/, 2023.[6] Apache Iceberg. https://iceberg.apache.org/, 2023.[7] Oracle introduces integrated vector database to augment\ngenerative ai and dramatically increase developer produc-\nhttps://www.oracle.com/news/announcement/ocw-\ntivity.integrated-vector-database-augments-generative-ai-\n2023-09-19/, sep 2023.[8] Introducing vector search on rockset.https://rockset.com/\nblog/introducing-vector-search-on-rockset/, apr 2023.\nhttps://docs.aerospike.com/tools/aql,\n\n[9] Aerospike AQL.2024. [10] Apache AGE. https://age.apache.org, 2024.[11] Apache Arrow. https://arrow.apache.org, 2024.[12] BigchainDB. https://www.bigchaindb.com/, 2024.[13] Brytlyt. https://brytlyt.io/, 2024.[17] Clustrix. https://clustrix.com, 2024. [18] Apache Arrow DataFusion.[21] Dremio. https://dremio.com/, 2024.[22] Apache drill. https://drill.apache.org, 2024.[23] Elasticsearch. https://www.elastic.co, 2024.[24] FAISS – Facebook AI Similarity Search.ai.facebook.com/tools/faiss/, 2024.\n\nhttps://\n\n[25] Fluree.https://flur.ee/, 2024. [26] Apache Giraph.https://giraph.apache.org, 2024. [27] Graphlab.https://en.wikipedia.org/wiki/GraphLab, 2024.[28] Apache Hbase. https://hbase.apache.org, 2024.[29] The hdf5 library & ﬁle format.https://www.hdfgroup.org/\n\nsolutions/hdf5, 2024.[33] Apache Kafka. https://kafka.apache.org/, 2024.[34] kdb+. https://kx.com/, 2024.[35] Kinetica. https://www.kinetica.com/, 2024.[39] Malloy - Experimental Language.looker-open-source/malloy, 2024.[40] Milvus. https://milvus.io/, 2024. [41] MongoDB.https://mongodb.com, 2024.\n\nhttps://github.com/\n\n[42] Mongodb – querying with sql.https://docs.mongodb.com/\n\ndatalake/admin/query-with-sql/, 2024.[43] MySQL\n\n–\n\nInnoDB Full-Text\n\nIndexes.https:\n\n//dev.mysql.com/doc/refman/8.0/en/innodb-fulltext-\nindex.html, 2024.[44] Neo4j. https://neo4j.com/, 2024. [45] Amazon Neptune.[47] Nuodb. https://nuodb.com, 2024.[48] Heavydb. https://www.heavy.ai, 2024.[49] openCypher. https://opencypher.org, 2024. [50] Oracle graph database.https://www.oracle.com/database/\n\ngraph/, 2024.\n\nlang.org/, 2024.https://pgql-\n\n[52] Oracle\n\nText.https://www.oracle.com/database/\n\ntechnologies/datawarehouse-bigdata/text.html, 2024.[53] Apache ORC. https://orc.apache.org/, 2024.[54] Paradigm4 platform overview.https://www.paradigm4.com/\n\ntechnology/scidb-platform-overview/, 2024.[55] Apache Parquet. https://parquet.apache.org/, 2024.[56] Partiql – sql-compatible access to relational, semi-structured,\n\nand nested data.https://partiql.org/, 2024. [57] Apache Phoenix.https://phoenix.apache.org, 2024.[58] Pinecone. https://www.pinecone.io/, 2024.[59] Apache Pinot. https://pinot.apache.org/, 2024.[60] PlanetScale. https://planetscale.com/, 2024.Text\n\nFull\n\nwww.postgresql.org/docs/current/textsearch.html,\n2024.\n\nhttps://\n\n[63] PrestoDB.https://\n\n[67] Redis. https://redis.io/, 2024.[68] RocksDB. https://rocksdb.org, 2024.[69] Singestore. https://www.singlestore.com/, 2024.[70] Apache Solr. https://solr.apache.org/, 2024.[71] SQLite. https://www.sqlite.org, 2024.[72] Sql++ – the next-generation query language for managing json\ndata.https://www.couchbase.com/sqlplusplus, 2024.[73] Teradata – creating an array data\n\ntype.https:\n\n//docs.teradata.com/r/S0Fw2AVH8ff3MDA0wDOHlQ/\nun3kj~t3qMDO66LF4YXuiw, 2024.[74] Tigergraph. https://www.tigergraph.com/, 2024.[75] Tigergraph – gsql. https://www.tigergraph.com/gsql/,\n\n2024.[76] Tiledb. https://tiledb.com, 2024.[77] Trino. https://trino.io/, 2024.[78] Turi. http://turi.com/, 2024.[80] Vitess. https://vitess.io, 2024. [81] Vitesse Deepgreen DB.products/deepgreen-db/, 2024.\n\nhttps://www.vitessedata.com/\n\n[82] Project Voldemort.https://www.project-voldemort.com,\n\n2024.[84] Weaviate. https://weaviate.io, 2024.[85] Dbc 1012. https://en.wikipedia.org/wiki/DBC_1012, 2024.[86] YugabyteDB. https://www.yugabyte.com/, 2024. [87] D. J. Abadi.Query Execution in Column-Oriented Database\n\nSystems.PhD thesis, MIT, 2008.\n\ndatafusion/, 2024.[19] Microsoft DiskANN. DiskANN, 2024. [20] Django\n\nHaystack.https://github.com/microsoft/\n\nhttps://django-\n\naws.amazon.com/qldb/, 2024.[66] The\n\nraster\nrasdaman\nwww.rasdaman.org, 2024.\n\narray\n\ndatabase.http://\n\nSIGMOD Record, June 2024 (Vol. 53, No.2)\n\n33\n\n\f[88] K. Affolter, K. Stockinger, and A. Bernstein.A compara-\ntive survey of recent natural language interfaces for databases.VLDB J., 28(5):793–819, 2019. doi: 10.1007/s00778-019-\n00567-8.[89] H. Ahmadi. In-memory query execution in google bigquery.https://cloud.google.com/blog/products/bigquery/in-\nmemory-query-execution-in-google-bigquery, Aug 2016.Weaving relations for cache performance.In VLDB, volume 1,\npages 169–180, 2001. [91] G. Anadiotis.Open source postgresql on steroids: Swarm64\ndatabase acceleration software for performance improvement\nhttps://www.zdnet.com/article/open-\nand analytics.[92] M. Armbrust, T. Das, L. Sun, B. Yavuz, S. Zhu, M. Murthy,\nJ. Torres, H. van Hovell, A. Ionescu, A. Łuszczak, et al.Delta\nlake: high-performance acid table storage over cloud object\nstores.[93] M. Armbrust, A. Ghodsi, R. Xin, and M. Zaharia.Lakehouse:\na new generation of open platforms that unify data warehousing\nand advanced analytics.Amazon redshift re-invented. In Proceedings of the 2022 Inter-\nnational Conference on Management of Data, SIGMOD ’22,\npages 2205–2217, 2022. doi: 10.1145/3514221.3526045.[95] M. Aslett. How will the database incumbents respond to\n\nNoSQL and NewSQL?Ten years of NewSQL: Back to the future of dis-\ntributed relational databases.The 451 Group, June 2021. [97] S. Babu and P. Bizarro.Adaptive query processing in the look-\n\ning glass.In CIDR, pages 238–249, January 2005.Spanner: Becoming a sql system.ceedings of the 2017 ACM International Conference on Man-\nagement of Data, SIGMOD ’17, pages 331–343, 2017. doi:\n10.1145/3035918.3056103.[99] J. Baker, C. Bond, J. C. Corbett, J. Furman, A. Khorlin, J. Lar-\nson, J.-M. Leon, Y. Li, A. Lloyd, and V. Yushprakh.Megastore:\nProviding scalable, highly available storage for interactive ser-\nIn Proceedings of the Conference on Innovative Data\nvices.system Research (CIDR), pages 223–234, 2011.[100] N. Bakibayev, D. Olteanu, and J. Závodný.VLDB Endow., 5\n(11):1232–1243, jul 2012. doi: 10.14778/2350229.2350242. [101] S. Banon.Amazon: NOT OK - why we had to change Elas-\nhttps://www.elastic.co/blog/why-license-\n\ntic licensing.change-aws, jan 2021. [102] J. Barr.A Speed Boost\nhttps://aws.amazon.com/blogs/aws/new-aqua-advanced-\nquery-accelerator-for-amazon-redshift/, Apr 2021.[103] P. Baumann. A database array algebra for spatio-temporal data\nand beyond.In Next Generation Information Technologies and\nSystems, 4th International Workshop, NGITS’99, volume 1649\nof Lecture Notes in Computer Science, pages 76–93, 1999. doi:\n10.1007/3-540-48521-X_7.[104] E. Begoli, J. Camacho-Rodríguez, J. Hyde, M. J. Mior, and\nD. Lemire.Apache calcite: A foundational framework for\noptimized query processing over heterogeneous data sources.[105] A. Behm, S. Palkar, U. Agarwal, T. Armstrong, D. Cashman,\nA. Dave, T. Greenstein, S. Hovsepian, R. Johnson, A. Sai Krish-\nnan, P. Leventis, A. Luszczak, P. Menon, M. Mokhtar, G. Pang,\nS. Paranjpye, G. Rahn, B. Samwel, T. van Bussel, H. van Hov-\nell, M. Xue, R. Xin, and M. Zaharia.Photon: A fast query\nengine for lakehouse systems.In Proceedings of the 2022 In-\nternational Conference on Management of Data, SIGMOD ’22,\npages 2326–2339, 2022. doi: 10.1145/3514221.3526054.[106] P. A. Boncz, M. Zukowski, and N. Nes.Monetdb/x100: Hyper-\n\npipelining query execution.ongoing/When/202x/2022/11/19/AWS-Blockchain,\n2019.\\\n\n[109] P. Carbone, A. Katsifodimos, S. Ewen, V. Markl, S. Haridi, and\nK. Tzoumas.[110] R. Cattell. Scalable sql and nosql data stores.SIGMOD Rec.,\n\n39:12–27, 2011. [111] F. Chang, J.Dean, S. Ghemawat, W. C. Hsieh, D. A. Wallach,\nM. Burrows, T. Chandra, A. Fikes, and R. E. Gruber.Bigtable:\nA distributed storage system for structured data.In Proceedings\nof the USENIX Symposium on Operating Systems Design and\nImplementation, OSDI ’06, pages 205–218, 2006.Rethinking database system ar-\nchitecture: Towards a self-tuning risc-style database system.In\nVLDB 2000, Proceedings of 26th International Conference on\nVery Large Data Bases, pages 1–10, 2000.[113] C. Chin. The rise and fall of the olap cube.https:\n\n//www.holistics.io/blog/the-rise-and-fall-of-the-\nolap-cube/, January 2020.[114] M. Chock, A. F. Cardenas, and A. Klinger.Database struc-\nture and manipulation capabilities of a picture database man-\nagement system (picdms).[115] E. F. Codd. A relational model of data for large shared\ndata banks.Commun. ACM, 13(6):377–387, jun 1970. doi:\n10.1145/362384.362685.[116] E. F. Codd. Further normalization of the data base relational\nmodel.Research Report / RJ / IBM / San Jose, California,\nRJ909, 1971.Are you sure you want to use\nMMAP in your database management system?In Conference\non Innovative Data Systems Research. www.cidrdb.org, 2022.[121] B. Dageville, T. Cruanes, M. Zukowski, V. Antonov, A. Avanes,\nJ. Bock, J. Claybaugh, D. Engovatov, M. Hentschel, J. Huang,\nA. W. Lee, A. Motivala, A. Q. Munir, S. Pelley, P. Povinec,\nG. Rahn, S. Triantafyllis, and P. Unterbrunner.The snowﬂake\nIn Proceedings of the 2016 Inter-\nelastic data warehouse.national Conference on Management of Data, SIGMOD ’16,\npages 215–226, 2016. doi: 10.1145/2882903.2903741.[122] J. Dean and S. Ghemawat.MapReduce: Simpliﬁed data pro-\ncessing on large clusters.In 6th Symposium on Operating Sys-\ntems Design & Implementation (OSDI 04).USENIX Associa-\ntion, Dec. 2004.34\n\nSIGMOD Record, June 2024 (Vol.53, No. 2)\n\n\f[123] J. Dean and S. Ghemawat.Mapreduce: A ﬂexible data process-\n\ning tool.Commun. ACM, 53(1):72–77, Jan. 2010. [124] A. Dearmer.Storing apache hadoop data on the cloud - hdfs\nhttps://www.xplenty.com/blog/storing-apache-\n\nvs. s3.hadoop-data-cloud-hdfs-vs-s3/, November 2019.Dynamo: Amazon’s highly available key-value store.SIGOPS Oper. Syst. Rev., 41(6):205–220, oct 2007.[126] A. Deutsch, N. Francis, A.Green, K. Hare, B. Li, L. Libkin,\nT. Lindaaker, V. Marsault, W. Martens, J. Michels, F. Murlak,\nS. Plantikow, P. Selmer, O. van Rest, H. Voigt, D. Vrgoˇc,\nM. Wu, and F. Zemke.[127] D. DeWitt and J. Gray. Parallel database systems: The future\nof high performance database systems.Commun. ACM, 35(6):\n85–98, jun 1992. doi: 10.1145/129888.129894.[128] C. Diaconu, C. Freedman, E. Ismert, P. Larson, P. Mit-\ntal, R. Stonecipher, N. Verma, and M. Zwilling.Hekaton:\nIn Proceed-\nSQL server’s memory-optimized OLTP engine.ings of the ACM SIGMOD International Conference on Man-\ndoi: 10.1145/\nagement of Data, pages 1243–1254, 2013. 2463676.2463710.Amazon DynamoDB: A scalable, predictably perfor-\nmant, and fully managed NoSQL database service.In USENIX\nAnnual Technical Conference, pages 1037–1048, July 2022.[130] J. Fan, A. G. S. Raj, and J. M. Patel.In Seventh Biennial Conference\non Innovative Data Systems Research, CIDR, 2015.[131] B. Fitzpatrick. Distributed caching with memcached.Linux J.,\n\n2004(124):5, aug 2004. ISSN 1075–3583.[132] M. Freitag, M. Bandle, T. Schmidt, A. Kemper, and T. Neu-\nmann.Adopting worst-case optimal joins in relational database\nsystems. Proc.[133] H. Fu, C. Liu, B. Wu, F. Li, J. Tan, and J. Sun.Catsql: To-\nwards real world natural language to sql applications. Proc.VLDB Endow., 16(6):1534–1547, feb 2023. doi: 10.14778/\n3583140.3583165.[134] S. Ghemawat, H. Gobioff, and S.-T. Leung.The google ﬁle\nsystem. SIGOPS Oper.Syst. Rev., 37(5):29–43, oct 2003.ISSN\n0163-5980. doi: 10.1145/1165389.945450. [135] J.Gray, A. Bosworth, A. Layman, and H. Pirahesh.Data\ncube: A relational aggregation operator generalizing group-by,\nIn Proceedings of the International\ncross-tab, and sub-total.Conference on Data Engineering, pages 152–159, 1996. doi:\n10.1109/ICDE.1996.492099.[136] S. Gupta, S. Rahnama, J. Hellings, and M. Sadoghi.Re-\nProc. silientdb: Global scale resilient blockchain fabric.10.14778/\nVLDB Endow., 13(6):868–883, 2020.3380750.3380757.\n\ndoi:\n\n[137] E. Hanson and A. Comet.Why Your Vector Database Should\nNot be a Vector Database.https://www.singlestore.com/\nblog/why-your-vector-database-should-not-be-a-\nvector-database/, April 2023.[138] G. Harrison. How WiredTiger Revolutionized MongoDB.https://www.dbta.com/Columns/MongoDB-Matters/How-\nWiredTiger-Revolutionized-MongoDB-145510.aspx,\n2021.\n\nmar\n\n[139] G. G. Hendrix, E. D. Sacerdoti, D. Sagalowicz, and J. Slocum.Database Syst., 3(2):105–147, jun 1978. doi: 10.1145/\n320251.320253. [140] Y. Huai, A. Chauhan, A.[141] D. Huang, Q. Liu, Q. Cui, Z. Fang, X. Ma, F. Xu, L. Shen,\nL. Tang, Y. Zhou, M. Huang, W. Wei, C. Liu, J. Zhang,\nJ. Li, X. Wu, L. Song, R. Sun, S. Yu, L. Zhao, N. Cameron,\nL. Pei, and X. Tang.John Wiley & Sons,\n\nInc., 1962. ISBN 0471430145.[143] A. Jindal, S. Madden, M. Castellanos, and M. Hsu.Hyper: A hybrid oltp&olap main\nmemory database system based on virtual memory snapshots.[147] T. Kersten, V. Leis, A. Kemper, T. Neumann, A. Pavlo, and\nP. Boncz.Everything you always wanted to know about com-\npiled and vectorized queries but were afraid to ask.Proc. VLDB Endow., 11(13):2209–2222, jan 2019. doi: 10.14778/\n3275366.3284966. [148] R. Kimball.John Wiley, 1996. [149] R. Kimball and K. Strehlo.SIGMOD Rec., 24(3):92–97, 1995.[150] M. Kornacker, A. Behm, V. Bittorf, T. Bobrovytsky, C. Ching,\nA. Choi, J. Erickson, M. Grund, D. Hecht, M. Jacobs, I. Joshi,\nL. Kuff, D. Kumar, A. Leblang, N. Li, I. Pandis, H. Robinson,\nD. Rorke, S. Rus, J. Russell, D. Tsirogiannis, S. Wanderman-\nMilne, and M. Yoder.Impala: A modern, open-source sql en-\ngine for hadoop.In CIDR, 2015. [151] T. Kraska, A. Beutel, E. H. Chi, J.Dean, and N. Polyzotis. The\ncase for learned index structures.In Proceedings of the 2018\nInternational Conference on Management of Data, SIGMOD\n’18, pages 489–504, 2018. doi: 10.1145/3183713.3196909.Learning to optimize join queries with deep reinforcement\nlearning, 2018.URL https://arxiv.org/abs/1808.03196. [153] F. Lardinois.Aws gives open source the middle ﬁn-\nger.https://techcrunch.com/2019/01/09/aws-gives-open-\nsource-the-middle-finger/, jan 2019.How good are query optimizers, really?doi: 10.14778/\nProc. VLDB Endow., 9(3):204–215, 2015.2850583.2850594. [155] D. Maier and B. Vance. A call to order.[156] R. Marcus, P. Negi, H. Mao, N. Tatbul, M. Alizadeh, and\nT. Kraska.Bao: Making learned query optimization practical.In Proceedings of the 2021 International Conference on Man-\nagement of Data, SIGMOD ’21, pages 1275–1288, 2021. doi:\n10.1145/3448016.3452838.https://\nclickhouse.com/blog/vector-search-clickhouse-p2, May\n2023.SIGMOD Record, June 2024 (Vol.53, No. 2)\n\n35\n\n\f[158] C. McDonnell.The graph-relational database, deﬁned.https://www.edgedb.com/blog/the-graph-relational-\ndatabase-defined, March 2022.[159] W. McKinney et al. Data structures for statistical computing\nin python.In Proceedings of the 9th Python in Science Confer-\nence, volume 445, pages 51–56, 2010.[160] F. McSherry. Scalability! but at what cost?http:\n\n//www.frankmcsherry.org/graph/scalability/cost/2015/\n01/15/COST.html, January 2015.[161] S. Melnik, A. Gubarev, J. J.Long, G. Romer, S. Shivakumar,\nM. Tolton, and T. Vassilakis.Dremel: Interactive analysis of\nweb-scale datasets.Proc. VLDB Endow., 3(12):330–339, sep\n2010.ISSN 2150-8097. doi: 10.14778/1920841.1920886.[162] S. Melnik, A. Gubarev, J. J.Long, G. Romer, S. Shivakumar,\nM. Tolton, T. Vassilakis, H. Ahmadi, D. Delorey, S. Min, M. Pa-\nsumansky, and J. Shute.Dremel: A decade of interactive sql\nanalysis at web scale.Proc. VLDB Endow., 13(12):3461–3472,\naug 2020.ISSN 2150-8097. doi: 10.14778/3415478.3415568.Per-\nmutable compiled queries: Dynamically adapting compiled\nqueries without recompiling.Proc. VLDB Endow., 14(2):101–\n113, 2020. doi: 10.14778/3425879.3425882.[164] C. Metz. duce. google_caffeine_explained/, September 2010.Google search index splits with mapre-\nhttps://www.theregister.com/2010/09/09/\n\n[165] J. Michels, K. Hare, K. Kulkarni, C. Zuzarte, Z. H. Liu,\nB. Hammerschmidt, and F. Zemke.The new and improved sql:\n2016 standard.SIGMOD Rec., 47(2):51–60, dec 2018. doi:\n10.1145/3299887.3299897.[166] D. Misev and P. Baumann.Sql support for multidimen-\nsional arrays.Technical Report 34, Jacobs University, July\n2017.[167] F. Nargesian, E. Zhu, R. J. Miller, K. Q. Pu, and P. C. Arocena.Data lake management: Challenges and opportunities. Proc.VLDB Endow., 12(12):1986–1989, aug 2019. doi: 10.14778/\n3352063.3352116.[168] H. Q. Ngo, C. Ré, and A. Rudra.Skew strikes back: New\ndevelopments in the theory of join algorithms.SIGMOD Rec.,\n42(4):5–16, feb 2014. doi: 10.1145/2590989.2590991.[169] NVIDIA, P. Vingelmann, and F. H. Fitzek. Cuda toolkit.https:\n\n//developer.nvidia.com/cuda-toolkit, 2020.In Pro-\nceedings of the FREENIX Track: 1999 USENIX Annual Tech-\nnical Conference, pages 183–191, 1999.[171] A. Pavlo and M. Aslett. What’s really new with newsql?SIG-\n\nMOD Record, 45(2):45–55, Sep 2016.[172] A. Pavlo, E. Paulson, A. Rasin, D. J. Abadi, D. J. DeWitt,\nS. Madden, and M. Stonebraker.A comparison of approaches\nto large-scale data analysis.[173] A. Pavlo, G. Angulo, J. Arulraj, H. Lin, J. Lin, L. Ma, P. Menon,\nT. Mowry, M. Perron, I. Quah, S. Santurkar, A. Tomasic,\nS. Toor, D. V. Aken, Z. Wang, Y. Wu, R. Xian, and T. Zhang.In CIDR 2017,\nSelf-driving database management systems.Conference on Innovative Data Systems Research, 2017.[174] A. Pavlo, M. Butrovich, A. Joshi, L. Ma, P. Menon, D. V. Aken,\nL. Lee, and R. Salakhutdinov.External vs. internal: An essay\non machine learning agents for autonomous database manage-\nment systems.IEEE Data Eng. Bull., 42(2):32–46, 2019.Velox: Meta’s uniﬁed\nexecution engine. Proc.VLDB Endow., 15(12):3372–3384, aug\n2022. doi: 10.14778/3554821.3554829.[176] P. Pedreira, O. Erling, K. Karanasos, S. Schneider, W. McK-\ninney, S. R. Valluri, M. Zait, and J. Nadeau.The composable\ndata management system manifesto. Proc.VLDB Endow., 16\n(10):2679–2685, jun 2023. doi: 10.14778/3603581.3603604.[177] D. Petersohn, S. Macke, D. Xin, W. Ma, D. Lee, X. Mo,\nJ. E. Gonzalez,\nJ. M. Hellerstein, A. D. Joseph, and\nA. Parameswaran.Towards scalable dataframe systems. Proc.BASE: An Acid Alternative:\n\nIn Partitioned\nDatabases, Trading Some Consistency for Availability Can\nLead to Dramatic Improvements in Scalability.ACM Queue,\n6(3):48–55, may 2008. doi: 10.1145/1394127.1394128.[180] M. Raasveldt and H. Mühleisen.Duckdb: An embeddable ana-\nlytical database.In Proceedings of the 2019 International Con-\nference on Management of Data, SIGMOD ’19, pages 1981–\n1984, 2019. doi: 10.1145/3299869.3320212.[181] M. Rocklin. Dask: Parallel computation with blocked algo-\nrithms and task scheduling.In Proceedings of the 14th Python\nin Science Conference, pages 130–136, 2015.[183] S. Sakr, A. Bonifati, H. Voigt, A. Iosup, K. Ammar, R. An-\ngles, W. Aref, M. Arenas, M. Besta, P. A. Boncz, K. Daudjee,\nE. D. Valle, S. Dumbrava, O. Hartig, B. Haslhofer, T. Hege-\nman, J. Hidders, K. Hose, A. Iamnitchi, V. Kalavri, H. Kapp,\nW. Martens, M. T. Özsu, E. Peukert, S. Plantikow, M. Ragab,\nM. R. Ripeanu, S. Salihoglu, C. Schulz, P. Selmer, J. F. Se-\nqueda, J. Shinavier, G. Szárnyas, R. Tommasini, A. Tumeo,\nA. Uta, A. L. Varbanescu, H.-Y.Wu, N. Yakovets, D. Yan, and\nE. Yoneki.The future is big graphs: A community view on\ngraph processing systems.Commun. ACM, 64(9):62–71, aug\n2021. doi: 10.1145/3434642.[184] G. Salton and M. E. Lesk.The smart automatic document re-\ntrieval systems–an illustration.Commun. ACM, 8(6):391–398,\njun 1965. doi: 10.1145/364955.364990.Sun, N. Yegitbasi, H. Jin, E. Hwang, N. Shingte, and\nIn 2019 IEEE 35th\nC. Berner. Presto: Sql on everything.International Conference on Data Engineering (ICDE), pages\n1802–1813, 2019. doi: 10.1109/ICDE.2019.00196.[186] M. A. Soliman, L. Antova, V. Raghavan, A. El-Helw, Z. Gu,\nE. Shen, G. C. Caragea, C. Garcia-Alvarado, F. Rahman,\nM. Petropoulos, F. Waas, S. Narayanan, K. Krikellas, and\nR. Baldwin.Orca: a modular query optimizer architecture for\nIn Proceedings of the 2014 ACM SIGMOD Inter-\nbig data.national Conference on Management of Data, SIGMOD ’14,\npages 337–348, 2014. doi: 10.1145/2588555.2595637.[187] M. Stonebraker. The case for polystores.https://\n\nwp.sigmod.org/?p=1629, 2015.[188] M. Stonebraker and J. Hellerstein.Readings in Database Sys-\ntems, chapter What Goes Around Comes Around, pages 2–41. 4th edition, 2005.[189] M. Stonebraker, S. Madden, D. J. Abadi, S. Harizopoulos,\nN. Hachem, and P. Helland.The end of an architectural era:\n(it’s time for a complete rewrite).In Proceedings of the 33rd\nInternational Conference on Very Large Data Bases, VLDB\n’07, pages 1150–1160.VLDB Endowment, 2007. [190] M. Stonebraker, D. Abadi, D. J. DeWitt, S. Madden, E. Paulson,\nA. Pavlo, and A. Rasin.Mapreduce and parallel dbmss: Friends\nor foes?Commun. ACM, 53(1):64–71, Jan. 2010.[191] M. Stonebraker, P. Brown, A. Poliakov, and S. Raman. The ar-\nchitecture of scidb.In Scientiﬁc and Statistical Database Man-\nagement - 23rd International Conference, SSDBM 2011, vol-\nume 6809 of Lecture Notes in Computer Science, pages 1–16.Performance issues in mid-sized relational\ndatabase machines.Master’s thesis, Rochester Institute of Tech-\nnology, 1989.\\\n\n36\n\nSIGMOD Record, June 2024 (Vol.53, No. 2)\n\n\f[193] Z. Sun, X. Zhou, and G. Li.Learned index: A comprehen-\nsive experimental evaluation. Proc.VLDB Endow., 16(8):1992–\n2004, apr 2023. doi: 10.14778/3594512.3594528.Google\n\ndumps mapreduce\n\n[194] Y.\n\nSverdlik.in\nfa-\nhttps:\n\nvor of new hyper-scale\n//www.datacenterknowledge.com/archives/2014/06/\n25/google-dumps-mapreduce-favor-new-hyper-scale-\nanalytics-system, June 2014.\n\nanalytics\n\nsystem.[195] R. Taft, I. Sharif, A. Matei, N. VanBenschoten, J. Lewis,\nT. Grieger, K. Niemi, A.Woods, A. Birzin, R. Poss, P. Bardea,\nA. Ranade, B. Darnell, B. Gruneir, J. Jaffray, L. Zhang, and\nP. Mattis.Cockroachdb: The resilient geo-distributed SQL\ndatabase.In Proceedings of the 2020 International Conference\non Management of Data, SIGMOD, pages 1493–1509, 2020.\ndoi: 10.1145/3318464.3386134.[196] D. ten Wolde, T. Singh, G. Szarnyas, and P. Boncz.Duckpgq:\nEfﬁcient property graph queries in an analytical\nrdbms.In CIDR, 2023. URL https://www.cidrdb.org/cidr2023/\npapers/p66-wolde.pdf.[197] A. Thusoo, J. S. Sarma, N. Jain, Z. Shao, P. Chakka, N. Zhang,\nS. Antony, H. Liu, and R. Murthy.Hive - a petabyte scale\ndata warehouse using hadoop.In International Conference on\nData Engineering (ICDE 2010), pages 996–1005, 2010. doi:\n10.1109/ICDE.2010.5447738.[198] E. Totoni, T. A. Anderson, and T. Shpeisman.HPAT: high per-\nformance analytics with scripting ease-of-use.In Proceedings\n\nof the International Conference on Supercomputing, pages 9:1–\n9:10, 2017. doi: 10.1145/3079079.3079099.[199] T. Trautmann. database. relational-database, September 2021.Understanding the document-relational\nhttps://fauna.com/blog/what-is-a-document-\n\n[200] D. Van Aken, A. Pavlo, G. J. Gordon, and B. Zhang.Auto-\nmatic database management system tuning through large-scale\nIn Proceedings of the 2017 ACM Inter-\nmachine learning.[201] M. Zaharia, R. S. Xin, P. Wendell, T. Das, M. Armbrust,\nA. Dave, X. Meng, J. Rosen, S. Venkataraman, M. J. Franklin,\nA. Ghodsi, J. Gonzalez, S. Shenker, and I. Stoica.[202] C. Zaniolo. The database language GEM.In SIGMOD, pages\n\n207–218, 1983.[203] X. Zeng, Y. Hui, J. Shen, A. Pavlo, W. McKinney, and\nH. Zhang.An empirical evaluation of columnar storage for-\nmats.Proc. VLDB Endow., 17(2):148–161, 2023.URL https:\n//www.vldb.org/pvldb/vol17/p148-zeng.pdf.Facilitating database tuning with hyper-parameter op-\ntimization: a comprehensive experimental evaluation.SIGMOD Record, June 2024 (Vol. 53, No. 2)\n\n37",
          "time": 1343.3243913650513,
          "input_token_size": 26194,
          "output_token_size": 80,
          "original_provenance_id": 0
        }
      ],
      "metadata": {
        "question_id": "whatgoesaround-sigmodrec2024_46495ef4",
        "created_at": 1750200146.2372258,
        "processing_time": 1348.062891960144,
        "processing_complete": true,
        "max_provenances": 5
      },
      "source_info": {
        "selected_from": "test_outputs",
        "reason": "shorter_provenance",
        "sentence_count": 964,
        "provenance_count": 1,
        "alternatives": [
          {
            "source": "test_outputs",
            "sentence_count": 964,
            "provenance_count": 1,
            "has_answer": true
          }
        ],
        "selection_timestamp": "2025-06-17T16:48:52.923915"
      }
    }
  },
  {
    "4b1ceddf": {
      "question": "What significant technological advancement does Apache Spark provide?",
      "answer": "Answer is not found.",
      "provenance": [],
      "metadata": {
        "question_id": "whatgoesaround-sigmodrec2024_4b1ceddf",
        "created_at": 1750200255.5263214,
        "processing_time": 1.1905510425567627,
        "processing_complete": true,
        "max_provenances": 5
      },
      "source_info": {
        "selected_from": "test_outputs",
        "reason": "default",
        "sentence_count": 999999,
        "provenance_count": 0,
        "alternatives": [
          {
            "source": "test_outputs",
            "sentence_count": 999999,
            "provenance_count": 0,
            "has_answer": true
          }
        ],
        "selection_timestamp": "2025-06-17T16:48:52.924914"
      }
    }
  },
  {
    "5644b3c1": {
      "question": "Which database system is known for utilizing FPGAs?",
      "answer": "Netezza",
      "provenance": [
        {
          "provenance_id": 0,
          "input_sentence_ids": [
            361,
            362,
            363,
            364,
            365,
            366,
            367,
            368,
            369,
            370,
            371,
            372,
            373,
            374,
            375,
            376,
            377,
            378,
            379,
            380,
            381,
            382,
            383,
            384,
            385,
            386,
            387,
            388,
            389,
            390,
            391,
            392,
            393,
            394,
            395,
            396,
            397,
            398,
            399,
            400,
            401,
            402,
            403,
            404,
            405,
            406,
            407,
            408,
            409,
            410,
            411,
            412,
            413,
            414,
            415,
            416,
            417,
            418,
            419,
            420,
            421,
            422,
            423,
            424,
            425,
            426,
            427,
            428,
            429,
            430,
            431,
            432,
            433,
            434,
            435,
            436,
            437,
            438,
            439,
            440,
            441,
            442,
            443,
            444,
            445,
            446,
            447,
            448,
            449,
            450,
            451,
            452,
            453,
            454,
            455,
            456,
            457,
            458,
            459,
            460,
            461,
            462,
            463,
            464,
            465,
            466,
            467,
            468,
            469,
            470,
            471,
            472,
            473,
            474,
            475,
            476,
            477,
            478,
            479,
            480,
            481
          ],
          "provenance_ids": [
            399,
            410,
            412,
            413,
            415,
            416
          ],
          "provenance": "These include TiDB [141],\nCockroachDB [195], PlanetScale [60] (based on the\nVitess sharding middleware [80]), and YugabyteDB [86].All other custom hard-\nware DBMS acceleration during the 1980s failed.This is an\nenticing idea: a vendor can get the beneﬁts of a DBMS\naccelerator without the cost of fabricating the hardware.Netezza was one of the ﬁrst FPGA-based DBMSs\nthat started in the late 1990s as a fork of PostgreSQL.Netezza corrected this limitation in a later version [2].Swarm64 attempted to sell a FPGA accelerator for Post-\ngreSQL but switched to a software-only architecture\nwithout the FPGA before they were acquired [91].",
          "time": 23.49573850631714,
          "input_token_size": 27234,
          "output_token_size": 17,
          "original_provenance_id": 0
        }
      ],
      "metadata": {
        "question_id": "whatgoesaround-sigmodrec2024_5644b3c1",
        "created_at": 1749870206.2246356,
        "processing_time": 48.653952836990356,
        "processing_complete": true,
        "max_provenances": 5
      },
      "source_info": {
        "selected_from": "test_outputs_prev1",
        "reason": "shorter_provenance",
        "sentence_count": 121,
        "provenance_count": 1,
        "alternatives": [
          {
            "source": "test_outputs_prev1",
            "sentence_count": 121,
            "provenance_count": 1,
            "has_answer": true
          }
        ],
        "selection_timestamp": "2025-06-17T16:48:52.924914"
      }
    }
  },
  {
    "5957985f": {
      "question": "Who are the authors of the document titled 'What Goes Around Comes Around... And Around...'?",
      "answer": "Michael Stonebraker  \nAndrew Pavlo",
      "provenance": [
        {
          "provenance_id": 0,
          "input_sentence_ids": [
            0,
            1,
            2
          ],
          "provenance_ids": [
            0
          ],
          "provenance": "What Goes Around Comes Around... And Around...\n\nMichael Stonebraker\nMassachusetts Institute of Technology\nstonebraker@csail.mit.edu\n\nAndrew Pavlo\nCarnegie Mellon University\npavlo@cs.cmu.edu\n\nABSTRACT\nTwo decades ago, one of us co-authored a paper com-\nmenting on the previous 40 years of data modelling re-\nsearch and development [188].",
          "time": 5.68252158164978,
          "input_token_size": 30090,
          "output_token_size": 67,
          "original_provenance_id": 0
        }
      ],
      "metadata": {
        "question_id": "whatgoesaround-sigmodrec2024_5957985f",
        "created_at": 1750200131.5240512,
        "processing_time": 12.142768383026123,
        "processing_complete": true,
        "max_provenances": 5
      },
      "source_info": {
        "selected_from": "test_outputs",
        "reason": "shorter_provenance",
        "sentence_count": 3,
        "provenance_count": 1,
        "alternatives": [
          {
            "source": "test_outputs",
            "sentence_count": 3,
            "provenance_count": 1,
            "has_answer": true
          }
        ],
        "selection_timestamp": "2025-06-17T16:48:52.924914"
      }
    }
  },
  {
    "5b003fdb": {
      "question": "How do document databases compare with traditional RDBMSs according to the document?",
      "answer": "- Document databases are on a collision course with RDBMSs.\n- The differences between document databases and RDBMSs have diminished over time and should become nearly indistinguishable in the future.",
      "provenance": [
        {
          "provenance_id": 0,
          "input_sentence_ids": [
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            11,
            12,
            13,
            14,
            15,
            16,
            17,
            18,
            19,
            20,
            21,
            22,
            23,
            24,
            25,
            26,
            27,
            28,
            29,
            30,
            31,
            32,
            33,
            34,
            35,
            36,
            37,
            38,
            39,
            40,
            41,
            42,
            43,
            44,
            45,
            46,
            47,
            48,
            49,
            50,
            51,
            52,
            53,
            54,
            55,
            56,
            57,
            58,
            59,
            60,
            61,
            62,
            63,
            64,
            65,
            66,
            67,
            68,
            69,
            70,
            71,
            72,
            73,
            74,
            75,
            76,
            77,
            78,
            79,
            80,
            81,
            82,
            83,
            84,
            85,
            86,
            87,
            88,
            89,
            90,
            91,
            92,
            93,
            94,
            95,
            96,
            97,
            98,
            99,
            100,
            101,
            102,
            103,
            104,
            105,
            106,
            107,
            108,
            109,
            110,
            111,
            112,
            113,
            114,
            115,
            116,
            117,
            118,
            119,
            120,
            121,
            122,
            123,
            124,
            125,
            126,
            127,
            128,
            129,
            130,
            131,
            132,
            133,
            134,
            135,
            136,
            137,
            138,
            139,
            140,
            141,
            142,
            143,
            144,
            145,
            146,
            147,
            148,
            149,
            150,
            151,
            152,
            153,
            154,
            155,
            156,
            157,
            158,
            159,
            160,
            161,
            162,
            163,
            164,
            165,
            166,
            167,
            168,
            169,
            170,
            171,
            172,
            173,
            174,
            175,
            176,
            177,
            178,
            179,
            180,
            181,
            182,
            183,
            184,
            185,
            186,
            187,
            188,
            189,
            190,
            191,
            192,
            193,
            194,
            195,
            196,
            197,
            198,
            199,
            200,
            201,
            202,
            203,
            204,
            205,
            206,
            207,
            208,
            209,
            210,
            211,
            212,
            213,
            214,
            215,
            216,
            217,
            218,
            219,
            220,
            221,
            222,
            223,
            224,
            225,
            226,
            227,
            228,
            229,
            230,
            231,
            232,
            233,
            234,
            235,
            236,
            237,
            238,
            239,
            240,
            241,
            242,
            243,
            244,
            245,
            246,
            247,
            248,
            249,
            250,
            251,
            252,
            253,
            254,
            255,
            256,
            257,
            258,
            259,
            260,
            261,
            262,
            263,
            264,
            265,
            266,
            267,
            268,
            269,
            270,
            271,
            272,
            273,
            274,
            275,
            276,
            277,
            278,
            279,
            280,
            281,
            282,
            283,
            284,
            285,
            286,
            287,
            288,
            289,
            290,
            291,
            292,
            293,
            294,
            295,
            296,
            297,
            298,
            299,
            300,
            301,
            302,
            303,
            304,
            305,
            306,
            307,
            308,
            309,
            310,
            311,
            312,
            313,
            314,
            315,
            316,
            317,
            318,
            319,
            320,
            321,
            322,
            323,
            324,
            325,
            326,
            327,
            328,
            329,
            330,
            331,
            332,
            333,
            334,
            335,
            336,
            337,
            338,
            339,
            340,
            341,
            342,
            343,
            344,
            345,
            346,
            347,
            348,
            349,
            350,
            351,
            352,
            353,
            354,
            355,
            356,
            357,
            358,
            359,
            360,
            361,
            362,
            363,
            364,
            365,
            366,
            367,
            368,
            369,
            370,
            371,
            372,
            373,
            374,
            375,
            376,
            377,
            378,
            379,
            380,
            381,
            382,
            383,
            384,
            385,
            386,
            387,
            388,
            389,
            390,
            391,
            392,
            393,
            394,
            395,
            396,
            397,
            398,
            399,
            400,
            401,
            402,
            403,
            404,
            405,
            406,
            407,
            408,
            409,
            410,
            411,
            412,
            413,
            414,
            415,
            416,
            417,
            418,
            419,
            420,
            421,
            422,
            423,
            424,
            425,
            426,
            427,
            428,
            429,
            430,
            431,
            432,
            433,
            434,
            435,
            436,
            437,
            438,
            439,
            440,
            441,
            442,
            443,
            444,
            445,
            446,
            447,
            448,
            449,
            450,
            451,
            452,
            453,
            454,
            455,
            456,
            457,
            458,
            459,
            460,
            461,
            462,
            463,
            464,
            465,
            466,
            467,
            468,
            469,
            470,
            471,
            472,
            473,
            474,
            475,
            476,
            477,
            478,
            479,
            480,
            481,
            482,
            483,
            484,
            485,
            486,
            487,
            488,
            489,
            490,
            491,
            492,
            493,
            494,
            495,
            496,
            497,
            498,
            499,
            500,
            501,
            502,
            503,
            504,
            505,
            506,
            507,
            508,
            509,
            510,
            511,
            512,
            513,
            514,
            515,
            516,
            517,
            518,
            519,
            520,
            521,
            522,
            523,
            524,
            525,
            526,
            527,
            528,
            529,
            530,
            531,
            532,
            533,
            534,
            535,
            536,
            537,
            538,
            539,
            540,
            541,
            542,
            543,
            544,
            545,
            546,
            547,
            548,
            549,
            550,
            551,
            552,
            553,
            554,
            555,
            556,
            557,
            558,
            559,
            560,
            561,
            562,
            563,
            564,
            565,
            566,
            567,
            568,
            569,
            570,
            571,
            572,
            573,
            574,
            575,
            576,
            577,
            578,
            579,
            580,
            581,
            582,
            583,
            584,
            585,
            586,
            587,
            588,
            589,
            590,
            591,
            592,
            593,
            594,
            595,
            596,
            597,
            598,
            599,
            600,
            601,
            602,
            603,
            604,
            605,
            606,
            607,
            608,
            609,
            610,
            611,
            612,
            613,
            614,
            615,
            616,
            617,
            618,
            619,
            620,
            621,
            622,
            623,
            624,
            625,
            626,
            627,
            628,
            629,
            630,
            631,
            632,
            633,
            634,
            635,
            636,
            637,
            638,
            639,
            640,
            641,
            642,
            643,
            644,
            645,
            646,
            647,
            648,
            649,
            650,
            651,
            652,
            653,
            654,
            655,
            656,
            657,
            658,
            659,
            660,
            661,
            662,
            663,
            664,
            665,
            666,
            667,
            668,
            669,
            670,
            671,
            672,
            673,
            674,
            675,
            676,
            677,
            678,
            679,
            680,
            681,
            682,
            683,
            684,
            685,
            686,
            687,
            688,
            689,
            690,
            691,
            692,
            693,
            694,
            695,
            696,
            697,
            698,
            699,
            700,
            701,
            702,
            703,
            704,
            705,
            706,
            707,
            708,
            709,
            710,
            711,
            712,
            713,
            714,
            715,
            716,
            717,
            718,
            719,
            720,
            721,
            722,
            723,
            724,
            725,
            726,
            727,
            728,
            729,
            730,
            731,
            732,
            733,
            734,
            735,
            736,
            737,
            738,
            739,
            740,
            741,
            742,
            743,
            744,
            745,
            746,
            747,
            748,
            749,
            750,
            751,
            752,
            753,
            754,
            755,
            756,
            757,
            758,
            759,
            760,
            761,
            762,
            763,
            764,
            765,
            766,
            767,
            768,
            769,
            770,
            771,
            772,
            773,
            774,
            775,
            776,
            777,
            778,
            779,
            780,
            781,
            782,
            783,
            784,
            785,
            786,
            787,
            788,
            789,
            790,
            791,
            792,
            793,
            794,
            795,
            796,
            797,
            798,
            799,
            800,
            801,
            802,
            803,
            804,
            805,
            806,
            807,
            808,
            809,
            810,
            811,
            812,
            813,
            814,
            815,
            816,
            817,
            818,
            819,
            820,
            821,
            822,
            823,
            824,
            825,
            826,
            827,
            828,
            829,
            830,
            831,
            832,
            833,
            834,
            835,
            836,
            837,
            838,
            839,
            840,
            841,
            842,
            843,
            844,
            845,
            846,
            847,
            848,
            849,
            850,
            851,
            852,
            853,
            854,
            855,
            856,
            857,
            858,
            859,
            860,
            861,
            862,
            863,
            864,
            865,
            866,
            867,
            868,
            869,
            870,
            871,
            872,
            873,
            874,
            875,
            876,
            877,
            878,
            879,
            880,
            881,
            882,
            883,
            884,
            885,
            886,
            887,
            888,
            889,
            890,
            891,
            892,
            893,
            894,
            895,
            896,
            897,
            898,
            899,
            900,
            901,
            902,
            903,
            904,
            905,
            906,
            907,
            908,
            909,
            910,
            911,
            912,
            913,
            914,
            915,
            916,
            917,
            918,
            919,
            920,
            921,
            922,
            923,
            924,
            925,
            926,
            927,
            928,
            929,
            930,
            931,
            932,
            933,
            934,
            935,
            936,
            937,
            938,
            939,
            940,
            941,
            942,
            943,
            944,
            945,
            946,
            947,
            948,
            949,
            950,
            951,
            952,
            953,
            954,
            955,
            956,
            957,
            958,
            959,
            960,
            961,
            962,
            963
          ],
          "provenance_ids": [
            7,
            11,
            12,
            21,
            85,
            86,
            87,
            88,
            94,
            95,
            101,
            106,
            114,
            117,
            123,
            124,
            125,
            126,
            132,
            133,
            140,
            141,
            143,
            145,
            275,
            276,
            277,
            278,
            285,
            491,
            506,
            517,
            520,
            521,
            524,
            525,
            528,
            530,
            531,
            547,
            553,
            554,
            562,
            563,
            736,
            740,
            741,
            743,
            838,
            839,
            840,
            841,
            843,
            855,
            856,
            857,
            858,
            859,
            860,
            861,
            862,
            863,
            864,
            868,
            869,
            870,
            871,
            872,
            873,
            874,
            875,
            876,
            877,
            879,
            880,
            882,
            883,
            884,
            885,
            886,
            887,
            888,
            889,
            890,
            891,
            892,
            893,
            894,
            895,
            896,
            897,
            898,
            899,
            900,
            901,
            902,
            903,
            905,
            906,
            907,
            908,
            909,
            910,
            911,
            912,
            913,
            914,
            915,
            917,
            918,
            919,
            920,
            921,
            922,
            923,
            924,
            925,
            926,
            927,
            928,
            930,
            931,
            932,
            933,
            934,
            950,
            951,
            952,
            953,
            954,
            955,
            956,
            957,
            959,
            960,
            962,
            963
          ],
          "provenance": "We also discuss DBMS\nimplementations and argue that the major advancements\nhave been in the RM systems, primarily driven by chang-\ning hardware characteristics.This per-\nsistence is more of a testament to the “stickiness” of data\n\nrather than the lasting power of these systems.In other\nwords, there still are many IBM IMS databases running\ntoday because it is expensive and risky to switch them\nto use a modern DBMS.Such systems are now on a path to conver-\ngence with RDBMSs.Of course, it is dangerous to use a KV store\nin a complex application that requires more than just a\nbinary relation.If an application requires multiple ﬁelds\nin a record, then KV stores are probably a bad idea.Not\nonly must the application parse record ﬁelds, but also\nthere are no secondary indexes to retrieve other ﬁelds\nby value.Likewise, developers must implement joins or\nmulti-get operations in their application.Hence,\na RDBMS may be a better choice, even for simple appli-\ncations, because they offer a path forward if the applica-\ntion’s complexity increases.One new architecture trend from the last 20 years is\nusing embedded KV stores as the underlying storage\nmanager for full-featured DBMSs.2.3 Document Databases\n\nThe document data model represents a database as a col-\nlection of record objects.Despite\nthe buzz with XML databases in the late 1990s, we\ncorrectly predicted in 2005 they would not supplant\nRDBMSs [188].There are dozens of such systems, of\nwhich MongoDB [41] is the most popular.They also claim that denormalizing entries into\nnested structures is better for performance because it re-\nmoves the need to dispatch multiple queries to retrieve\ndata related to a given object (i.e., “N+1 problem” in\nORMs).Instead of supporting the SQL standard for\nDDL and DML operations, NoSQL vendors claim that\nthey support their own proprietary query language de-\nrived or inspired from SQL.For most applications, these\ndistinctions are without merit.Any language differences\nbetween SQL and NoSQL derivatives are mostly due to\nJSON extensions and maintenance operations.Many of the remaining NoSQL DBMSs also added\nstrongly consistent (ACID) transactions (see Sec. 3.4).Higher level languages are almost universally pre-\nferred to record-at-a-time notations as they require less\ncode and provide greater data independence.Although\nwe acknowledge that the ﬁrst SQL optimizers were slow\nand ineffective, they have improved immensely in the\nlast 50 years.Instead of adopting SQL and\n\nemerging columnar storage, Google used this data model\nwith procedural client APIs.Other systems adopted the\ncolumn-family model in an attempt to copy Google’s be-\nspoke implementation.They also copied BigTable’s limita-\ntions, including the lack of joins and secondary indexes.2.3 about the\ndocument model are also applicable here.•\n\n•\n\n•\n\n•\n\n•\n\n•\n\n•\n\nKey-value Stores: Many have either matured into\nRM systems or are only used for speciﬁc problems.These can generally be equaled or beaten by modern\nhigh-performance RDBMSs.Document Databases: Such NoSQL systems are on\na collision course with RDBMSs.The differences\nbetween the two kinds of systems have diminished\nover time and should become nearly indistinguish-\nable in the future.Vector Databases: They are single-purpose DBMSs\nwith indexes to accelerate nearest-neighbor search.Most\nSQL systems require one ﬁrst to create a database and\nthen deﬁne their tables before they can load data.The impact of AI/ML on DBMSs will be signiﬁcant.The biggest issue is that the\noutput of an LLM is not explainable to a human.For these reasons, the uptake of LLMs for enter-\nprise data will be cautiously slow.Lastly, there is a considerable amount of recent re-\nsearch on using AI/ML to optimize the DBMSs [174].5 Conclusion\nWe predict that what goes around with databases will\ncontinue to come around in upcoming decades.Another\nwave of developers will claim that SQL and the RM are\ninsufﬁcient for emerging application domains.The database re-\nsearch community and marketplace are more robust be-\ncause of it.Another concern is the wasted effort of new projects\nreimplementing the same components that are not novel\nbut necessary to have a production-ready DBMS (e.g.,\nconﬁg handlers, parsers, buffer pools).To accelerate\nthe next generation of DBMSs, the community should\nfoster the development of open-source reusable compo-\nnents and services [112, 176].[5] Apache Hudi. https://hudi.apache.org/, 2023.2024. [10] Apache AGE. https://age.apache.org, 2024.[11] Apache Arrow. https://arrow.apache.org, 2024.https://arrow.apache.org/\n\nhaystack.readthedocs.io, 2024.[21] Dremio. https://dremio.com/, 2024.53, No. 2)\n\n\f[123] J. Dean and S. Ghemawat.hadoop-data-cloud-hdfs-vs-s3/, November 2019.[125] G. DeCandia, D. Hastorun, M. Jampani, G. Kakulapati, A. Lak-\nshman, A. Pilchin, S. Sivasubramanian, P. Vosshall, and W. Vo-\ngels.SIGOPS Oper. Syst. Rev., 41(6):205–220, oct 2007.[161] S. Melnik, A. Gubarev, J. J.Long, G. Romer, S. Shivakumar,\nM. Tolton, and T. Vassilakis.Dremel: Interactive analysis of\nweb-scale datasets.Proc. VLDB Endow., 3(12):330–339, sep\n2010.[162] S. Melnik, A. Gubarev, J. J.[166] D. Misev and P. Baumann.Sql support for multidimen-\nsional arrays.Technical Report 34, Jacobs University, July\n2017.URL https://nbn-resolving.org/urn:nbn:de:gbv:\n579-opus-1007237.[167] F. Nargesian, E. Zhu, R. J. Miller, K. Q. Pu, and P. C. Arocena.Data lake management: Challenges and opportunities. Proc.VLDB Endow., 12(12):1986–1989, aug 2019. doi: 10.14778/\n3352063.3352116.[168] H. Q. Ngo, C. Ré, and A. Rudra.Skew strikes back: New\ndevelopments in the theory of join algorithms.SIGMOD Rec.,\n42(4):5–16, feb 2014. doi: 10.1145/2590989.2590991.In Pro-\nceedings of the FREENIX Track: 1999 USENIX Annual Tech-\nnical Conference, pages 183–191, 1999.[171] A. Pavlo and M. Aslett. What’s really new with newsql?SIG-\n\nMOD Record, 45(2):45–55, Sep 2016.[172] A. Pavlo, E. Paulson, A. Rasin, D. J. Abadi, D. J. DeWitt,\nS. Madden, and M. Stonebraker.A comparison of approaches\nto large-scale data analysis.In Proceedings of the ACM SIG-\nMOD International Conference on Management of Data, pages\n165–178, 2009.[173] A. Pavlo, G. Angulo, J. Arulraj, H. Lin, J. Lin, L. Ma, P. Menon,\nT. Mowry, M. Perron, I. Quah, S. Santurkar, A. Tomasic,\nS. Toor, D. V. Aken, Z. Wang, Y. Wu, R. Xian, and T. Zhang.In CIDR 2017,\nSelf-driving database management systems.Conference on Innovative Data Systems Research, 2017.[174] A. Pavlo, M. Butrovich, A. Joshi, L. Ma, P. Menon, D. V. Aken,\nL. Lee, and R. Salakhutdinov.IEEE Data Eng. Bull., 42(2):32–46, 2019.[175] P. Pedreira, O. Erling, M. Basmanova, K. Wilfong, L. Sakka,\nK. Pai, W. He, and B. Chattopadhyay.VLDB Endow., 15(12):3372–3384, aug\n2022. doi: 10.14778/3554821.3554829.[176] P. Pedreira, O. Erling, K. Karanasos, S. Schneider, W. McK-\ninney, S. R. Valluri, M. Zait, and J. Nadeau.The composable\ndata management system manifesto. Proc.VLDB Endow., 16\n(10):2679–2685, jun 2023. doi: 10.14778/3603581.3603604.[177] D. Petersohn, S. Macke, D. Xin, W. Ma, D. Lee, X. Mo,\nJ. E. Gonzalez,\nJ. M. Hellerstein, A. D. Joseph, and\nA. Parameswaran.Towards scalable dataframe systems. Proc.VLDB Endow., 13(12):2033–2046, jul 2020. doi: 10.14778/\n3407790.3407807.[178] D. Petkovic. SQL/JSON standard: Properties and deﬁciencies.doi: 10.1007/\n\nDatenbank-Spektrum, 17(3):277–287, 2017.\ns13222-017-0267-4. [179] D. Pritchett.BASE: An Acid Alternative:\n\nIn Partitioned\nDatabases, Trading Some Consistency for Availability Can\nLead to Dramatic Improvements in Scalability.ACM Queue,\n6(3):48–55, may 2008. doi: 10.1145/1394127.1394128.[180] M. Raasveldt and H. Mühleisen.Duckdb: An embeddable ana-\nlytical database.In Proceedings of the 2019 International Con-\nference on Management of Data, SIGMOD ’19, pages 1981–\n1984, 2019. doi: 10.1145/3299869.3320212.[181] M. Rocklin. Dask: Parallel computation with blocked algo-\nrithms and task scheduling.In Proceedings of the 14th Python\nin Science Conference, pages 130–136, 2015.[182] F. Rusu. Multidimensional array data management. Found.doi: 10.1561/\n\nTrends Databases, 12(2-3):69–220, 2023. 1900000069.[183] S. Sakr, A. Bonifati, H. Voigt, A. Iosup, K. Ammar, R. An-\ngles, W. Aref, M. Arenas, M. Besta, P. A. Boncz, K. Daudjee,\nE. D. Valle, S. Dumbrava, O. Hartig, B. Haslhofer, T. Hege-\nman, J. Hidders, K. Hose, A. Iamnitchi, V. Kalavri, H. Kapp,\nW. Martens, M. T. Özsu, E. Peukert, S. Plantikow, M. Ragab,\nM. R. Ripeanu, S. Salihoglu, C. Schulz, P. Selmer, J. F. Se-\nqueda, J. Shinavier, G. Szárnyas, R. Tommasini, A. Tumeo,\nA. Uta, A. L. Varbanescu, H.-Y.Wu, N. Yakovets, D. Yan, and\nE. Yoneki.The future is big graphs: A community view on\ngraph processing systems.Commun. ACM, 64(9):62–71, aug\n2021. doi: 10.1145/3434642.The smart automatic document re-\ntrieval systems–an illustration.Commun. ACM, 8(6):391–398,\njun 1965. doi: 10.1145/364955.364990.[185] R. Sethi, M. Traverso, D. Sundstrom, D. Phillips, W. Xie,\nY.Sun, N. Yegitbasi, H. Jin, E. Hwang, N. Shingte, and\nIn 2019 IEEE 35th\nC. Berner. Presto: Sql on everything.International Conference on Data Engineering (ICDE), pages\n1802–1813, 2019. doi: 10.1109/ICDE.2019.00196.[186] M. A. Soliman, L. Antova, V. Raghavan, A. El-Helw, Z. Gu,\nE. Shen, G. C. Caragea, C. Garcia-Alvarado, F. Rahman,\nM. Petropoulos, F. Waas, S. Narayanan, K. Krikellas, and\nR. Baldwin.Orca: a modular query optimizer architecture for\nIn Proceedings of the 2014 ACM SIGMOD Inter-\nbig data.national Conference on Management of Data, SIGMOD ’14,\npages 337–348, 2014. doi: 10.1145/2588555.2595637.[187] M. Stonebraker. The case for polystores.https://\n\nwp.sigmod.org/?p=1629, 2015.[188] M. Stonebraker and J. Hellerstein.[189] M. Stonebraker, S. Madden, D. J. Abadi, S. Harizopoulos,\nN. Hachem, and P. Helland.The end of an architectural era:\n(it’s time for a complete rewrite).In Proceedings of the 33rd\nInternational Conference on Very Large Data Bases, VLDB\n’07, pages 1150–1160.VLDB Endowment, 2007. [190] M. Stonebraker, D. Abadi, D. J. DeWitt, S. Madden, E. Paulson,\nA. Pavlo, and A. Rasin.Mapreduce and parallel dbmss: Friends\nor foes?Commun. ACM, 53(1):64–71, Jan. 2010.[191] M. Stonebraker, P. Brown, A. Poliakov, and S. Raman. The ar-\nchitecture of scidb.In Scientiﬁc and Statistical Database Man-\nagement - 23rd International Conference, SSDBM 2011, vol-\nume 6809 of Lecture Notes in Computer Science, pages 1–16.Springer, 2011. doi: 10.1007/978-3-642-22351-8\n\n_1. [192] L. Sullivan.Performance issues in mid-sized relational\ndatabase machines.Master’s thesis, Rochester Institute of Tech-\nnology, 1989.\\\n\n36\n\nSIGMOD Record, June 2024 (Vol.Learned index: A comprehen-\nsive experimental evaluation. Proc.VLDB Endow., 16(8):1992–\n2004, apr 2023. doi: 10.14778/3594512.3594528.Google\n\ndumps mapreduce\n\n[194] Y.\n\nSverdlik.in\nfa-\nhttps:\n\nvor of new hyper-scale\n//www.datacenterknowledge.com/archives/2014/06/\n25/google-dumps-mapreduce-favor-new-hyper-scale-\nanalytics-system, June 2014.\n\nanalytics\n\nsystem.[195] R. Taft, I. Sharif, A. Matei, N. VanBenschoten, J. Lewis,\nT. Grieger, K. Niemi, A.national Conference on Management of Data, SIGMOD ’17,\npages 1009–1024, 2017. doi: 10.1145/3035918.3064029.[201] M. Zaharia, R. S. Xin, P. Wendell, T. Das, M. Armbrust,\nA. Dave, X. Meng, J. Rosen, S. Venkataraman, M. J. Franklin,\nA. Ghodsi, J. Gonzalez, S. Shenker, and I. Stoica.Apache\nspark: a uniﬁed engine for big data processing.Commun. ACM,\n59(11):56–65, oct 2016. doi: 10.1145/2934664.[202] C. Zaniolo. The database language GEM.In SIGMOD, pages\n\n207–218, 1983.[203] X. Zeng, Y. Hui, J. Shen, A. Pavlo, W. McKinney, and\nH. Zhang.An empirical evaluation of columnar storage for-\nmats.URL https:\n//www.vldb.org/pvldb/vol17/p148-zeng.pdf.[204] X. Zhang, Z. Chang, Y. Li, H. Wu, J. Tan, F. Li, and\nB. Cui.Proc. VLDB Endow., 15(9):1808–1821, may 2022. doi: 10.14778/\n3538598.3538604.SIGMOD Record, June 2024 (Vol. 53, No. 2)\n\n37",
          "time": 982.2408640384674,
          "input_token_size": 26192,
          "output_token_size": 265,
          "original_provenance_id": 0
        }
      ],
      "metadata": {
        "question_id": "whatgoesaround-sigmodrec2024_5b003fdb",
        "created_at": 1749870227.8825212,
        "processing_time": 1000.583957195282,
        "processing_complete": true,
        "max_provenances": 5
      },
      "source_info": {
        "selected_from": "test_outputs_prev1",
        "reason": "shorter_provenance",
        "sentence_count": 964,
        "provenance_count": 1,
        "alternatives": [
          {
            "source": "test_outputs_prev1",
            "sentence_count": 964,
            "provenance_count": 1,
            "has_answer": true
          }
        ],
        "selection_timestamp": "2025-06-17T16:48:52.925914"
      }
    }
  },
  {
    "5c1e3951": {
      "question": "Who are some key contributors mentioned in the document?",
      "answer": "Michael Stonebraker  \nAndrew Pavlo",
      "provenance": [
        {
          "provenance_id": 0,
          "input_sentence_ids": [
            0,
            1,
            2
          ],
          "provenance_ids": [
            0
          ],
          "provenance": "What Goes Around Comes Around... And Around...\n\nMichael Stonebraker\nMassachusetts Institute of Technology\nstonebraker@csail.mit.edu\n\nAndrew Pavlo\nCarnegie Mellon University\npavlo@cs.cmu.edu\n\nABSTRACT\nTwo decades ago, one of us co-authored a paper com-\nmenting on the previous 40 years of data modelling re-\nsearch and development [188].",
          "time": 5.943418502807617,
          "input_token_size": 29991,
          "output_token_size": 67,
          "original_provenance_id": 0
        }
      ],
      "metadata": {
        "question_id": "whatgoesaround-sigmodrec2024_5c1e3951",
        "created_at": 1750200248.1504831,
        "processing_time": 17.41351556777954,
        "processing_complete": true,
        "max_provenances": 5
      },
      "source_info": {
        "selected_from": "test_outputs",
        "reason": "shorter_provenance",
        "sentence_count": 3,
        "provenance_count": 1,
        "alternatives": [
          {
            "source": "test_outputs",
            "sentence_count": 3,
            "provenance_count": 1,
            "has_answer": true
          }
        ],
        "selection_timestamp": "2025-06-17T16:48:52.925914"
      }
    }
  },
  {
    "5cbdcf8f": {
      "question": "What does the document emphasize about learning from historical trends?",
      "answer": "1. The document emphasizes that historical trends in database systems show a pattern of persistence for the relational model (RM) and SQL, despite numerous attempts to replace them.\n2. It highlights that many non-relational systems have not dominated the landscape and often serve niche markets, with many eventually adopting SQL-like interfaces.\n3. The authors argue that learning from historical trends is crucial, as it reveals the \"stickiness\" of data and the challenges of transitioning to new systems.\n4. The document suggests that the evolution of SQL and relational DBMSs will continue, as they incorporate the best ideas from alternative approaches.\n5. It warns against underestimating the value of good marketing for inferior products, as historical examples show that strong marketing can lead to the success of subpar systems.\n6. The authors encourage developers to learn from history and build upon established knowledge rather than repeating past mistakes.",
      "provenance": [
        {
          "provenance_id": 0,
          "input_sentence_ids": [
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            11,
            12,
            13,
            14,
            15,
            16,
            17,
            18,
            19,
            20,
            21,
            22,
            23,
            24,
            25,
            26,
            27,
            28,
            29,
            30,
            31,
            32,
            33,
            34,
            35,
            36,
            37,
            38,
            39,
            40,
            41,
            42,
            43,
            44,
            45,
            46,
            47,
            48,
            49,
            50,
            51,
            52,
            53,
            54,
            55,
            56,
            57,
            58,
            59,
            60,
            61,
            62,
            63,
            64,
            65,
            66,
            67,
            68,
            69,
            70,
            71,
            72,
            73,
            74,
            75,
            76,
            77,
            78,
            79,
            80,
            81,
            82,
            83,
            84,
            85,
            86,
            87,
            88,
            89,
            90,
            91,
            92,
            93,
            94,
            95,
            96,
            97,
            98,
            99,
            100,
            101,
            102,
            103,
            104,
            105,
            106,
            107,
            108,
            109,
            110,
            111,
            112,
            113,
            114,
            115,
            116,
            117,
            118,
            119,
            120,
            121,
            122,
            123,
            124,
            125,
            126,
            127,
            128,
            129,
            130,
            131,
            132,
            133,
            134,
            135,
            136,
            137,
            138,
            139,
            140,
            141,
            142,
            143,
            144,
            145,
            146,
            147,
            148,
            149,
            150,
            151,
            152,
            153,
            154,
            155,
            156,
            157,
            158,
            159,
            160,
            161,
            162,
            163,
            164,
            165,
            166,
            167,
            168,
            169,
            170,
            171,
            172,
            173,
            174,
            175,
            176,
            177,
            178,
            179,
            180,
            181,
            182,
            183,
            184,
            185,
            186,
            187,
            188,
            189,
            190,
            191,
            192,
            193,
            194,
            195,
            196,
            197,
            198,
            199,
            200,
            201,
            202,
            203,
            204,
            205,
            206,
            207,
            208,
            209,
            210,
            211,
            212,
            213,
            214,
            215,
            216,
            217,
            218,
            219,
            220,
            221,
            222,
            223,
            224,
            225,
            226,
            227,
            228,
            229,
            230,
            231,
            232,
            233,
            234,
            235,
            236,
            237,
            238,
            239,
            240,
            241,
            242,
            243,
            244,
            245,
            246,
            247,
            248,
            249,
            250,
            251,
            252,
            253,
            254,
            255,
            256,
            257,
            258,
            259,
            260,
            261,
            262,
            263,
            264,
            265,
            266,
            267,
            268,
            269,
            270,
            271,
            272,
            273,
            274,
            275,
            276,
            277,
            278,
            279,
            280,
            281,
            282,
            283,
            284,
            285,
            286,
            287,
            288,
            289,
            290,
            291,
            292,
            293,
            294,
            295,
            296,
            297,
            298,
            299,
            300,
            301,
            302,
            303,
            304,
            305,
            306,
            307,
            308,
            309,
            310,
            311,
            312,
            313,
            314,
            315,
            316,
            317,
            318,
            319,
            320,
            321,
            322,
            323,
            324,
            325,
            326,
            327,
            328,
            329,
            330,
            331,
            332,
            333,
            334,
            335,
            336,
            337,
            338,
            339,
            340,
            341,
            342,
            343,
            344,
            345,
            346,
            347,
            348,
            349,
            350,
            351,
            352,
            353,
            354,
            355,
            356,
            357,
            358,
            359,
            360,
            361,
            362,
            363,
            364,
            365,
            366,
            367,
            368,
            369,
            370,
            371,
            372,
            373,
            374,
            375,
            376,
            377,
            378,
            379,
            380,
            381,
            382,
            383,
            384,
            385,
            386,
            387,
            388,
            389,
            390,
            391,
            392,
            393,
            394,
            395,
            396,
            397,
            398,
            399,
            400,
            401,
            402,
            403,
            404,
            405,
            406,
            407,
            408,
            409,
            410,
            411,
            412,
            413,
            414,
            415,
            416,
            417,
            418,
            419,
            420,
            421,
            422,
            423,
            424,
            425,
            426,
            427,
            428,
            429,
            430,
            431,
            432,
            433,
            434,
            435,
            436,
            437,
            438,
            439,
            440,
            441,
            442,
            443,
            444,
            445,
            446,
            447,
            448,
            449,
            450,
            451,
            452,
            453,
            454,
            455,
            456,
            457,
            458,
            459,
            460,
            461,
            462,
            463,
            464,
            465,
            466,
            467,
            468,
            469,
            470,
            471,
            472,
            473,
            474,
            475,
            476,
            477,
            478,
            479,
            480,
            481,
            482,
            483,
            484,
            485,
            486,
            487,
            488,
            489,
            490,
            491,
            492,
            493,
            494,
            495,
            496,
            497,
            498,
            499,
            500,
            501,
            502,
            503,
            504,
            505,
            506,
            507,
            508,
            509,
            510,
            511,
            512,
            513,
            514,
            515,
            516,
            517,
            518,
            519,
            520,
            521,
            522,
            523,
            524,
            525,
            526,
            527,
            528,
            529,
            530,
            531,
            532,
            533,
            534,
            535,
            536,
            537,
            538,
            539,
            540,
            541,
            542,
            543,
            544,
            545,
            546,
            547,
            548,
            549,
            550,
            551,
            552,
            553,
            554,
            555,
            556,
            557,
            558,
            559,
            560,
            561,
            562,
            563,
            564,
            565,
            566,
            567,
            568,
            569,
            570,
            571,
            572,
            573,
            574,
            575,
            576,
            577,
            578,
            579,
            580,
            581,
            582,
            583,
            584,
            585,
            586,
            587,
            588,
            589,
            590,
            591,
            592,
            593,
            594,
            595,
            596,
            597,
            598,
            599,
            600,
            601,
            602,
            603,
            604,
            605,
            606,
            607,
            608,
            609,
            610,
            611,
            612,
            613,
            614,
            615,
            616,
            617,
            618,
            619,
            620,
            621,
            622,
            623,
            624,
            625,
            626,
            627,
            628,
            629,
            630,
            631,
            632,
            633,
            634,
            635,
            636,
            637,
            638,
            639,
            640,
            641,
            642,
            643,
            644,
            645,
            646,
            647,
            648,
            649,
            650,
            651,
            652,
            653,
            654,
            655,
            656,
            657,
            658,
            659,
            660,
            661,
            662,
            663,
            664,
            665,
            666,
            667,
            668,
            669,
            670,
            671,
            672,
            673,
            674,
            675,
            676,
            677,
            678,
            679,
            680,
            681,
            682,
            683,
            684,
            685,
            686,
            687,
            688,
            689,
            690,
            691,
            692,
            693,
            694,
            695,
            696,
            697,
            698,
            699,
            700,
            701,
            702,
            703,
            704,
            705,
            706,
            707,
            708,
            709,
            710,
            711,
            712,
            713,
            714,
            715,
            716,
            717,
            718,
            719,
            720,
            721,
            722,
            723,
            724,
            725,
            726,
            727,
            728,
            729,
            730,
            731,
            732,
            733,
            734,
            735,
            736,
            737,
            738,
            739,
            740,
            741,
            742,
            743,
            744,
            745,
            746,
            747,
            748,
            749,
            750,
            751,
            752,
            753,
            754,
            755,
            756,
            757,
            758,
            759,
            760,
            761,
            762,
            763,
            764,
            765,
            766,
            767,
            768,
            769,
            770,
            771,
            772,
            773,
            774,
            775,
            776,
            777,
            778,
            779,
            780,
            781,
            782,
            783,
            784,
            785,
            786,
            787,
            788,
            789,
            790,
            791,
            792,
            793,
            794,
            795,
            796,
            797,
            798,
            799,
            800,
            801,
            802,
            803,
            804,
            805,
            806,
            807,
            808,
            809,
            810,
            811,
            812,
            813,
            814,
            815,
            816,
            817,
            818,
            819,
            820,
            821,
            822,
            823,
            824,
            825,
            826,
            827,
            828,
            829,
            830,
            831,
            832,
            833,
            834,
            835,
            836,
            837,
            838,
            839,
            840,
            841,
            842,
            843,
            844,
            845,
            846,
            847,
            848,
            849,
            850,
            851,
            852,
            853,
            854,
            855,
            856,
            857,
            858,
            859,
            860,
            861,
            862,
            863,
            864,
            865,
            866,
            867,
            868,
            869,
            870,
            871,
            872,
            873,
            874,
            875,
            876,
            877,
            878,
            879,
            880,
            881,
            882,
            883,
            884,
            885,
            886,
            887,
            888,
            889,
            890,
            891,
            892,
            893,
            894,
            895,
            896,
            897,
            898,
            899,
            900,
            901,
            902,
            903,
            904,
            905,
            906,
            907,
            908,
            909,
            910,
            911,
            912,
            913,
            914,
            915,
            916,
            917,
            918,
            919,
            920,
            921,
            922,
            923,
            924,
            925,
            926,
            927,
            928,
            929,
            930,
            931,
            932,
            933,
            934,
            935,
            936,
            937,
            938,
            939,
            940,
            941,
            942,
            943,
            944,
            945,
            946,
            947,
            948,
            949,
            950,
            951,
            952,
            953,
            954,
            955,
            956,
            957,
            958,
            959,
            960,
            961,
            962,
            963
          ],
          "provenance_ids": [
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            11,
            12,
            13,
            14,
            15,
            16,
            17,
            18,
            19,
            20,
            21,
            22,
            23,
            24,
            25,
            26,
            27,
            28,
            29,
            30,
            31,
            32,
            33,
            34,
            35,
            36,
            37,
            38,
            39,
            40,
            41,
            42,
            43,
            44,
            45,
            46,
            47,
            48,
            49,
            50,
            51,
            52,
            53,
            54,
            55,
            56,
            57,
            58,
            59,
            60,
            61,
            62,
            63,
            64,
            65,
            66,
            67,
            68,
            69,
            70,
            71,
            72,
            73,
            74,
            75,
            76,
            77,
            78,
            79,
            80,
            81,
            82,
            83,
            84,
            85,
            86,
            87,
            88,
            89,
            90,
            91,
            92,
            93,
            94,
            95,
            96,
            97,
            98,
            99,
            100,
            101,
            102,
            103,
            104,
            105,
            106,
            107,
            108,
            109,
            110,
            111,
            112,
            113,
            114,
            115,
            116,
            117,
            118,
            119,
            120,
            121,
            122,
            123,
            124,
            125,
            126,
            127,
            128,
            129,
            130,
            131,
            132,
            133,
            134,
            135,
            136,
            137,
            138,
            139,
            140,
            141,
            142,
            143,
            144,
            145,
            146,
            147,
            148,
            149,
            150,
            151,
            152,
            153,
            154,
            155,
            156,
            157,
            158,
            159,
            160,
            161,
            162,
            163,
            164,
            165,
            166,
            167,
            168,
            169,
            170,
            171,
            172,
            173,
            174,
            175,
            176,
            177,
            178,
            179,
            180,
            181,
            182,
            183,
            184,
            185,
            186,
            187,
            188,
            189,
            190,
            191,
            192,
            193,
            194,
            195,
            196,
            197,
            198,
            199,
            200,
            201,
            202,
            203,
            204,
            205,
            206,
            207,
            208,
            209,
            210,
            211,
            212,
            213,
            214,
            215,
            216,
            217,
            218,
            219,
            220,
            221,
            222,
            223,
            224,
            225,
            226,
            227,
            228,
            229,
            230,
            231,
            232,
            233,
            234,
            235,
            236,
            237,
            238,
            239,
            240,
            241,
            242,
            243,
            244,
            245,
            246,
            247,
            248,
            249,
            250,
            251,
            252,
            253,
            254,
            255,
            256,
            257,
            258,
            259,
            260,
            261,
            262,
            263,
            264,
            265,
            266,
            267,
            268,
            269,
            270,
            271,
            272,
            273,
            274,
            275,
            276,
            277,
            278,
            279,
            280,
            281,
            282,
            283,
            284,
            285,
            286,
            287,
            288,
            289,
            290,
            291,
            292,
            293,
            294,
            295,
            296,
            297,
            298,
            299,
            300,
            301,
            302,
            303,
            304,
            305,
            306,
            307,
            308,
            309,
            310,
            311,
            312,
            313,
            314,
            315,
            316,
            317,
            318,
            319,
            320,
            321,
            322,
            323,
            324,
            325,
            326,
            327,
            328,
            329,
            330,
            331,
            332,
            333,
            334,
            335,
            336,
            337,
            338,
            339,
            340,
            341,
            342,
            343,
            344,
            345,
            346,
            347,
            348,
            349,
            350,
            351,
            352,
            353,
            354,
            355,
            356,
            357,
            358,
            359,
            360,
            361,
            362,
            363,
            364,
            365,
            366,
            367,
            368,
            369,
            370,
            371,
            372,
            373,
            374,
            375,
            376,
            377,
            378,
            379,
            380,
            381,
            382,
            383,
            384,
            385,
            386,
            387,
            388,
            389,
            390,
            391,
            392,
            393,
            394,
            395,
            396,
            397,
            398,
            399,
            400,
            401,
            402,
            403,
            404,
            405,
            406,
            407,
            408,
            409,
            410,
            411,
            412,
            413,
            414,
            415,
            416,
            417,
            418,
            419,
            420,
            421,
            422,
            423,
            424,
            425,
            426,
            427,
            428,
            429,
            430,
            431,
            432,
            433,
            434,
            435,
            436,
            437,
            438,
            439,
            440,
            441,
            442,
            443,
            444,
            445,
            446,
            447,
            448,
            449,
            450,
            451,
            452,
            453,
            454,
            455,
            456,
            457,
            458,
            459,
            460,
            461,
            462,
            463,
            464,
            465,
            466,
            467,
            468,
            469,
            470,
            471,
            472,
            473,
            474,
            475,
            476,
            477,
            478,
            479,
            480,
            481,
            482,
            483,
            484,
            485,
            486,
            487,
            488,
            489,
            490,
            491,
            492,
            493,
            494,
            495,
            496,
            497,
            498,
            499,
            500,
            501,
            502,
            503,
            504,
            505,
            506,
            507,
            508,
            509,
            510,
            511,
            512,
            513,
            514,
            515,
            516,
            517,
            518,
            519,
            520,
            521,
            522,
            523,
            524,
            525,
            526,
            527,
            528,
            529,
            530,
            531,
            532,
            533,
            534,
            535,
            536,
            537,
            538,
            539,
            540,
            541,
            542,
            543,
            544,
            545,
            546,
            547,
            548,
            549,
            550,
            551,
            552,
            553,
            554,
            555,
            556,
            557,
            558,
            559,
            560,
            561,
            562,
            563,
            564,
            565,
            566,
            567,
            568,
            569,
            570,
            571,
            572,
            573,
            574,
            575,
            576,
            577,
            578,
            579,
            580,
            581,
            582,
            583,
            584,
            585,
            586,
            587,
            588,
            589,
            590,
            591,
            592,
            593,
            594,
            595,
            596,
            597,
            598,
            599,
            600,
            601,
            602,
            603,
            604,
            605,
            606,
            607,
            608,
            609,
            610,
            611,
            612,
            613,
            614,
            615,
            616,
            617,
            618,
            619,
            620,
            621,
            622,
            623,
            624,
            625,
            626,
            627,
            628,
            629,
            630,
            631,
            632,
            633,
            634,
            635,
            636,
            637,
            638,
            639,
            640,
            641,
            642,
            643,
            644,
            645,
            646,
            647,
            648,
            649,
            650,
            651,
            652,
            653,
            654,
            655,
            656,
            657,
            658,
            659,
            660,
            661,
            662,
            663,
            664,
            665,
            666,
            667,
            668,
            669,
            670,
            671,
            672,
            673,
            674,
            675,
            676,
            677,
            678,
            679,
            680,
            681,
            682,
            683,
            684,
            685,
            686,
            687,
            688,
            689,
            690,
            691,
            692,
            693,
            694,
            695,
            696,
            697,
            698,
            699,
            700,
            701,
            702,
            703,
            704,
            705,
            706,
            707,
            708,
            709,
            710,
            711,
            712,
            713,
            714,
            715,
            716,
            717,
            718,
            719,
            720,
            721,
            722,
            723,
            724,
            725,
            726,
            727,
            728,
            729,
            730,
            731,
            732,
            733,
            734,
            735,
            736,
            737,
            738,
            739,
            740,
            741,
            742,
            743,
            744,
            745,
            746,
            747,
            748,
            749,
            750,
            751,
            752,
            753,
            754,
            755,
            756,
            757,
            758,
            759,
            760,
            761,
            762,
            763,
            764,
            765,
            766,
            767,
            768,
            769,
            770,
            771,
            772,
            773,
            774,
            775,
            776,
            777,
            778,
            779,
            780,
            781,
            782,
            783,
            784,
            785,
            786,
            787,
            788,
            789,
            790,
            791,
            792,
            793,
            794,
            795,
            796,
            797,
            798,
            799,
            800,
            801,
            802,
            803,
            804,
            805,
            806,
            807,
            808,
            809,
            810,
            811,
            812,
            813,
            814,
            815,
            816,
            817,
            818,
            819,
            820,
            821,
            822,
            823,
            824,
            825,
            826,
            827,
            828,
            829,
            830,
            831,
            832,
            833,
            834,
            835,
            836,
            837,
            838,
            839,
            840,
            841,
            842,
            843,
            844,
            845,
            846,
            847,
            848,
            849,
            850,
            851,
            852,
            853,
            854,
            855,
            856,
            857,
            858,
            859,
            860,
            861,
            862,
            863,
            864,
            865,
            866,
            867,
            868,
            869,
            870,
            871,
            872,
            873,
            874,
            875,
            876,
            877,
            878,
            879,
            880,
            881,
            882,
            883,
            884,
            885,
            886,
            887,
            888,
            889,
            890,
            891,
            892,
            893,
            894,
            895,
            896,
            897,
            898,
            899,
            900,
            901,
            902,
            903,
            904,
            905,
            906,
            907,
            908,
            909,
            910,
            911,
            912,
            913,
            914,
            915,
            916,
            917,
            918,
            919,
            920,
            921,
            922,
            923,
            924,
            925,
            926,
            927,
            928,
            929,
            930,
            931,
            932,
            933,
            934,
            935,
            936,
            937,
            938,
            939,
            940,
            941,
            942,
            943,
            944,
            945,
            946,
            947,
            948,
            949,
            950,
            951,
            952,
            953,
            954,
            955,
            956,
            957,
            958,
            959,
            960,
            961,
            962,
            963
          ],
          "provenance": "What Goes Around Comes Around... And Around...\n\nMichael Stonebraker\nMassachusetts Institute of Technology\nstonebraker@csail.mit.edu\n\nAndrew Pavlo\nCarnegie Mellon University\npavlo@cs.cmu.edu\n\nABSTRACT\nTwo decades ago, one of us co-authored a paper com-\nmenting on the previous 40 years of data modelling re-\nsearch and development [188].That paper demonstrated\nthat the relational model (RM) and SQL are the prevail-\ning choice for database management systems (DBMSs),\ndespite efforts to replace either them.Instead, SQL ab-\nsorbed the best ideas from these alternative approaches.We revisit this issue and argue that this same evolu-\ntion has continued since 2005.Once again there have\nbeen repeated efforts to replace either SQL or the RM.But the RM continues to be the dominant data model\nand SQL has been extended to capture the good ideas\nfrom others.As such, we expect more of the same in\nthe future, namely the continued evolution of SQL and\nrelational DBMSs (RDBMSs).We also discuss DBMS\nimplementations and argue that the major advancements\nhave been in the RM systems, primarily driven by chang-\ning hardware characteristics.1 Introduction\nIn 2005, one of the authors participated in writing a\nchapter for the Red Book titled “What Goes Around\nComes Around” [188].That paper examined the major\ndata modelling movements since the 1960s:\n\nHierarchical (e.g., IMS): late 1960s and 1970s\nNetwork (e.g., CODASYL): 1970s\nRelational: 1970s and early 1980s\nEntity-Relationship: 1970s\nExtended Relational: 1980s\nSemantic: late 1970s and 1980s\nObject-Oriented: late 1980s and early 1990s\nObject-Relational: late 1980s and early 1990s\nSemi-structured (e.g., XML): late 1990s and 2000s\n\n•\n•\n•\n•\n•\n•\n•\n•\n•\n\nOur conclusion was that the relational model with an\nextendable type system (i.e., object-relational) has dom-\ninated all comers, and nothing else has succeeded in\nthe marketplace.Although many of the non-relational\nDBMSs covered in 2005 still exist today, their vendors\nhave relegated them to legacy maintenance mode and\nnobody is building new applications on them.This per-\nsistence is more of a testament to the “stickiness” of data\n\nrather than the lasting power of these systems.In other\nwords, there still are many IBM IMS databases running\ntoday because it is expensive and risky to switch them\nto use a modern DBMS.But no start-up would willingly\nchoose to build a new application on IMS.A lot has happened in the world of databases since our\n2005 survey.During this time, DBMSs have expanded\nfrom their roots in business data processing and are now\nused for almost every kind of data.This led to the “Big\nData” era of the early 2010s and the current trend of inte-\ngrating machine learning (ML) with DBMS technology.In this paper, we analyze the last 20 years of data\nmodel and query language activity in databases.We\nstructure our commentary into the following areas: (1)\nMapReduce Systems, (2) Key-value Stores, (3) Docu-\nment Databases, (4) Column Family / Wide-Column,\n(5) Text Search Engines, (6) Array Databases, (7)\nVector Databases, and (8) Graph Databases.We contend that most systems that deviated from\nSQL or the RM have not dominated the DBMS land-\nscape and often only serve niche markets.Many sys-\ntems that started out rejecting the RM with much fanfare\n(think NoSQL) now expose a SQL-like interface for RM\ndatabases.Such systems are now on a path to conver-\ngence with RDBMSs.Meanwhile, SQL incorporated\nthe best query language ideas to expand its support for\nmodern applications and remain relevant.Although there has not been much change in RM\nfundamentals, there were dramatic changes in RM sys-\ntem implementations.The second part of this paper\ndiscusses advancements in DBMS architectures that ad-\ndress modern applications and hardware: (1) Columnar\nSystems, (2) Cloud Databases, (3) Data Lakes / Lake-\nhouses, (4) NewSQL Systems, (5) Hardware Acceler-\nators, and (6) Blockchain Databases.Some of these\nare profound changes to DBMS implementations, while\nothers are merely trends based on faulty premises.We ﬁnish with a discussion of important considera-\ntions for the next generation of DBMSs and provide part-\ning comments on our hope for the future of databases in\nboth research and commercial settings.SIGMOD Record, June 2024 (Vol. 53, No.2)\n\n21\n\n\f2 Data Models & Query Languages\nFor our discussion here, we group the research and de-\nvelopment thrusts in data models and query languages\nfor database into eight categories.2.1 MapReduce Systems\nGoogle constructed their MapReduce (MR) framework\nin 2003 as a “point solution” for processing its periodic\ncrawl of the internet [122].At the time, Google had\nlittle expertise in DBMS technology, and they built MR\nto meet their crawl needs.In database terms, Map is a\nuser-deﬁned function (UDF) that performs computation\nand/or ﬁltering while Reduce is a GROUP BY operation.To a ﬁrst approximation, MR runs a single query:\n\nSELECT map() FROM crawl_table GROUP BY reduce()\n\nGoogle’s MR approach did not prescribe a speciﬁc\ndata model or query language.Rather, it was up to the\nMap and Reduce functions written in a procedural MR\nprogram to parse and decipher the contents of data ﬁles.There was a lot of interest in MR-based systems at\nother companies in the late 2000s.Yahoo! developed\nan open-source version of MR in 2005, called Hadoop.It ran on top of a distributed ﬁle system HDFS that was\na clone of the Google File System [134].Several start-\nups were formed to support Hadoop in the commercial\nmarketplace.We will use MR to refer to the Google\nimplementation and Hadoop to refer to the open-source\nversion.They are functionally similar.There was a controversy about the value of Hadoop\ncompared to RDBMSs designed for OLAP workloads.This culminated in a 2009 study that showed that data\nwarehouse DBMSs outperformed Hadoop [172].This\ngenerated dueling articles from Google and the DBMS\ncommunity [123, 190].Google argued that with care-\nful engineering, a MR system will beat DBMSs, and a\nuser does not have to load data with a schema before\nrunning queries on it.Thus, MR is better for “one shot”\ntasks, such as text processing and ETL operations.The\nDBMS community argued that MR incurs performance\nproblems due to its design that existing parallel DBMSs\nalready solved.Furthermore, the use of higher-level\nlanguages (SQL) operating over partitioned tables has\nproven to be a good programming model [127].A lot of the discussion in the two papers was on imple-\nmentation issues (e.g., indexing, parsing, push vs. pull\nquery processing, failure recovery).From reading both\npapers a reasonable conclusion would be that there is a\nplace for both kinds of systems.However, two changes\nin the technology world rendered the debate moot.The ﬁrst event was that the Hadoop technology and\nservices market cratered in the 2010s.Many enterprises\nspent a lot of money on Hadoop clusters, only to ﬁnd\nthere was little interest in this functionality.Developers\nfound it difﬁcult to shoehorn their application into the\n\nrestricted MR/Hadoop paradigm.There were consider-\nable efforts to provide a SQL and RM interface on top\nof Hadoop, most notable was Meta’s Hive [30, 197].The next event occurred eight months after the CACM\narticle when Google announced that they were moving\ntheir crawl processing from MR to BigTable [164].The\nreason was that Google needed to interactively update\nits crawl database in real time but MR was a batch sys-\ntem.Google ﬁnally announced in 2014 that MR had no\nplace in their technology stack and killed it off [194].The ﬁrst event left the three leading Hadoop vendors\n(Cloudera, Hortonworks, MapR) without a viable prod-\nuct to sell.Cloudera rebranded Hadoop to mean the\nwhole stack (application, Hadoop, HDFS).In a further\nsleight-of-hand, Cloudera built a RDBMS, Impala [150],\non top of HDFS but not using Hadoop.They realized\nthat Hadoop had no place as an internal interface in a\nSQL DBMS, and they conﬁgured it out of their stack\nwith software built directly on HDFS.In a similar vein,\nMapR built Drill [22] directly on HDFS, and Meta cre-\nated Presto [185] to replace Hive.Discussion: MR’s deﬁciencies were so signiﬁcant that\nit could not be saved despite the adoption and enthu-\nsiasm from the developer community.Hadoop died\nabout a decade ago, leaving a legacy of HDFS clusters\nin enterprises and a collection of companies dedicated\nto making money from them.At present, HDFS has\nlost its luster, as enterprises realize that there are better\ndistributed storage alternatives [124].Meanwhile, dis-\ntributed RDBMSs are thriving, especially in the cloud.Some aspects of MR system implementations related\nto scalability, elasticity, and fault tolerance are carried\nover into distributed RDBMSs.MR also brought about\nthe revival of shared-disk architectures with disaggre-\ngated storage, subsequently giving rise to open-source\nﬁle formats and data lakes (see Sec.3.3). Hadoop’s lim-\nitations opened the door for other data processing plat-\nforms, namely Spark [201] and Flink [109].Both sys-\ntems started as better implementations of MR with pro-\ncedural APIs but have since added support for SQL [105].2.2 Key/Value Stores\nThe key/value (KV) data model is the simplest model\npossible.It represents the following binary relation:\n\n(key,value)\n\nA KV DBMS represents a collection of data as an as-\nsociative array that maps a key to a value.The value is\ntypically an untyped array of bytes (i.e., a blob), and the\nDBMS is unaware of its contents.It is up to the appli-\ncation to maintain the schema and parse the value into\nits corresponding parts.Most KV DBMSs only provide\nget/set/delete operations on a single value.In the 2000s, several new Internet companies built\ntheir own shared-nothing, distributed KV stores for nar-\n\n22\n\nSIGMOD Record, June 2024 (Vol.53, No. 2)\n\n\frowly focused applications, like caching and storing ses-\nsion data.For caching, Memcached [131] is the most\nwell-known example of this approach.Redis [67] mar-\nkets itself as a Memcached replacement, offering a more\nrobust query API with checkpointing support.For more\npersistent application data, Amazon created the Dynamo\nKV store in 2007 [125].Such systems offer higher and\nmore predictable performance, compared to a RDBMS,\nin exchange for more limited functionality.The second KV DBMS category are embedded stor-\nage managers designed to run in the same address space\nas a higher-level application.One of the ﬁrst stan-\ndalone embedded KV DBMSs was BerkeleyDB from\nthe early 1990s [170].Recent notable entries include\nGoogle’s LevelDB [37], which Meta later forked as\nRocksDB [68].Discussion: Key/value stores provide a quick “out-of-\nthe-box” way for developers to store data, compared to\nthe more laborious effort required to set up a table in a\nRDBMS.Of course, it is dangerous to use a KV store\nin a complex application that requires more than just a\nbinary relation.If an application requires multiple ﬁelds\nin a record, then KV stores are probably a bad idea.Not\nonly must the application parse record ﬁelds, but also\nthere are no secondary indexes to retrieve other ﬁelds\nby value.Likewise, developers must implement joins or\nmulti-get operations in their application.To deal with these issues, several systems began as\na KV store and then morphed into a more feature-rich\nrecord store.Such systems replace the opaque value\nwith a semi-structured value, such as a JSON docu-\nment.Examples of this transition are Amazon’s Dy-\nnamoDB [129] and Aerospike [9].It is not trivial to re-\nengineer a KV store to make it support a complex data\nmodel, whereas RDBMSs easily emulates KV stores\nwithout any changes.If an application needs an embed-\nded DBMS, there are full-featured choices available to-\nday, including SQLite [71] and DuckDB [180].Hence,\na RDBMS may be a better choice, even for simple appli-\ncations, because they offer a path forward if the applica-\ntion’s complexity increases.One new architecture trend from the last 20 years is\nusing embedded KV stores as the underlying storage\nmanager for full-featured DBMSs.Prior to this, build-\ning a new DBMS requires engineers to build a custom\nstorage manager that is natively integrated in the DBMS.MySQL was the ﬁrst DBMS to expose an API that al-\nlowed developers to replace its default KV storage man-\nager.This API enabled Meta to build RocksDB to re-\nplace InnoDB for its massive ﬂeet of MySQL databases.Similarly, MongoDB discarded their ill-fated MMAP-\nbased storage manager in favor of WiredTiger’s KV\nstore in 2014 [120, 138].Using an existing KV store\nallows developers to write a new DBMS in less time.2.3 Document Databases\n\nThe document data model represents a database as a col-\nlection of record objects.Each document contains a hier-\narchy of ﬁeld/value pairs, where each ﬁeld is identiﬁed\nby a name and a ﬁeld’s value can be either a scalar type,\nan array of values, or another document.The following\nexample in JSON is a customer document that contain\na nested list of purchase order records with their corre-\nsponding order items.{ “name”: “First Last”,\n\n“orders”: [ { “id”: 123, “items”: [...] },\n\n{ “id”: 456, “items”: [...] }, ] }\n\nDocument data models have been an active ﬁeld of\neffort for several decades.This has given rise to data\nformats like SGML [117] and XML [118].Despite\nthe buzz with XML databases in the late 1990s, we\ncorrectly predicted in 2005 they would not supplant\nRDBMSs [188].JSON has since overtaken XML to\nbecome the standard for data exchange for web-based\napplications.JavaScript’s popularity with developers\nand the accompanying ubiquity of JSON led several\ncompanies to create document-oriented systems that na-\ntively stored JSON in the 2000s.The inability of OLTP RDBMSs to scale in the 2000s\nushered in dozens of document DBMSs that marketed\nthemselves using the catchphrase NoSQL [110].There\nwere two marketing messages for such systems that res-\nonated with developers.First, SQL and joins are slow,\nand one should use a “faster” lower-level, record-at-a-\ntime interface.Second, ACID transactions are unneces-\nsary for modern applications, so the DBMS should only\nprovide weaker notion of it (i.e., BASE [179]).Because of these two thrusts, NoSQL came to stand\nfor a DBMS that stored records or documents as JSON,\nsupported a lower-level API, and weak or non-existent\ntransactions.There are dozens of such systems, of\nwhich MongoDB [41] is the most popular.Discussion: Document DBMSs are essentially the same\nas object-oriented DBMSs from the 1980s and XML\nDBMSs from the late 1990s.Proponents of document\nDBMSs make the same argument as their OO/XML\npredecessors: storing data as documents removes the\nimpedance mismatch between how application OO code\ninteracts with data and how relational databases store\nthem.They also claim that denormalizing entries into\nnested structures is better for performance because it re-\nmoves the need to dispatch multiple queries to retrieve\ndata related to a given object (i.e., “N+1 problem” in\nORMs).The problems with denormalization/prejoining\nis an old topic that dates back to the 1970s [116]: (1)\nif the join is not one-to-many, then there will be dupli-\ncated data, (2) prejoins are not necessarily faster than\njoins, and (3) there is no data independence.SIGMOD Record, June 2024 (Vol. 53, No.2)\n\n23\n\n\fDespite strong protestations that SQL was terrible, by\nthe end of the 2010s, almost every NoSQL DBMS added\na SQL interface.Notable examples include DynamoDB\nPartiQL [56], Cassandra CQL [15], Aerospike AQL [9],\nand Couchbase SQL++ [72].The last holdout was Mon-\ngoDB, but they added SQL for their Atlas service in\n2021 [42].Instead of supporting the SQL standard for\nDDL and DML operations, NoSQL vendors claim that\nthey support their own proprietary query language de-\nrived or inspired from SQL.For most applications, these\ndistinctions are without merit.Any language differences\nbetween SQL and NoSQL derivatives are mostly due to\nJSON extensions and maintenance operations.Many of the remaining NoSQL DBMSs also added\nstrongly consistent (ACID) transactions (see Sec. 3.4).As such, the NoSQL message has morphed from “Do\nnot use SQL – it is too slow!” to “Not only SQL” (i.e.,\nSQL is ﬁne for some things).Adding SQL and ACID to a NoSQL DBMS lowers\ntheir intellectual distance from RDBMSs.The main\ndifferences between them seems to be JSON support\nand the fact that NoSQL vendors allow “schema later”\ndatabases.But the SQL standard added a JSON data\ntype and operations in 2016 [165, 178].And as RDBMSs\ncontinue to improve their “ﬁrst ﬁve minutes” experience\nfor developers, we believe that the two kinds of systems\nwill soon be effectively identical.Higher level languages are almost universally pre-\nferred to record-at-a-time notations as they require less\ncode and provide greater data independence.Although\nwe acknowledge that the ﬁrst SQL optimizers were slow\nand ineffective, they have improved immensely in the\nlast 50 years.But the optimizer remains the hardest part\nof building a DBMS.We suspect that this engineering\nburden was a contributing factor to why NoSQL systems\noriginally chose to not support SQL.2.4 Column-Family Databases\nThere is another category of NoSQL systems that uses\na data model called column-family (aka wide-column).Despite its name, column-family is not a columnar data\nmodel.Instead, it is a reduction of the document data\nmodel that only supports one level of nesting instead\nof arbitrary nesting; it is relation-like, but each record\ncan have optional attributes, and cells can contain an ar-\nray of values.The following example shows a mapping\nfrom user identiﬁer keys to JSON documents that con-\ntain each user’s varying proﬁle information:\n\nUser1000 → { “name”: “Alice”,\n\n“accounts”: [ 123, 456 ],\n“email”: \"xxx@xxx.edu” }\n\nUser1001 → { “name”: “Bob”,\n\n“email”: [ “yyy@yyy.org”, “zzz@zzz.com” ] }\n\nThe ﬁrst column-family model DBMS was Google’s\nBigTable in 2004 [111].Instead of adopting SQL and\n\nemerging columnar storage, Google used this data model\nwith procedural client APIs.Other systems adopted the\ncolumn-family model in an attempt to copy Google’s be-\nspoke implementation.Most notable are Cassandra [14]\nand HBase [28].They also copied BigTable’s limita-\ntions, including the lack of joins and secondary indexes.Discussion: All our comments in Sec.2.3 about the\ndocument model are also applicable here.In the early\n2010s, Google built RDBMSs on top of BigTable, in-\ncluding MegaStore [99] and the ﬁrst version of Span-\nner.Since then, Google rewrote Spanner to remove\nthe BigTable remnants [98], and it is now the primary\ndatabase for many of its internal applications.Several\nNoSQL DBMSs deprecated their proprietary APIs in\nfavor of SQL but still retain their non-relational archi-\ntectures.Cassandra replaced their Thrift-API with a\nSQL-like language called CQL [15], and HBase now\nrecommends the Phoenix SQL-frontend [57].Google\nstill offers BigTable as a cloud service, but the column-\nfamily model is a singular outlier with the same disad-\nvantages as NoSQL DBMSs.2.5 Text Search Engines\nText search engines have existed for a long time, begin-\nning with the seminal SMART system in the 1960s [184].SMART pioneered information retrieval and the vector\nspace model, now nearly universal in modern search\nengines, by tokenizing documents into a “bag of words”\nand then building full-text indexes (aka inverted indexes)\non those tokens to support queries on their contents.The\nsystem was also cognizant of noise words (e.g., “the”,\n“a”), synonyms (e.g., “The Big Apple” is a synonym for\n“New York City”), salient keywords, and distance (e.g.,\n“drought” often appears close to “climate change”).The leading text search systems today include Elastic-\nsearch [23] and Solr [70], which both use Lucene [38]\nas their internal search library.These systems offer\ngood support for storing and indexing text data but offer\nnone-to-limited transaction capabilities.This limitation\nmeans that a DBMS has to recover from data corruption\nby rebuilding the document index from scratch, which\nresults in signiﬁcant downtime.All the leading RDBMSs support full-text search in-\ndexes, including Oracle [52], Microsoft SQL Server [52],\nMySQL [43], and PostgreSQL [62].Their search fea-\ntures have improved recently and are generally on par\nwith the special-purpose systems above.They also have\nthe advantage of built-in transaction support.But their\nintegration of search operations in SQL is often clunky\nand differs between DBMSs.Discussion: Text data is inherently unstructured, which\nmeans that there is no data model.Instead, a DBMS\nseeks to extract structure (i.e., meta-data, indexes) from\ntext to avoid “needle in the haystack” sequential searches.24\n\nSIGMOD Record, June 2024 (Vol. 53, No.2)\n\n\fThere are three ways to manage text data in application.First, one can run multiple systems, such as Elastic-\nsearch for text and a RDBMS for operational workloads.This approach allows one to run “best of breed” systems\nbut requires additional ETL plumbing to push data from\nthe operational DBMS to the text DBMS and to rewrite\napplications to route queries to the right DBMSs based\non their needs.Alternatively, one can run a RDBMS\nwith good text-search integration capabilities but with\ndivergent APIs in SQL.This latter issue is often over-\ncome by application frameworks that hide this complex-\nity (e.g., Django Haystack [20]).The third option is\na polystore system [187] that masks the system differ-\nences via middleware that exposes a uniﬁed interface.Inverted index-centric search engines based on SMART\n\nare used for exact match searches.These methods have\nbeen supplanted in recent years by similarity search us-\ning ML-generated embeddings (see Sec.2.7). 2.6 Array Databases\nThere are many areas of computing where arrays are an\nobvious data representation.We use the term “array” to\nmean all variants of them [182]: vectors (one dimen-\nsion – see Sec.2.7), matrices (two dimensions), and\ntensors (three or more dimensions).For example, sci-\nentiﬁc surveys for geographic regions usually represent\ndata as a multi-dimensional array that stores sensor mea-\nsurements using location/time-based coordinates:\n\n(latitude, longitude, time, [vector-of-values])\n\nSeveral other data sets look like this, including ge-\nnomic sequencing and computational ﬂuid dynamics.Arrays are also the core of most ML data sets.Although array-based programming languages have\nexisted since the 1960s (APL [142]), the initial work\non array DBMSs began in the 1980s.PICDMS is con-\nsidered to be the ﬁrst DBMS implementation using the\narray data model [114].The two oldest array DBMSs\nstill being developed today are Rasdaman [66, 103] and\nkdb+ [34].Newer array DBMSs include SciDB [54,\n191] and TileDB [76].HDF5 [29] and NetCDF [46] are\npopular array ﬁle formats for scientiﬁc data.There are several system challenges with storing and\nquerying real-world array data sets.Foremost is that ar-\nray data does not always align to a regular integer grid;\nfor example, geospatial data is often split into irregular\nshapes.An application can map such grids to integer\ncoordinates via metadata describing this mapping [166].Hence, most applications maintain array and non-array\ndata together in a single database.Unlike row- or column-based DBMSs, querying array\ndata in arbitrary dimensions presents unique challenges.The difﬁculty arises from storing multi-dimensional ar-\nray data on a linear physical storage medium like a disk.To overcome these challenges, array DBMSs must em-\n\nploy indexing and data structures to support efﬁcient\ntraversal across array dimensions.Discussion: Array DBMSs are a niche market that has\nonly seen adoption in speciﬁc verticals (we discuss vec-\ntor DBMSs next).For example, they have considerable\ntraction in the genomics space.HDF5 is popular for\nsatellite imagery and other gridded scientiﬁc data.But\nbusiness applications rarely use dedicated array DBMSs,\nwhich is necessary for any product to survive.No ma-\njor cloud provider offers a hosted array DBMS service,\nmeaning they do not see a sizable market.The challenge that array DBMS vendors have al-\nways faced is that the SQL includes support for or-\ndered arrays as ﬁrst-class data types (despite this be-\ning against the original RM proposal [115]).The ﬁrst\nproposal to extend the unordered set-based RM with\nordered rasters was in 1993 [155].An early exam-\nple of this was Illustra’s temporal (one-dimensional)\ndata plugin [31].SQL:1999 introduced limited sup-\nport for single-dimension, ﬁxed-length array data types.SQL:2003 expanded to support nested arrays without a\npredeﬁned maximum cardinality.Later entrants include\nOracle Georaster [4] and Teradata [73].Data cubes are\nspecial-purpose arrays [135], but columnar RDBMSs\nhave eclipsed them for OLAP workloads because of\ntheir better ﬂexibility and lower engineering costs [113].More recently, the SQL:2023 standard includes sup-\nport for true multi-dimensional arrays (SQL/MDA) that\nis heavily inspired by Rasdaman’s RQL [166].This\nupdate allows SQL to represent arrays with arbitrary\nIn effect,\ndimensions using integer-based coordinates.this allows data cubes to exist in a SQL framework, but\ncolumnar DBMSs now dominate this market.2.7 Vector Databases\nSimilar to how the column-family model is a reduction\nof the document model, the vector data model simpliﬁes\nthe array data model to one-dimensional rasters.Given\nthat vector DBMSs are attracting the most attention\nright now from developers and investors (similar to the\nNoSQL fad), it is necessary to discuss them separately.The reason for this interest is because developers use\nthem to store single-dimension embeddings generated\nfrom AI tools.These tools use learned transformations\nto convert a record’s data (e.g., text, image) into a vec-\ntor representing its latent semantics.For example, one\ncould convert each Wikipedia article into an embedding\nusing Google BERT and store them in a vector database\nalong with additional article meta-data:\n\n(title, date, author, [embedding-vector])\n\nThe size of these embedding vectors range from 100s\nof dimensions for simple transformers to 1000s for high-\nend models; these sizes will obviously grow over time\nwith the development of more sophisticated models.SIGMOD Record, June 2024 (Vol. 53, No.2)\n\n25\n\n\fThe key difference between vector and array DBMSs\nis their query patterns.The former are designed for\nsimilarity searches that ﬁnd records whose vectors have\nthe shortest distance to a given input vector in a high-\ndimensional space.The input vector is another embed-\nding generated with the same transformer used to popu-\nlate the database.Unlike array DBMSs, applications do\nnot use vector DBMSs to search for matches at an off-\nset in a vector nor extract slices across multiple vectors.Instead, the dominant use case is this similarity search.To avoid brute force scans for ﬁnding the most sim-\nilar records, vector DBMSs build indexes to accelerate\napproximate nearest neighbor (ANN) searches.Appli-\ncations issue queries with predicates on both the em-\nbedding index and non-embedding attributes (i.e., meta-\ndata).The DBMS then chooses whether to use the non-\nembedding predicate on records before (pre-ﬁlter) or af-\nter (post-ﬁlter) the vector search.There are dozens of new DBMSs in this emerging\ncategory, with Pinecone [58], Milvus [40], and Weav-\niate [84] as the leading systems.Text search engines,\nincluding Elasticsearch [23], Solr [70], and Vespa [79],\nexpanded their APIs to support vector search.Other\nDBMSs rebranded themselves as vector databases to\njump on the bandwagon, such as Kdb+ [34].One compelling feature of vector DBMSs is that\nthey provide better integration with AI tools (e.g., Chat-\nGPT [16], LangChain [36]) than RDBMSs.These sys-\ntems natively support transforming a record’s data into\nan embedding upon insertion using these tools and then\nuses the same transformation to convert a query’s in-\nput arguments into an embedding to perform the ANN\nsearch; other DBMSs require the application to perform\nthese transformations outside of the database.Discussion: Unlike array DBMSs that require a cus-\ntomized storage manager and execution engine to sup-\nport efﬁcient operations on multi-dimensional data, vec-\ntor DBMSs are essentially document-oriented DBMSs\nwith specialized ANN indexes.Such indexes are a fea-\nture, not the foundation of a new system architecture.After LLMs became “mainstream” with ChatGPT in\nlate 2022, it took less than one year for several RDBMSs\nIn 2023,\nto add their own vector search extensions.many of the major RDBMSs added vector indexes, in-\ncluding Oracle [7], SingleStore [137], Rockset [8], and\nClickhouse [157].Contrast this with JSON support in\nRDBMSs.NoSQL systems like MongoDB and CouchDB\nbecame popular in the late 2000s and it took several\nyears for RDBMSs to add support for it.There are two likely explanations for the quick pro-\nliferation of vector indexes.The ﬁrst is that similarity\nsearch via embeddings is such a compelling use case\nthat every DBMS vendor rushed out their version and\nannounced it immediately.The second is that the en-\ngineering effort to introduce a new index data structure\n\nis small enough that it did not take that much work for\nthe DBMS vendors to add vector search.Most of them\ndid not write their vector index from scratch and instead\nintegrated an open-source library (e.g., pgVector [145],\nDiskANN [19], FAISS [24]).We anticipate that vector DBMSs will undergo the\nsame evolution as document DBMSs by adding features\nto become more relational-like (e.g., SQL, transactions,\nextensibility).Meanwhile, relational incumbents will\nhave added vector indexes to their already long list of\nfeatures and moved on to the next emerging trend.2.8 Graph Databases\nThere has been a lot of academic and industry interest\nin the last decade in graph databases [183].Many appli-\ncations use knowledge graphs to model semi-structured\ninformation.Social media applications inherently con-\ntain graph-oriented relationships (“likes”, “friend-of”).Relational design tools provide users with an entity-\nrelationship (ER) model of their database.An ER dia-\ngram is a graph; thus, this paradigm has clear use cases.The two most prevalent approaches to represent graphs\nare (1) the resource description framework (RDF) and\n(2) property graphs [126].With property graphs, the\nDBMS maintains a directed multi-graph structure that\nsupports key/value labels for nodes and edges.RDF\ndatabases (aka triplestores) only model a directed graph\nwith labeled edges.Since property graphs are more com-\nmon and are a superset of RDF, we will only discuss\nthem.We consider two use cases for graph DBMSs and\ndiscuss the problems that will limit their adoption.The ﬁrst category of systems are for operational /\nOLTP workloads: an application, for example, adds a\nfriend link in the database by updating a single record,\npresumably in a transactional manner.Neo4j [44] is the\nmost popular graph DBMS for OLTP applications.It\nsupports edges using pointers (as in CODASYL) but it\ndoes not cluster nodes with their “parent” or “offspring”.Such an architecture is advantageous for traversing long\nedge chains since it will do pointer chasing, whereas a\nRDBMS has to do this via joins.But their potential mar-\nket success comes down to whether there are enough\n“long chain” scenarios that merit forgoing a RDBMS.The second use case is analytics, which seeks to de-\nrive information from the graph.An example of this\nscenario is ﬁnding which user has the most friends un-\nder 30 years old.Notable entries like Tigergraph [74]\nand JanusGraph [32] focus on query languages and\nstorage on a graph DBMS.Other systems, such as Gi-\nraph [26] and Turi [78] (formerly Graphlab [27]) pro-\nvide a computing fabric to support parallel execution of\ngraph-oriented programs, typically written by a user.Unlike queries in relational analytics that are charac-\nterized by chains of joins, queries for graph analytics\ncontain operations like shortest path, cut set, or clique\n\n26\n\nSIGMOD Record, June 2024 (Vol.53, No. 2)\n\n\fdetermination. Algorithm choice and data representa-\ntion will determine a DBMS’s performance.This argues\nfor a computing fabric that allows developers to write\ntheir own algorithms using an abstraction that hides\nthe underlying system topology.However, previous\nresearch shows that distributed algorithms rarely out-\nperform single-node implementations because of com-\nmunication costs [160].A better strategy is to compress\na graph into a space-efﬁcient data structure that ﬁts in\nmemory on a single node and then run the query against\nthis data structure.All but the largest graph databases\nare probably best handled this way.Discussion: Regardless of whether a graph DBMS tar-\ngets OLTP or OLAP workloads, the key challenge these\nsystems have to overcome is that it is possible to simu-\nlate a graph as a collection of tables:\n\nNode (node_id, node_data)\nEdge (node_id_1, node_id_2, edge_data)\n\nThis means that RDBMSs are always an option to sup-\nport graphs.But “vanilla” SQL is not expressive enough\nfor graph queries and thus require multiple client-server\nroundtrips for traversal operations.Some RDBMSs, including MSSQL [3] and Oracle [50],\n\nprovide built-in SQL extensions that make storing and\nquerying graph data easier.Other DBMSs use a transla-\ntion layer on top of relations to support graph-oriented\nAPIs.Amazon Neptune [45] is a graph-oriented veneer\non top of Aurora MySQL.Apache AGE provides an\nOpenCypher interface on top of PostgreSQL [10].More recently, SQL:2023 introduced property graph\nqueries (SQL/PGQ) for deﬁning and traversing graphs\nin a RDBMS [196].The syntax builds on existing lan-\nguages (e.g., Neo4j’s Cypher [49], Oracle’s PGQL [51],\nand TigerGraph’s GSQL [75]), and shares aspects of the\nemerging GQL standard [126].Thus, SQL/PGQ further\nnarrows the functionality difference between RDBMSs\nand native graph DBMSs.The question is whether graph DBMS vendors can\nmake their specialized systems fast enough to over-\ncome the above disadvantages.There have been several\nperformance studies showing that graph simulation on\nRDBMSs outperform graph DBMSs [130, 143].More\nrecent work showed how SQL/PGQ in DuckDB outper-\nforms a leading graph DBMS by up to 10\n[196].This\ntrend will continue with further improvements in worst-\ncase optimal joins [132, 168] and factorized execution\nalgorithms [100] for graph queries in RDBMSs.⇥\n\n2.9 Summary\nA reasonable conclusion from the above section is that\nnon-SQL, non-relational systems are either a niche mar-\nket or are fast becoming SQL/RM systems.Speciﬁcally:\n\n•\n\nMapReduce Systems: They died years ago and are,\nat best, a legacy technology at present.•\n\n•\n\n•\n\n•\n\n•\n\n•\n\n•\n\nKey-value Stores: Many have either matured into\nRM systems or are only used for speciﬁc problems.These can generally be equaled or beaten by modern\nhigh-performance RDBMSs.Document Databases: Such NoSQL systems are on\na collision course with RDBMSs.The differences\nbetween the two kinds of systems have diminished\nover time and should become nearly indistinguish-\nable in the future.Column-Family Systems: These remain a niche\nmarket.Without Google, this paper would not be\ntalking about this category.Text Search Engines: These systems are used for\ntext ﬁelds in a polystore architecture.It would be\nvaluable if RDBMSs had a better story for search so\nthese would not have to be a separate product.Array Databases: Scientiﬁc applications will con-\ntinue to ignore RDBMSs in favor of bespoke array\nsystems.They may become more important because\nRDBMSs cannot efﬁciently store and analyze arrays\ndespite new SQL/MDA enhancements.Vector Databases: They are single-purpose DBMSs\nwith indexes to accelerate nearest-neighbor search.RM DBMSs should soon provide native support for\nthese data structures and search methods using their\nextendable type system that will render such special-\nized databases unnecessary.Graph Databases: OLTP graph applications will\nbe largely served by RDBMSs.In addition, ana-\nlytic graph applications have unique requirements\nthat are best done in main memory with specialized\ndata structures.RDBMSs will provide graph-centric\nAPIs on top of SQL or via extensions.We do not ex-\npect specialized graph DBMSs to be a large market.Beyond the above, there are also proposals to rebrand\nprevious data models as something novel.For example,\ngraph-relational [158] is the same as the semantic data\nmodel [202].Likewise, document-relational is the doc-\nument model with foreign keys [199].Others provide a\nnon-SQL veneer over a RDBMS (e.g., PRQL [64], Mal-\nloy [39]).Although these languages deal with some of\nSQL’s shortcomings, they are not compelling enough to\novercome its entrenched userbase and ecosystem.3 System Architectures\nThere have been major new ideas in DBMS architec-\ntures put forward in the last two decades that reﬂect-\ning changing application and hardware characteristics.These ideas range from terriﬁc to questionable, and we\ndiscuss them in turn.3.1 Columnar Systems\nTo understand the appeal of columnar DBMSs, we need\nto explain the origins of the data warehouse (OLAP)\nmarket.Beginning in the mid-1990s, enterprises started\n\nSIGMOD Record, June 2024 (Vol.53, No. 2)\n\n27\n\n\fcollecting their customer facing (usually sales) data.Brick-and-mortar retailers (e.g., Walmart) were at fore-\nfront of constructing historical sales databases.These\ncompanies generally found that a sales data warehouse\nwould pay for itself in better stock ordering and rota-\ntion decisions within six months.Such customer facing\ndatabases are now omnipresent in enterprises.Data warehouse applications have common proper-\n\nties that are distinct from OLTP workloads:\n1.They are historical in nature (i.e., they are loaded\n\nperiodically and then are read-only). 2.Organizations retain everything as long as they can\n\nafford the storage — think terabytes to petabytes.3. Queries typically only access a small subset of at-\ntributes from tables and are ad-hoc in nature.Ralph Kimball was an early proponent of star schema\ndata modelling for data warehouses [148, 149].The idea\nwas to construct a fact table that held item-level trans-\nactional data.The classic example is a fact table that\ncontains a record for every item purchased in a retail en-\nterprise.Then, one surrounds the fact table with dimen-\nsion tables that contain common information factored\nout from the fact table to save space.Again, in a retail\nsetting, these dimension tables would include informa-\ntion about customers, products, stores, and time.Organizing the DBMS’s storage by columns instead\nof rows has several beneﬁts [87].First, compressing\ncolumnar data is more effective than row-based data be-\ncause there is a single value type in a data block of-\nten many repeated bytes.Second, a Volcano-style en-\ngine executes operators once per row.In contrast, a\ncolumn-oriented engine has an inner loop that processes\na whole column using vectorized instructions [106, 147].Lastly, row stores have a large header for each record\n(e.g., 20 bytes) to track nulls and versioning meta-data,\nwhereas column stores have minimal storage overhead\nper record.Discussion: Over the last two decades, all vendors ac-\ntive in the data warehouse market have converted their\nofferings from a row store to a column store.This tran-\nsition brought about signiﬁcant changes in the design\nof DBMSs.In addition, several new vendors have en-\ntered the market in the last two decades with column\nstore offerings, for example Amazon’s Redshift [94] and\nGoogle’s BigQuery [162] along with offerings from in-\ndependent companies (e.g., Snowﬂake [121]).In summary, column stores are new DBMS implemen-\ntations with specialized optimizers, executors, and stor-\nage formats.They have taken over the data warehouse\nmarketplace because of their superior performance.3.2 Cloud Databases\nThe rise of cloud platforms in the late 2000s has also\ngreatly affected the implementation (and sales model) of\n\nDBMSs.Initial cloud DBMS offerings repackaged on-\nprem systems into managed VMs with direct-attached\nstorage.But over the last 20 years, networking band-\nwidth has increased much faster than disk bandwidth,\nmaking network attached storage (NAS) attractive as an\nalternative to attached storage.This has caused a pro-\nfound rethinking of DBMS architectures for the cloud.All major cloud vendors offer NAS via object stores\n(e.g., Amazon S3) with some DBMS functionality (e.g.,\nreplication, ﬁltering).Beyond better economics com-\npared to direct-attached storage, object stores have sev-\neral advantages that compensate for the cost of the\nadded network link.First, because the compute nodes\nare disconnected from the storage nodes, a system can\nprovide per-query elasticity; the DBMS can add new\ncompute nodes dynamically without having to reshufﬂe\ndata.It also allows the DBMS to use different hard-\nware for its storage nodes than compute nodes.Second,\nthe system can reassign compute nodes to other tasks\nif a DBMS is underutilized.On the other hand, in a\nshared-nothing DBMS, a node must always be online to\nhandle incoming query requests.Lastly, pushing down\ncomputation into the storage nodes is possible (and gen-\nerally advantageous).This execution strategy is known\nas “pushing the query to the data” versus “pulling the\ndata to the query” and is well understood in DBMSs.Generally, the ﬁrst two ideas are called “serverless\ncomputing”, and was introduced for cloud-native DBMSs\nby Snowﬂake [121].Other vendors have moved or\nare in the process of moving to a serverless environ-\nment for their cloud offerings.Effective utilization of\nthis model requires a hosted multi-node environment in\nwhich multiple DBMS customers are grouped onto the\nsame node(s) with a multi-tenant execution scheme.Discussion: The advent of cloud databases is another\nexample of “what goes around comes around”.Multi-\nnode shared-disk DBMSs are an old idea that histori-\ncally tended not to work out well.However, it is back in\nvogue with technology change (faster networking) and\nmoving to the cloud.In addition, time-sharing services\nwere popular in the 1970s when computers were big and\nexpensive.Cloud platforms are big time-sharing ser-\nvices, so the concept is back after a few decades.Since\nenterprises are moving everything possible to the cloud,\nwe expect this shared-disk to dominate DBMS architec-\ntures.Hence, we do not foresee shared-nothing architec-\ntures resurfacing in the future.The cloud has profoundly impacted DBMSs, causing\nthem to be completely re-architected.The movement\nof computing from on-prem to the cloud generates a\nonce-in-a-lifetime opportunity for enterprises to refac-\ntor codebases and remove bad historical technology de-\ncisions.A cloud environment also provides several ben-\neﬁts to vendors that are not possible with on-prem de-\nployments.Foremost is that vendors can track usage\n\n28\n\nSIGMOD Record, June 2024 (Vol. 53, No.2)\n\n\ftrends for all their customers: they can monitor unex-\npected behavior, performance degradations, and usage\npatterns.Moreover, they can push incremental updates\nand code patches without disrupting service.From a business perspective, open-source DBMSs\nface the danger of becoming too popular and being mon-\netized by the major cloud providers.The public spats\nbetween Amazon and ISVs like MongoDB [153] and\nElasticsearch [101] are notable examples.3.3 Data Lakes / Lakehouses\nAnother trend that the cloud platforms fomented is the\nmovement away from monolithic, dedicated data ware-\nhouses for OLAP workloads and towards data lakes\nbacked by object stores.With legacy data warehouses,\norganizations load data into the DBMS, which the sys-\ntem stashes in managed storage with proprietary for-\nmats.Vendors viewed their DBMSs as the “gatekeepers”\nfor all things related to data in an organization.However,\nthis has not been the model of many organizations, es-\npecially technology companies, for the last decade.With a data lake architecture, applications upload ﬁles\nto a distributed object store, bypassing the traditional\nroute through the DBMS [167].Users then execute\nqueries and processing pipelines on these accumulated\nﬁles using a lakehouse (a portmanteau of data ware-\nhouse and data lake) execution engine [93].These lake-\nhouse systems provide a uniﬁed infrastructure support-\ning SQL and non-SQL workloads.The latter is crucial\nas the last decade has shown that data scientists and ML\npractitioners typically use Python-based notebooks that\nuse Panda’s DataFrame API [159] to access data instead\nof SQL.Several projects leverage DBMS methods to\noptimize DataFrame processing, including Dask [181],\nPolars [61], Modin [177], and Bodo [198].Instead of using DBMS-speciﬁc proprietary ﬁle for-\nmats or inefﬁcient text-based ﬁles (e.g., CSV, JSON),\napplications write data to data lakes using open-source,\ndisk-resident ﬁle formats [203].The two most pop-\nular formats are Twitter/Cloudera’s Parquet [55] and\nMeta’s ORC [53, 140].Both of them borrow tech-\nniques from earlier columnar storage research, such as\nPAX [90], compression [87], and nested-data (JSON)\nshredding [121, 161].Apache Arrow [11] is a similar\nbinary format for exchanging in-memory data between\nsystems.Open-source libraries for reading/writing these\nformats allow disparate applications to create data ﬁles\nthat other systems then parse and consume, thereby en-\nhancing data sharing across services and business units.Discussion: Data lakes are the successor to “Big Data”\nmovement from the early 2010s, partly led by the pop-\nularity of MR systems (Sec.2.1) and column stores\n(Sec. 3.1).At ﬁrst glance, a data lake seems like a terri-\nble idea for an organization: allowing any application to\nwrite arbitrary ﬁles into a centralized repository without\n\nany governance is a recipe for integrity, discovery, and\nversioning problems [167].Lakehouses provide much-\nneeded control over these environments to help mitigate\nmany problems with meta-data, caching, and indexing\nservices [93].Additional middleware that tracks new\ndata and supports transactional updates, such as Delta\nLake [92], Iceberg [6], and Hudi [5], make lakehouses\nlook more like a traditional data warehouse.Data lakes introduce new challenges to query opti-\nmization.DBMSs have always struggled with acquir-\ning precise statistics on data,\nleading to poor query\nplan choices [154].However, a data lake system may\ncompletely lack statistics on newly ingested data ﬁles.Consequently, incorporating adaptive query processing\nstrategies is imperative in the cloud to enable a DBMS to\ndynamically modify query plans during execution based\non observed data characteristics [97, 105, 163].All the major cloud vendors now offer some variation\nof a managed data lake service.Since data lake sys-\ntems backed by object stores are much cheaper per giga-\nbyte than proprietary data warehouses, the legacy OLAP\nvendors (e.g., Teradata, Vertica) have extended their\nDBMSs to support reading data from object stores in re-\nsponse to this pricing pressure.Several independent sys-\ntems are also in this space, including Databricks [105],\nDremio [21], PrestoDB [63], and Trino [77].3.4 NewSQL Systems\nIn the late 2000s, there were multiple distributed NoSQL\nDBMSs available designed to scale horizontally to sup-\nport online applications with large number of concurrent\nusers [110].However, many organizations could not use\nthese NoSQL systems because their applications could\nnot give up strong transactional requirements.But the\nexisting RDBMSs (especially open-source ones) were\nnot able to (natively) scale across multiple machines.In\nresponse, NewSQL systems arrived in the early 2010s\nseeking to provide the scalability of NoSQL systems for\nOLTP workloads while still supporting SQL [95, 171].In other words, these new systems sought to achieve the\nsame scalability of NoSQL DBMSs from the 2000s but\nstill keep the RM and ACID transactions of the legacy\nDBMSs from the 1990s.There were two main groups of NewSQL systems.The ﬁrst was in-memory DBMSs, including H-Store [144,\n189] (commercialized as VoltDB [83]), SingleStore [69],\nMicrosoft Hekaton [128], and HyPer [146].Other start-\nup offerings included disk-oriented, distributed DBMSs\nlike NuoDB [47] and Clustrix [17].Discussion: There has yet to be a dramatic uptake in\nNewSQL DBMS adoption [96].The reason for this lack-\nluster interest is that existing DBMSs were good enough\nfor the time, which means organizations are unwilling to\ntake on the costs and risk of migrating existing applica-\ntions to newer technologies.Companies are more risk-\n\nSIGMOD Record, June 2024 (Vol. 53, No.2)\n\n29\n\n\faverse with changing OLTP DBMSs than with OLAP.If an OLTP DBMS fails, companies cannot execute the\ntransactions they need to generate revenue.In contrast,\nan OLAP DBMS failure could be limited to temporarily\ninconveniencing an analyst or data scientist.There were other restrictions in NewSQL DBMSs,\nsuch as only supporting a subset of standard SQL or\nbad performance on multi-node transactions.Some\nNewSQL products, like Microsoft’s Hekaton, were only\navailable as an extension to a legacy DBMS, requiring\nthe faster engine to use the slower DBMS’s interfaces.NewSQL vendors also incorrectly anticipated that in-\nmemory DBMS adoption would be larger in the last\ndecade.Flash vendors drove down costs while improv-\ning storage densities, bandwidth, and latencies.Higher\nDRAM costs and the collapse of persistent memory\n(e.g., Intel Optane) means that SSDs will remain domi-\nnant for OLTP DBMSs.The aftermath of NewSQL is a new crop of distributed,\ntransactional SQL RDBMSs.These include TiDB [141],\nCockroachDB [195], PlanetScale [60] (based on the\nVitess sharding middleware [80]), and YugabyteDB [86].The major NoSQL vendors also added transactions to\ntheir systems in the last decade despite previously strong\nclaims that they were unnecessary.Notable DBMSs that\nmade the shift include MongoDB, Cassandra, and Dy-\nnamoDB.This is of course due to customer requests\nthat transactions are in fact necessary.Google said this\ncogently when they discarded eventual consistency in\nfavor of real transactions with Spanner in 2012 [119].3.5 Hardware Accelerators\nThere has been a hunt for a cost-effective hardware ac-\ncelerator for DBMSs for the last 50 years.The promise\nis obvious: specialized hardware designed for a DBMS\nshould easily outperform a conventional CPU.In the 1980s, vendors fabricated custom hardware to\naccelerate DBMSs and marketed them as database ma-\nchines [107].Britton-Lee released the ﬁrst commercial\naccelerator product (IDM/500) in 1981 [192] that con-\ntained a conventional CPU with a hardware accelerator\nthat ofﬂoaded portions of a query’s execution.This ac-\ncelerator targeted a small subset of the execution path,\nand was not cost-effective.Teradata introduced its own\ndatabase machine that provided network hardware for\nsorting in-ﬂight tuples (Y-net [1]), but it was dropped\nfor a software-only solution [85].All other custom hard-\nware DBMS acceleration during the 1980s failed.Instead of building custom hardware for DBMSs, the\nlast 20 years have been about using commodity hard-\nware (FPGAs, GPUs) to accelerate queries.This is an\nenticing idea: a vendor can get the beneﬁts of a DBMS\naccelerator without the cost of fabricating the hardware.Netezza was one of the ﬁrst FPGA-based DBMSs\nthat started in the late 1990s as a fork of PostgreSQL.It used an FPGA to accelerate searches on disk-resident\npages, but originally could not search in-memory pages.Netezza corrected this limitation in a later version [2].Swarm64 attempted to sell a FPGA accelerator for Post-\ngreSQL but switched to a software-only architecture\nwithout the FPGA before they were acquired [91].Vitesse’s\nDeepgreen DB [81] is the only remaining FPGA-enhanced\nDBMS available from an ISV.There is more activity in the GPU-accelerated DBMS\nmarket.Notable GPU DBMSs include Kinetica [35],\nSqream [35], Brytlyt [13], and HeavyDB [48].If data\ndoes not ﬁt in GPU memory, then query execution is\nbottlenecked on loading data into the device, thereby\nrendering the hardware’s parallelization beneﬁts moot.Discussion: There are several conclusions that we can\ndraw from the above analysis.First, these systems are\nall focused on the OLAP market and only for RDBMSs;\nthere are essentially no data model implications to the\ndiscussion in this section.Also, OLAP workloads will\ncontinue to move aggressively to the cloud, but special-\npurpose hardware is not likely to ﬁnd acceptance unless\nit is built by the cloud vendor.Creating custom hardware just for a DBMS is not\ncost-effective for most companies.Commodity hard-\nware avoids this problem but there is still the challenge\nof integrating the hardware into a DBMS.The reason\nwhy there are more GPU DBMSs than FPGA systems\nis because there are existing support libraries available\nfor GPUs (e.g., Nvidia CUDA [169]).But cloud CPU-\nbased compute resources are incredibly cheap due to\neconomies of scale.The success of any accelerator is\nlikely to be limited to on-prem databases, but this mar-\nket is not growing at the same rate as cloud databases.Even if one could get an accelerator to market that\nshowed orders of magnitude improvement over existing\ntechnologies, that only solves half the problem needed\nfor adoption and success.A hardware-only company\nmust ﬁnd somebody to add support for its accelerator\nin a DBMS.If the accelerator is an optional add-on to\nthe DBMS, then adoption will be low and thus a DBMS\nvendor will not want to spend engineering time on sup-\nporting it.If the accelerator is a critical component of\nthe DBMS, then no vendor would outsource the devel-\nopment of such an important part to an outside vendor.The only place that custom hardware accelerators will\nsucceed is for the large cloud vendors.They can justify\nthe $50–100m R&D cost of custom hardware at their\nmassive scale.They also control the entire stack (hard-\nware and software) and can integrate their hardware at\ncritical locations.Amazon did this already with their\nRedshift AQUA accelerators [102].Google BigQuery\nhas custom components for in-memory shufﬂes [89].In spite of the long odds, we predict that there will be\nmany attempts in this space over the next two decades.30\n\nSIGMOD Record, June 2024 (Vol. 53, No.2)\n\n\f3.6 Blockchain Databases\nAs of this writing, a waning database technology fad\nis blockchains.These are decentralized log-structured\ndatabases (i.e., ledger) that maintain incremental check-\nsums using some variation of Merkle trees.These in-\ncremental checksums are how a blockchain ensures that\nthe database’s log records are immutable: applications\nuse these checksums to verify that previous database up-\ndates have not been altered.The ideal use case for blockchain databases is peer-to-\npeer applications where one cannot trust anybody.There\nis no centralized authority that controls the ordering of\nupdates to the database.Thus, blockchain implementa-\ntions use a BFT commit protocol to determine which\ntransaction to apply to the database next.At the present time, cryptocurrencies (Bitcoin) are\nthe only use case for blockchains.In addition, there\nhave been attempts to build a usable DBMS on top of\nblockchains, notably Fluree [25], BigChainDB [12], and\nResilientDB [136].These vendors (incorrectly) promote\nthe blockchain as providing better security and auditabil-\nity that are not possible in previous DBMSs.Discussion: We are required to place trust in several en-\ntities in today’s society.When one sells a house, they\ntrust the title company to manage the transaction.The\nonly applications without real-world trust are dark web\ninteractions (e.g., money laundering).Legitimate busi-\nnesses are unwilling to pay the performance price (about\nﬁve orders of magnitude) to use a blockchain DBMS.If\norganizations trust each other, they can run a shared dis-\ntributed DBMS more efﬁciently without wasting time\nwith blockchains.To the best of our knowledge, all the\nmajor cryptocurrency exchanges run their businesses off\ntraditional RDBMSs and not blockchain systems.Blockchain proponents make additional meaningless\nclaims of achieving data resiliency through replication\nin a peer-to-peer environment.No sensible company\nwould rely on random participants on the Internet as the\nbackup solution for mission-critical databases.There is possibly a (small) market for private block-\nchain DBMSs.Amazon’s Quantum Ledger Database\n(QLDB) released in 2018 [65] provides the same im-\nmutable and veriﬁable update guarantees as a blockchain,\nbut it is not decentralized (i.e., no BFT commit protocol).Amazon built QLDB after ﬁnding no compelling use\ncase for a fully decentralized blockchain DBMS [108].3.7 Summary\nThe key takeaways from the major technological thrusts\nin database systems are as follows:\n\n•\n\n•\n\nColumnar Systems: The change to columnar stor-\nage revolutionized OLAP DBMS architectures.Cloud Databases: The cloud has upended the con-\nventional wisdom on how to build scalable DBMSs.Except for embedded DBMSs, any product not start-\ning with a cloud offering will likely fail.Data Lakes / Lakehouses: Cloud-based object stor-\nage using open-source formats will be the OLAP\nDBMS archetype for the next ten years.NewSQL Systems: They leverage new ideas but\nhave yet to have the same impact as columnar and\ncloud DBMSs.It has led to new distributed DBMSs\nthat support stronger ACID semantics as a counter\nto NoSQL’s weaker BASE guarantees.Hardware Accelerators: We do not see a use case\nfor specialized hardware outside of the major cloud\nvendors, though start-ups will continue to try.Blockchain Databases: An inefﬁcient technology\nlooking for an application.History has shown this is\nthe wrong way to approach systems development.•\n\n•\n\n•\n\n•\n\n4 Parting Comments\nOur analysis of the last two decades in databases has sev-\neral takeaways.Unfortunately, some of these are repeats\nof the warnings from the 2005 paper.Never underestimate the value of good marketing for\nbad products.The database market is highly competi-\ntive and lucrative.This competition drives vendors to\nclaim that their new technologies will solve all sorts of\nproblems and change developers’ lives for the better.Ev-\nery developer has struggled with databases before, so\nthey are especially amenable to such marketing.Infe-\nrior DBMS products have succeeded via strong market-\ning despite the existence of better options available at\nthe time: Oracle did this in the 1980s, MySQL did this\nin the 2000s, and MongoDB did this in the 2010s.These\nsystems got enough traction early on to buy them time\nto ﬁx the engineering debt they accumulated earlier.Beware of DBMSs from large non-DBMS vendors.One interesting aspect in the last ten years of databases\nis the trend of tech companies building DBMSs in-house\nthat they then spin out as open-source projects.All these\nsystems started life as purpose-built applications for a\ntech company.The company then releases the DBMS\nas an open-source project (often pushed to the Apache\nFoundation for stewardship) in hopes to achieve “free”\ndevelopment from external users.Some times they come from large companies that can\nafford to allocate resources to developing new systems.Notable examples include Meta (Hive [197], Presto [63],\nCassandra [14], RocksDB [68]) and LinkedIn (Kafka [33],\nPinot [59], Voldemort [82]).Other systems are from\nstart-ups building a data-intensive product where they\nfelt the need to also build a DBMS.The most successful\nexamples are 10gen (MongoDB) and PowerSet (HBase),\nbut there also many failed endeavors.This trend to avoid “not invented here” software is\npartly because many companies’ promotion path favors\n\nSIGMOD Record, June 2024 (Vol.53, No. 2)\n\n31\n\n\fengineers who make new internal systems, even if ex-\nisting tools are sufﬁcient.But this perversion led many\nteams without DBMS engineering experience to under-\ntake building a new system.One should be wary of\nsuch systems when a company ﬁrst open-sources them,\nas they are almost always immature technologies.Do not ignore the out-of-box experience.One of the\nsalient selling points of many non-relational DBMSs is\na better “out-of-box” experience than RDBMSs.Most\nSQL systems require one ﬁrst to create a database and\nthen deﬁne their tables before they can load data.This\nis why data scientists use Python notebooks to analyze\ndata ﬁles quickly.Every DBMS should, therefore, make\nit easy to perform in situ processing of local and cloud-\nstorage ﬁles.DuckDB’s rising popularity is partly due\nto its ability to do this well.Vendors should also consider additional challenges\nthat customers will inevitably face with databases, in-\ncluding physical design, knob tuning, schema design,\nand query tuning.There is a crucial need for what one\nof us calls “self-driving” DBMSs [173].Developers need to query their database directly.Most OLTP applications created in the last 20 years pri-\nmarily interact with databases via an abstraction layer,\nsuch as an endpoint API (e.g., REST, GraphQL) or\nan object-relational mapper (ORM) library.Such lay-\ners translate an application’s high-level requests into\ndatabase queries.ORMs also automatically handle main-\ntenance tasks, such as schema migrations.One could\nargue that since OLTP developers never write raw SQL\nin their applications, it does not matter what data model\ntheir DBMS uses as these layers hide it.ORMs are a vital tool for rapid prototyping.But they\noften sacriﬁce the ability to push logic into the DBMS\nin exchange for interoperability with multiple DBMSs.Developers fall back to writing explicit database queries\nto override the poor auto-generated queries.This is why\nusing a RDBMS that supports SQL is the better choice.The impact of AI/ML on DBMSs will be signiﬁcant.How DBMSs should interact with modern AI/ML tools\nhas recently become a crucial question, especially with\nthe advent of LLMs (e.g., ChatGPT).Although this ﬁeld\nis moving rapidly, we offer a few initial comments.There is a resurgence in using natural languages (NLs)\nto query databases due to advancements in LLMs at\nconverting NL to query code (e.g., SQL) [133].Some\nhave even suggested that such AI-powered query inter-\nfaces will render SQL obsolete.NL interfaces are an\nold research topic that dates back to the 1970s [139],\nbut which historically has poor outcomes and thus little\nwidespread use [88].We acknowledge LLMs have im-\npressive results for this task but caution those who think\nNL will replace SQL.Nobody will write OLTP appli-\ncations using an NL, as most generate queries using\n\nORMs.For OLAP databases, NL could prove helpful\nin constructing the initial queries for exploratory anal-\nysis.However, these queries should be exposed to a\ndashboard-like reﬁnement tool since English and other\nNLs are rife with ambiguities and impreciseness.There is a reluctance to depend on current LLM tech-\nnology for decision-making inside the enterprise, espe-\ncially with ﬁnancial data.The biggest issue is that the\noutput of an LLM is not explainable to a human.Sec-\nond, LLM systems require more training data than “tra-\nditional” ML systems (e.g., random forests, Bayesian\nmodels).Companies generally cannot outsource the cre-\nation of training data for these models to unskilled peo-\nple.For these reasons, the uptake of LLMs for enter-\nprise data will be cautiously slow.Lastly, there is a considerable amount of recent re-\nsearch on using AI/ML to optimize the DBMSs [174].Examples include ML-oriented query optimizers [152,\n156], conﬁguration tuners [200, 204], and access meth-\nods [151, 193].Although such ML-assisted optimiza-\ntions are powerful tools to improve the performance of\nDBMSs, it does not obviate the need for high-quality\nsystems engineering.5 Conclusion\nWe predict that what goes around with databases will\ncontinue to come around in upcoming decades.Another\nwave of developers will claim that SQL and the RM are\ninsufﬁcient for emerging application domains.People\nwill then propose new query languages and data models\nto overcome these problems.There is tremendous value\nin exploring new ideas and concepts for DBMSs (it is\nwhere we get new features for SQL).The database re-\nsearch community and marketplace are more robust be-\ncause of it.However, we do not expect these new data\nmodels to supplant the RM.Another concern is the wasted effort of new projects\nreimplementing the same components that are not novel\nbut necessary to have a production-ready DBMS (e.g.,\nconﬁg handlers, parsers, buffer pools).To accelerate\nthe next generation of DBMSs, the community should\nfoster the development of open-source reusable compo-\nnents and services [112, 176].There are some efforts to-\nwards this goal, including for ﬁle formats (see Sec.3.3),\nquery optimization (e.g., Calcite [104], Orca [186]), and\nexecution engines (e.g., DataFusion [18], Velox [175]).We contend that the database community should strive\nfor a POSIX-like standard of DBMS internals to accel-\nerate interoperability.We caution developers to learn from history.In other\nwords, stand on the shoulders of those who came before\nand not on their toes.One of us will likely still be alive\nand out on bail in two decades, and thus fully expects to\nwrite a follow-up to this paper in 2044.32\n\nSIGMOD Record, June 2024 (Vol. 53, No.2)\n\n\fReferences\n\n[1] TeraData Forums.https://downloads.teradata.com/forum/\ndatabase/what-is-the-difference-between-a-ynet-and-\nbynet, September 2011.[2] Netezza TwinFin Architecture.https://www.iexpertify.com/\nlearn/netezza-twinfin-architecture/#.YYq5_S1h17Y,\nApril 2020.[3] Graph processing with sql server and azure sql database.https://docs.microsoft.com/en-us/sql/relational-\ndatabases/graphs/sql-graph-overview, 2021.[4] Georaster in oracle database.https://www.oracle.com/a/\n\ntech/docs/georaster-2021.pdf, mar 2021.[5] Apache Hudi. https://hudi.apache.org/, 2023.[6] Apache Iceberg. https://iceberg.apache.org/, 2023.[7] Oracle introduces integrated vector database to augment\ngenerative ai and dramatically increase developer produc-\nhttps://www.oracle.com/news/announcement/ocw-\ntivity.integrated-vector-database-augments-generative-ai-\n2023-09-19/, sep 2023.[8] Introducing vector search on rockset.https://rockset.com/\nblog/introducing-vector-search-on-rockset/, apr 2023.\nhttps://docs.aerospike.com/tools/aql,\n\n[9] Aerospike AQL.2024. [10] Apache AGE. https://age.apache.org, 2024.[11] Apache Arrow. https://arrow.apache.org, 2024.[12] BigchainDB. https://www.bigchaindb.com/, 2024.[13] Brytlyt. https://brytlyt.io/, 2024.[14] Apache Cassandra. https://cassandra.apache.org, 2024.[15] The Cassandra Query Language\n\n(CQL).https:\n\n//cassandra.apache.org/doc/latest/cassandra/cql/,\n2024.[16] ChatGPT Plugins. https://openai.com/blog/chatgpt-\n\nplugins, March 2024.[17] Clustrix. https://clustrix.com, 2024. [18] Apache Arrow DataFusion.https://arrow.apache.org/\n\nhaystack.readthedocs.io, 2024.[21] Dremio. https://dremio.com/, 2024.[22] Apache drill. https://drill.apache.org, 2024.[23] Elasticsearch. https://www.elastic.co, 2024.[24] FAISS – Facebook AI Similarity Search.ai.facebook.com/tools/faiss/, 2024.\n\nhttps://\n\n[25] Fluree.https://flur.ee/, 2024. [26] Apache Giraph.https://giraph.apache.org, 2024. [27] Graphlab.https://en.wikipedia.org/wiki/GraphLab, 2024.[28] Apache Hbase. https://hbase.apache.org, 2024.[29] The hdf5 library & ﬁle format.https://www.hdfgroup.org/\n\nsolutions/hdf5, 2024.[30] Apache Hive. https://hive.apache.org, 2024.[31] Informix extensions and datablade modules.https:\n\n//www.ibm.com/docs/en/informix-servers/12.10?topic=\ninformix-extensions-datablade-modules, 2024.[32] Janusgraph. https://janusgraph.org/, 2024.[33] Apache Kafka. https://kafka.apache.org/, 2024.[34] kdb+. https://kx.com/, 2024.[35] Kinetica. https://www.kinetica.com/, 2024.[36] LangChain. https://langchain.com, 2024.[37] LevelDB. https://github.com/google/leveldb, 2024.[38] Apache Lucene. https://lucene.apache.org, 2024.[39] Malloy - Experimental Language.looker-open-source/malloy, 2024.[40] Milvus. https://milvus.io/, 2024. [41] MongoDB.https://mongodb.com, 2024.\n\nhttps://github.com/\n\n[42] Mongodb – querying with sql.https://docs.mongodb.com/\n\ndatalake/admin/query-with-sql/, 2024.[43] MySQL\n\n–\n\nInnoDB Full-Text\n\nIndexes.https:\n\n//dev.mysql.com/doc/refman/8.0/en/innodb-fulltext-\nindex.html, 2024.[44] Neo4j. https://neo4j.com/, 2024. [45] Amazon Neptune.https://aws.amazon.com/neptune/, 2024.[46] Network Common Data Form (NetCDF).https://\n\nwww.unidata.ucar.edu/software/netcdf/, 2024.[47] Nuodb. https://nuodb.com, 2024.[48] Heavydb. https://www.heavy.ai, 2024.[49] openCypher. https://opencypher.org, 2024. [50] Oracle graph database.https://www.oracle.com/database/\n\ngraph/, 2024.\n\nlang.org/, 2024.[51] PGQL – Property Graph Query Language.https://pgql-\n\n[52] Oracle\n\nText.https://www.oracle.com/database/\n\ntechnologies/datawarehouse-bigdata/text.html, 2024.[53] Apache ORC. https://orc.apache.org/, 2024.[54] Paradigm4 platform overview.https://www.paradigm4.com/\n\ntechnology/scidb-platform-overview/, 2024.[55] Apache Parquet. https://parquet.apache.org/, 2024.[56] Partiql – sql-compatible access to relational, semi-structured,\n\nand nested data.https://partiql.org/, 2024. [57] Apache Phoenix.https://phoenix.apache.org, 2024.[58] Pinecone. https://www.pinecone.io/, 2024.[59] Apache Pinot. https://pinot.apache.org/, 2024.[60] PlanetScale. https://planetscale.com/, 2024.[61] Polars. https://www.pola.rs, 2024. –\n[62] PostgreSQL\n\nSearch.Text\n\nFull\n\nwww.postgresql.org/docs/current/textsearch.html,\n2024.\n\nhttps://\n\n[63] PrestoDB.https://prestodb.io/, 2024. [64] PRQL – A Proposal for a Better SQL.https://prql-\n\nlang.org/, 2024.[65] Amazon Quantum Ledger Database (QLDB).https://\n\n[67] Redis. https://redis.io/, 2024.[68] RocksDB. https://rocksdb.org, 2024.[69] Singestore. https://www.singlestore.com/, 2024.[70] Apache Solr. https://solr.apache.org/, 2024.[71] SQLite. https://www.sqlite.org, 2024.[72] Sql++ – the next-generation query language for managing json\ndata.https://www.couchbase.com/sqlplusplus, 2024.[73] Teradata – creating an array data\n\ntype.https:\n\n//docs.teradata.com/r/S0Fw2AVH8ff3MDA0wDOHlQ/\nun3kj~t3qMDO66LF4YXuiw, 2024.[74] Tigergraph. https://www.tigergraph.com/, 2024.[75] Tigergraph – gsql. https://www.tigergraph.com/gsql/,\n\n2024.[76] Tiledb. https://tiledb.com, 2024.[77] Trino. https://trino.io/, 2024.[78] Turi. http://turi.com/, 2024.[79] Vespa. https://vespa.ai/, 2024.[80] Vitess. https://vitess.io, 2024. [81] Vitesse Deepgreen DB.products/deepgreen-db/, 2024.\n\nhttps://www.vitessedata.com/\n\n[82] Project Voldemort.https://www.project-voldemort.com,\n\n2024.[83] Voltdb. https://www.voltactivedata.com/, 2024.[84] Weaviate. https://weaviate.io, 2024.[85] Dbc 1012. https://en.wikipedia.org/wiki/DBC_1012, 2024.[86] YugabyteDB. https://www.yugabyte.com/, 2024. [87] D. J. Abadi.Query Execution in Column-Oriented Database\n\nSystems.PhD thesis, MIT, 2008.\n\ndatafusion/, 2024.[19] Microsoft DiskANN. DiskANN, 2024. [20] Django\n\nHaystack.https://github.com/microsoft/\n\nhttps://django-\n\naws.amazon.com/qldb/, 2024.[66] The\n\nraster\nrasdaman\nwww.rasdaman.org, 2024.\n\narray\n\ndatabase.http://\n\nSIGMOD Record, June 2024 (Vol. 53, No.2)\n\n33\n\n\f[88] K. Affolter, K. Stockinger, and A. Bernstein.A compara-\ntive survey of recent natural language interfaces for databases.VLDB J., 28(5):793–819, 2019. doi: 10.1007/s00778-019-\n00567-8.[89] H. Ahmadi. In-memory query execution in google bigquery.https://cloud.google.com/blog/products/bigquery/in-\nmemory-query-execution-in-google-bigquery, Aug 2016.[90] A. Ailamaki, D. J. DeWitt, M. D. Hill, and M. Skounakis.Weaving relations for cache performance.In VLDB, volume 1,\npages 169–180, 2001. [91] G. Anadiotis.Open source postgresql on steroids: Swarm64\ndatabase acceleration software for performance improvement\nhttps://www.zdnet.com/article/open-\nand analytics.source-postgresql-on-steroids-swarm64-database-\nacceleration-software-for-performance-improvement-\nand-analytics/, apr 2023.[92] M. Armbrust, T. Das, L. Sun, B. Yavuz, S. Zhu, M. Murthy,\nJ. Torres, H. van Hovell, A. Ionescu, A. Łuszczak, et al.Delta\nlake: high-performance acid table storage over cloud object\nstores.Proceedings of the VLDB Endowment, 13(12):3411–\n3424, 2020.[93] M. Armbrust, A. Ghodsi, R. Xin, and M. Zaharia.Lakehouse:\na new generation of open platforms that unify data warehousing\nand advanced analytics.In Proceedings of CIDR, page 8, 2021.[94] N. Armenatzoglou, S. Basu, N. Bhanoori, M. Cai, N. Chainani,\nK. Chinta, V. Govindaraju, T. J.Green, M. Gupta, S. Hillig,\nE. Hotinger, Y. Leshinksy, J. Liang, M. McCreedy, F. Nagel,\nI. Pandis, P. Parchas, R. Pathak, O. Polychroniou, F. Rahman,\nG. Saxena, G. Soundararajan, S. Subramanian, and D. Terry.Amazon redshift re-invented. In Proceedings of the 2022 Inter-\nnational Conference on Management of Data, SIGMOD ’22,\npages 2205–2217, 2022. doi: 10.1145/3514221.3526045.[95] M. Aslett. How will the database incumbents respond to\n\nNoSQL and NewSQL?The 451 Group, April 2011. [96] M. Aslett.Ten years of NewSQL: Back to the future of dis-\ntributed relational databases.The 451 Group, June 2021. [97] S. Babu and P. Bizarro.Adaptive query processing in the look-\n\ning glass.In CIDR, pages 238–249, January 2005.[98] D. F. Bacon, N. Bales, N. Bruno, B. F. Cooper, A. Dickinson,\nA. Fikes, C. Fraser, A. Gubarev, M. Joshi, E. Kogan, A. Lloyd,\nS. Melnik, R. Rao, D. Shue, C. Taylor, M. van der Holst, and\nIn Pro-\nD. Woodford.Spanner: Becoming a sql system.ceedings of the 2017 ACM International Conference on Man-\nagement of Data, SIGMOD ’17, pages 331–343, 2017. doi:\n10.1145/3035918.3056103.[99] J. Baker, C. Bond, J. C. Corbett, J. Furman, A. Khorlin, J. Lar-\nson, J.-M. Leon, Y. Li, A. Lloyd, and V. Yushprakh.Megastore:\nProviding scalable, highly available storage for interactive ser-\nIn Proceedings of the Conference on Innovative Data\nvices.system Research (CIDR), pages 223–234, 2011.[100] N. Bakibayev, D. Olteanu, and J. Závodný.Fdb: A query en-\ngine for factorised relational databases. Proc.VLDB Endow., 5\n(11):1232–1243, jul 2012. doi: 10.14778/2350229.2350242. [101] S. Banon.Amazon: NOT OK - why we had to change Elas-\nhttps://www.elastic.co/blog/why-license-\n\ntic licensing.change-aws, jan 2021. [102] J. Barr.AQUA (Advanced Query Accelerator) –\nfor Your Amazon Redshift Queries.A Speed Boost\nhttps://aws.amazon.com/blogs/aws/new-aqua-advanced-\nquery-accelerator-for-amazon-redshift/, Apr 2021.[103] P. Baumann. A database array algebra for spatio-temporal data\nand beyond.In Next Generation Information Technologies and\nSystems, 4th International Workshop, NGITS’99, volume 1649\nof Lecture Notes in Computer Science, pages 76–93, 1999. doi:\n10.1007/3-540-48521-X_7.[104] E. Begoli, J. Camacho-Rodríguez, J. Hyde, M. J. Mior, and\nD. Lemire.Apache calcite: A foundational framework for\noptimized query processing over heterogeneous data sources.In Proceedings of the 2018 International Conference on Man-\nagement of Data, SIGMOD ’18, pages 221–230, 2018. doi:\n10.1145/3183713.3190662.[105] A. Behm, S. Palkar, U. Agarwal, T. Armstrong, D. Cashman,\nA. Dave, T. Greenstein, S. Hovsepian, R. Johnson, A. Sai Krish-\nnan, P. Leventis, A. Luszczak, P. Menon, M. Mokhtar, G. Pang,\nS. Paranjpye, G. Rahn, B. Samwel, T. van Bussel, H. van Hov-\nell, M. Xue, R. Xin, and M. Zaharia.Photon: A fast query\nengine for lakehouse systems.In Proceedings of the 2022 In-\nternational Conference on Management of Data, SIGMOD ’22,\npages 2326–2339, 2022. doi: 10.1145/3514221.3526054.[106] P. A. Boncz, M. Zukowski, and N. Nes.Monetdb/x100: Hyper-\n\npipelining query execution.In CIDR, pages 225–237, 2005. [107] H. Boral and D. J. DeWitt.Database machines: An idea whose\ntime passed?A critique of the future of database machines.pages 166–187, 1983. doi: 10.1007/978-3-642-69419-6\n_10.https://www.tbray.org/\nnov\n\n[108] T. Bray. AWS and Blockchain.ongoing/When/202x/2022/11/19/AWS-Blockchain,\n2019.\\\n\n[109] P. Carbone, A. Katsifodimos, S. Ewen, V. Markl, S. Haridi, and\nK. Tzoumas.Apache ﬂink: Stream and batch processing in a\nsingle engine.The Bulletin of the Technical Committee on Data\nEngineering, 38(4), 2015.[110] R. Cattell. Scalable sql and nosql data stores.SIGMOD Rec.,\n\n39:12–27, 2011. [111] F. Chang, J.Dean, S. Ghemawat, W. C. Hsieh, D. A. Wallach,\nM. Burrows, T. Chandra, A. Fikes, and R. E. Gruber.Bigtable:\nA distributed storage system for structured data.In Proceedings\nof the USENIX Symposium on Operating Systems Design and\nImplementation, OSDI ’06, pages 205–218, 2006.[112] S. Chaudhuri and G. Weikum.Rethinking database system ar-\nchitecture: Towards a self-tuning risc-style database system.In\nVLDB 2000, Proceedings of 26th International Conference on\nVery Large Data Bases, pages 1–10, 2000.[113] C. Chin. The rise and fall of the olap cube.https:\n\n//www.holistics.io/blog/the-rise-and-fall-of-the-\nolap-cube/, January 2020.[114] M. Chock, A. F. Cardenas, and A. Klinger.Database struc-\nture and manipulation capabilities of a picture database man-\nagement system (picdms).IEEE Transactions on Pattern Anal-\nysis and Machine Intelligence, PAMI-6(4):484–492, 1984. doi:\n10.1109/TPAMI.1984.4767553.[115] E. F. Codd. A relational model of data for large shared\ndata banks.Commun. ACM, 13(6):377–387, jun 1970. doi:\n10.1145/362384.362685.[116] E. F. Codd. Further normalization of the data base relational\nmodel.Research Report / RJ / IBM / San Jose, California,\nRJ909, 1971.[117] W. W. W. Consortium. Overview of sgml resources.https:\n\n//www.w3.org/MarkUp/SGML/, 2004.[118] W. W. W. Consortium. Extensible Markup Language (XML).https://www.w3.org/XML/, 2016. [119] J. C. Corbett, J.Dean, M. Epstein, A. Fikes, C. Frost, J. Furman,\nS. Ghemawat, A. Gubarev, C. Heiser, P. Hochschild, W. Hsieh,\nS. Kanthak, E. Kogan, H. Li, A. Lloyd, S. Melnik, D. Mwaura,\nD. Nagle, S. Quinlan, R. Rao, L. Rolig, M. S. Yasushi Saito,\nC. Taylor, R. Wang, and D. Woodford.Spanner: Google’s\nGlobally-Distributed Database.In OSDI, 2012. [120] A. Crotty, V. Leis, and A. Pavlo.Are you sure you want to use\nMMAP in your database management system?In Conference\non Innovative Data Systems Research. www.cidrdb.org, 2022.[121] B. Dageville, T. Cruanes, M. Zukowski, V. Antonov, A. Avanes,\nJ. Bock, J. Claybaugh, D. Engovatov, M. Hentschel, J. Huang,\nA. W. Lee, A. Motivala, A. Q. Munir, S. Pelley, P. Povinec,\nG. Rahn, S. Triantafyllis, and P. Unterbrunner.The snowﬂake\nIn Proceedings of the 2016 Inter-\nelastic data warehouse.national Conference on Management of Data, SIGMOD ’16,\npages 215–226, 2016. doi: 10.1145/2882903.2903741.[122] J. Dean and S. Ghemawat.MapReduce: Simpliﬁed data pro-\ncessing on large clusters.In 6th Symposium on Operating Sys-\ntems Design & Implementation (OSDI 04).USENIX Associa-\ntion, Dec. 2004.34\n\nSIGMOD Record, June 2024 (Vol.53, No. 2)\n\n\f[123] J. Dean and S. Ghemawat.Mapreduce: A ﬂexible data process-\n\ning tool.Commun. ACM, 53(1):72–77, Jan. 2010. [124] A. Dearmer.Storing apache hadoop data on the cloud - hdfs\nhttps://www.xplenty.com/blog/storing-apache-\n\nvs. s3.hadoop-data-cloud-hdfs-vs-s3/, November 2019.[125] G. DeCandia, D. Hastorun, M. Jampani, G. Kakulapati, A. Lak-\nshman, A. Pilchin, S. Sivasubramanian, P. Vosshall, and W. Vo-\ngels.Dynamo: Amazon’s highly available key-value store.SIGOPS Oper. Syst. Rev., 41(6):205–220, oct 2007.[126] A. Deutsch, N. Francis, A.Green, K. Hare, B. Li, L. Libkin,\nT. Lindaaker, V. Marsault, W. Martens, J. Michels, F. Murlak,\nS. Plantikow, P. Selmer, O. van Rest, H. Voigt, D. Vrgoˇc,\nM. Wu, and F. Zemke.Graph pattern matching in gql and\nIn Proceedings of the 2022 International Confer-\nsql/pgq.ence on Management of Data, SIGMOD ’22, pages 2246–2258,\n2022. doi: 10.1145/3514221.3526057.[127] D. DeWitt and J. Gray. Parallel database systems: The future\nof high performance database systems.Commun. ACM, 35(6):\n85–98, jun 1992. doi: 10.1145/129888.129894.[128] C. Diaconu, C. Freedman, E. Ismert, P. Larson, P. Mit-\ntal, R. Stonecipher, N. Verma, and M. Zwilling.Hekaton:\nIn Proceed-\nSQL server’s memory-optimized OLTP engine.ings of the ACM SIGMOD International Conference on Man-\ndoi: 10.1145/\nagement of Data, pages 1243–1254, 2013. 2463676.2463710.[129] M. Elhemali, N. Gallagher, N. Gordon, J. Idziorek, R. Krog,\nC. Lazier, E. Mo, A. Mritunjai, S. Perianayagam, T. Rath,\nS. Sivasubramanian, J. C. S. III, S. Sosothikul, D. Terry, and\nA. Vig.Amazon DynamoDB: A scalable, predictably perfor-\nmant, and fully managed NoSQL database service.In USENIX\nAnnual Technical Conference, pages 1037–1048, July 2022.[130] J. Fan, A. G. S. Raj, and J. M. Patel.The case against special-\nized graph analytics engines.In Seventh Biennial Conference\non Innovative Data Systems Research, CIDR, 2015.[131] B. Fitzpatrick. Distributed caching with memcached.Linux J.,\n\n2004(124):5, aug 2004. ISSN 1075–3583.[132] M. Freitag, M. Bandle, T. Schmidt, A. Kemper, and T. Neu-\nmann.Adopting worst-case optimal joins in relational database\nsystems. Proc.VLDB Endow., 13(12):1891–1904, jul 2020.\ndoi: 10.14778/3407790.3407797.[133] H. Fu, C. Liu, B. Wu, F. Li, J. Tan, and J. Sun.Catsql: To-\nwards real world natural language to sql applications. Proc.VLDB Endow., 16(6):1534–1547, feb 2023. doi: 10.14778/\n3583140.3583165.[134] S. Ghemawat, H. Gobioff, and S.-T. Leung.The google ﬁle\nsystem. SIGOPS Oper.Syst. Rev., 37(5):29–43, oct 2003.ISSN\n0163-5980. doi: 10.1145/1165389.945450. [135] J.Gray, A. Bosworth, A. Layman, and H. Pirahesh.Data\ncube: A relational aggregation operator generalizing group-by,\nIn Proceedings of the International\ncross-tab, and sub-total.Conference on Data Engineering, pages 152–159, 1996. doi:\n10.1109/ICDE.1996.492099.[136] S. Gupta, S. Rahnama, J. Hellings, and M. Sadoghi.Re-\nProc. silientdb: Global scale resilient blockchain fabric.10.14778/\nVLDB Endow., 13(6):868–883, 2020.3380750.3380757.\n\ndoi:\n\n[137] E. Hanson and A. Comet.Why Your Vector Database Should\nNot be a Vector Database.https://www.singlestore.com/\nblog/why-your-vector-database-should-not-be-a-\nvector-database/, April 2023.[138] G. Harrison. How WiredTiger Revolutionized MongoDB.https://www.dbta.com/Columns/MongoDB-Matters/How-\nWiredTiger-Revolutionized-MongoDB-145510.aspx,\n2021.\n\nmar\n\n[139] G. G. Hendrix, E. D. Sacerdoti, D. Sagalowicz, and J. Slocum.Developing a natural language interface to complex data. ACM\nTrans.Database Syst., 3(2):105–147, jun 1978. doi: 10.1145/\n320251.320253. [140] Y. Huai, A. Chauhan, A.Gates, G. Hagleitner, E. N. Hanson,\nO. O’Malley, J. Pandey, Y. Yuan, R. Lee, and X. Zhang.Major\ntechnical advancements in apache hive.In Proceedings of the\n2014 ACM SIGMOD international conference on Management\nof data, pages 1235–1246, 2014.[141] D. Huang, Q. Liu, Q. Cui, Z. Fang, X. Ma, F. Xu, L. Shen,\nL. Tang, Y. Zhou, M. Huang, W. Wei, C. Liu, J. Zhang,\nJ. Li, X. Wu, L. Song, R. Sun, S. Yu, L. Zhao, N. Cameron,\nL. Pei, and X. Tang.Tidb: A raft-based htap database. Proc.VLDB Endow., 13(12):3072–3084, aug 2020. doi: 10.14778/\n3415478.3415535.[142] K. E. Iverson. A Programming Language.John Wiley & Sons,\n\nInc., 1962. ISBN 0471430145.[143] A. Jindal, S. Madden, M. Castellanos, and M. Hsu.Graph ana-\nlytics using vertica relational database.In 2015 IEEE Interna-\ntional Conference on Big Data, pages 1191–1200, 2015.[144] R. Kallman, H. Kimura, J. Natkins, A. Pavlo, A. Rasin,\nS. Zdonik, E. P. C. Jones, S. Madden, M. Stonebraker, Y. Zhang,\nJ. Hugg, and D. J. Abadi.H-store: A high-performance, dis-\ntributed main memory transaction processing system.Proc. VLDB Endow., 1(2):1496–1499, aug 2008. doi: 10.14778/\n1454159.1454211.[145] A. Kane. pgvector. https://github.com/pgvector/pgvector,\n\n2024.[146] A. Kemper and T. Neumann.Hyper: A hybrid oltp&olap main\nmemory database system based on virtual memory snapshots.In Proceedings of the 27th International Conference on Data\nEngineering, pages 195–206.IEEE Computer Society, 2011.\ndoi: 10.1109/ICDE.2011.5767867.[147] T. Kersten, V. Leis, A. Kemper, T. Neumann, A. Pavlo, and\nP. Boncz.Everything you always wanted to know about com-\npiled and vectorized queries but were afraid to ask.Proc. VLDB Endow., 11(13):2209–2222, jan 2019. doi: 10.14778/\n3275366.3284966. [148] R. Kimball.The Data Warehouse Toolkit: Practical Techniques\nfor Building Dimensional Data Warehouses.John Wiley, 1996. [149] R. Kimball and K. Strehlo.Why decision support fails and how\n\nto ﬁx it.SIGMOD Rec., 24(3):92–97, 1995.[150] M. Kornacker, A. Behm, V. Bittorf, T. Bobrovytsky, C. Ching,\nA. Choi, J. Erickson, M. Grund, D. Hecht, M. Jacobs, I. Joshi,\nL. Kuff, D. Kumar, A. Leblang, N. Li, I. Pandis, H. Robinson,\nD. Rorke, S. Rus, J. Russell, D. Tsirogiannis, S. Wanderman-\nMilne, and M. Yoder.Impala: A modern, open-source sql en-\ngine for hadoop.In CIDR, 2015. [151] T. Kraska, A. Beutel, E. H. Chi, J.Dean, and N. Polyzotis. The\ncase for learned index structures.In Proceedings of the 2018\nInternational Conference on Management of Data, SIGMOD\n’18, pages 489–504, 2018. doi: 10.1145/3183713.3196909.[152] S. Krishnan, Z. Yang, K. Goldberg, J. Hellerstein, and I. Sto-\nica.Learning to optimize join queries with deep reinforcement\nlearning, 2018.URL https://arxiv.org/abs/1808.03196. [153] F. Lardinois.Aws gives open source the middle ﬁn-\nger.https://techcrunch.com/2019/01/09/aws-gives-open-\nsource-the-middle-finger/, jan 2019.[154] V. Leis, A. Gubichev, A. Mirchev, P. A. Boncz, A. Kemper,\nand T. Neumann.How good are query optimizers, really?doi: 10.14778/\nProc. VLDB Endow., 9(3):204–215, 2015.2850583.2850594. [155] D. Maier and B. Vance. A call to order.In Proceedings\nof the Twelfth ACM SIGACT-SIGMOD-SIGART Symposium\non Principles of Database Systems, pages 1–16, 1993. doi:\n10.1145/153850.153851.[156] R. Marcus, P. Negi, H. Mao, N. Tatbul, M. Alizadeh, and\nT. Kraska.Bao: Making learned query optimization practical.In Proceedings of the 2021 International Conference on Man-\nagement of Data, SIGMOD ’21, pages 1275–1288, 2021. doi:\n10.1145/3448016.3452838.[157] D. McDiarmid. Vector search with clickhouse.https://\nclickhouse.com/blog/vector-search-clickhouse-p2, May\n2023.SIGMOD Record, June 2024 (Vol.53, No. 2)\n\n35\n\n\f[158] C. McDonnell.The graph-relational database, deﬁned.https://www.edgedb.com/blog/the-graph-relational-\ndatabase-defined, March 2022.[159] W. McKinney et al. Data structures for statistical computing\nin python.In Proceedings of the 9th Python in Science Confer-\nence, volume 445, pages 51–56, 2010.[160] F. McSherry. Scalability! but at what cost?http:\n\n//www.frankmcsherry.org/graph/scalability/cost/2015/\n01/15/COST.html, January 2015.[161] S. Melnik, A. Gubarev, J. J.Long, G. Romer, S. Shivakumar,\nM. Tolton, and T. Vassilakis.Dremel: Interactive analysis of\nweb-scale datasets.Proc. VLDB Endow., 3(12):330–339, sep\n2010.ISSN 2150-8097. doi: 10.14778/1920841.1920886.[162] S. Melnik, A. Gubarev, J. J.Long, G. Romer, S. Shivakumar,\nM. Tolton, T. Vassilakis, H. Ahmadi, D. Delorey, S. Min, M. Pa-\nsumansky, and J. Shute.Dremel: A decade of interactive sql\nanalysis at web scale.Proc. VLDB Endow., 13(12):3461–3472,\naug 2020.ISSN 2150-8097. doi: 10.14778/3415478.3415568.[163] P. Menon, A. Ngom, T. C. Mowry, A. Pavlo, and L. Ma.Per-\nmutable compiled queries: Dynamically adapting compiled\nqueries without recompiling.Proc. VLDB Endow., 14(2):101–\n113, 2020. doi: 10.14778/3425879.3425882.[164] C. Metz. duce. google_caffeine_explained/, September 2010.Google search index splits with mapre-\nhttps://www.theregister.com/2010/09/09/\n\n[165] J. Michels, K. Hare, K. Kulkarni, C. Zuzarte, Z. H. Liu,\nB. Hammerschmidt, and F. Zemke.The new and improved sql:\n2016 standard.SIGMOD Rec., 47(2):51–60, dec 2018. doi:\n10.1145/3299887.3299897.[166] D. Misev and P. Baumann.Sql support for multidimen-\nsional arrays.Technical Report 34, Jacobs University, July\n2017.URL https://nbn-resolving.org/urn:nbn:de:gbv:\n579-opus-1007237.[167] F. Nargesian, E. Zhu, R. J. Miller, K. Q. Pu, and P. C. Arocena.Data lake management: Challenges and opportunities. Proc.VLDB Endow., 12(12):1986–1989, aug 2019. doi: 10.14778/\n3352063.3352116.[168] H. Q. Ngo, C. Ré, and A. Rudra.Skew strikes back: New\ndevelopments in the theory of join algorithms.SIGMOD Rec.,\n42(4):5–16, feb 2014. doi: 10.1145/2590989.2590991.[169] NVIDIA, P. Vingelmann, and F. H. Fitzek. Cuda toolkit.https:\n\n//developer.nvidia.com/cuda-toolkit, 2020.[170] M. A. Olson, K. Bostic, and M. I. Seltzer. Berkeley DB.In Pro-\nceedings of the FREENIX Track: 1999 USENIX Annual Tech-\nnical Conference, pages 183–191, 1999.[171] A. Pavlo and M. Aslett. What’s really new with newsql?SIG-\n\nMOD Record, 45(2):45–55, Sep 2016.[172] A. Pavlo, E. Paulson, A. Rasin, D. J. Abadi, D. J. DeWitt,\nS. Madden, and M. Stonebraker.A comparison of approaches\nto large-scale data analysis.In Proceedings of the ACM SIG-\nMOD International Conference on Management of Data, pages\n165–178, 2009.[173] A. Pavlo, G. Angulo, J. Arulraj, H. Lin, J. Lin, L. Ma, P. Menon,\nT. Mowry, M. Perron, I. Quah, S. Santurkar, A. Tomasic,\nS. Toor, D. V. Aken, Z. Wang, Y. Wu, R. Xian, and T. Zhang.In CIDR 2017,\nSelf-driving database management systems.Conference on Innovative Data Systems Research, 2017.[174] A. Pavlo, M. Butrovich, A. Joshi, L. Ma, P. Menon, D. V. Aken,\nL. Lee, and R. Salakhutdinov.External vs. internal: An essay\non machine learning agents for autonomous database manage-\nment systems.IEEE Data Eng. Bull., 42(2):32–46, 2019.[175] P. Pedreira, O. Erling, M. Basmanova, K. Wilfong, L. Sakka,\nK. Pai, W. He, and B. Chattopadhyay.Velox: Meta’s uniﬁed\nexecution engine. Proc.VLDB Endow., 15(12):3372–3384, aug\n2022. doi: 10.14778/3554821.3554829.[176] P. Pedreira, O. Erling, K. Karanasos, S. Schneider, W. McK-\ninney, S. R. Valluri, M. Zait, and J. Nadeau.The composable\ndata management system manifesto. Proc.VLDB Endow., 16\n(10):2679–2685, jun 2023. doi: 10.14778/3603581.3603604.[177] D. Petersohn, S. Macke, D. Xin, W. Ma, D. Lee, X. Mo,\nJ. E. Gonzalez,\nJ. M. Hellerstein, A. D. Joseph, and\nA. Parameswaran.Towards scalable dataframe systems. Proc.VLDB Endow., 13(12):2033–2046, jul 2020. doi: 10.14778/\n3407790.3407807.[178] D. Petkovic. SQL/JSON standard: Properties and deﬁciencies.doi: 10.1007/\n\nDatenbank-Spektrum, 17(3):277–287, 2017.\ns13222-017-0267-4. [179] D. Pritchett.BASE: An Acid Alternative:\n\nIn Partitioned\nDatabases, Trading Some Consistency for Availability Can\nLead to Dramatic Improvements in Scalability.ACM Queue,\n6(3):48–55, may 2008. doi: 10.1145/1394127.1394128.[180] M. Raasveldt and H. Mühleisen.Duckdb: An embeddable ana-\nlytical database.In Proceedings of the 2019 International Con-\nference on Management of Data, SIGMOD ’19, pages 1981–\n1984, 2019. doi: 10.1145/3299869.3320212.[181] M. Rocklin. Dask: Parallel computation with blocked algo-\nrithms and task scheduling.In Proceedings of the 14th Python\nin Science Conference, pages 130–136, 2015.[182] F. Rusu. Multidimensional array data management. Found.doi: 10.1561/\n\nTrends Databases, 12(2-3):69–220, 2023. 1900000069.[183] S. Sakr, A. Bonifati, H. Voigt, A. Iosup, K. Ammar, R. An-\ngles, W. Aref, M. Arenas, M. Besta, P. A. Boncz, K. Daudjee,\nE. D. Valle, S. Dumbrava, O. Hartig, B. Haslhofer, T. Hege-\nman, J. Hidders, K. Hose, A. Iamnitchi, V. Kalavri, H. Kapp,\nW. Martens, M. T. Özsu, E. Peukert, S. Plantikow, M. Ragab,\nM. R. Ripeanu, S. Salihoglu, C. Schulz, P. Selmer, J. F. Se-\nqueda, J. Shinavier, G. Szárnyas, R. Tommasini, A. Tumeo,\nA. Uta, A. L. Varbanescu, H.-Y.Wu, N. Yakovets, D. Yan, and\nE. Yoneki.The future is big graphs: A community view on\ngraph processing systems.Commun. ACM, 64(9):62–71, aug\n2021. doi: 10.1145/3434642.[184] G. Salton and M. E. Lesk.The smart automatic document re-\ntrieval systems–an illustration.Commun. ACM, 8(6):391–398,\njun 1965. doi: 10.1145/364955.364990.[185] R. Sethi, M. Traverso, D. Sundstrom, D. Phillips, W. Xie,\nY.Sun, N. Yegitbasi, H. Jin, E. Hwang, N. Shingte, and\nIn 2019 IEEE 35th\nC. Berner. Presto: Sql on everything.International Conference on Data Engineering (ICDE), pages\n1802–1813, 2019. doi: 10.1109/ICDE.2019.00196.[186] M. A. Soliman, L. Antova, V. Raghavan, A. El-Helw, Z. Gu,\nE. Shen, G. C. Caragea, C. Garcia-Alvarado, F. Rahman,\nM. Petropoulos, F. Waas, S. Narayanan, K. Krikellas, and\nR. Baldwin.Orca: a modular query optimizer architecture for\nIn Proceedings of the 2014 ACM SIGMOD Inter-\nbig data.national Conference on Management of Data, SIGMOD ’14,\npages 337–348, 2014. doi: 10.1145/2588555.2595637.[187] M. Stonebraker. The case for polystores.https://\n\nwp.sigmod.org/?p=1629, 2015.[188] M. Stonebraker and J. Hellerstein.Readings in Database Sys-\ntems, chapter What Goes Around Comes Around, pages 2–41. 4th edition, 2005.[189] M. Stonebraker, S. Madden, D. J. Abadi, S. Harizopoulos,\nN. Hachem, and P. Helland.The end of an architectural era:\n(it’s time for a complete rewrite).In Proceedings of the 33rd\nInternational Conference on Very Large Data Bases, VLDB\n’07, pages 1150–1160.VLDB Endowment, 2007. [190] M. Stonebraker, D. Abadi, D. J. DeWitt, S. Madden, E. Paulson,\nA. Pavlo, and A. Rasin.Mapreduce and parallel dbmss: Friends\nor foes?Commun. ACM, 53(1):64–71, Jan. 2010.[191] M. Stonebraker, P. Brown, A. Poliakov, and S. Raman. The ar-\nchitecture of scidb.In Scientiﬁc and Statistical Database Man-\nagement - 23rd International Conference, SSDBM 2011, vol-\nume 6809 of Lecture Notes in Computer Science, pages 1–16.Springer, 2011. doi: 10.1007/978-3-642-22351-8\n\n_1. [192] L. Sullivan.Performance issues in mid-sized relational\ndatabase machines.Master’s thesis, Rochester Institute of Tech-\nnology, 1989.\\\n\n36\n\nSIGMOD Record, June 2024 (Vol.53, No. 2)\n\n\f[193] Z. Sun, X. Zhou, and G. Li.Learned index: A comprehen-\nsive experimental evaluation. Proc.VLDB Endow., 16(8):1992–\n2004, apr 2023. doi: 10.14778/3594512.3594528.Google\n\ndumps mapreduce\n\n[194] Y.\n\nSverdlik.in\nfa-\nhttps:\n\nvor of new hyper-scale\n//www.datacenterknowledge.com/archives/2014/06/\n25/google-dumps-mapreduce-favor-new-hyper-scale-\nanalytics-system, June 2014.\n\nanalytics\n\nsystem.[195] R. Taft, I. Sharif, A. Matei, N. VanBenschoten, J. Lewis,\nT. Grieger, K. Niemi, A.Woods, A. Birzin, R. Poss, P. Bardea,\nA. Ranade, B. Darnell, B. Gruneir, J. Jaffray, L. Zhang, and\nP. Mattis.Cockroachdb: The resilient geo-distributed SQL\ndatabase.In Proceedings of the 2020 International Conference\non Management of Data, SIGMOD, pages 1493–1509, 2020.\ndoi: 10.1145/3318464.3386134.[196] D. ten Wolde, T. Singh, G. Szarnyas, and P. Boncz.Duckpgq:\nEfﬁcient property graph queries in an analytical\nrdbms.In CIDR, 2023. URL https://www.cidrdb.org/cidr2023/\npapers/p66-wolde.pdf.[197] A. Thusoo, J. S. Sarma, N. Jain, Z. Shao, P. Chakka, N. Zhang,\nS. Antony, H. Liu, and R. Murthy.Hive - a petabyte scale\ndata warehouse using hadoop.In International Conference on\nData Engineering (ICDE 2010), pages 996–1005, 2010. doi:\n10.1109/ICDE.2010.5447738.[198] E. Totoni, T. A. Anderson, and T. Shpeisman.HPAT: high per-\nformance analytics with scripting ease-of-use.In Proceedings\n\nof the International Conference on Supercomputing, pages 9:1–\n9:10, 2017. doi: 10.1145/3079079.3079099.[199] T. Trautmann. database. relational-database, September 2021.Understanding the document-relational\nhttps://fauna.com/blog/what-is-a-document-\n\n[200] D. Van Aken, A. Pavlo, G. J. Gordon, and B. Zhang.Auto-\nmatic database management system tuning through large-scale\nIn Proceedings of the 2017 ACM Inter-\nmachine learning.national Conference on Management of Data, SIGMOD ’17,\npages 1009–1024, 2017. doi: 10.1145/3035918.3064029.[201] M. Zaharia, R. S. Xin, P. Wendell, T. Das, M. Armbrust,\nA. Dave, X. Meng, J. Rosen, S. Venkataraman, M. J. Franklin,\nA. Ghodsi, J. Gonzalez, S. Shenker, and I. Stoica.Apache\nspark: a uniﬁed engine for big data processing.Commun. ACM,\n59(11):56–65, oct 2016. doi: 10.1145/2934664.[202] C. Zaniolo. The database language GEM.In SIGMOD, pages\n\n207–218, 1983.[203] X. Zeng, Y. Hui, J. Shen, A. Pavlo, W. McKinney, and\nH. Zhang.An empirical evaluation of columnar storage for-\nmats.Proc. VLDB Endow., 17(2):148–161, 2023.URL https:\n//www.vldb.org/pvldb/vol17/p148-zeng.pdf.[204] X. Zhang, Z. Chang, Y. Li, H. Wu, J. Tan, F. Li, and\nB. Cui.Facilitating database tuning with hyper-parameter op-\ntimization: a comprehensive experimental evaluation.Proc. VLDB Endow., 15(9):1808–1821, may 2022. doi: 10.14778/\n3538598.3538604.SIGMOD Record, June 2024 (Vol. 53, No. 2)\n\n37",
          "time": 2841.1262118816376,
          "input_token_size": 26182,
          "output_token_size": 173,
          "original_provenance_id": 0
        }
      ],
      "metadata": {
        "question_id": "whatgoesaround-sigmodrec2024_5cbdcf8f",
        "created_at": 1750200285.0340097,
        "processing_time": 2848.2218911647797,
        "processing_complete": true,
        "max_provenances": 5
      },
      "source_info": {
        "selected_from": "test_outputs",
        "reason": "shorter_provenance",
        "sentence_count": 964,
        "provenance_count": 1,
        "alternatives": [
          {
            "source": "test_outputs",
            "sentence_count": 964,
            "provenance_count": 1,
            "has_answer": true
          }
        ],
        "selection_timestamp": "2025-06-17T16:48:52.925914"
      }
    }
  },
  {
    "602e05d4": {
      "question": "How are vector databases gaining attention, and what role do RDBMSs play in this context?",
      "answer": "Vector databases are gaining attention due to their ability to store single-dimension embeddings generated from AI tools for similarity searches. RDBMSs play a role by quickly adding vector indexes to support these functionalities, integrating them into their existing systems.",
      "provenance": [
        {
          "provenance_id": 0,
          "input_sentence_ids": [
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            11,
            12,
            13,
            14,
            15,
            16,
            17,
            18,
            19,
            20,
            21,
            22,
            23,
            24,
            25,
            26,
            27,
            28,
            29,
            30,
            31,
            32,
            33,
            34,
            35,
            36,
            37,
            38,
            39,
            40,
            41,
            42,
            43,
            44,
            45,
            46,
            47,
            48,
            49,
            50,
            51,
            52,
            53,
            54,
            55,
            56,
            57,
            58,
            59,
            60,
            61,
            62,
            63,
            64,
            65,
            66,
            67,
            68,
            69,
            70,
            71,
            72,
            73,
            74,
            75,
            76,
            77,
            78,
            79,
            80,
            81,
            82,
            83,
            84,
            85,
            86,
            87,
            88,
            89,
            90,
            91,
            92,
            93,
            94,
            95,
            96,
            97,
            98,
            99,
            100,
            101,
            102,
            103,
            104,
            105,
            106,
            107,
            108,
            109,
            110,
            111,
            112,
            113,
            114,
            115,
            116,
            117,
            118,
            119,
            120,
            121,
            122,
            123,
            124,
            125,
            126,
            127,
            128,
            129,
            130,
            131,
            132,
            133,
            134,
            135,
            136,
            137,
            138,
            139,
            140,
            141,
            142,
            143,
            144,
            145,
            146,
            147,
            148,
            149,
            150,
            151,
            152,
            153,
            154,
            155,
            156,
            157,
            158,
            159,
            160,
            161,
            162,
            163,
            164,
            165,
            166,
            167,
            168,
            169,
            170,
            171,
            172,
            173,
            174,
            175,
            176,
            177,
            178,
            179,
            180,
            181,
            182,
            183,
            184,
            185,
            186,
            187,
            188,
            189,
            190,
            191,
            192,
            193,
            194,
            195,
            196,
            197,
            198,
            199,
            200,
            201,
            202,
            203,
            204,
            205,
            206,
            207,
            208,
            209,
            210,
            211,
            212,
            213,
            214,
            215,
            216,
            217,
            218,
            219,
            220,
            221,
            222,
            223,
            224,
            225,
            226,
            227,
            228,
            229,
            230,
            231,
            232,
            233,
            234,
            235,
            236,
            237,
            238,
            239,
            240,
            241,
            242,
            243,
            244,
            245,
            246,
            247,
            248,
            249,
            250,
            251,
            252,
            253,
            254,
            255,
            256,
            257,
            258,
            259,
            260,
            261,
            262,
            263,
            264,
            265,
            266,
            267,
            268,
            269,
            270,
            271,
            272,
            273,
            274,
            275,
            276,
            277,
            278,
            279,
            280,
            281,
            282,
            283,
            284,
            285,
            286,
            287,
            288,
            289,
            290,
            291,
            292,
            293,
            294,
            295,
            296,
            297,
            298,
            299,
            300,
            301,
            302,
            303,
            304,
            305,
            306,
            307,
            308,
            309,
            310,
            311,
            312,
            313,
            314,
            315,
            316,
            317,
            318,
            319,
            320,
            321,
            322,
            323,
            324,
            325,
            326,
            327,
            328,
            329,
            330,
            331,
            332,
            333,
            334,
            335,
            336,
            337,
            338,
            339,
            340,
            341,
            342,
            343,
            344,
            345,
            346,
            347,
            348,
            349,
            350,
            351,
            352,
            353,
            354,
            355,
            356,
            357,
            358,
            359,
            360,
            361,
            362,
            363,
            364,
            365,
            366,
            367,
            368,
            369,
            370,
            371,
            372,
            373,
            374,
            375,
            376,
            377,
            378,
            379,
            380,
            381,
            382,
            383,
            384,
            385,
            386,
            387,
            388,
            389,
            390,
            391,
            392,
            393,
            394,
            395,
            396,
            397,
            398,
            399,
            400,
            401,
            402,
            403,
            404,
            405,
            406,
            407,
            408,
            409,
            410,
            411,
            412,
            413,
            414,
            415,
            416,
            417,
            418,
            419,
            420,
            421,
            422,
            423,
            424,
            425,
            426,
            427,
            428,
            429,
            430,
            431,
            432,
            433,
            434,
            435,
            436,
            437,
            438,
            439,
            440,
            441,
            442,
            443,
            444,
            445,
            446,
            447,
            448,
            449,
            450,
            451,
            452,
            453,
            454,
            455,
            456,
            457,
            458,
            459,
            460,
            461,
            462,
            463,
            464,
            465,
            466,
            467,
            468,
            469,
            470,
            471,
            472,
            473,
            474,
            475,
            476,
            477,
            478,
            479,
            480,
            481,
            482,
            483,
            484,
            485,
            486,
            487,
            488,
            489,
            490,
            491,
            492,
            493,
            494,
            495,
            496,
            497,
            498,
            499,
            500,
            501,
            502,
            503,
            504,
            505,
            506,
            507,
            508,
            509,
            510,
            511,
            512,
            513,
            514,
            515,
            516,
            517,
            518,
            519,
            520,
            521,
            522,
            523,
            524,
            525,
            526,
            527,
            528,
            529,
            530,
            531,
            532,
            533,
            534,
            535,
            536,
            537,
            538,
            539,
            540,
            541,
            542,
            543,
            544,
            545,
            546,
            547,
            548,
            549,
            550,
            551,
            552,
            553,
            554,
            555,
            556,
            557,
            558,
            559,
            560,
            561,
            562,
            563,
            564,
            565,
            566,
            567,
            568,
            569,
            570,
            571,
            572,
            573,
            574,
            575,
            576,
            577,
            578,
            579,
            580,
            581,
            582,
            583,
            584,
            585,
            586,
            587,
            588,
            589,
            590,
            591,
            592,
            593,
            594,
            595,
            596,
            597,
            598,
            599,
            600,
            601,
            602,
            603,
            604,
            605,
            606,
            607,
            608,
            609,
            610,
            611,
            612,
            613,
            614,
            615,
            616,
            617,
            618,
            619,
            620,
            621,
            622,
            623,
            624,
            625,
            626,
            627,
            628,
            629,
            630,
            631,
            632,
            633,
            634,
            635,
            636,
            637,
            638,
            639,
            640,
            641,
            642,
            643,
            644,
            645,
            646,
            647,
            648,
            649,
            650,
            651,
            652,
            653,
            654,
            655,
            656,
            657,
            658,
            659,
            660,
            661,
            662,
            663,
            664,
            665,
            666,
            667,
            668,
            669,
            670,
            671,
            672,
            673,
            674,
            675,
            676,
            677,
            678,
            679,
            680,
            681,
            682,
            683,
            684,
            685,
            686,
            687,
            688,
            689,
            690,
            691,
            692,
            693,
            694,
            695,
            696,
            697,
            698,
            699,
            700,
            701,
            702,
            703,
            704,
            705,
            706,
            707,
            708,
            709,
            710,
            711,
            712,
            713,
            714,
            715,
            716,
            717,
            718,
            719,
            720,
            721,
            722,
            723,
            724,
            725,
            726,
            727,
            728,
            729,
            730,
            731,
            732,
            733,
            734,
            735,
            736,
            737,
            738,
            739,
            740,
            741,
            742,
            743,
            744,
            745,
            746,
            747,
            748,
            749,
            750,
            751,
            752,
            753,
            754,
            755,
            756,
            757,
            758,
            759,
            760,
            761,
            762,
            763,
            764,
            765,
            766,
            767,
            768,
            769,
            770,
            771,
            772,
            773,
            774,
            775,
            776,
            777,
            778,
            779,
            780,
            781,
            782,
            783,
            784,
            785,
            786,
            787,
            788,
            789,
            790,
            791,
            792,
            793,
            794,
            795,
            796,
            797,
            798,
            799,
            800,
            801,
            802,
            803,
            804,
            805,
            806,
            807,
            808,
            809,
            810,
            811,
            812,
            813,
            814,
            815,
            816,
            817,
            818,
            819,
            820,
            821,
            822,
            823,
            824,
            825,
            826,
            827,
            828,
            829,
            830,
            831,
            832,
            833,
            834,
            835,
            836,
            837,
            838,
            839,
            840,
            841,
            842,
            843,
            844,
            845,
            846,
            847,
            848,
            849,
            850,
            851,
            852,
            853,
            854,
            855,
            856,
            857,
            858,
            859,
            860,
            861,
            862,
            863,
            864,
            865,
            866,
            867,
            868,
            869,
            870,
            871,
            872,
            873,
            874,
            875,
            876,
            877,
            878,
            879,
            880,
            881,
            882,
            883,
            884,
            885,
            886,
            887,
            888,
            889,
            890,
            891,
            892,
            893,
            894,
            895,
            896,
            897,
            898,
            899,
            900,
            901,
            902,
            903,
            904,
            905,
            906,
            907,
            908,
            909,
            910,
            911,
            912,
            913,
            914,
            915,
            916,
            917,
            918,
            919,
            920,
            921,
            922,
            923,
            924,
            925,
            926,
            927,
            928,
            929,
            930,
            931,
            932,
            933,
            934,
            935,
            936,
            937,
            938,
            939,
            940,
            941,
            942,
            943,
            944,
            945,
            946,
            947,
            948,
            949,
            950,
            951,
            952,
            953,
            954,
            955,
            956,
            957,
            958,
            959,
            960,
            961,
            962,
            963
          ],
          "provenance_ids": [
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            11,
            12,
            13,
            14,
            15,
            16,
            17,
            18,
            19,
            20,
            21,
            22,
            23,
            24,
            25,
            26,
            27,
            28,
            29,
            30,
            31,
            32,
            33,
            34,
            35,
            36,
            37,
            38,
            39,
            40,
            41,
            42,
            43,
            44,
            45,
            46,
            47,
            48,
            49,
            50,
            51,
            52,
            53,
            54,
            55,
            56,
            57,
            58,
            59,
            60,
            61,
            62,
            63,
            64,
            66,
            67,
            68,
            69,
            70,
            71,
            72,
            73,
            74,
            75,
            76,
            77,
            78,
            79,
            80,
            81,
            82,
            83,
            84,
            85,
            86,
            87,
            88,
            90,
            91,
            92,
            93,
            94,
            95,
            96,
            97,
            98,
            99,
            100,
            101,
            102,
            103,
            104,
            105,
            106,
            107,
            108,
            109,
            110,
            111,
            112,
            113,
            114,
            115,
            116,
            117,
            118,
            119,
            120,
            121,
            122,
            123,
            124,
            125,
            126,
            127,
            128,
            129,
            130,
            131,
            132,
            133,
            134,
            135,
            136,
            137,
            138,
            139,
            140,
            141,
            142,
            143,
            144,
            145,
            146,
            147,
            148,
            149,
            151,
            152,
            153,
            154,
            155,
            156,
            157,
            158,
            159,
            160,
            161,
            162,
            163,
            164,
            165,
            166,
            167,
            168,
            169,
            170,
            171,
            172,
            173,
            174,
            175,
            176,
            177,
            178,
            179,
            180,
            181,
            182,
            183,
            184,
            186,
            187,
            188,
            189,
            190,
            191,
            192,
            193,
            194,
            195,
            196,
            197,
            198,
            199,
            200,
            201,
            202,
            203,
            204,
            205,
            206,
            207,
            208,
            209,
            210,
            211,
            212,
            213,
            214,
            215,
            216,
            217,
            218,
            219,
            220,
            221,
            222,
            223,
            224,
            225,
            226,
            227,
            228,
            229,
            230,
            231,
            232,
            233,
            234,
            235,
            236,
            237,
            238,
            239,
            240,
            241,
            242,
            243,
            244,
            245,
            246,
            247,
            248,
            249,
            250,
            251,
            252,
            253,
            254,
            255,
            256,
            257,
            258,
            259,
            260,
            261,
            262,
            263,
            264,
            265,
            266,
            267,
            268,
            269,
            270,
            272,
            273,
            274,
            275,
            276,
            277,
            278,
            279,
            280,
            281,
            282,
            283,
            284,
            285,
            286,
            287,
            288,
            289,
            290,
            291,
            292,
            293,
            294,
            295,
            296,
            297,
            298,
            299,
            300,
            301,
            302,
            303,
            304,
            305,
            306,
            307,
            308,
            309,
            310,
            311,
            312,
            313,
            314,
            315,
            316,
            317,
            318,
            319,
            320,
            321,
            322,
            323,
            324,
            325,
            326,
            327,
            328,
            329,
            330,
            331,
            332,
            333,
            334,
            335,
            336,
            337,
            338,
            339,
            340,
            341,
            342,
            343,
            344,
            345,
            346,
            347,
            348,
            349,
            350,
            351,
            352,
            353,
            354,
            356,
            357,
            358,
            359,
            360,
            361,
            362,
            363,
            364,
            365,
            366,
            367,
            368,
            369,
            370,
            371,
            372,
            373,
            375,
            376,
            377,
            378,
            379,
            380,
            381,
            382,
            383,
            384,
            385,
            386,
            387,
            388,
            389,
            390,
            391,
            392,
            393,
            394,
            395,
            396,
            397,
            398,
            399,
            400,
            401,
            403,
            404,
            405,
            406,
            407,
            408,
            409,
            410,
            411,
            412,
            413,
            414,
            416,
            417,
            418,
            419,
            420,
            421,
            422,
            423,
            424,
            425,
            426,
            427,
            428,
            429,
            430,
            431,
            432,
            433,
            434,
            435,
            436,
            437,
            438,
            439,
            440,
            441,
            442,
            443,
            444,
            446,
            447,
            448,
            449,
            451,
            452,
            453,
            454,
            455,
            456,
            457,
            458,
            459,
            460,
            461,
            462,
            464,
            465,
            466,
            467,
            468,
            469,
            470,
            471,
            472,
            473,
            474,
            475,
            476,
            477,
            478,
            479,
            480,
            481,
            482,
            483,
            484,
            485,
            486,
            487,
            488,
            489,
            490,
            491,
            492,
            493,
            494,
            495,
            496,
            497,
            498,
            499,
            500,
            501,
            502,
            503,
            505,
            507,
            508,
            509,
            510,
            511,
            512,
            514,
            515,
            516,
            517,
            518,
            519,
            520,
            521,
            522,
            524,
            525,
            526,
            529,
            530,
            531,
            534,
            535,
            537,
            538,
            539,
            540,
            541,
            542,
            543,
            551,
            552,
            553,
            554,
            555,
            556,
            557,
            558,
            559,
            560,
            561,
            562,
            563,
            565,
            566,
            567,
            571,
            572,
            573,
            574,
            576,
            577,
            578,
            579,
            580,
            581,
            582,
            583,
            584,
            586,
            587,
            588,
            589,
            590,
            591,
            592,
            594,
            595,
            596,
            597,
            598,
            599,
            600,
            601,
            602,
            603,
            604,
            605,
            606,
            607,
            608,
            609,
            610,
            611,
            612,
            613,
            614,
            616,
            617,
            618,
            619,
            620,
            621,
            623,
            624,
            625,
            628,
            629,
            630,
            631,
            632,
            633,
            634,
            635,
            636,
            637,
            638,
            639,
            641,
            642,
            643,
            644,
            645,
            646,
            647,
            648,
            649,
            650,
            651,
            652,
            653,
            654,
            655,
            656,
            658,
            659,
            660,
            661,
            662,
            663,
            664,
            665,
            666,
            667,
            668,
            669,
            670,
            671,
            672,
            675,
            676,
            677,
            678,
            679,
            680,
            681,
            682,
            684,
            685,
            686,
            687,
            688,
            689,
            690,
            694,
            695,
            696,
            697,
            698,
            700,
            701,
            702,
            703,
            704,
            705,
            706,
            707,
            708,
            709,
            710,
            711,
            713,
            714,
            715,
            716,
            717,
            718,
            719,
            720,
            721,
            722,
            723,
            724,
            725,
            726,
            728,
            729,
            730,
            731,
            732,
            734,
            735,
            736,
            737,
            738,
            739,
            741,
            742,
            746,
            748,
            749,
            750,
            751,
            752,
            754,
            755,
            756,
            757,
            758,
            759,
            760,
            761,
            762,
            763,
            764,
            765,
            766,
            767,
            768,
            769,
            770,
            771,
            772,
            776,
            777,
            778,
            779,
            780,
            781,
            782,
            783,
            784,
            785,
            786,
            787,
            788,
            789,
            790,
            791,
            792,
            793,
            794,
            795,
            796,
            797,
            798,
            799,
            800,
            801,
            803,
            805,
            806,
            807,
            808,
            809,
            810,
            811,
            812,
            813,
            814,
            815,
            816,
            817,
            818,
            820,
            821,
            822,
            823,
            824,
            825,
            826,
            828,
            829,
            830,
            831,
            832,
            834,
            835,
            836,
            837,
            838,
            839,
            840,
            841,
            842,
            843,
            844,
            845,
            846,
            847,
            848,
            849,
            850,
            851,
            852,
            853,
            855,
            856,
            857,
            858,
            859,
            860,
            861,
            862,
            863,
            864,
            865,
            866,
            867,
            868,
            869,
            870,
            871,
            872,
            873,
            874,
            875,
            876,
            877,
            878,
            879,
            880,
            881,
            882,
            883,
            884,
            885,
            886,
            887,
            888,
            889,
            890,
            891,
            892,
            893,
            894,
            895,
            896,
            897,
            898,
            899,
            900,
            902,
            903,
            904,
            905,
            906,
            907,
            908,
            909,
            910,
            912,
            913,
            914,
            915,
            916,
            917,
            918,
            919,
            920,
            921,
            922,
            924,
            925,
            926,
            927,
            928,
            929,
            930,
            931,
            932,
            933,
            934,
            935,
            936,
            937,
            938,
            939,
            940,
            941,
            942,
            943,
            944,
            945,
            946,
            947,
            948,
            950,
            951,
            952,
            953,
            954,
            955,
            956,
            957,
            958,
            959,
            960,
            961,
            962,
            963
          ],
          "provenance": "What Goes Around Comes Around... And Around...\n\nMichael Stonebraker\nMassachusetts Institute of Technology\nstonebraker@csail.mit.edu\n\nAndrew Pavlo\nCarnegie Mellon University\npavlo@cs.cmu.edu\n\nABSTRACT\nTwo decades ago, one of us co-authored a paper com-\nmenting on the previous 40 years of data modelling re-\nsearch and development [188].That paper demonstrated\nthat the relational model (RM) and SQL are the prevail-\ning choice for database management systems (DBMSs),\ndespite efforts to replace either them.Instead, SQL ab-\nsorbed the best ideas from these alternative approaches.We revisit this issue and argue that this same evolu-\ntion has continued since 2005.Once again there have\nbeen repeated efforts to replace either SQL or the RM.But the RM continues to be the dominant data model\nand SQL has been extended to capture the good ideas\nfrom others.As such, we expect more of the same in\nthe future, namely the continued evolution of SQL and\nrelational DBMSs (RDBMSs).We also discuss DBMS\nimplementations and argue that the major advancements\nhave been in the RM systems, primarily driven by chang-\ning hardware characteristics.1 Introduction\nIn 2005, one of the authors participated in writing a\nchapter for the Red Book titled “What Goes Around\nComes Around” [188].That paper examined the major\ndata modelling movements since the 1960s:\n\nHierarchical (e.g., IMS): late 1960s and 1970s\nNetwork (e.g., CODASYL): 1970s\nRelational: 1970s and early 1980s\nEntity-Relationship: 1970s\nExtended Relational: 1980s\nSemantic: late 1970s and 1980s\nObject-Oriented: late 1980s and early 1990s\nObject-Relational: late 1980s and early 1990s\nSemi-structured (e.g., XML): late 1990s and 2000s\n\n•\n•\n•\n•\n•\n•\n•\n•\n•\n\nOur conclusion was that the relational model with an\nextendable type system (i.e., object-relational) has dom-\ninated all comers, and nothing else has succeeded in\nthe marketplace.Although many of the non-relational\nDBMSs covered in 2005 still exist today, their vendors\nhave relegated them to legacy maintenance mode and\nnobody is building new applications on them.This per-\nsistence is more of a testament to the “stickiness” of data\n\nrather than the lasting power of these systems.In other\nwords, there still are many IBM IMS databases running\ntoday because it is expensive and risky to switch them\nto use a modern DBMS.But no start-up would willingly\nchoose to build a new application on IMS.A lot has happened in the world of databases since our\n2005 survey.During this time, DBMSs have expanded\nfrom their roots in business data processing and are now\nused for almost every kind of data.This led to the “Big\nData” era of the early 2010s and the current trend of inte-\ngrating machine learning (ML) with DBMS technology.In this paper, we analyze the last 20 years of data\nmodel and query language activity in databases.We\nstructure our commentary into the following areas: (1)\nMapReduce Systems, (2) Key-value Stores, (3) Docu-\nment Databases, (4) Column Family / Wide-Column,\n(5) Text Search Engines, (6) Array Databases, (7)\nVector Databases, and (8) Graph Databases.We contend that most systems that deviated from\nSQL or the RM have not dominated the DBMS land-\nscape and often only serve niche markets.Many sys-\ntems that started out rejecting the RM with much fanfare\n(think NoSQL) now expose a SQL-like interface for RM\ndatabases.Such systems are now on a path to conver-\ngence with RDBMSs.Meanwhile, SQL incorporated\nthe best query language ideas to expand its support for\nmodern applications and remain relevant.Although there has not been much change in RM\nfundamentals, there were dramatic changes in RM sys-\ntem implementations.The second part of this paper\ndiscusses advancements in DBMS architectures that ad-\ndress modern applications and hardware: (1) Columnar\nSystems, (2) Cloud Databases, (3) Data Lakes / Lake-\nhouses, (4) NewSQL Systems, (5) Hardware Acceler-\nators, and (6) Blockchain Databases.Some of these\nare profound changes to DBMS implementations, while\nothers are merely trends based on faulty premises.We ﬁnish with a discussion of important considera-\ntions for the next generation of DBMSs and provide part-\ning comments on our hope for the future of databases in\nboth research and commercial settings.SIGMOD Record, June 2024 (Vol. 53, No.2)\n\n21\n\n\f2 Data Models & Query Languages\nFor our discussion here, we group the research and de-\nvelopment thrusts in data models and query languages\nfor database into eight categories.2.1 MapReduce Systems\nGoogle constructed their MapReduce (MR) framework\nin 2003 as a “point solution” for processing its periodic\ncrawl of the internet [122].At the time, Google had\nlittle expertise in DBMS technology, and they built MR\nto meet their crawl needs.In database terms, Map is a\nuser-deﬁned function (UDF) that performs computation\nand/or ﬁltering while Reduce is a GROUP BY operation.To a ﬁrst approximation, MR runs a single query:\n\nSELECT map() FROM crawl_table GROUP BY reduce()\n\nGoogle’s MR approach did not prescribe a speciﬁc\ndata model or query language.Rather, it was up to the\nMap and Reduce functions written in a procedural MR\nprogram to parse and decipher the contents of data ﬁles.There was a lot of interest in MR-based systems at\nother companies in the late 2000s.Yahoo! developed\nan open-source version of MR in 2005, called Hadoop.It ran on top of a distributed ﬁle system HDFS that was\na clone of the Google File System [134].Several start-\nups were formed to support Hadoop in the commercial\nmarketplace.We will use MR to refer to the Google\nimplementation and Hadoop to refer to the open-source\nversion.They are functionally similar.There was a controversy about the value of Hadoop\ncompared to RDBMSs designed for OLAP workloads.This culminated in a 2009 study that showed that data\nwarehouse DBMSs outperformed Hadoop [172].This\ngenerated dueling articles from Google and the DBMS\ncommunity [123, 190].Google argued that with care-\nful engineering, a MR system will beat DBMSs, and a\nuser does not have to load data with a schema before\nrunning queries on it.Thus, MR is better for “one shot”\ntasks, such as text processing and ETL operations.The\nDBMS community argued that MR incurs performance\nproblems due to its design that existing parallel DBMSs\nalready solved.Furthermore, the use of higher-level\nlanguages (SQL) operating over partitioned tables has\nproven to be a good programming model [127].A lot of the discussion in the two papers was on imple-\nmentation issues (e.g., indexing, parsing, push vs. pull\nquery processing, failure recovery).From reading both\npapers a reasonable conclusion would be that there is a\nplace for both kinds of systems.However, two changes\nin the technology world rendered the debate moot.The ﬁrst event was that the Hadoop technology and\nservices market cratered in the 2010s.Many enterprises\nspent a lot of money on Hadoop clusters, only to ﬁnd\nthere was little interest in this functionality.Developers\nfound it difﬁcult to shoehorn their application into the\n\nrestricted MR/Hadoop paradigm.There were consider-\nable efforts to provide a SQL and RM interface on top\nof Hadoop, most notable was Meta’s Hive [30, 197].The next event occurred eight months after the CACM\narticle when Google announced that they were moving\ntheir crawl processing from MR to BigTable [164].The\nreason was that Google needed to interactively update\nits crawl database in real time but MR was a batch sys-\ntem.Google ﬁnally announced in 2014 that MR had no\nplace in their technology stack and killed it off [194].The ﬁrst event left the three leading Hadoop vendors\n(Cloudera, Hortonworks, MapR) without a viable prod-\nuct to sell.Cloudera rebranded Hadoop to mean the\nwhole stack (application, Hadoop, HDFS).In a further\nsleight-of-hand, Cloudera built a RDBMS, Impala [150],\non top of HDFS but not using Hadoop.They realized\nthat Hadoop had no place as an internal interface in a\nSQL DBMS, and they conﬁgured it out of their stack\nwith software built directly on HDFS.In a similar vein,\nMapR built Drill [22] directly on HDFS, and Meta cre-\nated Presto [185] to replace Hive.Discussion: MR’s deﬁciencies were so signiﬁcant that\nit could not be saved despite the adoption and enthu-\nsiasm from the developer community.Hadoop died\nabout a decade ago, leaving a legacy of HDFS clusters\nin enterprises and a collection of companies dedicated\nto making money from them.At present, HDFS has\nlost its luster, as enterprises realize that there are better\ndistributed storage alternatives [124].Some aspects of MR system implementations related\nto scalability, elasticity, and fault tolerance are carried\nover into distributed RDBMSs.MR also brought about\nthe revival of shared-disk architectures with disaggre-\ngated storage, subsequently giving rise to open-source\nﬁle formats and data lakes (see Sec.3.3). Hadoop’s lim-\nitations opened the door for other data processing plat-\nforms, namely Spark [201] and Flink [109].Both sys-\ntems started as better implementations of MR with pro-\ncedural APIs but have since added support for SQL [105].2.2 Key/Value Stores\nThe key/value (KV) data model is the simplest model\npossible.It represents the following binary relation:\n\n(key,value)\n\nA KV DBMS represents a collection of data as an as-\nsociative array that maps a key to a value.The value is\ntypically an untyped array of bytes (i.e., a blob), and the\nDBMS is unaware of its contents.It is up to the appli-\ncation to maintain the schema and parse the value into\nits corresponding parts.Most KV DBMSs only provide\nget/set/delete operations on a single value.In the 2000s, several new Internet companies built\ntheir own shared-nothing, distributed KV stores for nar-\n\n22\n\nSIGMOD Record, June 2024 (Vol.53, No. 2)\n\n\frowly focused applications, like caching and storing ses-\nsion data.For caching, Memcached [131] is the most\nwell-known example of this approach.Redis [67] mar-\nkets itself as a Memcached replacement, offering a more\nrobust query API with checkpointing support.For more\npersistent application data, Amazon created the Dynamo\nKV store in 2007 [125].Such systems offer higher and\nmore predictable performance, compared to a RDBMS,\nin exchange for more limited functionality.The second KV DBMS category are embedded stor-\nage managers designed to run in the same address space\nas a higher-level application.One of the ﬁrst stan-\ndalone embedded KV DBMSs was BerkeleyDB from\nthe early 1990s [170].Recent notable entries include\nGoogle’s LevelDB [37], which Meta later forked as\nRocksDB [68].Discussion: Key/value stores provide a quick “out-of-\nthe-box” way for developers to store data, compared to\nthe more laborious effort required to set up a table in a\nRDBMS.Of course, it is dangerous to use a KV store\nin a complex application that requires more than just a\nbinary relation.If an application requires multiple ﬁelds\nin a record, then KV stores are probably a bad idea.Not\nonly must the application parse record ﬁelds, but also\nthere are no secondary indexes to retrieve other ﬁelds\nby value.Likewise, developers must implement joins or\nmulti-get operations in their application.Such systems replace the opaque value\nwith a semi-structured value, such as a JSON docu-\nment.Examples of this transition are Amazon’s Dy-\nnamoDB [129] and Aerospike [9].It is not trivial to re-\nengineer a KV store to make it support a complex data\nmodel, whereas RDBMSs easily emulates KV stores\nwithout any changes.If an application needs an embed-\nded DBMS, there are full-featured choices available to-\nday, including SQLite [71] and DuckDB [180].Hence,\na RDBMS may be a better choice, even for simple appli-\ncations, because they offer a path forward if the applica-\ntion’s complexity increases.One new architecture trend from the last 20 years is\nusing embedded KV stores as the underlying storage\nmanager for full-featured DBMSs.Prior to this, build-\ning a new DBMS requires engineers to build a custom\nstorage manager that is natively integrated in the DBMS.MySQL was the ﬁrst DBMS to expose an API that al-\nlowed developers to replace its default KV storage man-\nager.This API enabled Meta to build RocksDB to re-\nplace InnoDB for its massive ﬂeet of MySQL databases.Similarly, MongoDB discarded their ill-fated MMAP-\nbased storage manager in favor of WiredTiger’s KV\nstore in 2014 [120, 138].Using an existing KV store\nallows developers to write a new DBMS in less time.2.3 Document Databases\n\nThe document data model represents a database as a col-\nlection of record objects.Each document contains a hier-\narchy of ﬁeld/value pairs, where each ﬁeld is identiﬁed\nby a name and a ﬁeld’s value can be either a scalar type,\nan array of values, or another document.The following\nexample in JSON is a customer document that contain\na nested list of purchase order records with their corre-\nsponding order items.{ “name”: “First Last”,\n\n“orders”: [ { “id”: 123, “items”: [...] },\n\n{ “id”: 456, “items”: [...] }, ] }\n\nDocument data models have been an active ﬁeld of\neffort for several decades.This has given rise to data\nformats like SGML [117] and XML [118].Despite\nthe buzz with XML databases in the late 1990s, we\ncorrectly predicted in 2005 they would not supplant\nRDBMSs [188].JSON has since overtaken XML to\nbecome the standard for data exchange for web-based\napplications.JavaScript’s popularity with developers\nand the accompanying ubiquity of JSON led several\ncompanies to create document-oriented systems that na-\ntively stored JSON in the 2000s.The inability of OLTP RDBMSs to scale in the 2000s\nushered in dozens of document DBMSs that marketed\nthemselves using the catchphrase NoSQL [110].There\nwere two marketing messages for such systems that res-\nonated with developers.First, SQL and joins are slow,\nand one should use a “faster” lower-level, record-at-a-\ntime interface.Second, ACID transactions are unneces-\nsary for modern applications, so the DBMS should only\nprovide weaker notion of it (i.e., BASE [179]).Because of these two thrusts, NoSQL came to stand\nfor a DBMS that stored records or documents as JSON,\nsupported a lower-level API, and weak or non-existent\ntransactions.There are dozens of such systems, of\nwhich MongoDB [41] is the most popular.Discussion: Document DBMSs are essentially the same\nas object-oriented DBMSs from the 1980s and XML\nDBMSs from the late 1990s.Proponents of document\nDBMSs make the same argument as their OO/XML\npredecessors: storing data as documents removes the\nimpedance mismatch between how application OO code\ninteracts with data and how relational databases store\nthem.They also claim that denormalizing entries into\nnested structures is better for performance because it re-\nmoves the need to dispatch multiple queries to retrieve\ndata related to a given object (i.e., “N+1 problem” in\nORMs).The problems with denormalization/prejoining\nis an old topic that dates back to the 1970s [116]: (1)\nif the join is not one-to-many, then there will be dupli-\ncated data, (2) prejoins are not necessarily faster than\njoins, and (3) there is no data independence.SIGMOD Record, June 2024 (Vol. 53, No.2)\n\n23\n\n\fDespite strong protestations that SQL was terrible, by\nthe end of the 2010s, almost every NoSQL DBMS added\na SQL interface.Notable examples include DynamoDB\nPartiQL [56], Cassandra CQL [15], Aerospike AQL [9],\nand Couchbase SQL++ [72].The last holdout was Mon-\ngoDB, but they added SQL for their Atlas service in\n2021 [42].Instead of supporting the SQL standard for\nDDL and DML operations, NoSQL vendors claim that\nthey support their own proprietary query language de-\nrived or inspired from SQL.For most applications, these\ndistinctions are without merit.Any language differences\nbetween SQL and NoSQL derivatives are mostly due to\nJSON extensions and maintenance operations.Many of the remaining NoSQL DBMSs also added\nstrongly consistent (ACID) transactions (see Sec. 3.4).As such, the NoSQL message has morphed from “Do\nnot use SQL – it is too slow!” to “Not only SQL” (i.e.,\nSQL is ﬁne for some things).Adding SQL and ACID to a NoSQL DBMS lowers\ntheir intellectual distance from RDBMSs.The main\ndifferences between them seems to be JSON support\nand the fact that NoSQL vendors allow “schema later”\ndatabases.But the SQL standard added a JSON data\ntype and operations in 2016 [165, 178].And as RDBMSs\ncontinue to improve their “ﬁrst ﬁve minutes” experience\nfor developers, we believe that the two kinds of systems\nwill soon be effectively identical.Higher level languages are almost universally pre-\nferred to record-at-a-time notations as they require less\ncode and provide greater data independence.Although\nwe acknowledge that the ﬁrst SQL optimizers were slow\nand ineffective, they have improved immensely in the\nlast 50 years.But the optimizer remains the hardest part\nof building a DBMS.We suspect that this engineering\nburden was a contributing factor to why NoSQL systems\noriginally chose to not support SQL.2.4 Column-Family Databases\nThere is another category of NoSQL systems that uses\na data model called column-family (aka wide-column).Despite its name, column-family is not a columnar data\nmodel.Instead, it is a reduction of the document data\nmodel that only supports one level of nesting instead\nof arbitrary nesting; it is relation-like, but each record\ncan have optional attributes, and cells can contain an ar-\nray of values.The following example shows a mapping\nfrom user identiﬁer keys to JSON documents that con-\ntain each user’s varying proﬁle information:\n\nUser1000 → { “name”: “Alice”,\n\n“accounts”: [ 123, 456 ],\n“email”: \"xxx@xxx.edu” }\n\nUser1001 → { “name”: “Bob”,\n\n“email”: [ “yyy@yyy.org”, “zzz@zzz.com” ] }\n\nThe ﬁrst column-family model DBMS was Google’s\nBigTable in 2004 [111].Instead of adopting SQL and\n\nemerging columnar storage, Google used this data model\nwith procedural client APIs.Other systems adopted the\ncolumn-family model in an attempt to copy Google’s be-\nspoke implementation.Most notable are Cassandra [14]\nand HBase [28].They also copied BigTable’s limita-\ntions, including the lack of joins and secondary indexes.Discussion: All our comments in Sec.2.3 about the\ndocument model are also applicable here.In the early\n2010s, Google built RDBMSs on top of BigTable, in-\ncluding MegaStore [99] and the ﬁrst version of Span-\nner.Since then, Google rewrote Spanner to remove\nthe BigTable remnants [98], and it is now the primary\ndatabase for many of its internal applications.Several\nNoSQL DBMSs deprecated their proprietary APIs in\nfavor of SQL but still retain their non-relational archi-\ntectures.Cassandra replaced their Thrift-API with a\nSQL-like language called CQL [15], and HBase now\nrecommends the Phoenix SQL-frontend [57].2.5 Text Search Engines\nText search engines have existed for a long time, begin-\nning with the seminal SMART system in the 1960s [184].SMART pioneered information retrieval and the vector\nspace model, now nearly universal in modern search\nengines, by tokenizing documents into a “bag of words”\nand then building full-text indexes (aka inverted indexes)\non those tokens to support queries on their contents.The\nsystem was also cognizant of noise words (e.g., “the”,\n“a”), synonyms (e.g., “The Big Apple” is a synonym for\n“New York City”), salient keywords, and distance (e.g.,\n“drought” often appears close to “climate change”).The leading text search systems today include Elastic-\nsearch [23] and Solr [70], which both use Lucene [38]\nas their internal search library.These systems offer\ngood support for storing and indexing text data but offer\nnone-to-limited transaction capabilities.This limitation\nmeans that a DBMS has to recover from data corruption\nby rebuilding the document index from scratch, which\nresults in signiﬁcant downtime.All the leading RDBMSs support full-text search in-\ndexes, including Oracle [52], Microsoft SQL Server [52],\nMySQL [43], and PostgreSQL [62].Their search fea-\ntures have improved recently and are generally on par\nwith the special-purpose systems above.They also have\nthe advantage of built-in transaction support.But their\nintegration of search operations in SQL is often clunky\nand differs between DBMSs.Discussion: Text data is inherently unstructured, which\nmeans that there is no data model.Instead, a DBMS\nseeks to extract structure (i.e., meta-data, indexes) from\ntext to avoid “needle in the haystack” sequential searches.24\n\nSIGMOD Record, June 2024 (Vol. 53, No.2)\n\n\fThere are three ways to manage text data in application.First, one can run multiple systems, such as Elastic-\nsearch for text and a RDBMS for operational workloads.This approach allows one to run “best of breed” systems\nbut requires additional ETL plumbing to push data from\nthe operational DBMS to the text DBMS and to rewrite\napplications to route queries to the right DBMSs based\non their needs.Alternatively, one can run a RDBMS\nwith good text-search integration capabilities but with\ndivergent APIs in SQL.This latter issue is often over-\ncome by application frameworks that hide this complex-\nity (e.g., Django Haystack [20]).The third option is\na polystore system [187] that masks the system differ-\nences via middleware that exposes a uniﬁed interface.Inverted index-centric search engines based on SMART\n\nare used for exact match searches.These methods have\nbeen supplanted in recent years by similarity search us-\ning ML-generated embeddings (see Sec.2.7). 2.6 Array Databases\nThere are many areas of computing where arrays are an\nobvious data representation.We use the term “array” to\nmean all variants of them [182]: vectors (one dimen-\nsion – see Sec.2.7), matrices (two dimensions), and\ntensors (three or more dimensions).For example, sci-\nentiﬁc surveys for geographic regions usually represent\ndata as a multi-dimensional array that stores sensor mea-\nsurements using location/time-based coordinates:\n\n(latitude, longitude, time, [vector-of-values])\n\nSeveral other data sets look like this, including ge-\nnomic sequencing and computational ﬂuid dynamics.Arrays are also the core of most ML data sets.Although array-based programming languages have\nexisted since the 1960s (APL [142]), the initial work\non array DBMSs began in the 1980s.PICDMS is con-\nsidered to be the ﬁrst DBMS implementation using the\narray data model [114].The two oldest array DBMSs\nstill being developed today are Rasdaman [66, 103] and\nkdb+ [34].Newer array DBMSs include SciDB [54,\n191] and TileDB [76].HDF5 [29] and NetCDF [46] are\npopular array ﬁle formats for scientiﬁc data.There are several system challenges with storing and\nquerying real-world array data sets.Foremost is that ar-\nray data does not always align to a regular integer grid;\nfor example, geospatial data is often split into irregular\nshapes.An application can map such grids to integer\ncoordinates via metadata describing this mapping [166].Unlike row- or column-based DBMSs, querying array\ndata in arbitrary dimensions presents unique challenges.The difﬁculty arises from storing multi-dimensional ar-\nray data on a linear physical storage medium like a disk.To overcome these challenges, array DBMSs must em-\n\nploy indexing and data structures to support efﬁcient\ntraversal across array dimensions.Discussion: Array DBMSs are a niche market that has\nonly seen adoption in speciﬁc verticals (we discuss vec-\ntor DBMSs next).For example, they have considerable\ntraction in the genomics space.HDF5 is popular for\nsatellite imagery and other gridded scientiﬁc data.But\nbusiness applications rarely use dedicated array DBMSs,\nwhich is necessary for any product to survive.No ma-\njor cloud provider offers a hosted array DBMS service,\nmeaning they do not see a sizable market.The challenge that array DBMS vendors have al-\nways faced is that the SQL includes support for or-\ndered arrays as ﬁrst-class data types (despite this be-\ning against the original RM proposal [115]).The ﬁrst\nproposal to extend the unordered set-based RM with\nordered rasters was in 1993 [155].An early exam-\nple of this was Illustra’s temporal (one-dimensional)\ndata plugin [31].SQL:1999 introduced limited sup-\nport for single-dimension, ﬁxed-length array data types.SQL:2003 expanded to support nested arrays without a\npredeﬁned maximum cardinality.Later entrants include\nOracle Georaster [4] and Teradata [73].Data cubes are\nspecial-purpose arrays [135], but columnar RDBMSs\nhave eclipsed them for OLAP workloads because of\ntheir better ﬂexibility and lower engineering costs [113].More recently, the SQL:2023 standard includes sup-\nport for true multi-dimensional arrays (SQL/MDA) that\nis heavily inspired by Rasdaman’s RQL [166].This\nupdate allows SQL to represent arrays with arbitrary\nIn effect,\ndimensions using integer-based coordinates.this allows data cubes to exist in a SQL framework, but\ncolumnar DBMSs now dominate this market.2.7 Vector Databases\nSimilar to how the column-family model is a reduction\nof the document model, the vector data model simpliﬁes\nthe array data model to one-dimensional rasters.Given\nthat vector DBMSs are attracting the most attention\nright now from developers and investors (similar to the\nNoSQL fad), it is necessary to discuss them separately.The reason for this interest is because developers use\nthem to store single-dimension embeddings generated\nfrom AI tools.These tools use learned transformations\nto convert a record’s data (e.g., text, image) into a vec-\ntor representing its latent semantics.For example, one\ncould convert each Wikipedia article into an embedding\nusing Google BERT and store them in a vector database\nalong with additional article meta-data:\n\n(title, date, author, [embedding-vector])\n\nThe size of these embedding vectors range from 100s\nof dimensions for simple transformers to 1000s for high-\nend models; these sizes will obviously grow over time\nwith the development of more sophisticated models.SIGMOD Record, June 2024 (Vol. 53, No.2)\n\n25\n\n\fThe key difference between vector and array DBMSs\nis their query patterns.The former are designed for\nsimilarity searches that ﬁnd records whose vectors have\nthe shortest distance to a given input vector in a high-\ndimensional space.The input vector is another embed-\nding generated with the same transformer used to popu-\nlate the database.Unlike array DBMSs, applications do\nnot use vector DBMSs to search for matches at an off-\nset in a vector nor extract slices across multiple vectors.Instead, the dominant use case is this similarity search.To avoid brute force scans for ﬁnding the most sim-\nilar records, vector DBMSs build indexes to accelerate\napproximate nearest neighbor (ANN) searches.Appli-\ncations issue queries with predicates on both the em-\nbedding index and non-embedding attributes (i.e., meta-\ndata).The DBMS then chooses whether to use the non-\nembedding predicate on records before (pre-ﬁlter) or af-\nter (post-ﬁlter) the vector search.There are dozens of new DBMSs in this emerging\ncategory, with Pinecone [58], Milvus [40], and Weav-\niate [84] as the leading systems.Text search engines,\nincluding Elasticsearch [23], Solr [70], and Vespa [79],\nexpanded their APIs to support vector search.Other\nDBMSs rebranded themselves as vector databases to\njump on the bandwagon, such as Kdb+ [34].One compelling feature of vector DBMSs is that\nthey provide better integration with AI tools (e.g., Chat-\nGPT [16], LangChain [36]) than RDBMSs.These sys-\ntems natively support transforming a record’s data into\nan embedding upon insertion using these tools and then\nuses the same transformation to convert a query’s in-\nput arguments into an embedding to perform the ANN\nsearch; other DBMSs require the application to perform\nthese transformations outside of the database.Discussion: Unlike array DBMSs that require a cus-\ntomized storage manager and execution engine to sup-\nport efﬁcient operations on multi-dimensional data, vec-\ntor DBMSs are essentially document-oriented DBMSs\nwith specialized ANN indexes.Such indexes are a fea-\nture, not the foundation of a new system architecture.After LLMs became “mainstream” with ChatGPT in\nlate 2022, it took less than one year for several RDBMSs\nIn 2023,\nto add their own vector search extensions.many of the major RDBMSs added vector indexes, in-\ncluding Oracle [7], SingleStore [137], Rockset [8], and\nClickhouse [157].Contrast this with JSON support in\nRDBMSs.NoSQL systems like MongoDB and CouchDB\nbecame popular in the late 2000s and it took several\nyears for RDBMSs to add support for it.There are two likely explanations for the quick pro-\nliferation of vector indexes.The ﬁrst is that similarity\nsearch via embeddings is such a compelling use case\nthat every DBMS vendor rushed out their version and\nannounced it immediately.The second is that the en-\ngineering effort to introduce a new index data structure\n\nis small enough that it did not take that much work for\nthe DBMS vendors to add vector search.Most of them\ndid not write their vector index from scratch and instead\nintegrated an open-source library (e.g., pgVector [145],\nDiskANN [19], FAISS [24]).We anticipate that vector DBMSs will undergo the\nsame evolution as document DBMSs by adding features\nto become more relational-like (e.g., SQL, transactions,\nextensibility).Meanwhile, relational incumbents will\nhave added vector indexes to their already long list of\nfeatures and moved on to the next emerging trend.2.8 Graph Databases\nThere has been a lot of academic and industry interest\nin the last decade in graph databases [183].Many appli-\ncations use knowledge graphs to model semi-structured\ninformation.Social media applications inherently con-\ntain graph-oriented relationships (“likes”, “friend-of”).Relational design tools provide users with an entity-\nrelationship (ER) model of their database.An ER dia-\ngram is a graph; thus, this paradigm has clear use cases.The two most prevalent approaches to represent graphs\nare (1) the resource description framework (RDF) and\n(2) property graphs [126].With property graphs, the\nDBMS maintains a directed multi-graph structure that\nsupports key/value labels for nodes and edges.RDF\ndatabases (aka triplestores) only model a directed graph\nwith labeled edges.Since property graphs are more com-\nmon and are a superset of RDF, we will only discuss\nthem.We consider two use cases for graph DBMSs and\ndiscuss the problems that will limit their adoption.The ﬁrst category of systems are for operational /\nOLTP workloads: an application, for example, adds a\nfriend link in the database by updating a single record,\npresumably in a transactional manner.Neo4j [44] is the\nmost popular graph DBMS for OLTP applications.It\nsupports edges using pointers (as in CODASYL) but it\ndoes not cluster nodes with their “parent” or “offspring”.Such an architecture is advantageous for traversing long\nedge chains since it will do pointer chasing, whereas a\nRDBMS has to do this via joins.But their potential mar-\nket success comes down to whether there are enough\n“long chain” scenarios that merit forgoing a RDBMS.The second use case is analytics, which seeks to de-\nrive information from the graph.An example of this\nscenario is ﬁnding which user has the most friends un-\nder 30 years old.Notable entries like Tigergraph [74]\nand JanusGraph [32] focus on query languages and\nstorage on a graph DBMS.Other systems, such as Gi-\nraph [26] and Turi [78] (formerly Graphlab [27]) pro-\nvide a computing fabric to support parallel execution of\ngraph-oriented programs, typically written by a user.Unlike queries in relational analytics that are charac-\nterized by chains of joins, queries for graph analytics\ncontain operations like shortest path, cut set, or clique\n\n26\n\nSIGMOD Record, June 2024 (Vol.53, No. 2)\n\n\fdetermination. Algorithm choice and data representa-\ntion will determine a DBMS’s performance.This argues\nfor a computing fabric that allows developers to write\ntheir own algorithms using an abstraction that hides\nthe underlying system topology.However, previous\nresearch shows that distributed algorithms rarely out-\nperform single-node implementations because of com-\nmunication costs [160].A better strategy is to compress\na graph into a space-efﬁcient data structure that ﬁts in\nmemory on a single node and then run the query against\nthis data structure.All but the largest graph databases\nare probably best handled this way.Discussion: Regardless of whether a graph DBMS tar-\ngets OLTP or OLAP workloads, the key challenge these\nsystems have to overcome is that it is possible to simu-\nlate a graph as a collection of tables:\n\nNode (node_id, node_data)\nEdge (node_id_1, node_id_2, edge_data)\n\nThis means that RDBMSs are always an option to sup-\nport graphs.But “vanilla” SQL is not expressive enough\nfor graph queries and thus require multiple client-server\nroundtrips for traversal operations.Some RDBMSs, including MSSQL [3] and Oracle [50],\n\nprovide built-in SQL extensions that make storing and\nquerying graph data easier.Other DBMSs use a transla-\ntion layer on top of relations to support graph-oriented\nAPIs.Amazon Neptune [45] is a graph-oriented veneer\non top of Aurora MySQL.Apache AGE provides an\nOpenCypher interface on top of PostgreSQL [10].More recently, SQL:2023 introduced property graph\nqueries (SQL/PGQ) for deﬁning and traversing graphs\nin a RDBMS [196].The syntax builds on existing lan-\nguages (e.g., Neo4j’s Cypher [49], Oracle’s PGQL [51],\nand TigerGraph’s GSQL [75]), and shares aspects of the\nemerging GQL standard [126].Thus, SQL/PGQ further\nnarrows the functionality difference between RDBMSs\nand native graph DBMSs.The question is whether graph DBMS vendors can\nmake their specialized systems fast enough to over-\ncome the above disadvantages.There have been several\nperformance studies showing that graph simulation on\nRDBMSs outperform graph DBMSs [130, 143].This\ntrend will continue with further improvements in worst-\ncase optimal joins [132, 168] and factorized execution\nalgorithms [100] for graph queries in RDBMSs.⇥\n\n2.9 Summary\nA reasonable conclusion from the above section is that\nnon-SQL, non-relational systems are either a niche mar-\nket or are fast becoming SQL/RM systems.Speciﬁcally:\n\n•\n\nMapReduce Systems: They died years ago and are,\nat best, a legacy technology at present.•\n\n•\n\n•\n\n•\n\n•\n\n•\n\n•\n\nKey-value Stores: Many have either matured into\nRM systems or are only used for speciﬁc problems.These can generally be equaled or beaten by modern\nhigh-performance RDBMSs.Document Databases: Such NoSQL systems are on\na collision course with RDBMSs.The differences\nbetween the two kinds of systems have diminished\nover time and should become nearly indistinguish-\nable in the future.Column-Family Systems: These remain a niche\nmarket.Without Google, this paper would not be\ntalking about this category.Text Search Engines: These systems are used for\ntext ﬁelds in a polystore architecture.It would be\nvaluable if RDBMSs had a better story for search so\nthese would not have to be a separate product.Array Databases: Scientiﬁc applications will con-\ntinue to ignore RDBMSs in favor of bespoke array\nsystems.They may become more important because\nRDBMSs cannot efﬁciently store and analyze arrays\ndespite new SQL/MDA enhancements.Vector Databases: They are single-purpose DBMSs\nwith indexes to accelerate nearest-neighbor search.RM DBMSs should soon provide native support for\nthese data structures and search methods using their\nextendable type system that will render such special-\nized databases unnecessary.Graph Databases: OLTP graph applications will\nbe largely served by RDBMSs.In addition, ana-\nlytic graph applications have unique requirements\nthat are best done in main memory with specialized\ndata structures.RDBMSs will provide graph-centric\nAPIs on top of SQL or via extensions.We do not ex-\npect specialized graph DBMSs to be a large market.Beyond the above, there are also proposals to rebrand\nprevious data models as something novel.For example,\ngraph-relational [158] is the same as the semantic data\nmodel [202].Likewise, document-relational is the doc-\nument model with foreign keys [199].Others provide a\nnon-SQL veneer over a RDBMS (e.g., PRQL [64], Mal-\nloy [39]).Although these languages deal with some of\nSQL’s shortcomings, they are not compelling enough to\novercome its entrenched userbase and ecosystem.3 System Architectures\nThere have been major new ideas in DBMS architec-\ntures put forward in the last two decades that reﬂect-\ning changing application and hardware characteristics.These ideas range from terriﬁc to questionable, and we\ndiscuss them in turn.3.1 Columnar Systems\nTo understand the appeal of columnar DBMSs, we need\nto explain the origins of the data warehouse (OLAP)\nmarket.Beginning in the mid-1990s, enterprises started\n\nSIGMOD Record, June 2024 (Vol.53, No. 2)\n\n27\n\n\fcollecting their customer facing (usually sales) data.Brick-and-mortar retailers (e.g., Walmart) were at fore-\nfront of constructing historical sales databases.These\ncompanies generally found that a sales data warehouse\nwould pay for itself in better stock ordering and rota-\ntion decisions within six months.Such customer facing\ndatabases are now omnipresent in enterprises.Data warehouse applications have common proper-\n\nties that are distinct from OLTP workloads:\n1.They are historical in nature (i.e., they are loaded\n\nperiodically and then are read-only). 2.Organizations retain everything as long as they can\n\nafford the storage — think terabytes to petabytes.3. Queries typically only access a small subset of at-\ntributes from tables and are ad-hoc in nature.Ralph Kimball was an early proponent of star schema\ndata modelling for data warehouses [148, 149].The idea\nwas to construct a fact table that held item-level trans-\nactional data.The classic example is a fact table that\ncontains a record for every item purchased in a retail en-\nterprise.Then, one surrounds the fact table with dimen-\nsion tables that contain common information factored\nout from the fact table to save space.Again, in a retail\nsetting, these dimension tables would include informa-\ntion about customers, products, stores, and time.Organizing the DBMS’s storage by columns instead\nof rows has several beneﬁts [87].First, compressing\ncolumnar data is more effective than row-based data be-\ncause there is a single value type in a data block of-\nten many repeated bytes.Second, a Volcano-style en-\ngine executes operators once per row.In contrast, a\ncolumn-oriented engine has an inner loop that processes\na whole column using vectorized instructions [106, 147].Lastly, row stores have a large header for each record\n(e.g., 20 bytes) to track nulls and versioning meta-data,\nwhereas column stores have minimal storage overhead\nper record.Discussion: Over the last two decades, all vendors ac-\ntive in the data warehouse market have converted their\nofferings from a row store to a column store.This tran-\nsition brought about signiﬁcant changes in the design\nof DBMSs.In addition, several new vendors have en-\ntered the market in the last two decades with column\nstore offerings, for example Amazon’s Redshift [94] and\nGoogle’s BigQuery [162] along with offerings from in-\ndependent companies (e.g., Snowﬂake [121]).In summary, column stores are new DBMS implemen-\ntations with specialized optimizers, executors, and stor-\nage formats.They have taken over the data warehouse\nmarketplace because of their superior performance.3.2 Cloud Databases\nThe rise of cloud platforms in the late 2000s has also\ngreatly affected the implementation (and sales model) of\n\nDBMSs.Initial cloud DBMS offerings repackaged on-\nprem systems into managed VMs with direct-attached\nstorage.But over the last 20 years, networking band-\nwidth has increased much faster than disk bandwidth,\nmaking network attached storage (NAS) attractive as an\nalternative to attached storage.This has caused a pro-\nfound rethinking of DBMS architectures for the cloud.All major cloud vendors offer NAS via object stores\n(e.g., Amazon S3) with some DBMS functionality (e.g.,\nreplication, ﬁltering).Beyond better economics com-\npared to direct-attached storage, object stores have sev-\neral advantages that compensate for the cost of the\nadded network link.First, because the compute nodes\nare disconnected from the storage nodes, a system can\nprovide per-query elasticity; the DBMS can add new\ncompute nodes dynamically without having to reshufﬂe\ndata.It also allows the DBMS to use different hard-\nware for its storage nodes than compute nodes.Second,\nthe system can reassign compute nodes to other tasks\nif a DBMS is underutilized.On the other hand, in a\nshared-nothing DBMS, a node must always be online to\nhandle incoming query requests.Lastly, pushing down\ncomputation into the storage nodes is possible (and gen-\nerally advantageous).This execution strategy is known\nas “pushing the query to the data” versus “pulling the\ndata to the query” and is well understood in DBMSs.Generally, the ﬁrst two ideas are called “serverless\ncomputing”, and was introduced for cloud-native DBMSs\nby Snowﬂake [121].Other vendors have moved or\nare in the process of moving to a serverless environ-\nment for their cloud offerings.Effective utilization of\nthis model requires a hosted multi-node environment in\nwhich multiple DBMS customers are grouped onto the\nsame node(s) with a multi-tenant execution scheme.Discussion: The advent of cloud databases is another\nexample of “what goes around comes around”.Multi-\nnode shared-disk DBMSs are an old idea that histori-\ncally tended not to work out well.However, it is back in\nvogue with technology change (faster networking) and\nmoving to the cloud.In addition, time-sharing services\nwere popular in the 1970s when computers were big and\nexpensive.Cloud platforms are big time-sharing ser-\nvices, so the concept is back after a few decades.Since\nenterprises are moving everything possible to the cloud,\nwe expect this shared-disk to dominate DBMS architec-\ntures.Hence, we do not foresee shared-nothing architec-\ntures resurfacing in the future.The cloud has profoundly impacted DBMSs, causing\nthem to be completely re-architected.The movement\nof computing from on-prem to the cloud generates a\nonce-in-a-lifetime opportunity for enterprises to refac-\ntor codebases and remove bad historical technology de-\ncisions.A cloud environment also provides several ben-\neﬁts to vendors that are not possible with on-prem de-\nployments.Foremost is that vendors can track usage\n\n28\n\nSIGMOD Record, June 2024 (Vol. 53, No.2)\n\n\ftrends for all their customers: they can monitor unex-\npected behavior, performance degradations, and usage\npatterns.Moreover, they can push incremental updates\nand code patches without disrupting service.From a business perspective, open-source DBMSs\nface the danger of becoming too popular and being mon-\netized by the major cloud providers.The public spats\nbetween Amazon and ISVs like MongoDB [153] and\nElasticsearch [101] are notable examples.3.3 Data Lakes / Lakehouses\nAnother trend that the cloud platforms fomented is the\nmovement away from monolithic, dedicated data ware-\nhouses for OLAP workloads and towards data lakes\nbacked by object stores.With legacy data warehouses,\norganizations load data into the DBMS, which the sys-\ntem stashes in managed storage with proprietary for-\nmats.However,\nthis has not been the model of many organizations, es-\npecially technology companies, for the last decade.With a data lake architecture, applications upload ﬁles\nto a distributed object store, bypassing the traditional\nroute through the DBMS [167].Users then execute\nqueries and processing pipelines on these accumulated\nﬁles using a lakehouse (a portmanteau of data ware-\nhouse and data lake) execution engine [93].These lake-\nhouse systems provide a uniﬁed infrastructure support-\ning SQL and non-SQL workloads.The latter is crucial\nas the last decade has shown that data scientists and ML\npractitioners typically use Python-based notebooks that\nuse Panda’s DataFrame API [159] to access data instead\nof SQL.Several projects leverage DBMS methods to\noptimize DataFrame processing, including Dask [181],\nPolars [61], Modin [177], and Bodo [198].Instead of using DBMS-speciﬁc proprietary ﬁle for-\nmats or inefﬁcient text-based ﬁles (e.g., CSV, JSON),\napplications write data to data lakes using open-source,\ndisk-resident ﬁle formats [203].The two most pop-\nular formats are Twitter/Cloudera’s Parquet [55] and\nMeta’s ORC [53, 140].Both of them borrow tech-\nniques from earlier columnar storage research, such as\nPAX [90], compression [87], and nested-data (JSON)\nshredding [121, 161].Apache Arrow [11] is a similar\nbinary format for exchanging in-memory data between\nsystems.Open-source libraries for reading/writing these\nformats allow disparate applications to create data ﬁles\nthat other systems then parse and consume, thereby en-\nhancing data sharing across services and business units.Discussion: Data lakes are the successor to “Big Data”\nmovement from the early 2010s, partly led by the pop-\nularity of MR systems (Sec.2.1) and column stores\n(Sec. 3.1).At ﬁrst glance, a data lake seems like a terri-\nble idea for an organization: allowing any application to\nwrite arbitrary ﬁles into a centralized repository without\n\nany governance is a recipe for integrity, discovery, and\nversioning problems [167].Lakehouses provide much-\nneeded control over these environments to help mitigate\nmany problems with meta-data, caching, and indexing\nservices [93].Additional middleware that tracks new\ndata and supports transactional updates, such as Delta\nLake [92], Iceberg [6], and Hudi [5], make lakehouses\nlook more like a traditional data warehouse.Data lakes introduce new challenges to query opti-\nmization.DBMSs have always struggled with acquir-\ning precise statistics on data,\nleading to poor query\nplan choices [154].Consequently, incorporating adaptive query processing\nstrategies is imperative in the cloud to enable a DBMS to\ndynamically modify query plans during execution based\non observed data characteristics [97, 105, 163].All the major cloud vendors now offer some variation\nof a managed data lake service.Since data lake sys-\ntems backed by object stores are much cheaper per giga-\nbyte than proprietary data warehouses, the legacy OLAP\nvendors (e.g., Teradata, Vertica) have extended their\nDBMSs to support reading data from object stores in re-\nsponse to this pricing pressure.Several independent sys-\ntems are also in this space, including Databricks [105],\nDremio [21], PrestoDB [63], and Trino [77].3.4 NewSQL Systems\nIn the late 2000s, there were multiple distributed NoSQL\nDBMSs available designed to scale horizontally to sup-\nport online applications with large number of concurrent\nusers [110].However, many organizations could not use\nthese NoSQL systems because their applications could\nnot give up strong transactional requirements.But the\nexisting RDBMSs (especially open-source ones) were\nnot able to (natively) scale across multiple machines.In\nresponse, NewSQL systems arrived in the early 2010s\nseeking to provide the scalability of NoSQL systems for\nOLTP workloads while still supporting SQL [95, 171].In other words, these new systems sought to achieve the\nsame scalability of NoSQL DBMSs from the 2000s but\nstill keep the RM and ACID transactions of the legacy\nDBMSs from the 1990s.There were two main groups of NewSQL systems.The ﬁrst was in-memory DBMSs, including H-Store [144,\n189] (commercialized as VoltDB [83]), SingleStore [69],\nMicrosoft Hekaton [128], and HyPer [146].Other start-\nup offerings included disk-oriented, distributed DBMSs\nlike NuoDB [47] and Clustrix [17].Discussion: There has yet to be a dramatic uptake in\nNewSQL DBMS adoption [96].The reason for this lack-\nluster interest is that existing DBMSs were good enough\nfor the time, which means organizations are unwilling to\ntake on the costs and risk of migrating existing applica-\ntions to newer technologies.Companies are more risk-\n\nSIGMOD Record, June 2024 (Vol. 53, No.2)\n\n29\n\n\faverse with changing OLTP DBMSs than with OLAP.If an OLTP DBMS fails, companies cannot execute the\ntransactions they need to generate revenue.In contrast,\nan OLAP DBMS failure could be limited to temporarily\ninconveniencing an analyst or data scientist.There were other restrictions in NewSQL DBMSs,\nsuch as only supporting a subset of standard SQL or\nbad performance on multi-node transactions.Some\nNewSQL products, like Microsoft’s Hekaton, were only\navailable as an extension to a legacy DBMS, requiring\nthe faster engine to use the slower DBMS’s interfaces.NewSQL vendors also incorrectly anticipated that in-\nmemory DBMS adoption would be larger in the last\ndecade.Flash vendors drove down costs while improv-\ning storage densities, bandwidth, and latencies.Higher\nDRAM costs and the collapse of persistent memory\n(e.g., Intel Optane) means that SSDs will remain domi-\nnant for OLTP DBMSs.The aftermath of NewSQL is a new crop of distributed,\ntransactional SQL RDBMSs.These include TiDB [141],\nCockroachDB [195], PlanetScale [60] (based on the\nVitess sharding middleware [80]), and YugabyteDB [86].The major NoSQL vendors also added transactions to\ntheir systems in the last decade despite previously strong\nclaims that they were unnecessary.Notable DBMSs that\nmade the shift include MongoDB, Cassandra, and Dy-\nnamoDB.Google said this\ncogently when they discarded eventual consistency in\nfavor of real transactions with Spanner in 2012 [119].3.5 Hardware Accelerators\nThere has been a hunt for a cost-effective hardware ac-\ncelerator for DBMSs for the last 50 years.The promise\nis obvious: specialized hardware designed for a DBMS\nshould easily outperform a conventional CPU.In the 1980s, vendors fabricated custom hardware to\naccelerate DBMSs and marketed them as database ma-\nchines [107].Britton-Lee released the ﬁrst commercial\naccelerator product (IDM/500) in 1981 [192] that con-\ntained a conventional CPU with a hardware accelerator\nthat ofﬂoaded portions of a query’s execution.This ac-\ncelerator targeted a small subset of the execution path,\nand was not cost-effective.Teradata introduced its own\ndatabase machine that provided network hardware for\nsorting in-ﬂight tuples (Y-net [1]), but it was dropped\nfor a software-only solution [85].All other custom hard-\nware DBMS acceleration during the 1980s failed.Instead of building custom hardware for DBMSs, the\nlast 20 years have been about using commodity hard-\nware (FPGAs, GPUs) to accelerate queries.This is an\nenticing idea: a vendor can get the beneﬁts of a DBMS\naccelerator without the cost of fabricating the hardware.Netezza was one of the ﬁrst FPGA-based DBMSs\nthat started in the late 1990s as a fork of PostgreSQL.It used an FPGA to accelerate searches on disk-resident\npages, but originally could not search in-memory pages.Swarm64 attempted to sell a FPGA accelerator for Post-\ngreSQL but switched to a software-only architecture\nwithout the FPGA before they were acquired [91].Vitesse’s\nDeepgreen DB [81] is the only remaining FPGA-enhanced\nDBMS available from an ISV.There is more activity in the GPU-accelerated DBMS\nmarket.Notable GPU DBMSs include Kinetica [35],\nSqream [35], Brytlyt [13], and HeavyDB [48].If data\ndoes not ﬁt in GPU memory, then query execution is\nbottlenecked on loading data into the device, thereby\nrendering the hardware’s parallelization beneﬁts moot.Discussion: There are several conclusions that we can\ndraw from the above analysis.First, these systems are\nall focused on the OLAP market and only for RDBMSs;\nthere are essentially no data model implications to the\ndiscussion in this section.Also, OLAP workloads will\ncontinue to move aggressively to the cloud, but special-\npurpose hardware is not likely to ﬁnd acceptance unless\nit is built by the cloud vendor.Creating custom hardware just for a DBMS is not\ncost-effective for most companies.Commodity hard-\nware avoids this problem but there is still the challenge\nof integrating the hardware into a DBMS.The reason\nwhy there are more GPU DBMSs than FPGA systems\nis because there are existing support libraries available\nfor GPUs (e.g., Nvidia CUDA [169]).But cloud CPU-\nbased compute resources are incredibly cheap due to\neconomies of scale.The success of any accelerator is\nlikely to be limited to on-prem databases, but this mar-\nket is not growing at the same rate as cloud databases.Even if one could get an accelerator to market that\nshowed orders of magnitude improvement over existing\ntechnologies, that only solves half the problem needed\nfor adoption and success.A hardware-only company\nmust ﬁnd somebody to add support for its accelerator\nin a DBMS.If the accelerator is an optional add-on to\nthe DBMS, then adoption will be low and thus a DBMS\nvendor will not want to spend engineering time on sup-\nporting it.If the accelerator is a critical component of\nthe DBMS, then no vendor would outsource the devel-\nopment of such an important part to an outside vendor.The only place that custom hardware accelerators will\nsucceed is for the large cloud vendors.They can justify\nthe $50–100m R&D cost of custom hardware at their\nmassive scale.They also control the entire stack (hard-\nware and software) and can integrate their hardware at\ncritical locations.Amazon did this already with their\nRedshift AQUA accelerators [102].Google BigQuery\nhas custom components for in-memory shufﬂes [89].In spite of the long odds, we predict that there will be\nmany attempts in this space over the next two decades.30\n\nSIGMOD Record, June 2024 (Vol. 53, No.2)\n\n\f3.6 Blockchain Databases\nAs of this writing, a waning database technology fad\nis blockchains.These are decentralized log-structured\ndatabases (i.e., ledger) that maintain incremental check-\nsums using some variation of Merkle trees.These in-\ncremental checksums are how a blockchain ensures that\nthe database’s log records are immutable: applications\nuse these checksums to verify that previous database up-\ndates have not been altered.The ideal use case for blockchain databases is peer-to-\npeer applications where one cannot trust anybody.There\nis no centralized authority that controls the ordering of\nupdates to the database.At the present time, cryptocurrencies (Bitcoin) are\nthe only use case for blockchains.In addition, there\nhave been attempts to build a usable DBMS on top of\nblockchains, notably Fluree [25], BigChainDB [12], and\nResilientDB [136].These vendors (incorrectly) promote\nthe blockchain as providing better security and auditabil-\nity that are not possible in previous DBMSs.Discussion: We are required to place trust in several en-\ntities in today’s society.The\nonly applications without real-world trust are dark web\ninteractions (e.g., money laundering).Legitimate busi-\nnesses are unwilling to pay the performance price (about\nﬁve orders of magnitude) to use a blockchain DBMS.If\norganizations trust each other, they can run a shared dis-\ntributed DBMS more efﬁciently without wasting time\nwith blockchains.To the best of our knowledge, all the\nmajor cryptocurrency exchanges run their businesses off\ntraditional RDBMSs and not blockchain systems.Blockchain proponents make additional meaningless\nclaims of achieving data resiliency through replication\nin a peer-to-peer environment.No sensible company\nwould rely on random participants on the Internet as the\nbackup solution for mission-critical databases.There is possibly a (small) market for private block-\nchain DBMSs.Amazon’s Quantum Ledger Database\n(QLDB) released in 2018 [65] provides the same im-\nmutable and veriﬁable update guarantees as a blockchain,\nbut it is not decentralized (i.e., no BFT commit protocol).Amazon built QLDB after ﬁnding no compelling use\ncase for a fully decentralized blockchain DBMS [108].3.7 Summary\nThe key takeaways from the major technological thrusts\nin database systems are as follows:\n\n•\n\n•\n\nColumnar Systems: The change to columnar stor-\nage revolutionized OLAP DBMS architectures.Cloud Databases: The cloud has upended the con-\nventional wisdom on how to build scalable DBMSs.Except for embedded DBMSs, any product not start-\ning with a cloud offering will likely fail.NewSQL Systems: They leverage new ideas but\nhave yet to have the same impact as columnar and\ncloud DBMSs.It has led to new distributed DBMSs\nthat support stronger ACID semantics as a counter\nto NoSQL’s weaker BASE guarantees.Hardware Accelerators: We do not see a use case\nfor specialized hardware outside of the major cloud\nvendors, though start-ups will continue to try.Blockchain Databases: An inefﬁcient technology\nlooking for an application.History has shown this is\nthe wrong way to approach systems development.•\n\n•\n\n•\n\n•\n\n4 Parting Comments\nOur analysis of the last two decades in databases has sev-\neral takeaways.Unfortunately, some of these are repeats\nof the warnings from the 2005 paper.Never underestimate the value of good marketing for\nbad products.The database market is highly competi-\ntive and lucrative.This competition drives vendors to\nclaim that their new technologies will solve all sorts of\nproblems and change developers’ lives for the better.Ev-\nery developer has struggled with databases before, so\nthey are especially amenable to such marketing.Infe-\nrior DBMS products have succeeded via strong market-\ning despite the existence of better options available at\nthe time: Oracle did this in the 1980s, MySQL did this\nin the 2000s, and MongoDB did this in the 2010s.These\nsystems got enough traction early on to buy them time\nto ﬁx the engineering debt they accumulated earlier.Beware of DBMSs from large non-DBMS vendors.One interesting aspect in the last ten years of databases\nis the trend of tech companies building DBMSs in-house\nthat they then spin out as open-source projects.All these\nsystems started life as purpose-built applications for a\ntech company.The company then releases the DBMS\nas an open-source project (often pushed to the Apache\nFoundation for stewardship) in hopes to achieve “free”\ndevelopment from external users.Some times they come from large companies that can\nafford to allocate resources to developing new systems.Notable examples include Meta (Hive [197], Presto [63],\nCassandra [14], RocksDB [68]) and LinkedIn (Kafka [33],\nPinot [59], Voldemort [82]).Other systems are from\nstart-ups building a data-intensive product where they\nfelt the need to also build a DBMS.The most successful\nexamples are 10gen (MongoDB) and PowerSet (HBase),\nbut there also many failed endeavors.This trend to avoid “not invented here” software is\npartly because many companies’ promotion path favors\n\nSIGMOD Record, June 2024 (Vol.53, No. 2)\n\n31\n\n\fengineers who make new internal systems, even if ex-\nisting tools are sufﬁcient.But this perversion led many\nteams without DBMS engineering experience to under-\ntake building a new system.One should be wary of\nsuch systems when a company ﬁrst open-sources them,\nas they are almost always immature technologies.Do not ignore the out-of-box experience.One of the\nsalient selling points of many non-relational DBMSs is\na better “out-of-box” experience than RDBMSs.Most\nSQL systems require one ﬁrst to create a database and\nthen deﬁne their tables before they can load data.This\nis why data scientists use Python notebooks to analyze\ndata ﬁles quickly.Every DBMS should, therefore, make\nit easy to perform in situ processing of local and cloud-\nstorage ﬁles.DuckDB’s rising popularity is partly due\nto its ability to do this well.Vendors should also consider additional challenges\nthat customers will inevitably face with databases, in-\ncluding physical design, knob tuning, schema design,\nand query tuning.There is a crucial need for what one\nof us calls “self-driving” DBMSs [173].Developers need to query their database directly.Most OLTP applications created in the last 20 years pri-\nmarily interact with databases via an abstraction layer,\nsuch as an endpoint API (e.g., REST, GraphQL) or\nan object-relational mapper (ORM) library.Such lay-\ners translate an application’s high-level requests into\ndatabase queries.ORMs also automatically handle main-\ntenance tasks, such as schema migrations.One could\nargue that since OLTP developers never write raw SQL\nin their applications, it does not matter what data model\ntheir DBMS uses as these layers hide it.ORMs are a vital tool for rapid prototyping.But they\noften sacriﬁce the ability to push logic into the DBMS\nin exchange for interoperability with multiple DBMSs.This is why\nusing a RDBMS that supports SQL is the better choice.How DBMSs should interact with modern AI/ML tools\nhas recently become a crucial question, especially with\nthe advent of LLMs (e.g., ChatGPT).Although this ﬁeld\nis moving rapidly, we offer a few initial comments.There is a resurgence in using natural languages (NLs)\nto query databases due to advancements in LLMs at\nconverting NL to query code (e.g., SQL) [133].Some\nhave even suggested that such AI-powered query inter-\nfaces will render SQL obsolete.NL interfaces are an\nold research topic that dates back to the 1970s [139],\nbut which historically has poor outcomes and thus little\nwidespread use [88].We acknowledge LLMs have im-\npressive results for this task but caution those who think\nNL will replace SQL.For OLAP databases, NL could prove helpful\nin constructing the initial queries for exploratory anal-\nysis.However, these queries should be exposed to a\ndashboard-like reﬁnement tool since English and other\nNLs are rife with ambiguities and impreciseness.There is a reluctance to depend on current LLM tech-\nnology for decision-making inside the enterprise, espe-\ncially with ﬁnancial data.The biggest issue is that the\noutput of an LLM is not explainable to a human.Sec-\nond, LLM systems require more training data than “tra-\nditional” ML systems (e.g., random forests, Bayesian\nmodels).Companies generally cannot outsource the cre-\nation of training data for these models to unskilled peo-\nple.For these reasons, the uptake of LLMs for enter-\nprise data will be cautiously slow.Lastly, there is a considerable amount of recent re-\nsearch on using AI/ML to optimize the DBMSs [174].Examples include ML-oriented query optimizers [152,\n156], conﬁguration tuners [200, 204], and access meth-\nods [151, 193].5 Conclusion\nWe predict that what goes around with databases will\ncontinue to come around in upcoming decades.Another\nwave of developers will claim that SQL and the RM are\ninsufﬁcient for emerging application domains.People\nwill then propose new query languages and data models\nto overcome these problems.However, we do not expect these new data\nmodels to supplant the RM.Another concern is the wasted effort of new projects\nreimplementing the same components that are not novel\nbut necessary to have a production-ready DBMS (e.g.,\nconﬁg handlers, parsers, buffer pools).To accelerate\nthe next generation of DBMSs, the community should\nfoster the development of open-source reusable compo-\nnents and services [112, 176].We contend that the database community should strive\nfor a POSIX-like standard of DBMS internals to accel-\nerate interoperability.We caution developers to learn from history.One of us will likely still be alive\nand out on bail in two decades, and thus fully expects to\nwrite a follow-up to this paper in 2044.32\n\nSIGMOD Record, June 2024 (Vol. 53, No.2)\n\n\fReferences\n\n[1] TeraData Forums.https://downloads.teradata.com/forum/\ndatabase/what-is-the-difference-between-a-ynet-and-\nbynet, September 2011.[2] Netezza TwinFin Architecture.https://www.iexpertify.com/\nlearn/netezza-twinfin-architecture/#.YYq5_S1h17Y,\nApril 2020.[3] Graph processing with sql server and azure sql database.[8] Introducing vector search on rockset.https://rockset.com/\nblog/introducing-vector-search-on-rockset/, apr 2023.\nhttps://docs.aerospike.com/tools/aql,\n\n[9] Aerospike AQL.2024. [10] Apache AGE. https://age.apache.org, 2024.[11] Apache Arrow. https://arrow.apache.org, 2024.[12] BigchainDB. https://www.bigchaindb.com/, 2024.[13] Brytlyt. https://brytlyt.io/, 2024.[14] Apache Cassandra. https://cassandra.apache.org, 2024.[15] The Cassandra Query Language\n\n(CQL).https:\n\n//cassandra.apache.org/doc/latest/cassandra/cql/,\n2024.[16] ChatGPT Plugins. https://openai.com/blog/chatgpt-\n\nplugins, March 2024.[17] Clustrix. https://clustrix.com, 2024. [18] Apache Arrow DataFusion.https://arrow.apache.org/\n\nhaystack.readthedocs.io, 2024.[21] Dremio. https://dremio.com/, 2024.[23] Elasticsearch. https://www.elastic.co, 2024.[24] FAISS – Facebook AI Similarity Search.ai.facebook.com/tools/faiss/, 2024.\n\nhttps://\n\n[25] Fluree.[28] Apache Hbase. https://hbase.apache.org, 2024.[29] The hdf5 library & ﬁle format.https://www.hdfgroup.org/\n\nsolutions/hdf5, 2024.[30] Apache Hive. https://hive.apache.org, 2024.https:\n\n//www.ibm.com/docs/en/informix-servers/12.10?topic=\ninformix-extensions-datablade-modules, 2024.[32] Janusgraph. https://janusgraph.org/, 2024.[33] Apache Kafka. https://kafka.apache.org/, 2024.[34] kdb+. https://kx.com/, 2024.[35] Kinetica. https://www.kinetica.com/, 2024.[36] LangChain. https://langchain.com, 2024.[37] LevelDB. https://github.com/google/leveldb, 2024.[38] Apache Lucene. https://lucene.apache.org, 2024.[39] Malloy - Experimental Language.[40] Milvus. https://milvus.io/, 2024. [41] MongoDB.https://mongodb.com, 2024.\n\nhttps://github.com/\n\n[42] Mongodb – querying with sql.https://docs.mongodb.com/\n\ndatalake/admin/query-with-sql/, 2024.[43] MySQL\n\n–\n\nInnoDB Full-Text\n\nIndexes.https:\n\n//dev.mysql.com/doc/refman/8.0/en/innodb-fulltext-\nindex.html, 2024.[44] Neo4j. https://neo4j.com/, 2024. [45] Amazon Neptune.https://aws.amazon.com/neptune/, 2024.https://\n\nwww.unidata.ucar.edu/software/netcdf/, 2024.[47] Nuodb. https://nuodb.com, 2024.[48] Heavydb. https://www.heavy.ai, 2024.[49] openCypher. https://opencypher.org, 2024. [50] Oracle graph database.https://www.oracle.com/database/\n\ngraph/, 2024.\n\nlang.org/, 2024.[51] PGQL – Property Graph Query Language.https://pgql-\n\n[52] Oracle\n\nText.https://www.oracle.com/database/\n\ntechnologies/datawarehouse-bigdata/text.html, 2024.[53] Apache ORC. https://orc.apache.org/, 2024.[54] Paradigm4 platform overview.https://www.paradigm4.com/\n\ntechnology/scidb-platform-overview/, 2024.[55] Apache Parquet. https://parquet.apache.org/, 2024.[56] Partiql – sql-compatible access to relational, semi-structured,\n\nand nested data.https://partiql.org/, 2024. [57] Apache Phoenix.https://phoenix.apache.org, 2024.[58] Pinecone. https://www.pinecone.io/, 2024.[59] Apache Pinot. https://pinot.apache.org/, 2024.[60] PlanetScale. https://planetscale.com/, 2024.[61] Polars. https://www.pola.rs, 2024. –\n[62] PostgreSQL\n\nSearch.Text\n\nFull\n\nwww.postgresql.org/docs/current/textsearch.html,\n2024.\n\nhttps://\n\n[63] PrestoDB.https://prestodb.io/, 2024. [64] PRQL – A Proposal for a Better SQL.[65] Amazon Quantum Ledger Database (QLDB).https://\n\n[67] Redis. https://redis.io/, 2024.[68] RocksDB. https://rocksdb.org, 2024.[69] Singestore. https://www.singlestore.com/, 2024.[70] Apache Solr. https://solr.apache.org/, 2024.[71] SQLite. https://www.sqlite.org, 2024.https://www.couchbase.com/sqlplusplus, 2024.[73] Teradata – creating an array data\n\ntype.https:\n\n//docs.teradata.com/r/S0Fw2AVH8ff3MDA0wDOHlQ/\nun3kj~t3qMDO66LF4YXuiw, 2024.[76] Tiledb. https://tiledb.com, 2024.[77] Trino. https://trino.io/, 2024.[78] Turi. http://turi.com/, 2024.[79] Vespa. https://vespa.ai/, 2024.[80] Vitess. https://vitess.io, 2024. [81] Vitesse Deepgreen DB.products/deepgreen-db/, 2024.\n\nhttps://www.vitessedata.com/\n\n[82] Project Voldemort.https://www.project-voldemort.com,\n\n2024.[83] Voltdb. https://www.voltactivedata.com/, 2024.[84] Weaviate. https://weaviate.io, 2024.[85] Dbc 1012. https://en.wikipedia.org/wiki/DBC_1012, 2024.[86] YugabyteDB. https://www.yugabyte.com/, 2024. [87] D. J. Abadi.Query Execution in Column-Oriented Database\n\nSystems.[19] Microsoft DiskANN. DiskANN, 2024. [20] Django\n\nHaystack.https://github.com/microsoft/\n\nhttps://django-\n\naws.amazon.com/qldb/, 2024.[66] The\n\nraster\nrasdaman\nwww.rasdaman.org, 2024.\n\narray\n\ndatabase.http://\n\nSIGMOD Record, June 2024 (Vol. 53, No.2)\n\n33\n\n\f[88] K. Affolter, K. Stockinger, and A. Bernstein.A compara-\ntive survey of recent natural language interfaces for databases.VLDB J., 28(5):793–819, 2019. doi: 10.1007/s00778-019-\n00567-8.[89] H. Ahmadi. In-memory query execution in google bigquery.https://cloud.google.com/blog/products/bigquery/in-\nmemory-query-execution-in-google-bigquery, Aug 2016.[90] A. Ailamaki, D. J. DeWitt, M. D. Hill, and M. Skounakis.Weaving relations for cache performance.In VLDB, volume 1,\npages 169–180, 2001. [91] G. Anadiotis.Open source postgresql on steroids: Swarm64\ndatabase acceleration software for performance improvement\nhttps://www.zdnet.com/article/open-\nand analytics.source-postgresql-on-steroids-swarm64-database-\nacceleration-software-for-performance-improvement-\nand-analytics/, apr 2023.[92] M. Armbrust, T. Das, L. Sun, B. Yavuz, S. Zhu, M. Murthy,\nJ. Torres, H. van Hovell, A. Ionescu, A. Łuszczak, et al.Delta\nlake: high-performance acid table storage over cloud object\nstores.[93] M. Armbrust, A. Ghodsi, R. Xin, and M. Zaharia.Lakehouse:\na new generation of open platforms that unify data warehousing\nand advanced analytics.In Proceedings of CIDR, page 8, 2021.[94] N. Armenatzoglou, S. Basu, N. Bhanoori, M. Cai, N. Chainani,\nK. Chinta, V. Govindaraju, T. J.Green, M. Gupta, S. Hillig,\nE. Hotinger, Y. Leshinksy, J. Liang, M. McCreedy, F. Nagel,\nI. Pandis, P. Parchas, R. Pathak, O. Polychroniou, F. Rahman,\nG. Saxena, G. Soundararajan, S. Subramanian, and D. Terry.Amazon redshift re-invented. In Proceedings of the 2022 Inter-\nnational Conference on Management of Data, SIGMOD ’22,\npages 2205–2217, 2022. doi: 10.1145/3514221.3526045.[95] M. Aslett. How will the database incumbents respond to\n\nNoSQL and NewSQL?The 451 Group, April 2011. [96] M. Aslett.Ten years of NewSQL: Back to the future of dis-\ntributed relational databases.The 451 Group, June 2021. [97] S. Babu and P. Bizarro.Adaptive query processing in the look-\n\ning glass.In CIDR, pages 238–249, January 2005.[98] D. F. Bacon, N. Bales, N. Bruno, B. F. Cooper, A. Dickinson,\nA. Fikes, C. Fraser, A. Gubarev, M. Joshi, E. Kogan, A. Lloyd,\nS. Melnik, R. Rao, D. Shue, C. Taylor, M. van der Holst, and\nIn Pro-\nD. Woodford.Spanner: Becoming a sql system.ceedings of the 2017 ACM International Conference on Man-\nagement of Data, SIGMOD ’17, pages 331–343, 2017. doi:\n10.1145/3035918.3056103.system Research (CIDR), pages 223–234, 2011.[100] N. Bakibayev, D. Olteanu, and J. Závodný.Fdb: A query en-\ngine for factorised relational databases. Proc.VLDB Endow., 5\n(11):1232–1243, jul 2012. doi: 10.14778/2350229.2350242. [101] S. Banon.Amazon: NOT OK - why we had to change Elas-\nhttps://www.elastic.co/blog/why-license-\n\ntic licensing.change-aws, jan 2021. [102] J. Barr.AQUA (Advanced Query Accelerator) –\nfor Your Amazon Redshift Queries.A Speed Boost\nhttps://aws.amazon.com/blogs/aws/new-aqua-advanced-\nquery-accelerator-for-amazon-redshift/, Apr 2021.In Next Generation Information Technologies and\nSystems, 4th International Workshop, NGITS’99, volume 1649\nof Lecture Notes in Computer Science, pages 76–93, 1999. doi:\n10.1007/3-540-48521-X_7.[104] E. Begoli, J. Camacho-Rodríguez, J. Hyde, M. J. Mior, and\nD. Lemire.Apache calcite: A foundational framework for\noptimized query processing over heterogeneous data sources.In Proceedings of the 2018 International Conference on Man-\nagement of Data, SIGMOD ’18, pages 221–230, 2018. doi:\n10.1145/3183713.3190662.[105] A. Behm, S. Palkar, U. Agarwal, T. Armstrong, D. Cashman,\nA. Dave, T. Greenstein, S. Hovsepian, R. Johnson, A. Sai Krish-\nnan, P. Leventis, A. Luszczak, P. Menon, M. Mokhtar, G. Pang,\nS. Paranjpye, G. Rahn, B. Samwel, T. van Bussel, H. van Hov-\nell, M. Xue, R. Xin, and M. Zaharia.Photon: A fast query\nengine for lakehouse systems.In Proceedings of the 2022 In-\nternational Conference on Management of Data, SIGMOD ’22,\npages 2326–2339, 2022. doi: 10.1145/3514221.3526054.Database machines: An idea whose\ntime passed?A critique of the future of database machines.pages 166–187, 1983. doi: 10.1007/978-3-642-69419-6\n_10.https://www.tbray.org/\nnov\n\n[108] T. Bray. AWS and Blockchain.ongoing/When/202x/2022/11/19/AWS-Blockchain,\n2019.Apache ﬂink: Stream and batch processing in a\nsingle engine.The Bulletin of the Technical Committee on Data\nEngineering, 38(4), 2015.[110] R. Cattell. Scalable sql and nosql data stores.SIGMOD Rec.,\n\n39:12–27, 2011. [111] F. Chang, J.Dean, S. Ghemawat, W. C. Hsieh, D. A. Wallach,\nM. Burrows, T. Chandra, A. Fikes, and R. E. Gruber.Bigtable:\nA distributed storage system for structured data.In Proceedings\nof the USENIX Symposium on Operating Systems Design and\nImplementation, OSDI ’06, pages 205–218, 2006.[112] S. Chaudhuri and G. Weikum.Rethinking database system ar-\nchitecture: Towards a self-tuning risc-style database system.In\nVLDB 2000, Proceedings of 26th International Conference on\nVery Large Data Bases, pages 1–10, 2000.[113] C. Chin. The rise and fall of the olap cube.https:\n\n//www.holistics.io/blog/the-rise-and-fall-of-the-\nolap-cube/, January 2020.Database struc-\nture and manipulation capabilities of a picture database man-\nagement system (picdms).IEEE Transactions on Pattern Anal-\nysis and Machine Intelligence, PAMI-6(4):484–492, 1984. doi:\n10.1109/TPAMI.1984.4767553.[115] E. F. Codd. A relational model of data for large shared\ndata banks.Commun. ACM, 13(6):377–387, jun 1970. doi:\n10.1145/362384.362685.[116] E. F. Codd. Further normalization of the data base relational\nmodel.Research Report / RJ / IBM / San Jose, California,\nRJ909, 1971.[117] W. W. W. Consortium. Overview of sgml resources.https:\n\n//www.w3.org/MarkUp/SGML/, 2004.[118] W. W. W. Consortium. Extensible Markup Language (XML).https://www.w3.org/XML/, 2016. [119] J. C. Corbett, J.Dean, M. Epstein, A. Fikes, C. Frost, J. Furman,\nS. Ghemawat, A. Gubarev, C. Heiser, P. Hochschild, W. Hsieh,\nS. Kanthak, E. Kogan, H. Li, A. Lloyd, S. Melnik, D. Mwaura,\nD. Nagle, S. Quinlan, R. Rao, L. Rolig, M. S. Yasushi Saito,\nC. Taylor, R. Wang, and D. Woodford.Spanner: Google’s\nGlobally-Distributed Database.In OSDI, 2012. [120] A. Crotty, V. Leis, and A. Pavlo.Are you sure you want to use\nMMAP in your database management system?[121] B. Dageville, T. Cruanes, M. Zukowski, V. Antonov, A. Avanes,\nJ. Bock, J. Claybaugh, D. Engovatov, M. Hentschel, J. Huang,\nA. W. Lee, A. Motivala, A. Q. Munir, S. Pelley, P. Povinec,\nG. Rahn, S. Triantafyllis, and P. Unterbrunner.The snowﬂake\nIn Proceedings of the 2016 Inter-\nelastic data warehouse.national Conference on Management of Data, SIGMOD ’16,\npages 215–226, 2016. doi: 10.1145/2882903.2903741.[122] J. Dean and S. Ghemawat.MapReduce: Simpliﬁed data pro-\ncessing on large clusters.USENIX Associa-\ntion, Dec. 2004.34\n\nSIGMOD Record, June 2024 (Vol.53, No. 2)\n\n\f[123] J. Dean and S. Ghemawat.Mapreduce: A ﬂexible data process-\n\ning tool.Commun. ACM, 53(1):72–77, Jan. 2010. [124] A. Dearmer.Storing apache hadoop data on the cloud - hdfs\nhttps://www.xplenty.com/blog/storing-apache-\n\nvs. s3.[125] G. DeCandia, D. Hastorun, M. Jampani, G. Kakulapati, A. Lak-\nshman, A. Pilchin, S. Sivasubramanian, P. Vosshall, and W. Vo-\ngels.Dynamo: Amazon’s highly available key-value store.Graph pattern matching in gql and\nIn Proceedings of the 2022 International Confer-\nsql/pgq.[127] D. DeWitt and J. Gray. Parallel database systems: The future\nof high performance database systems.Commun. ACM, 35(6):\n85–98, jun 1992. doi: 10.1145/129888.129894.[128] C. Diaconu, C. Freedman, E. Ismert, P. Larson, P. Mit-\ntal, R. Stonecipher, N. Verma, and M. Zwilling.Hekaton:\nIn Proceed-\nSQL server’s memory-optimized OLTP engine.ings of the ACM SIGMOD International Conference on Man-\ndoi: 10.1145/\nagement of Data, pages 1243–1254, 2013. 2463676.2463710.Amazon DynamoDB: A scalable, predictably perfor-\nmant, and fully managed NoSQL database service.In USENIX\nAnnual Technical Conference, pages 1037–1048, July 2022.[130] J. Fan, A. G. S. Raj, and J. M. Patel.The case against special-\nized graph analytics engines.In Seventh Biennial Conference\non Innovative Data Systems Research, CIDR, 2015.[131] B. Fitzpatrick. Distributed caching with memcached.Linux J.,\n\n2004(124):5, aug 2004. ISSN 1075–3583.[132] M. Freitag, M. Bandle, T. Schmidt, A. Kemper, and T. Neu-\nmann.Adopting worst-case optimal joins in relational database\nsystems. Proc.VLDB Endow., 13(12):1891–1904, jul 2020.\ndoi: 10.14778/3407790.3407797.[133] H. Fu, C. Liu, B. Wu, F. Li, J. Tan, and J. Sun.Catsql: To-\nwards real world natural language to sql applications. Proc.VLDB Endow., 16(6):1534–1547, feb 2023. doi: 10.14778/\n3583140.3583165.[134] S. Ghemawat, H. Gobioff, and S.-T. Leung.The google ﬁle\nsystem. SIGOPS Oper.Syst. Rev., 37(5):29–43, oct 2003.ISSN\n0163-5980. doi: 10.1145/1165389.945450. [135] J.Gray, A. Bosworth, A. Layman, and H. Pirahesh.Data\ncube: A relational aggregation operator generalizing group-by,\nIn Proceedings of the International\ncross-tab, and sub-total.10.14778/\nVLDB Endow., 13(6):868–883, 2020.3380750.3380757.\n\ndoi:\n\n[137] E. Hanson and A. Comet.Why Your Vector Database Should\nNot be a Vector Database.https://www.singlestore.com/\nblog/why-your-vector-database-should-not-be-a-\nvector-database/, April 2023.[138] G. Harrison. How WiredTiger Revolutionized MongoDB.https://www.dbta.com/Columns/MongoDB-Matters/How-\nWiredTiger-Revolutionized-MongoDB-145510.aspx,\n2021.\n\nmar\n\n[139] G. G. Hendrix, E. D. Sacerdoti, D. Sagalowicz, and J. Slocum.Developing a natural language interface to complex data. ACM\nTrans.Database Syst., 3(2):105–147, jun 1978. doi: 10.1145/\n320251.320253. [140] Y. Huai, A. Chauhan, A.Gates, G. Hagleitner, E. N. Hanson,\nO. O’Malley, J. Pandey, Y. Yuan, R. Lee, and X. Zhang.Major\ntechnical advancements in apache hive.In Proceedings of the\n2014 ACM SIGMOD international conference on Management\nof data, pages 1235–1246, 2014.[141] D. Huang, Q. Liu, Q. Cui, Z. Fang, X. Ma, F. Xu, L. Shen,\nL. Tang, Y. Zhou, M. Huang, W. Wei, C. Liu, J. Zhang,\nJ. Li, X. Wu, L. Song, R. Sun, S. Yu, L. Zhao, N. Cameron,\nL. Pei, and X. Tang.Tidb: A raft-based htap database. Proc.VLDB Endow., 13(12):3072–3084, aug 2020. doi: 10.14778/\n3415478.3415535.[142] K. E. Iverson. A Programming Language.John Wiley & Sons,\n\nInc., 1962. ISBN 0471430145.[143] A. Jindal, S. Madden, M. Castellanos, and M. Hsu.Graph ana-\nlytics using vertica relational database.In 2015 IEEE Interna-\ntional Conference on Big Data, pages 1191–1200, 2015.[144] R. Kallman, H. Kimura, J. Natkins, A. Pavlo, A. Rasin,\nS. Zdonik, E. P. C. Jones, S. Madden, M. Stonebraker, Y. Zhang,\nJ. Hugg, and D. J. Abadi.H-store: A high-performance, dis-\ntributed main memory transaction processing system.Proc. VLDB Endow., 1(2):1496–1499, aug 2008. doi: 10.14778/\n1454159.1454211.[145] A. Kane. pgvector. https://github.com/pgvector/pgvector,\n\n2024.[146] A. Kemper and T. Neumann.Hyper: A hybrid oltp&olap main\nmemory database system based on virtual memory snapshots.In Proceedings of the 27th International Conference on Data\nEngineering, pages 195–206.[147] T. Kersten, V. Leis, A. Kemper, T. Neumann, A. Pavlo, and\nP. Boncz.Proc. VLDB Endow., 11(13):2209–2222, jan 2019. doi: 10.14778/\n3275366.3284966. [148] R. Kimball.The Data Warehouse Toolkit: Practical Techniques\nfor Building Dimensional Data Warehouses.John Wiley, 1996. [149] R. Kimball and K. Strehlo.Why decision support fails and how\n\nto ﬁx it.SIGMOD Rec., 24(3):92–97, 1995.[150] M. Kornacker, A. Behm, V. Bittorf, T. Bobrovytsky, C. Ching,\nA. Choi, J. Erickson, M. Grund, D. Hecht, M. Jacobs, I. Joshi,\nL. Kuff, D. Kumar, A. Leblang, N. Li, I. Pandis, H. Robinson,\nD. Rorke, S. Rus, J. Russell, D. Tsirogiannis, S. Wanderman-\nMilne, and M. Yoder.Impala: A modern, open-source sql en-\ngine for hadoop.In CIDR, 2015. [151] T. Kraska, A. Beutel, E. H. Chi, J.Dean, and N. Polyzotis. The\ncase for learned index structures.In Proceedings of the 2018\nInternational Conference on Management of Data, SIGMOD\n’18, pages 489–504, 2018. doi: 10.1145/3183713.3196909.[152] S. Krishnan, Z. Yang, K. Goldberg, J. Hellerstein, and I. Sto-\nica.Learning to optimize join queries with deep reinforcement\nlearning, 2018.URL https://arxiv.org/abs/1808.03196. [153] F. Lardinois.Aws gives open source the middle ﬁn-\nger.[154] V. Leis, A. Gubichev, A. Mirchev, P. A. Boncz, A. Kemper,\nand T. Neumann.How good are query optimizers, really?doi: 10.14778/\nProc. VLDB Endow., 9(3):204–215, 2015.2850583.2850594. [155] D. Maier and B. Vance. A call to order.In Proceedings\nof the Twelfth ACM SIGACT-SIGMOD-SIGART Symposium\non Principles of Database Systems, pages 1–16, 1993. doi:\n10.1145/153850.153851.[156] R. Marcus, P. Negi, H. Mao, N. Tatbul, M. Alizadeh, and\nT. Kraska.Bao: Making learned query optimization practical.[157] D. McDiarmid. Vector search with clickhouse.https://\nclickhouse.com/blog/vector-search-clickhouse-p2, May\n2023.SIGMOD Record, June 2024 (Vol.53, No. 2)\n\n35\n\n\f[158] C. McDonnell.The graph-relational database, deﬁned.[159] W. McKinney et al. Data structures for statistical computing\nin python.In Proceedings of the 9th Python in Science Confer-\nence, volume 445, pages 51–56, 2010.[160] F. McSherry. Scalability! but at what cost?http:\n\n//www.frankmcsherry.org/graph/scalability/cost/2015/\n01/15/COST.html, January 2015.[161] S. Melnik, A. Gubarev, J. J.Long, G. Romer, S. Shivakumar,\nM. Tolton, and T. Vassilakis.Dremel: Interactive analysis of\nweb-scale datasets.Proc. VLDB Endow., 3(12):330–339, sep\n2010.ISSN 2150-8097. doi: 10.14778/1920841.1920886.[162] S. Melnik, A. Gubarev, J. J.Long, G. Romer, S. Shivakumar,\nM. Tolton, T. Vassilakis, H. Ahmadi, D. Delorey, S. Min, M. Pa-\nsumansky, and J. Shute.Dremel: A decade of interactive sql\nanalysis at web scale.Proc. VLDB Endow., 13(12):3461–3472,\naug 2020.ISSN 2150-8097. doi: 10.14778/3415478.3415568.[163] P. Menon, A. Ngom, T. C. Mowry, A. Pavlo, and L. Ma.Per-\nmutable compiled queries: Dynamically adapting compiled\nqueries without recompiling.Proc. VLDB Endow., 14(2):101–\n113, 2020. doi: 10.14778/3425879.3425882.[164] C. Metz. duce. google_caffeine_explained/, September 2010.Google search index splits with mapre-\nhttps://www.theregister.com/2010/09/09/\n\n[165] J. Michels, K. Hare, K. Kulkarni, C. Zuzarte, Z. H. Liu,\nB. Hammerschmidt, and F. Zemke.The new and improved sql:\n2016 standard.[166] D. Misev and P. Baumann.Sql support for multidimen-\nsional arrays.Technical Report 34, Jacobs University, July\n2017.URL https://nbn-resolving.org/urn:nbn:de:gbv:\n579-opus-1007237.[167] F. Nargesian, E. Zhu, R. J. Miller, K. Q. Pu, and P. C. Arocena.Data lake management: Challenges and opportunities. Proc.VLDB Endow., 12(12):1986–1989, aug 2019. doi: 10.14778/\n3352063.3352116.[168] H. Q. Ngo, C. Ré, and A. Rudra.Skew strikes back: New\ndevelopments in the theory of join algorithms.SIGMOD Rec.,\n42(4):5–16, feb 2014. doi: 10.1145/2590989.2590991.[169] NVIDIA, P. Vingelmann, and F. H. Fitzek. Cuda toolkit.https:\n\n//developer.nvidia.com/cuda-toolkit, 2020.[170] M. A. Olson, K. Bostic, and M. I. Seltzer. Berkeley DB.In Pro-\nceedings of the FREENIX Track: 1999 USENIX Annual Tech-\nnical Conference, pages 183–191, 1999.[171] A. Pavlo and M. Aslett. What’s really new with newsql?SIG-\n\nMOD Record, 45(2):45–55, Sep 2016.[172] A. Pavlo, E. Paulson, A. Rasin, D. J. Abadi, D. J. DeWitt,\nS. Madden, and M. Stonebraker.A comparison of approaches\nto large-scale data analysis.In Proceedings of the ACM SIG-\nMOD International Conference on Management of Data, pages\n165–178, 2009.[173] A. Pavlo, G. Angulo, J. Arulraj, H. Lin, J. Lin, L. Ma, P. Menon,\nT. Mowry, M. Perron, I. Quah, S. Santurkar, A. Tomasic,\nS. Toor, D. V. Aken, Z. Wang, Y. Wu, R. Xian, and T. Zhang.In CIDR 2017,\nSelf-driving database management systems.Conference on Innovative Data Systems Research, 2017.[174] A. Pavlo, M. Butrovich, A. Joshi, L. Ma, P. Menon, D. V. Aken,\nL. Lee, and R. Salakhutdinov.External vs. internal: An essay\non machine learning agents for autonomous database manage-\nment systems.IEEE Data Eng. Bull., 42(2):32–46, 2019.[175] P. Pedreira, O. Erling, M. Basmanova, K. Wilfong, L. Sakka,\nK. Pai, W. He, and B. Chattopadhyay.Velox: Meta’s uniﬁed\nexecution engine. Proc.VLDB Endow., 15(12):3372–3384, aug\n2022. doi: 10.14778/3554821.3554829.[176] P. Pedreira, O. Erling, K. Karanasos, S. Schneider, W. McK-\ninney, S. R. Valluri, M. Zait, and J. Nadeau.The composable\ndata management system manifesto. Proc.VLDB Endow., 16\n(10):2679–2685, jun 2023. doi: 10.14778/3603581.3603604.[177] D. Petersohn, S. Macke, D. Xin, W. Ma, D. Lee, X. Mo,\nJ. E. Gonzalez,\nJ. M. Hellerstein, A. D. Joseph, and\nA. Parameswaran.Towards scalable dataframe systems. Proc.VLDB Endow., 13(12):2033–2046, jul 2020. doi: 10.14778/\n3407790.3407807.[178] D. Petkovic. SQL/JSON standard: Properties and deﬁciencies.doi: 10.1007/\n\nDatenbank-Spektrum, 17(3):277–287, 2017.\ns13222-017-0267-4. [179] D. Pritchett.BASE: An Acid Alternative:\n\nIn Partitioned\nDatabases, Trading Some Consistency for Availability Can\nLead to Dramatic Improvements in Scalability.ACM Queue,\n6(3):48–55, may 2008. doi: 10.1145/1394127.1394128.[180] M. Raasveldt and H. Mühleisen.Duckdb: An embeddable ana-\nlytical database.In Proceedings of the 2019 International Con-\nference on Management of Data, SIGMOD ’19, pages 1981–\n1984, 2019. doi: 10.1145/3299869.3320212.[181] M. Rocklin. Dask: Parallel computation with blocked algo-\nrithms and task scheduling.In Proceedings of the 14th Python\nin Science Conference, pages 130–136, 2015.[182] F. Rusu. Multidimensional array data management. Found.doi: 10.1561/\n\nTrends Databases, 12(2-3):69–220, 2023. 1900000069.[183] S. Sakr, A. Bonifati, H. Voigt, A. Iosup, K. Ammar, R. An-\ngles, W. Aref, M. Arenas, M. Besta, P. A. Boncz, K. Daudjee,\nE. D. Valle, S. Dumbrava, O. Hartig, B. Haslhofer, T. Hege-\nman, J. Hidders, K. Hose, A. Iamnitchi, V. Kalavri, H. Kapp,\nW. Martens, M. T. Özsu, E. Peukert, S. Plantikow, M. Ragab,\nM. R. Ripeanu, S. Salihoglu, C. Schulz, P. Selmer, J. F. Se-\nqueda, J. Shinavier, G. Szárnyas, R. Tommasini, A. Tumeo,\nA. Uta, A. L. Varbanescu, H.-Y.The future is big graphs: A community view on\ngraph processing systems.Commun. ACM, 64(9):62–71, aug\n2021. doi: 10.1145/3434642.[184] G. Salton and M. E. Lesk.The smart automatic document re-\ntrieval systems–an illustration.Commun. ACM, 8(6):391–398,\njun 1965. doi: 10.1145/364955.364990.[185] R. Sethi, M. Traverso, D. Sundstrom, D. Phillips, W. Xie,\nY.Sun, N. Yegitbasi, H. Jin, E. Hwang, N. Shingte, and\nIn 2019 IEEE 35th\nC. Berner. Presto: Sql on everything.International Conference on Data Engineering (ICDE), pages\n1802–1813, 2019. doi: 10.1109/ICDE.2019.00196.[186] M. A. Soliman, L. Antova, V. Raghavan, A. El-Helw, Z. Gu,\nE. Shen, G. C. Caragea, C. Garcia-Alvarado, F. Rahman,\nM. Petropoulos, F. Waas, S. Narayanan, K. Krikellas, and\nR. Baldwin.national Conference on Management of Data, SIGMOD ’14,\npages 337–348, 2014. doi: 10.1145/2588555.2595637.[187] M. Stonebraker. The case for polystores.https://\n\nwp.sigmod.org/?p=1629, 2015.[188] M. Stonebraker and J. Hellerstein.Readings in Database Sys-\ntems, chapter What Goes Around Comes Around, pages 2–41. 4th edition, 2005.[189] M. Stonebraker, S. Madden, D. J. Abadi, S. Harizopoulos,\nN. Hachem, and P. Helland.The end of an architectural era:\n(it’s time for a complete rewrite).In Proceedings of the 33rd\nInternational Conference on Very Large Data Bases, VLDB\n’07, pages 1150–1160.VLDB Endowment, 2007. [190] M. Stonebraker, D. Abadi, D. J. DeWitt, S. Madden, E. Paulson,\nA. Pavlo, and A. Rasin.Mapreduce and parallel dbmss: Friends\nor foes?Commun. ACM, 53(1):64–71, Jan. 2010.In Scientiﬁc and Statistical Database Man-\nagement - 23rd International Conference, SSDBM 2011, vol-\nume 6809 of Lecture Notes in Computer Science, pages 1–16.Springer, 2011. doi: 10.1007/978-3-642-22351-8\n\n_1. [192] L. Sullivan.Performance issues in mid-sized relational\ndatabase machines.Master’s thesis, Rochester Institute of Tech-\nnology, 1989.\\\n\n36\n\nSIGMOD Record, June 2024 (Vol.53, No. 2)\n\n\f[193] Z. Sun, X. Zhou, and G. Li.Learned index: A comprehen-\nsive experimental evaluation. Proc.VLDB Endow., 16(8):1992–\n2004, apr 2023. doi: 10.14778/3594512.3594528.Google\n\ndumps mapreduce\n\n[194] Y.\n\nSverdlik.in\nfa-\nhttps:\n\nvor of new hyper-scale\n//www.datacenterknowledge.com/archives/2014/06/\n25/google-dumps-mapreduce-favor-new-hyper-scale-\nanalytics-system, June 2014.\n\nanalytics\n\nsystem.[195] R. Taft, I. Sharif, A. Matei, N. VanBenschoten, J. Lewis,\nT. Grieger, K. Niemi, A.Woods, A. Birzin, R. Poss, P. Bardea,\nA. Ranade, B. Darnell, B. Gruneir, J. Jaffray, L. Zhang, and\nP. Mattis.Cockroachdb: The resilient geo-distributed SQL\ndatabase.In Proceedings of the 2020 International Conference\non Management of Data, SIGMOD, pages 1493–1509, 2020.\ndoi: 10.1145/3318464.3386134.[196] D. ten Wolde, T. Singh, G. Szarnyas, and P. Boncz.Duckpgq:\nEfﬁcient property graph queries in an analytical\nrdbms.In CIDR, 2023. URL https://www.cidrdb.org/cidr2023/\npapers/p66-wolde.pdf.[197] A. Thusoo, J. S. Sarma, N. Jain, Z. Shao, P. Chakka, N. Zhang,\nS. Antony, H. Liu, and R. Murthy.Hive - a petabyte scale\ndata warehouse using hadoop.In International Conference on\nData Engineering (ICDE 2010), pages 996–1005, 2010. doi:\n10.1109/ICDE.2010.5447738.[198] E. Totoni, T. A. Anderson, and T. Shpeisman.HPAT: high per-\nformance analytics with scripting ease-of-use.In Proceedings\n\nof the International Conference on Supercomputing, pages 9:1–\n9:10, 2017. doi: 10.1145/3079079.3079099.[199] T. Trautmann. database. relational-database, September 2021.Understanding the document-relational\nhttps://fauna.com/blog/what-is-a-document-\n\n[200] D. Van Aken, A. Pavlo, G. J. Gordon, and B. Zhang.national Conference on Management of Data, SIGMOD ’17,\npages 1009–1024, 2017. doi: 10.1145/3035918.3064029.[201] M. Zaharia, R. S. Xin, P. Wendell, T. Das, M. Armbrust,\nA. Dave, X. Meng, J. Rosen, S. Venkataraman, M. J. Franklin,\nA. Ghodsi, J. Gonzalez, S. Shenker, and I. Stoica.Apache\nspark: a uniﬁed engine for big data processing.Commun. ACM,\n59(11):56–65, oct 2016. doi: 10.1145/2934664.[202] C. Zaniolo. The database language GEM.In SIGMOD, pages\n\n207–218, 1983.[203] X. Zeng, Y. Hui, J. Shen, A. Pavlo, W. McKinney, and\nH. Zhang.An empirical evaluation of columnar storage for-\nmats.Proc. VLDB Endow., 17(2):148–161, 2023.URL https:\n//www.vldb.org/pvldb/vol17/p148-zeng.pdf.[204] X. Zhang, Z. Chang, Y. Li, H. Wu, J. Tan, F. Li, and\nB. Cui.Facilitating database tuning with hyper-parameter op-\ntimization: a comprehensive experimental evaluation.Proc. VLDB Endow., 15(9):1808–1821, may 2022. doi: 10.14778/\n3538598.3538604.SIGMOD Record, June 2024 (Vol. 53, No. 2)\n\n37",
          "time": 1592.991196155548,
          "input_token_size": 26200,
          "output_token_size": 169,
          "original_provenance_id": 0
        }
      ],
      "metadata": {
        "question_id": "whatgoesaround-sigmodrec2024_602e05d4",
        "created_at": 1749870279.9525914,
        "processing_time": 1600.3389353752136,
        "processing_complete": true,
        "max_provenances": 5
      },
      "source_info": {
        "selected_from": "test_outputs_prev1",
        "reason": "shorter_provenance",
        "sentence_count": 964,
        "provenance_count": 1,
        "alternatives": [
          {
            "source": "test_outputs_prev1",
            "sentence_count": 964,
            "provenance_count": 1,
            "has_answer": true
          }
        ],
        "selection_timestamp": "2025-06-17T16:48:52.925914"
      }
    }
  },
  {
    "64ef7c84": {
      "question": "What does the document conclude about the impact of cloud computing?",
      "answer": "The document concludes that the impact of cloud computing on database management systems (DBMSs) has been profound, leading to a complete re-architecture of DBMSs. It emphasizes that cloud databases are becoming the dominant architecture due to their ability to provide per-query elasticity, better economics, and the capability to push computation into storage nodes. The authors predict that shared-disk architectures will dominate DBMS architectures in the future, as enterprises continue to move their operations to the cloud.",
      "provenance": [
        {
          "provenance_id": 0,
          "input_sentence_ids": [
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            11,
            12,
            13,
            14,
            15,
            16,
            17,
            18,
            19,
            20,
            21,
            22,
            23,
            24,
            25,
            26,
            27,
            28,
            29,
            30,
            31,
            32,
            33,
            34,
            35,
            36,
            37,
            38,
            39,
            40,
            41,
            42,
            43,
            44,
            45,
            46,
            47,
            48,
            49,
            50,
            51,
            52,
            53,
            54,
            55,
            56,
            57,
            58,
            59,
            60,
            61,
            62,
            63,
            64,
            65,
            66,
            67,
            68,
            69,
            70,
            71,
            72,
            73,
            74,
            75,
            76,
            77,
            78,
            79,
            80,
            81,
            82,
            83,
            84,
            85,
            86,
            87,
            88,
            89,
            90,
            91,
            92,
            93,
            94,
            95,
            96,
            97,
            98,
            99,
            100,
            101,
            102,
            103,
            104,
            105,
            106,
            107,
            108,
            109,
            110,
            111,
            112,
            113,
            114,
            115,
            116,
            117,
            118,
            119,
            120,
            121,
            122,
            123,
            124,
            125,
            126,
            127,
            128,
            129,
            130,
            131,
            132,
            133,
            134,
            135,
            136,
            137,
            138,
            139,
            140,
            141,
            142,
            143,
            144,
            145,
            146,
            147,
            148,
            149,
            150,
            151,
            152,
            153,
            154,
            155,
            156,
            157,
            158,
            159,
            160,
            161,
            162,
            163,
            164,
            165,
            166,
            167,
            168,
            169,
            170,
            171,
            172,
            173,
            174,
            175,
            176,
            177,
            178,
            179,
            180,
            181,
            182,
            183,
            184,
            185,
            186,
            187,
            188,
            189,
            190,
            191,
            192,
            193,
            194,
            195,
            196,
            197,
            198,
            199,
            200,
            201,
            202,
            203,
            204,
            205,
            206,
            207,
            208,
            209,
            210,
            211,
            212,
            213,
            214,
            215,
            216,
            217,
            218,
            219,
            220,
            221,
            222,
            223,
            224,
            225,
            226,
            227,
            228,
            229,
            230,
            231,
            232,
            233,
            234,
            235,
            236,
            237,
            238,
            239,
            240,
            241,
            242,
            243,
            244,
            245,
            246,
            247,
            248,
            249,
            250,
            251,
            252,
            253,
            254,
            255,
            256,
            257,
            258,
            259,
            260,
            261,
            262,
            263,
            264,
            265,
            266,
            267,
            268,
            269,
            270,
            271,
            272,
            273,
            274,
            275,
            276,
            277,
            278,
            279,
            280,
            281,
            282,
            283,
            284,
            285,
            286,
            287,
            288,
            289,
            290,
            291,
            292,
            293,
            294,
            295,
            296,
            297,
            298,
            299,
            300,
            301,
            302,
            303,
            304,
            305,
            306,
            307,
            308,
            309,
            310,
            311,
            312,
            313,
            314,
            315,
            316,
            317,
            318,
            319,
            320,
            321,
            322,
            323,
            324,
            325,
            326,
            327,
            328,
            329,
            330,
            331,
            332,
            333,
            334,
            335,
            336,
            337,
            338,
            339,
            340,
            341,
            342,
            343,
            344,
            345,
            346,
            347,
            348,
            349,
            350,
            351,
            352,
            353,
            354,
            355,
            356,
            357,
            358,
            359,
            360,
            361,
            362,
            363,
            364,
            365,
            366,
            367,
            368,
            369,
            370,
            371,
            372,
            373,
            374,
            375,
            376,
            377,
            378,
            379,
            380,
            381,
            382,
            383,
            384,
            385,
            386,
            387,
            388,
            389,
            390,
            391,
            392,
            393,
            394,
            395,
            396,
            397,
            398,
            399,
            400,
            401,
            402,
            403,
            404,
            405,
            406,
            407,
            408,
            409,
            410,
            411,
            412,
            413,
            414,
            415,
            416,
            417,
            418,
            419,
            420,
            421,
            422,
            423,
            424,
            425,
            426,
            427,
            428,
            429,
            430,
            431,
            432,
            433,
            434,
            435,
            436,
            437,
            438,
            439,
            440,
            441,
            442,
            443,
            444,
            445,
            446,
            447,
            448,
            449,
            450,
            451,
            452,
            453,
            454,
            455,
            456,
            457,
            458,
            459,
            460,
            461,
            462,
            463,
            464,
            465,
            466,
            467,
            468,
            469,
            470,
            471,
            472,
            473,
            474,
            475,
            476,
            477,
            478,
            479,
            480,
            481,
            482,
            483,
            484,
            485,
            486,
            487,
            488,
            489,
            490,
            491,
            492,
            493,
            494,
            495,
            496,
            497,
            498,
            499,
            500,
            501,
            502,
            503,
            504,
            505,
            506,
            507,
            508,
            509,
            510,
            511,
            512,
            513,
            514,
            515,
            516,
            517,
            518,
            519,
            520,
            521,
            522,
            523,
            524,
            525,
            526,
            527,
            528,
            529,
            530,
            531,
            532,
            533,
            534,
            535,
            536,
            537,
            538,
            539,
            540,
            541,
            542,
            543,
            544,
            545,
            546,
            547,
            548,
            549,
            550,
            551,
            552,
            553,
            554,
            555,
            556,
            557,
            558,
            559,
            560,
            561,
            562,
            563,
            564,
            565,
            566,
            567,
            568,
            569,
            570,
            571,
            572,
            573,
            574,
            575,
            576,
            577,
            578,
            579,
            580,
            581,
            582,
            583,
            584,
            585,
            586,
            587,
            588,
            589,
            590,
            591,
            592,
            593,
            594,
            595,
            596,
            597,
            598,
            599,
            600,
            601,
            602,
            603,
            604,
            605,
            606,
            607,
            608,
            609,
            610,
            611,
            612,
            613,
            614,
            615,
            616,
            617,
            618,
            619,
            620,
            621,
            622,
            623,
            624,
            625,
            626,
            627,
            628,
            629,
            630,
            631,
            632,
            633,
            634,
            635,
            636,
            637,
            638,
            639,
            640,
            641,
            642,
            643,
            644,
            645,
            646,
            647,
            648,
            649,
            650,
            651,
            652,
            653,
            654,
            655,
            656,
            657,
            658,
            659,
            660,
            661,
            662,
            663,
            664,
            665,
            666,
            667,
            668,
            669,
            670,
            671,
            672,
            673,
            674,
            675,
            676,
            677,
            678,
            679,
            680,
            681,
            682,
            683,
            684,
            685,
            686,
            687,
            688,
            689,
            690,
            691,
            692,
            693,
            694,
            695,
            696,
            697,
            698,
            699,
            700,
            701,
            702,
            703,
            704,
            705,
            706,
            707,
            708,
            709,
            710,
            711,
            712,
            713,
            714,
            715,
            716,
            717,
            718,
            719,
            720,
            721,
            722,
            723,
            724,
            725,
            726,
            727,
            728,
            729,
            730,
            731,
            732,
            733,
            734,
            735,
            736,
            737,
            738,
            739,
            740,
            741,
            742,
            743,
            744,
            745,
            746,
            747,
            748,
            749,
            750,
            751,
            752,
            753,
            754,
            755,
            756,
            757,
            758,
            759,
            760,
            761,
            762,
            763,
            764,
            765,
            766,
            767,
            768,
            769,
            770,
            771,
            772,
            773,
            774,
            775,
            776,
            777,
            778,
            779,
            780,
            781,
            782,
            783,
            784,
            785,
            786,
            787,
            788,
            789,
            790,
            791,
            792,
            793,
            794,
            795,
            796,
            797,
            798,
            799,
            800,
            801,
            802,
            803,
            804,
            805,
            806,
            807,
            808,
            809,
            810,
            811,
            812,
            813,
            814,
            815,
            816,
            817,
            818,
            819,
            820,
            821,
            822,
            823,
            824,
            825,
            826,
            827,
            828,
            829,
            830,
            831,
            832,
            833,
            834,
            835,
            836,
            837,
            838,
            839,
            840,
            841,
            842,
            843,
            844,
            845,
            846,
            847,
            848,
            849,
            850,
            851,
            852,
            853,
            854,
            855,
            856,
            857,
            858,
            859,
            860,
            861,
            862,
            863,
            864,
            865,
            866,
            867,
            868,
            869,
            870,
            871,
            872,
            873,
            874,
            875,
            876,
            877,
            878,
            879,
            880,
            881,
            882,
            883,
            884,
            885,
            886,
            887,
            888,
            889,
            890,
            891,
            892,
            893,
            894,
            895,
            896,
            897,
            898,
            899,
            900,
            901,
            902,
            903,
            904,
            905,
            906,
            907,
            908,
            909,
            910,
            911,
            912,
            913,
            914,
            915,
            916,
            917,
            918,
            919,
            920,
            921,
            922,
            923,
            924,
            925,
            926,
            927,
            928,
            929,
            930,
            931,
            932,
            933,
            934,
            935,
            936,
            937,
            938,
            939,
            940,
            941,
            942,
            943,
            944,
            945,
            946,
            947,
            948,
            949,
            950,
            951,
            952,
            953,
            954,
            955,
            956,
            957,
            958,
            959,
            960,
            961,
            962,
            963
          ],
          "provenance_ids": [
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            11,
            12,
            13,
            14,
            15,
            16,
            17,
            18,
            19,
            20,
            21,
            22,
            23,
            24,
            25,
            26,
            27,
            28,
            29,
            30,
            31,
            32,
            33,
            34,
            35,
            36,
            37,
            38,
            39,
            40,
            41,
            42,
            43,
            44,
            45,
            46,
            47,
            48,
            49,
            50,
            51,
            52,
            53,
            54,
            55,
            56,
            57,
            58,
            59,
            60,
            61,
            62,
            63,
            64,
            65,
            66,
            67,
            68,
            69,
            70,
            71,
            72,
            73,
            74,
            75,
            76,
            77,
            78,
            79,
            80,
            81,
            82,
            83,
            84,
            85,
            86,
            87,
            88,
            89,
            90,
            91,
            92,
            93,
            94,
            95,
            96,
            97,
            98,
            99,
            100,
            101,
            102,
            103,
            104,
            105,
            106,
            107,
            108,
            109,
            110,
            111,
            112,
            113,
            114,
            115,
            116,
            117,
            118,
            119,
            120,
            121,
            122,
            123,
            124,
            125,
            126,
            127,
            128,
            129,
            130,
            131,
            132,
            133,
            134,
            135,
            136,
            137,
            138,
            139,
            140,
            141,
            142,
            143,
            144,
            145,
            146,
            147,
            148,
            149,
            150,
            151,
            152,
            153,
            154,
            155,
            156,
            157,
            158,
            159,
            160,
            161,
            162,
            163,
            164,
            165,
            166,
            167,
            168,
            169,
            170,
            171,
            172,
            173,
            174,
            175,
            176,
            177,
            178,
            179,
            180,
            181,
            182,
            183,
            184,
            185,
            186,
            187,
            188,
            190,
            191,
            192,
            193,
            194,
            195,
            196,
            197,
            198,
            199,
            200,
            201,
            202,
            203,
            204,
            205,
            206,
            207,
            208,
            209,
            210,
            211,
            212,
            213,
            214,
            215,
            216,
            217,
            218,
            219,
            220,
            221,
            222,
            223,
            224,
            225,
            226,
            227,
            228,
            229,
            230,
            231,
            232,
            233,
            234,
            235,
            236,
            237,
            238,
            239,
            240,
            241,
            242,
            243,
            244,
            245,
            246,
            247,
            248,
            249,
            250,
            251,
            252,
            253,
            254,
            255,
            256,
            257,
            258,
            259,
            260,
            261,
            262,
            263,
            264,
            265,
            266,
            267,
            268,
            269,
            270,
            271,
            272,
            273,
            274,
            275,
            276,
            277,
            278,
            279,
            280,
            281,
            282,
            283,
            284,
            285,
            286,
            287,
            288,
            289,
            290,
            291,
            292,
            293,
            294,
            295,
            296,
            297,
            298,
            299,
            300,
            301,
            302,
            303,
            304,
            305,
            306,
            307,
            308,
            309,
            310,
            311,
            312,
            313,
            314,
            315,
            316,
            317,
            318,
            319,
            320,
            321,
            322,
            323,
            324,
            325,
            326,
            327,
            328,
            329,
            330,
            331,
            332,
            333,
            334,
            335,
            336,
            337,
            338,
            339,
            340,
            341,
            342,
            343,
            344,
            345,
            346,
            347,
            348,
            349,
            350,
            351,
            352,
            353,
            354,
            355,
            356,
            357,
            358,
            359,
            360,
            361,
            362,
            363,
            364,
            365,
            366,
            367,
            368,
            369,
            370,
            371,
            372,
            373,
            374,
            375,
            376,
            377,
            378,
            379,
            380,
            381,
            382,
            383,
            384,
            385,
            386,
            387,
            388,
            389,
            390,
            391,
            392,
            393,
            394,
            395,
            396,
            397,
            398,
            399,
            400,
            401,
            402,
            403,
            404,
            405,
            406,
            407,
            408,
            409,
            410,
            411,
            412,
            413,
            414,
            415,
            416,
            417,
            418,
            419,
            420,
            421,
            422,
            423,
            424,
            425,
            426,
            427,
            428,
            429,
            430,
            431,
            432,
            433,
            434,
            435,
            436,
            437,
            438,
            439,
            440,
            441,
            442,
            443,
            444,
            445,
            446,
            447,
            448,
            449,
            450,
            451,
            452,
            453,
            454,
            455,
            456,
            457,
            458,
            459,
            460,
            461,
            462,
            463,
            464,
            465,
            466,
            467,
            468,
            469,
            470,
            471,
            472,
            473,
            474,
            475,
            476,
            477,
            478,
            479,
            480,
            481,
            482,
            483,
            484,
            485,
            486,
            487,
            488,
            489,
            490,
            491,
            492,
            493,
            494,
            495,
            496,
            497,
            498,
            499,
            500,
            501,
            502,
            503,
            504,
            505,
            506,
            507,
            508,
            509,
            510,
            511,
            512,
            513,
            514,
            515,
            516,
            517,
            518,
            519,
            520,
            521,
            522,
            523,
            524,
            525,
            526,
            527,
            528,
            529,
            530,
            531,
            532,
            533,
            534,
            535,
            536,
            537,
            538,
            539,
            540,
            541,
            542,
            543,
            544,
            545,
            546,
            547,
            548,
            549,
            550,
            551,
            552,
            553,
            554,
            555,
            556,
            557,
            558,
            559,
            560,
            561,
            562,
            563,
            564,
            565,
            566,
            567,
            568,
            569,
            570,
            571,
            572,
            573,
            574,
            575,
            576,
            577,
            578,
            579,
            580,
            581,
            582,
            583,
            584,
            585,
            586,
            587,
            588,
            589,
            590,
            591,
            592,
            593,
            594,
            595,
            596,
            597,
            598,
            599,
            600,
            601,
            602,
            603,
            604,
            605,
            606,
            607,
            608,
            609,
            610,
            611,
            612,
            613,
            614,
            615,
            616,
            617,
            618,
            619,
            620,
            621,
            622,
            623,
            624,
            625,
            626,
            627,
            628,
            629,
            630,
            631,
            632,
            633,
            634,
            635,
            636,
            637,
            638,
            639,
            640,
            641,
            642,
            643,
            644,
            645,
            646,
            647,
            648,
            649,
            650,
            651,
            652,
            653,
            654,
            655,
            656,
            657,
            658,
            659,
            660,
            661,
            662,
            663,
            664,
            665,
            666,
            667,
            668,
            669,
            670,
            671,
            672,
            673,
            674,
            675,
            676,
            677,
            678,
            679,
            680,
            681,
            682,
            683,
            684,
            685,
            686,
            687,
            688,
            689,
            690,
            691,
            692,
            693,
            694,
            695,
            696,
            697,
            698,
            699,
            700,
            701,
            702,
            703,
            704,
            705,
            706,
            707,
            708,
            709,
            710,
            711,
            712,
            713,
            714,
            715,
            716,
            717,
            718,
            719,
            720,
            721,
            722,
            723,
            724,
            725,
            726,
            727,
            728,
            729,
            730,
            731,
            732,
            733,
            734,
            735,
            736,
            737,
            738,
            739,
            740,
            741,
            742,
            743,
            744,
            745,
            746,
            747,
            748,
            749,
            750,
            751,
            752,
            753,
            754,
            755,
            756,
            757,
            758,
            759,
            760,
            761,
            762,
            763,
            764,
            765,
            766,
            767,
            768,
            769,
            770,
            771,
            772,
            773,
            774,
            775,
            776,
            777,
            778,
            779,
            780,
            781,
            782,
            783,
            784,
            785,
            786,
            787,
            788,
            789,
            790,
            791,
            792,
            793,
            794,
            795,
            796,
            797,
            798,
            799,
            800,
            801,
            802,
            803,
            804,
            805,
            806,
            807,
            808,
            809,
            810,
            811,
            812,
            813,
            814,
            815,
            816,
            817,
            818,
            819,
            820,
            821,
            822,
            823,
            824,
            825,
            826,
            827,
            828,
            829,
            830,
            831,
            832,
            833,
            834,
            835,
            836,
            837,
            838,
            839,
            840,
            841,
            842,
            843,
            844,
            845,
            846,
            847,
            848,
            849,
            850,
            851,
            852,
            853,
            854,
            855,
            856,
            857,
            858,
            859,
            860,
            861,
            862,
            863,
            864,
            865,
            866,
            867,
            868,
            869,
            870,
            871,
            872,
            873,
            874,
            875,
            876,
            877,
            878,
            879,
            880,
            881,
            882,
            883,
            884,
            885,
            886,
            887,
            888,
            889,
            890,
            891,
            892,
            893,
            894,
            895,
            896,
            897,
            898,
            899,
            900,
            901,
            902,
            903,
            904,
            905,
            906,
            907,
            908,
            909,
            910,
            911,
            912,
            913,
            914,
            915,
            916,
            917,
            918,
            919,
            920,
            921,
            922,
            923,
            924,
            925,
            926,
            927,
            928,
            929,
            930,
            931,
            932,
            933,
            934,
            935,
            936,
            937,
            938,
            939,
            940,
            941,
            942,
            943,
            944,
            945,
            946,
            947,
            948,
            949,
            950,
            951,
            952,
            953,
            954,
            955,
            956,
            957,
            958,
            959,
            960,
            961,
            962,
            963
          ],
          "provenance": "What Goes Around Comes Around... And Around...\n\nMichael Stonebraker\nMassachusetts Institute of Technology\nstonebraker@csail.mit.edu\n\nAndrew Pavlo\nCarnegie Mellon University\npavlo@cs.cmu.edu\n\nABSTRACT\nTwo decades ago, one of us co-authored a paper com-\nmenting on the previous 40 years of data modelling re-\nsearch and development [188].That paper demonstrated\nthat the relational model (RM) and SQL are the prevail-\ning choice for database management systems (DBMSs),\ndespite efforts to replace either them.Instead, SQL ab-\nsorbed the best ideas from these alternative approaches.We revisit this issue and argue that this same evolu-\ntion has continued since 2005.Once again there have\nbeen repeated efforts to replace either SQL or the RM.But the RM continues to be the dominant data model\nand SQL has been extended to capture the good ideas\nfrom others.As such, we expect more of the same in\nthe future, namely the continued evolution of SQL and\nrelational DBMSs (RDBMSs).We also discuss DBMS\nimplementations and argue that the major advancements\nhave been in the RM systems, primarily driven by chang-\ning hardware characteristics.1 Introduction\nIn 2005, one of the authors participated in writing a\nchapter for the Red Book titled “What Goes Around\nComes Around” [188].That paper examined the major\ndata modelling movements since the 1960s:\n\nHierarchical (e.g., IMS): late 1960s and 1970s\nNetwork (e.g., CODASYL): 1970s\nRelational: 1970s and early 1980s\nEntity-Relationship: 1970s\nExtended Relational: 1980s\nSemantic: late 1970s and 1980s\nObject-Oriented: late 1980s and early 1990s\nObject-Relational: late 1980s and early 1990s\nSemi-structured (e.g., XML): late 1990s and 2000s\n\n•\n•\n•\n•\n•\n•\n•\n•\n•\n\nOur conclusion was that the relational model with an\nextendable type system (i.e., object-relational) has dom-\ninated all comers, and nothing else has succeeded in\nthe marketplace.Although many of the non-relational\nDBMSs covered in 2005 still exist today, their vendors\nhave relegated them to legacy maintenance mode and\nnobody is building new applications on them.This per-\nsistence is more of a testament to the “stickiness” of data\n\nrather than the lasting power of these systems.In other\nwords, there still are many IBM IMS databases running\ntoday because it is expensive and risky to switch them\nto use a modern DBMS.But no start-up would willingly\nchoose to build a new application on IMS.A lot has happened in the world of databases since our\n2005 survey.During this time, DBMSs have expanded\nfrom their roots in business data processing and are now\nused for almost every kind of data.This led to the “Big\nData” era of the early 2010s and the current trend of inte-\ngrating machine learning (ML) with DBMS technology.In this paper, we analyze the last 20 years of data\nmodel and query language activity in databases.We\nstructure our commentary into the following areas: (1)\nMapReduce Systems, (2) Key-value Stores, (3) Docu-\nment Databases, (4) Column Family / Wide-Column,\n(5) Text Search Engines, (6) Array Databases, (7)\nVector Databases, and (8) Graph Databases.We contend that most systems that deviated from\nSQL or the RM have not dominated the DBMS land-\nscape and often only serve niche markets.Many sys-\ntems that started out rejecting the RM with much fanfare\n(think NoSQL) now expose a SQL-like interface for RM\ndatabases.Such systems are now on a path to conver-\ngence with RDBMSs.Meanwhile, SQL incorporated\nthe best query language ideas to expand its support for\nmodern applications and remain relevant.Although there has not been much change in RM\nfundamentals, there were dramatic changes in RM sys-\ntem implementations.The second part of this paper\ndiscusses advancements in DBMS architectures that ad-\ndress modern applications and hardware: (1) Columnar\nSystems, (2) Cloud Databases, (3) Data Lakes / Lake-\nhouses, (4) NewSQL Systems, (5) Hardware Acceler-\nators, and (6) Blockchain Databases.Some of these\nare profound changes to DBMS implementations, while\nothers are merely trends based on faulty premises.We ﬁnish with a discussion of important considera-\ntions for the next generation of DBMSs and provide part-\ning comments on our hope for the future of databases in\nboth research and commercial settings.SIGMOD Record, June 2024 (Vol. 53, No.2)\n\n21\n\n\f2 Data Models & Query Languages\nFor our discussion here, we group the research and de-\nvelopment thrusts in data models and query languages\nfor database into eight categories.2.1 MapReduce Systems\nGoogle constructed their MapReduce (MR) framework\nin 2003 as a “point solution” for processing its periodic\ncrawl of the internet [122].At the time, Google had\nlittle expertise in DBMS technology, and they built MR\nto meet their crawl needs.In database terms, Map is a\nuser-deﬁned function (UDF) that performs computation\nand/or ﬁltering while Reduce is a GROUP BY operation.To a ﬁrst approximation, MR runs a single query:\n\nSELECT map() FROM crawl_table GROUP BY reduce()\n\nGoogle’s MR approach did not prescribe a speciﬁc\ndata model or query language.Rather, it was up to the\nMap and Reduce functions written in a procedural MR\nprogram to parse and decipher the contents of data ﬁles.There was a lot of interest in MR-based systems at\nother companies in the late 2000s.Yahoo! developed\nan open-source version of MR in 2005, called Hadoop.It ran on top of a distributed ﬁle system HDFS that was\na clone of the Google File System [134].Several start-\nups were formed to support Hadoop in the commercial\nmarketplace.We will use MR to refer to the Google\nimplementation and Hadoop to refer to the open-source\nversion.They are functionally similar.There was a controversy about the value of Hadoop\ncompared to RDBMSs designed for OLAP workloads.This culminated in a 2009 study that showed that data\nwarehouse DBMSs outperformed Hadoop [172].This\ngenerated dueling articles from Google and the DBMS\ncommunity [123, 190].Google argued that with care-\nful engineering, a MR system will beat DBMSs, and a\nuser does not have to load data with a schema before\nrunning queries on it.Thus, MR is better for “one shot”\ntasks, such as text processing and ETL operations.The\nDBMS community argued that MR incurs performance\nproblems due to its design that existing parallel DBMSs\nalready solved.Furthermore, the use of higher-level\nlanguages (SQL) operating over partitioned tables has\nproven to be a good programming model [127].A lot of the discussion in the two papers was on imple-\nmentation issues (e.g., indexing, parsing, push vs. pull\nquery processing, failure recovery).From reading both\npapers a reasonable conclusion would be that there is a\nplace for both kinds of systems.However, two changes\nin the technology world rendered the debate moot.The ﬁrst event was that the Hadoop technology and\nservices market cratered in the 2010s.Many enterprises\nspent a lot of money on Hadoop clusters, only to ﬁnd\nthere was little interest in this functionality.Developers\nfound it difﬁcult to shoehorn their application into the\n\nrestricted MR/Hadoop paradigm.There were consider-\nable efforts to provide a SQL and RM interface on top\nof Hadoop, most notable was Meta’s Hive [30, 197].The next event occurred eight months after the CACM\narticle when Google announced that they were moving\ntheir crawl processing from MR to BigTable [164].The\nreason was that Google needed to interactively update\nits crawl database in real time but MR was a batch sys-\ntem.Google ﬁnally announced in 2014 that MR had no\nplace in their technology stack and killed it off [194].The ﬁrst event left the three leading Hadoop vendors\n(Cloudera, Hortonworks, MapR) without a viable prod-\nuct to sell.Cloudera rebranded Hadoop to mean the\nwhole stack (application, Hadoop, HDFS).In a further\nsleight-of-hand, Cloudera built a RDBMS, Impala [150],\non top of HDFS but not using Hadoop.They realized\nthat Hadoop had no place as an internal interface in a\nSQL DBMS, and they conﬁgured it out of their stack\nwith software built directly on HDFS.In a similar vein,\nMapR built Drill [22] directly on HDFS, and Meta cre-\nated Presto [185] to replace Hive.Discussion: MR’s deﬁciencies were so signiﬁcant that\nit could not be saved despite the adoption and enthu-\nsiasm from the developer community.Hadoop died\nabout a decade ago, leaving a legacy of HDFS clusters\nin enterprises and a collection of companies dedicated\nto making money from them.At present, HDFS has\nlost its luster, as enterprises realize that there are better\ndistributed storage alternatives [124].Meanwhile, dis-\ntributed RDBMSs are thriving, especially in the cloud.Some aspects of MR system implementations related\nto scalability, elasticity, and fault tolerance are carried\nover into distributed RDBMSs.MR also brought about\nthe revival of shared-disk architectures with disaggre-\ngated storage, subsequently giving rise to open-source\nﬁle formats and data lakes (see Sec.3.3). Hadoop’s lim-\nitations opened the door for other data processing plat-\nforms, namely Spark [201] and Flink [109].Both sys-\ntems started as better implementations of MR with pro-\ncedural APIs but have since added support for SQL [105].2.2 Key/Value Stores\nThe key/value (KV) data model is the simplest model\npossible.It represents the following binary relation:\n\n(key,value)\n\nA KV DBMS represents a collection of data as an as-\nsociative array that maps a key to a value.The value is\ntypically an untyped array of bytes (i.e., a blob), and the\nDBMS is unaware of its contents.It is up to the appli-\ncation to maintain the schema and parse the value into\nits corresponding parts.Most KV DBMSs only provide\nget/set/delete operations on a single value.In the 2000s, several new Internet companies built\ntheir own shared-nothing, distributed KV stores for nar-\n\n22\n\nSIGMOD Record, June 2024 (Vol.53, No. 2)\n\n\frowly focused applications, like caching and storing ses-\nsion data.For caching, Memcached [131] is the most\nwell-known example of this approach.Redis [67] mar-\nkets itself as a Memcached replacement, offering a more\nrobust query API with checkpointing support.For more\npersistent application data, Amazon created the Dynamo\nKV store in 2007 [125].Such systems offer higher and\nmore predictable performance, compared to a RDBMS,\nin exchange for more limited functionality.The second KV DBMS category are embedded stor-\nage managers designed to run in the same address space\nas a higher-level application.One of the ﬁrst stan-\ndalone embedded KV DBMSs was BerkeleyDB from\nthe early 1990s [170].Recent notable entries include\nGoogle’s LevelDB [37], which Meta later forked as\nRocksDB [68].Discussion: Key/value stores provide a quick “out-of-\nthe-box” way for developers to store data, compared to\nthe more laborious effort required to set up a table in a\nRDBMS.Of course, it is dangerous to use a KV store\nin a complex application that requires more than just a\nbinary relation.If an application requires multiple ﬁelds\nin a record, then KV stores are probably a bad idea.Not\nonly must the application parse record ﬁelds, but also\nthere are no secondary indexes to retrieve other ﬁelds\nby value.Likewise, developers must implement joins or\nmulti-get operations in their application.To deal with these issues, several systems began as\na KV store and then morphed into a more feature-rich\nrecord store.Such systems replace the opaque value\nwith a semi-structured value, such as a JSON docu-\nment.Examples of this transition are Amazon’s Dy-\nnamoDB [129] and Aerospike [9].It is not trivial to re-\nengineer a KV store to make it support a complex data\nmodel, whereas RDBMSs easily emulates KV stores\nwithout any changes.If an application needs an embed-\nded DBMS, there are full-featured choices available to-\nday, including SQLite [71] and DuckDB [180].Hence,\na RDBMS may be a better choice, even for simple appli-\ncations, because they offer a path forward if the applica-\ntion’s complexity increases.One new architecture trend from the last 20 years is\nusing embedded KV stores as the underlying storage\nmanager for full-featured DBMSs.Prior to this, build-\ning a new DBMS requires engineers to build a custom\nstorage manager that is natively integrated in the DBMS.MySQL was the ﬁrst DBMS to expose an API that al-\nlowed developers to replace its default KV storage man-\nager.This API enabled Meta to build RocksDB to re-\nplace InnoDB for its massive ﬂeet of MySQL databases.Similarly, MongoDB discarded their ill-fated MMAP-\nbased storage manager in favor of WiredTiger’s KV\nstore in 2014 [120, 138].Using an existing KV store\nallows developers to write a new DBMS in less time.2.3 Document Databases\n\nThe document data model represents a database as a col-\nlection of record objects.Each document contains a hier-\narchy of ﬁeld/value pairs, where each ﬁeld is identiﬁed\nby a name and a ﬁeld’s value can be either a scalar type,\nan array of values, or another document.The following\nexample in JSON is a customer document that contain\na nested list of purchase order records with their corre-\nsponding order items.{ “name”: “First Last”,\n\n“orders”: [ { “id”: 123, “items”: [...] },\n\n{ “id”: 456, “items”: [...] }, ] }\n\nDocument data models have been an active ﬁeld of\neffort for several decades.This has given rise to data\nformats like SGML [117] and XML [118].Despite\nthe buzz with XML databases in the late 1990s, we\ncorrectly predicted in 2005 they would not supplant\nRDBMSs [188].JSON has since overtaken XML to\nbecome the standard for data exchange for web-based\napplications.JavaScript’s popularity with developers\nand the accompanying ubiquity of JSON led several\ncompanies to create document-oriented systems that na-\ntively stored JSON in the 2000s.The inability of OLTP RDBMSs to scale in the 2000s\nushered in dozens of document DBMSs that marketed\nthemselves using the catchphrase NoSQL [110].There\nwere two marketing messages for such systems that res-\nonated with developers.First, SQL and joins are slow,\nand one should use a “faster” lower-level, record-at-a-\ntime interface.Second, ACID transactions are unneces-\nsary for modern applications, so the DBMS should only\nprovide weaker notion of it (i.e., BASE [179]).Because of these two thrusts, NoSQL came to stand\nfor a DBMS that stored records or documents as JSON,\nsupported a lower-level API, and weak or non-existent\ntransactions.There are dozens of such systems, of\nwhich MongoDB [41] is the most popular.Discussion: Document DBMSs are essentially the same\nas object-oriented DBMSs from the 1980s and XML\nDBMSs from the late 1990s.Proponents of document\nDBMSs make the same argument as their OO/XML\npredecessors: storing data as documents removes the\nimpedance mismatch between how application OO code\ninteracts with data and how relational databases store\nthem.They also claim that denormalizing entries into\nnested structures is better for performance because it re-\nmoves the need to dispatch multiple queries to retrieve\ndata related to a given object (i.e., “N+1 problem” in\nORMs).The problems with denormalization/prejoining\nis an old topic that dates back to the 1970s [116]: (1)\nif the join is not one-to-many, then there will be dupli-\ncated data, (2) prejoins are not necessarily faster than\njoins, and (3) there is no data independence.SIGMOD Record, June 2024 (Vol. 53, No.2)\n\n23\n\n\fDespite strong protestations that SQL was terrible, by\nthe end of the 2010s, almost every NoSQL DBMS added\na SQL interface.Notable examples include DynamoDB\nPartiQL [56], Cassandra CQL [15], Aerospike AQL [9],\nand Couchbase SQL++ [72].The last holdout was Mon-\ngoDB, but they added SQL for their Atlas service in\n2021 [42].Instead of supporting the SQL standard for\nDDL and DML operations, NoSQL vendors claim that\nthey support their own proprietary query language de-\nrived or inspired from SQL.For most applications, these\ndistinctions are without merit.Any language differences\nbetween SQL and NoSQL derivatives are mostly due to\nJSON extensions and maintenance operations.Many of the remaining NoSQL DBMSs also added\nstrongly consistent (ACID) transactions (see Sec. 3.4).As such, the NoSQL message has morphed from “Do\nnot use SQL – it is too slow!” to “Not only SQL” (i.e.,\nSQL is ﬁne for some things).Adding SQL and ACID to a NoSQL DBMS lowers\ntheir intellectual distance from RDBMSs.The main\ndifferences between them seems to be JSON support\nand the fact that NoSQL vendors allow “schema later”\ndatabases.But the SQL standard added a JSON data\ntype and operations in 2016 [165, 178].And as RDBMSs\ncontinue to improve their “ﬁrst ﬁve minutes” experience\nfor developers, we believe that the two kinds of systems\nwill soon be effectively identical.Higher level languages are almost universally pre-\nferred to record-at-a-time notations as they require less\ncode and provide greater data independence.Although\nwe acknowledge that the ﬁrst SQL optimizers were slow\nand ineffective, they have improved immensely in the\nlast 50 years.But the optimizer remains the hardest part\nof building a DBMS.We suspect that this engineering\nburden was a contributing factor to why NoSQL systems\noriginally chose to not support SQL.2.4 Column-Family Databases\nThere is another category of NoSQL systems that uses\na data model called column-family (aka wide-column).Despite its name, column-family is not a columnar data\nmodel.Instead, it is a reduction of the document data\nmodel that only supports one level of nesting instead\nof arbitrary nesting; it is relation-like, but each record\ncan have optional attributes, and cells can contain an ar-\nray of values.The following example shows a mapping\nfrom user identiﬁer keys to JSON documents that con-\ntain each user’s varying proﬁle information:\n\nUser1000 → { “name”: “Alice”,\n\n“accounts”: [ 123, 456 ],\n“email”: \"xxx@xxx.edu” }\n\nUser1001 → { “name”: “Bob”,\n\n“email”: [ “yyy@yyy.org”, “zzz@zzz.com” ] }\n\nThe ﬁrst column-family model DBMS was Google’s\nBigTable in 2004 [111].Instead of adopting SQL and\n\nemerging columnar storage, Google used this data model\nwith procedural client APIs.Other systems adopted the\ncolumn-family model in an attempt to copy Google’s be-\nspoke implementation.Most notable are Cassandra [14]\nand HBase [28].They also copied BigTable’s limita-\ntions, including the lack of joins and secondary indexes.Discussion: All our comments in Sec.2.3 about the\ndocument model are also applicable here.In the early\n2010s, Google built RDBMSs on top of BigTable, in-\ncluding MegaStore [99] and the ﬁrst version of Span-\nner.Since then, Google rewrote Spanner to remove\nthe BigTable remnants [98], and it is now the primary\ndatabase for many of its internal applications.Several\nNoSQL DBMSs deprecated their proprietary APIs in\nfavor of SQL but still retain their non-relational archi-\ntectures.Cassandra replaced their Thrift-API with a\nSQL-like language called CQL [15], and HBase now\nrecommends the Phoenix SQL-frontend [57].Google\nstill offers BigTable as a cloud service, but the column-\nfamily model is a singular outlier with the same disad-\nvantages as NoSQL DBMSs.2.5 Text Search Engines\nText search engines have existed for a long time, begin-\nning with the seminal SMART system in the 1960s [184].SMART pioneered information retrieval and the vector\nspace model, now nearly universal in modern search\nengines, by tokenizing documents into a “bag of words”\nand then building full-text indexes (aka inverted indexes)\non those tokens to support queries on their contents.The\nsystem was also cognizant of noise words (e.g., “the”,\n“a”), synonyms (e.g., “The Big Apple” is a synonym for\n“New York City”), salient keywords, and distance (e.g.,\n“drought” often appears close to “climate change”).The leading text search systems today include Elastic-\nsearch [23] and Solr [70], which both use Lucene [38]\nas their internal search library.These systems offer\ngood support for storing and indexing text data but offer\nnone-to-limited transaction capabilities.This limitation\nmeans that a DBMS has to recover from data corruption\nby rebuilding the document index from scratch, which\nresults in signiﬁcant downtime.All the leading RDBMSs support full-text search in-\ndexes, including Oracle [52], Microsoft SQL Server [52],\nMySQL [43], and PostgreSQL [62].Their search fea-\ntures have improved recently and are generally on par\nwith the special-purpose systems above.They also have\nthe advantage of built-in transaction support.But their\nintegration of search operations in SQL is often clunky\nand differs between DBMSs.Discussion: Text data is inherently unstructured, which\nmeans that there is no data model.Instead, a DBMS\nseeks to extract structure (i.e., meta-data, indexes) from\ntext to avoid “needle in the haystack” sequential searches.24\n\nSIGMOD Record, June 2024 (Vol. 53, No.2)\n\n\fThere are three ways to manage text data in application.First, one can run multiple systems, such as Elastic-\nsearch for text and a RDBMS for operational workloads.This approach allows one to run “best of breed” systems\nbut requires additional ETL plumbing to push data from\nthe operational DBMS to the text DBMS and to rewrite\napplications to route queries to the right DBMSs based\non their needs.Alternatively, one can run a RDBMS\nwith good text-search integration capabilities but with\ndivergent APIs in SQL.This latter issue is often over-\ncome by application frameworks that hide this complex-\nity (e.g., Django Haystack [20]).The third option is\na polystore system [187] that masks the system differ-\nences via middleware that exposes a uniﬁed interface.Inverted index-centric search engines based on SMART\n\nare used for exact match searches.These methods have\nbeen supplanted in recent years by similarity search us-\ning ML-generated embeddings (see Sec.2.7). 2.6 Array Databases\nThere are many areas of computing where arrays are an\nobvious data representation.We use the term “array” to\nmean all variants of them [182]: vectors (one dimen-\nsion – see Sec.2.7), matrices (two dimensions), and\ntensors (three or more dimensions).For example, sci-\nentiﬁc surveys for geographic regions usually represent\ndata as a multi-dimensional array that stores sensor mea-\nsurements using location/time-based coordinates:\n\n(latitude, longitude, time, [vector-of-values])\n\nSeveral other data sets look like this, including ge-\nnomic sequencing and computational ﬂuid dynamics.Arrays are also the core of most ML data sets.Although array-based programming languages have\nexisted since the 1960s (APL [142]), the initial work\non array DBMSs began in the 1980s.PICDMS is con-\nsidered to be the ﬁrst DBMS implementation using the\narray data model [114].The two oldest array DBMSs\nstill being developed today are Rasdaman [66, 103] and\nkdb+ [34].Newer array DBMSs include SciDB [54,\n191] and TileDB [76].HDF5 [29] and NetCDF [46] are\npopular array ﬁle formats for scientiﬁc data.There are several system challenges with storing and\nquerying real-world array data sets.Foremost is that ar-\nray data does not always align to a regular integer grid;\nfor example, geospatial data is often split into irregular\nshapes.An application can map such grids to integer\ncoordinates via metadata describing this mapping [166].Hence, most applications maintain array and non-array\ndata together in a single database.Unlike row- or column-based DBMSs, querying array\ndata in arbitrary dimensions presents unique challenges.The difﬁculty arises from storing multi-dimensional ar-\nray data on a linear physical storage medium like a disk.To overcome these challenges, array DBMSs must em-\n\nploy indexing and data structures to support efﬁcient\ntraversal across array dimensions.For example, they have considerable\ntraction in the genomics space.HDF5 is popular for\nsatellite imagery and other gridded scientiﬁc data.But\nbusiness applications rarely use dedicated array DBMSs,\nwhich is necessary for any product to survive.No ma-\njor cloud provider offers a hosted array DBMS service,\nmeaning they do not see a sizable market.The challenge that array DBMS vendors have al-\nways faced is that the SQL includes support for or-\ndered arrays as ﬁrst-class data types (despite this be-\ning against the original RM proposal [115]).The ﬁrst\nproposal to extend the unordered set-based RM with\nordered rasters was in 1993 [155].An early exam-\nple of this was Illustra’s temporal (one-dimensional)\ndata plugin [31].SQL:1999 introduced limited sup-\nport for single-dimension, ﬁxed-length array data types.SQL:2003 expanded to support nested arrays without a\npredeﬁned maximum cardinality.Later entrants include\nOracle Georaster [4] and Teradata [73].Data cubes are\nspecial-purpose arrays [135], but columnar RDBMSs\nhave eclipsed them for OLAP workloads because of\ntheir better ﬂexibility and lower engineering costs [113].More recently, the SQL:2023 standard includes sup-\nport for true multi-dimensional arrays (SQL/MDA) that\nis heavily inspired by Rasdaman’s RQL [166].This\nupdate allows SQL to represent arrays with arbitrary\nIn effect,\ndimensions using integer-based coordinates.this allows data cubes to exist in a SQL framework, but\ncolumnar DBMSs now dominate this market.2.7 Vector Databases\nSimilar to how the column-family model is a reduction\nof the document model, the vector data model simpliﬁes\nthe array data model to one-dimensional rasters.Given\nthat vector DBMSs are attracting the most attention\nright now from developers and investors (similar to the\nNoSQL fad), it is necessary to discuss them separately.The reason for this interest is because developers use\nthem to store single-dimension embeddings generated\nfrom AI tools.These tools use learned transformations\nto convert a record’s data (e.g., text, image) into a vec-\ntor representing its latent semantics.For example, one\ncould convert each Wikipedia article into an embedding\nusing Google BERT and store them in a vector database\nalong with additional article meta-data:\n\n(title, date, author, [embedding-vector])\n\nThe size of these embedding vectors range from 100s\nof dimensions for simple transformers to 1000s for high-\nend models; these sizes will obviously grow over time\nwith the development of more sophisticated models.SIGMOD Record, June 2024 (Vol. 53, No.2)\n\n25\n\n\fThe key difference between vector and array DBMSs\nis their query patterns.The former are designed for\nsimilarity searches that ﬁnd records whose vectors have\nthe shortest distance to a given input vector in a high-\ndimensional space.The input vector is another embed-\nding generated with the same transformer used to popu-\nlate the database.Unlike array DBMSs, applications do\nnot use vector DBMSs to search for matches at an off-\nset in a vector nor extract slices across multiple vectors.Instead, the dominant use case is this similarity search.To avoid brute force scans for ﬁnding the most sim-\nilar records, vector DBMSs build indexes to accelerate\napproximate nearest neighbor (ANN) searches.Appli-\ncations issue queries with predicates on both the em-\nbedding index and non-embedding attributes (i.e., meta-\ndata).The DBMS then chooses whether to use the non-\nembedding predicate on records before (pre-ﬁlter) or af-\nter (post-ﬁlter) the vector search.There are dozens of new DBMSs in this emerging\ncategory, with Pinecone [58], Milvus [40], and Weav-\niate [84] as the leading systems.Text search engines,\nincluding Elasticsearch [23], Solr [70], and Vespa [79],\nexpanded their APIs to support vector search.Other\nDBMSs rebranded themselves as vector databases to\njump on the bandwagon, such as Kdb+ [34].One compelling feature of vector DBMSs is that\nthey provide better integration with AI tools (e.g., Chat-\nGPT [16], LangChain [36]) than RDBMSs.These sys-\ntems natively support transforming a record’s data into\nan embedding upon insertion using these tools and then\nuses the same transformation to convert a query’s in-\nput arguments into an embedding to perform the ANN\nsearch; other DBMSs require the application to perform\nthese transformations outside of the database.Discussion: Unlike array DBMSs that require a cus-\ntomized storage manager and execution engine to sup-\nport efﬁcient operations on multi-dimensional data, vec-\ntor DBMSs are essentially document-oriented DBMSs\nwith specialized ANN indexes.Such indexes are a fea-\nture, not the foundation of a new system architecture.After LLMs became “mainstream” with ChatGPT in\nlate 2022, it took less than one year for several RDBMSs\nIn 2023,\nto add their own vector search extensions.many of the major RDBMSs added vector indexes, in-\ncluding Oracle [7], SingleStore [137], Rockset [8], and\nClickhouse [157].Contrast this with JSON support in\nRDBMSs.NoSQL systems like MongoDB and CouchDB\nbecame popular in the late 2000s and it took several\nyears for RDBMSs to add support for it.There are two likely explanations for the quick pro-\nliferation of vector indexes.The ﬁrst is that similarity\nsearch via embeddings is such a compelling use case\nthat every DBMS vendor rushed out their version and\nannounced it immediately.The second is that the en-\ngineering effort to introduce a new index data structure\n\nis small enough that it did not take that much work for\nthe DBMS vendors to add vector search.Most of them\ndid not write their vector index from scratch and instead\nintegrated an open-source library (e.g., pgVector [145],\nDiskANN [19], FAISS [24]).We anticipate that vector DBMSs will undergo the\nsame evolution as document DBMSs by adding features\nto become more relational-like (e.g., SQL, transactions,\nextensibility).Meanwhile, relational incumbents will\nhave added vector indexes to their already long list of\nfeatures and moved on to the next emerging trend.2.8 Graph Databases\nThere has been a lot of academic and industry interest\nin the last decade in graph databases [183].Many appli-\ncations use knowledge graphs to model semi-structured\ninformation.Social media applications inherently con-\ntain graph-oriented relationships (“likes”, “friend-of”).Relational design tools provide users with an entity-\nrelationship (ER) model of their database.An ER dia-\ngram is a graph; thus, this paradigm has clear use cases.The two most prevalent approaches to represent graphs\nare (1) the resource description framework (RDF) and\n(2) property graphs [126].With property graphs, the\nDBMS maintains a directed multi-graph structure that\nsupports key/value labels for nodes and edges.RDF\ndatabases (aka triplestores) only model a directed graph\nwith labeled edges.Since property graphs are more com-\nmon and are a superset of RDF, we will only discuss\nthem.We consider two use cases for graph DBMSs and\ndiscuss the problems that will limit their adoption.The ﬁrst category of systems are for operational /\nOLTP workloads: an application, for example, adds a\nfriend link in the database by updating a single record,\npresumably in a transactional manner.Neo4j [44] is the\nmost popular graph DBMS for OLTP applications.It\nsupports edges using pointers (as in CODASYL) but it\ndoes not cluster nodes with their “parent” or “offspring”.Such an architecture is advantageous for traversing long\nedge chains since it will do pointer chasing, whereas a\nRDBMS has to do this via joins.But their potential mar-\nket success comes down to whether there are enough\n“long chain” scenarios that merit forgoing a RDBMS.The second use case is analytics, which seeks to de-\nrive information from the graph.An example of this\nscenario is ﬁnding which user has the most friends un-\nder 30 years old.Notable entries like Tigergraph [74]\nand JanusGraph [32] focus on query languages and\nstorage on a graph DBMS.Other systems, such as Gi-\nraph [26] and Turi [78] (formerly Graphlab [27]) pro-\nvide a computing fabric to support parallel execution of\ngraph-oriented programs, typically written by a user.Unlike queries in relational analytics that are charac-\nterized by chains of joins, queries for graph analytics\ncontain operations like shortest path, cut set, or clique\n\n26\n\nSIGMOD Record, June 2024 (Vol.53, No. 2)\n\n\fdetermination. Algorithm choice and data representa-\ntion will determine a DBMS’s performance.This argues\nfor a computing fabric that allows developers to write\ntheir own algorithms using an abstraction that hides\nthe underlying system topology.However, previous\nresearch shows that distributed algorithms rarely out-\nperform single-node implementations because of com-\nmunication costs [160].A better strategy is to compress\na graph into a space-efﬁcient data structure that ﬁts in\nmemory on a single node and then run the query against\nthis data structure.All but the largest graph databases\nare probably best handled this way.Discussion: Regardless of whether a graph DBMS tar-\ngets OLTP or OLAP workloads, the key challenge these\nsystems have to overcome is that it is possible to simu-\nlate a graph as a collection of tables:\n\nNode (node_id, node_data)\nEdge (node_id_1, node_id_2, edge_data)\n\nThis means that RDBMSs are always an option to sup-\nport graphs.But “vanilla” SQL is not expressive enough\nfor graph queries and thus require multiple client-server\nroundtrips for traversal operations.Some RDBMSs, including MSSQL [3] and Oracle [50],\n\nprovide built-in SQL extensions that make storing and\nquerying graph data easier.Other DBMSs use a transla-\ntion layer on top of relations to support graph-oriented\nAPIs.Amazon Neptune [45] is a graph-oriented veneer\non top of Aurora MySQL.Apache AGE provides an\nOpenCypher interface on top of PostgreSQL [10].More recently, SQL:2023 introduced property graph\nqueries (SQL/PGQ) for deﬁning and traversing graphs\nin a RDBMS [196].The syntax builds on existing lan-\nguages (e.g., Neo4j’s Cypher [49], Oracle’s PGQL [51],\nand TigerGraph’s GSQL [75]), and shares aspects of the\nemerging GQL standard [126].Thus, SQL/PGQ further\nnarrows the functionality difference between RDBMSs\nand native graph DBMSs.The question is whether graph DBMS vendors can\nmake their specialized systems fast enough to over-\ncome the above disadvantages.There have been several\nperformance studies showing that graph simulation on\nRDBMSs outperform graph DBMSs [130, 143].More\nrecent work showed how SQL/PGQ in DuckDB outper-\nforms a leading graph DBMS by up to 10\n[196].This\ntrend will continue with further improvements in worst-\ncase optimal joins [132, 168] and factorized execution\nalgorithms [100] for graph queries in RDBMSs.⇥\n\n2.9 Summary\nA reasonable conclusion from the above section is that\nnon-SQL, non-relational systems are either a niche mar-\nket or are fast becoming SQL/RM systems.Speciﬁcally:\n\n•\n\nMapReduce Systems: They died years ago and are,\nat best, a legacy technology at present.•\n\n•\n\n•\n\n•\n\n•\n\n•\n\n•\n\nKey-value Stores: Many have either matured into\nRM systems or are only used for speciﬁc problems.These can generally be equaled or beaten by modern\nhigh-performance RDBMSs.Document Databases: Such NoSQL systems are on\na collision course with RDBMSs.The differences\nbetween the two kinds of systems have diminished\nover time and should become nearly indistinguish-\nable in the future.Column-Family Systems: These remain a niche\nmarket.Without Google, this paper would not be\ntalking about this category.Text Search Engines: These systems are used for\ntext ﬁelds in a polystore architecture.It would be\nvaluable if RDBMSs had a better story for search so\nthese would not have to be a separate product.Array Databases: Scientiﬁc applications will con-\ntinue to ignore RDBMSs in favor of bespoke array\nsystems.They may become more important because\nRDBMSs cannot efﬁciently store and analyze arrays\ndespite new SQL/MDA enhancements.Vector Databases: They are single-purpose DBMSs\nwith indexes to accelerate nearest-neighbor search.RM DBMSs should soon provide native support for\nthese data structures and search methods using their\nextendable type system that will render such special-\nized databases unnecessary.Graph Databases: OLTP graph applications will\nbe largely served by RDBMSs.In addition, ana-\nlytic graph applications have unique requirements\nthat are best done in main memory with specialized\ndata structures.RDBMSs will provide graph-centric\nAPIs on top of SQL or via extensions.We do not ex-\npect specialized graph DBMSs to be a large market.Beyond the above, there are also proposals to rebrand\nprevious data models as something novel.For example,\ngraph-relational [158] is the same as the semantic data\nmodel [202].Likewise, document-relational is the doc-\nument model with foreign keys [199].Others provide a\nnon-SQL veneer over a RDBMS (e.g., PRQL [64], Mal-\nloy [39]).Although these languages deal with some of\nSQL’s shortcomings, they are not compelling enough to\novercome its entrenched userbase and ecosystem.3 System Architectures\nThere have been major new ideas in DBMS architec-\ntures put forward in the last two decades that reﬂect-\ning changing application and hardware characteristics.These ideas range from terriﬁc to questionable, and we\ndiscuss them in turn.3.1 Columnar Systems\nTo understand the appeal of columnar DBMSs, we need\nto explain the origins of the data warehouse (OLAP)\nmarket.Beginning in the mid-1990s, enterprises started\n\nSIGMOD Record, June 2024 (Vol.53, No. 2)\n\n27\n\n\fcollecting their customer facing (usually sales) data.Brick-and-mortar retailers (e.g., Walmart) were at fore-\nfront of constructing historical sales databases.These\ncompanies generally found that a sales data warehouse\nwould pay for itself in better stock ordering and rota-\ntion decisions within six months.Such customer facing\ndatabases are now omnipresent in enterprises.Data warehouse applications have common proper-\n\nties that are distinct from OLTP workloads:\n1.They are historical in nature (i.e., they are loaded\n\nperiodically and then are read-only). 2.Organizations retain everything as long as they can\n\nafford the storage — think terabytes to petabytes.3. Queries typically only access a small subset of at-\ntributes from tables and are ad-hoc in nature.Ralph Kimball was an early proponent of star schema\ndata modelling for data warehouses [148, 149].The idea\nwas to construct a fact table that held item-level trans-\nactional data.The classic example is a fact table that\ncontains a record for every item purchased in a retail en-\nterprise.Then, one surrounds the fact table with dimen-\nsion tables that contain common information factored\nout from the fact table to save space.Again, in a retail\nsetting, these dimension tables would include informa-\ntion about customers, products, stores, and time.Organizing the DBMS’s storage by columns instead\nof rows has several beneﬁts [87].First, compressing\ncolumnar data is more effective than row-based data be-\ncause there is a single value type in a data block of-\nten many repeated bytes.Second, a Volcano-style en-\ngine executes operators once per row.In contrast, a\ncolumn-oriented engine has an inner loop that processes\na whole column using vectorized instructions [106, 147].Lastly, row stores have a large header for each record\n(e.g., 20 bytes) to track nulls and versioning meta-data,\nwhereas column stores have minimal storage overhead\nper record.Discussion: Over the last two decades, all vendors ac-\ntive in the data warehouse market have converted their\nofferings from a row store to a column store.This tran-\nsition brought about signiﬁcant changes in the design\nof DBMSs.In addition, several new vendors have en-\ntered the market in the last two decades with column\nstore offerings, for example Amazon’s Redshift [94] and\nGoogle’s BigQuery [162] along with offerings from in-\ndependent companies (e.g., Snowﬂake [121]).In summary, column stores are new DBMS implemen-\ntations with specialized optimizers, executors, and stor-\nage formats.They have taken over the data warehouse\nmarketplace because of their superior performance.3.2 Cloud Databases\nThe rise of cloud platforms in the late 2000s has also\ngreatly affected the implementation (and sales model) of\n\nDBMSs.Initial cloud DBMS offerings repackaged on-\nprem systems into managed VMs with direct-attached\nstorage.But over the last 20 years, networking band-\nwidth has increased much faster than disk bandwidth,\nmaking network attached storage (NAS) attractive as an\nalternative to attached storage.This has caused a pro-\nfound rethinking of DBMS architectures for the cloud.All major cloud vendors offer NAS via object stores\n(e.g., Amazon S3) with some DBMS functionality (e.g.,\nreplication, ﬁltering).Beyond better economics com-\npared to direct-attached storage, object stores have sev-\neral advantages that compensate for the cost of the\nadded network link.First, because the compute nodes\nare disconnected from the storage nodes, a system can\nprovide per-query elasticity; the DBMS can add new\ncompute nodes dynamically without having to reshufﬂe\ndata.It also allows the DBMS to use different hard-\nware for its storage nodes than compute nodes.Second,\nthe system can reassign compute nodes to other tasks\nif a DBMS is underutilized.On the other hand, in a\nshared-nothing DBMS, a node must always be online to\nhandle incoming query requests.Lastly, pushing down\ncomputation into the storage nodes is possible (and gen-\nerally advantageous).This execution strategy is known\nas “pushing the query to the data” versus “pulling the\ndata to the query” and is well understood in DBMSs.Generally, the ﬁrst two ideas are called “serverless\ncomputing”, and was introduced for cloud-native DBMSs\nby Snowﬂake [121].Other vendors have moved or\nare in the process of moving to a serverless environ-\nment for their cloud offerings.Effective utilization of\nthis model requires a hosted multi-node environment in\nwhich multiple DBMS customers are grouped onto the\nsame node(s) with a multi-tenant execution scheme.Discussion: The advent of cloud databases is another\nexample of “what goes around comes around”.Multi-\nnode shared-disk DBMSs are an old idea that histori-\ncally tended not to work out well.However, it is back in\nvogue with technology change (faster networking) and\nmoving to the cloud.In addition, time-sharing services\nwere popular in the 1970s when computers were big and\nexpensive.Cloud platforms are big time-sharing ser-\nvices, so the concept is back after a few decades.Since\nenterprises are moving everything possible to the cloud,\nwe expect this shared-disk to dominate DBMS architec-\ntures.Hence, we do not foresee shared-nothing architec-\ntures resurfacing in the future.The cloud has profoundly impacted DBMSs, causing\nthem to be completely re-architected.The movement\nof computing from on-prem to the cloud generates a\nonce-in-a-lifetime opportunity for enterprises to refac-\ntor codebases and remove bad historical technology de-\ncisions.A cloud environment also provides several ben-\neﬁts to vendors that are not possible with on-prem de-\nployments.Foremost is that vendors can track usage\n\n28\n\nSIGMOD Record, June 2024 (Vol. 53, No.2)\n\n\ftrends for all their customers: they can monitor unex-\npected behavior, performance degradations, and usage\npatterns.Moreover, they can push incremental updates\nand code patches without disrupting service.From a business perspective, open-source DBMSs\nface the danger of becoming too popular and being mon-\netized by the major cloud providers.The public spats\nbetween Amazon and ISVs like MongoDB [153] and\nElasticsearch [101] are notable examples.3.3 Data Lakes / Lakehouses\nAnother trend that the cloud platforms fomented is the\nmovement away from monolithic, dedicated data ware-\nhouses for OLAP workloads and towards data lakes\nbacked by object stores.With legacy data warehouses,\norganizations load data into the DBMS, which the sys-\ntem stashes in managed storage with proprietary for-\nmats.Vendors viewed their DBMSs as the “gatekeepers”\nfor all things related to data in an organization.However,\nthis has not been the model of many organizations, es-\npecially technology companies, for the last decade.With a data lake architecture, applications upload ﬁles\nto a distributed object store, bypassing the traditional\nroute through the DBMS [167].Users then execute\nqueries and processing pipelines on these accumulated\nﬁles using a lakehouse (a portmanteau of data ware-\nhouse and data lake) execution engine [93].These lake-\nhouse systems provide a uniﬁed infrastructure support-\ning SQL and non-SQL workloads.The latter is crucial\nas the last decade has shown that data scientists and ML\npractitioners typically use Python-based notebooks that\nuse Panda’s DataFrame API [159] to access data instead\nof SQL.Several projects leverage DBMS methods to\noptimize DataFrame processing, including Dask [181],\nPolars [61], Modin [177], and Bodo [198].Instead of using DBMS-speciﬁc proprietary ﬁle for-\nmats or inefﬁcient text-based ﬁles (e.g., CSV, JSON),\napplications write data to data lakes using open-source,\ndisk-resident ﬁle formats [203].The two most pop-\nular formats are Twitter/Cloudera’s Parquet [55] and\nMeta’s ORC [53, 140].Both of them borrow tech-\nniques from earlier columnar storage research, such as\nPAX [90], compression [87], and nested-data (JSON)\nshredding [121, 161].Apache Arrow [11] is a similar\nbinary format for exchanging in-memory data between\nsystems.Open-source libraries for reading/writing these\nformats allow disparate applications to create data ﬁles\nthat other systems then parse and consume, thereby en-\nhancing data sharing across services and business units.Discussion: Data lakes are the successor to “Big Data”\nmovement from the early 2010s, partly led by the pop-\nularity of MR systems (Sec.2.1) and column stores\n(Sec. 3.1).At ﬁrst glance, a data lake seems like a terri-\nble idea for an organization: allowing any application to\nwrite arbitrary ﬁles into a centralized repository without\n\nany governance is a recipe for integrity, discovery, and\nversioning problems [167].Lakehouses provide much-\nneeded control over these environments to help mitigate\nmany problems with meta-data, caching, and indexing\nservices [93].Additional middleware that tracks new\ndata and supports transactional updates, such as Delta\nLake [92], Iceberg [6], and Hudi [5], make lakehouses\nlook more like a traditional data warehouse.Data lakes introduce new challenges to query opti-\nmization.DBMSs have always struggled with acquir-\ning precise statistics on data,\nleading to poor query\nplan choices [154].However, a data lake system may\ncompletely lack statistics on newly ingested data ﬁles.Consequently, incorporating adaptive query processing\nstrategies is imperative in the cloud to enable a DBMS to\ndynamically modify query plans during execution based\non observed data characteristics [97, 105, 163].All the major cloud vendors now offer some variation\nof a managed data lake service.Since data lake sys-\ntems backed by object stores are much cheaper per giga-\nbyte than proprietary data warehouses, the legacy OLAP\nvendors (e.g., Teradata, Vertica) have extended their\nDBMSs to support reading data from object stores in re-\nsponse to this pricing pressure.Several independent sys-\ntems are also in this space, including Databricks [105],\nDremio [21], PrestoDB [63], and Trino [77].3.4 NewSQL Systems\nIn the late 2000s, there were multiple distributed NoSQL\nDBMSs available designed to scale horizontally to sup-\nport online applications with large number of concurrent\nusers [110].However, many organizations could not use\nthese NoSQL systems because their applications could\nnot give up strong transactional requirements.But the\nexisting RDBMSs (especially open-source ones) were\nnot able to (natively) scale across multiple machines.In\nresponse, NewSQL systems arrived in the early 2010s\nseeking to provide the scalability of NoSQL systems for\nOLTP workloads while still supporting SQL [95, 171].In other words, these new systems sought to achieve the\nsame scalability of NoSQL DBMSs from the 2000s but\nstill keep the RM and ACID transactions of the legacy\nDBMSs from the 1990s.There were two main groups of NewSQL systems.The ﬁrst was in-memory DBMSs, including H-Store [144,\n189] (commercialized as VoltDB [83]), SingleStore [69],\nMicrosoft Hekaton [128], and HyPer [146].Other start-\nup offerings included disk-oriented, distributed DBMSs\nlike NuoDB [47] and Clustrix [17].Discussion: There has yet to be a dramatic uptake in\nNewSQL DBMS adoption [96].The reason for this lack-\nluster interest is that existing DBMSs were good enough\nfor the time, which means organizations are unwilling to\ntake on the costs and risk of migrating existing applica-\ntions to newer technologies.Companies are more risk-\n\nSIGMOD Record, June 2024 (Vol. 53, No.2)\n\n29\n\n\faverse with changing OLTP DBMSs than with OLAP.If an OLTP DBMS fails, companies cannot execute the\ntransactions they need to generate revenue.In contrast,\nan OLAP DBMS failure could be limited to temporarily\ninconveniencing an analyst or data scientist.There were other restrictions in NewSQL DBMSs,\nsuch as only supporting a subset of standard SQL or\nbad performance on multi-node transactions.Some\nNewSQL products, like Microsoft’s Hekaton, were only\navailable as an extension to a legacy DBMS, requiring\nthe faster engine to use the slower DBMS’s interfaces.NewSQL vendors also incorrectly anticipated that in-\nmemory DBMS adoption would be larger in the last\ndecade.Flash vendors drove down costs while improv-\ning storage densities, bandwidth, and latencies.Higher\nDRAM costs and the collapse of persistent memory\n(e.g., Intel Optane) means that SSDs will remain domi-\nnant for OLTP DBMSs.The aftermath of NewSQL is a new crop of distributed,\ntransactional SQL RDBMSs.These include TiDB [141],\nCockroachDB [195], PlanetScale [60] (based on the\nVitess sharding middleware [80]), and YugabyteDB [86].The major NoSQL vendors also added transactions to\ntheir systems in the last decade despite previously strong\nclaims that they were unnecessary.Notable DBMSs that\nmade the shift include MongoDB, Cassandra, and Dy-\nnamoDB.This is of course due to customer requests\nthat transactions are in fact necessary.Google said this\ncogently when they discarded eventual consistency in\nfavor of real transactions with Spanner in 2012 [119].3.5 Hardware Accelerators\nThere has been a hunt for a cost-effective hardware ac-\ncelerator for DBMSs for the last 50 years.The promise\nis obvious: specialized hardware designed for a DBMS\nshould easily outperform a conventional CPU.In the 1980s, vendors fabricated custom hardware to\naccelerate DBMSs and marketed them as database ma-\nchines [107].Britton-Lee released the ﬁrst commercial\naccelerator product (IDM/500) in 1981 [192] that con-\ntained a conventional CPU with a hardware accelerator\nthat ofﬂoaded portions of a query’s execution.This ac-\ncelerator targeted a small subset of the execution path,\nand was not cost-effective.Teradata introduced its own\ndatabase machine that provided network hardware for\nsorting in-ﬂight tuples (Y-net [1]), but it was dropped\nfor a software-only solution [85].All other custom hard-\nware DBMS acceleration during the 1980s failed.Instead of building custom hardware for DBMSs, the\nlast 20 years have been about using commodity hard-\nware (FPGAs, GPUs) to accelerate queries.This is an\nenticing idea: a vendor can get the beneﬁts of a DBMS\naccelerator without the cost of fabricating the hardware.Netezza was one of the ﬁrst FPGA-based DBMSs\nthat started in the late 1990s as a fork of PostgreSQL.It used an FPGA to accelerate searches on disk-resident\npages, but originally could not search in-memory pages.Netezza corrected this limitation in a later version [2].Swarm64 attempted to sell a FPGA accelerator for Post-\ngreSQL but switched to a software-only architecture\nwithout the FPGA before they were acquired [91].Vitesse’s\nDeepgreen DB [81] is the only remaining FPGA-enhanced\nDBMS available from an ISV.There is more activity in the GPU-accelerated DBMS\nmarket.Notable GPU DBMSs include Kinetica [35],\nSqream [35], Brytlyt [13], and HeavyDB [48].If data\ndoes not ﬁt in GPU memory, then query execution is\nbottlenecked on loading data into the device, thereby\nrendering the hardware’s parallelization beneﬁts moot.Discussion: There are several conclusions that we can\ndraw from the above analysis.First, these systems are\nall focused on the OLAP market and only for RDBMSs;\nthere are essentially no data model implications to the\ndiscussion in this section.Also, OLAP workloads will\ncontinue to move aggressively to the cloud, but special-\npurpose hardware is not likely to ﬁnd acceptance unless\nit is built by the cloud vendor.Creating custom hardware just for a DBMS is not\ncost-effective for most companies.Commodity hard-\nware avoids this problem but there is still the challenge\nof integrating the hardware into a DBMS.The reason\nwhy there are more GPU DBMSs than FPGA systems\nis because there are existing support libraries available\nfor GPUs (e.g., Nvidia CUDA [169]).But cloud CPU-\nbased compute resources are incredibly cheap due to\neconomies of scale.The success of any accelerator is\nlikely to be limited to on-prem databases, but this mar-\nket is not growing at the same rate as cloud databases.Even if one could get an accelerator to market that\nshowed orders of magnitude improvement over existing\ntechnologies, that only solves half the problem needed\nfor adoption and success.A hardware-only company\nmust ﬁnd somebody to add support for its accelerator\nin a DBMS.If the accelerator is an optional add-on to\nthe DBMS, then adoption will be low and thus a DBMS\nvendor will not want to spend engineering time on sup-\nporting it.If the accelerator is a critical component of\nthe DBMS, then no vendor would outsource the devel-\nopment of such an important part to an outside vendor.The only place that custom hardware accelerators will\nsucceed is for the large cloud vendors.They can justify\nthe $50–100m R&D cost of custom hardware at their\nmassive scale.They also control the entire stack (hard-\nware and software) and can integrate their hardware at\ncritical locations.Amazon did this already with their\nRedshift AQUA accelerators [102].Google BigQuery\nhas custom components for in-memory shufﬂes [89].In spite of the long odds, we predict that there will be\nmany attempts in this space over the next two decades.30\n\nSIGMOD Record, June 2024 (Vol. 53, No.2)\n\n\f3.6 Blockchain Databases\nAs of this writing, a waning database technology fad\nis blockchains.These are decentralized log-structured\ndatabases (i.e., ledger) that maintain incremental check-\nsums using some variation of Merkle trees.These in-\ncremental checksums are how a blockchain ensures that\nthe database’s log records are immutable: applications\nuse these checksums to verify that previous database up-\ndates have not been altered.The ideal use case for blockchain databases is peer-to-\npeer applications where one cannot trust anybody.There\nis no centralized authority that controls the ordering of\nupdates to the database.Thus, blockchain implementa-\ntions use a BFT commit protocol to determine which\ntransaction to apply to the database next.At the present time, cryptocurrencies (Bitcoin) are\nthe only use case for blockchains.In addition, there\nhave been attempts to build a usable DBMS on top of\nblockchains, notably Fluree [25], BigChainDB [12], and\nResilientDB [136].These vendors (incorrectly) promote\nthe blockchain as providing better security and auditabil-\nity that are not possible in previous DBMSs.Discussion: We are required to place trust in several en-\ntities in today’s society.When one sells a house, they\ntrust the title company to manage the transaction.The\nonly applications without real-world trust are dark web\ninteractions (e.g., money laundering).Legitimate busi-\nnesses are unwilling to pay the performance price (about\nﬁve orders of magnitude) to use a blockchain DBMS.If\norganizations trust each other, they can run a shared dis-\ntributed DBMS more efﬁciently without wasting time\nwith blockchains.To the best of our knowledge, all the\nmajor cryptocurrency exchanges run their businesses off\ntraditional RDBMSs and not blockchain systems.Blockchain proponents make additional meaningless\nclaims of achieving data resiliency through replication\nin a peer-to-peer environment.No sensible company\nwould rely on random participants on the Internet as the\nbackup solution for mission-critical databases.There is possibly a (small) market for private block-\nchain DBMSs.Amazon’s Quantum Ledger Database\n(QLDB) released in 2018 [65] provides the same im-\nmutable and veriﬁable update guarantees as a blockchain,\nbut it is not decentralized (i.e., no BFT commit protocol).Amazon built QLDB after ﬁnding no compelling use\ncase for a fully decentralized blockchain DBMS [108].3.7 Summary\nThe key takeaways from the major technological thrusts\nin database systems are as follows:\n\n•\n\n•\n\nColumnar Systems: The change to columnar stor-\nage revolutionized OLAP DBMS architectures.Cloud Databases: The cloud has upended the con-\nventional wisdom on how to build scalable DBMSs.Except for embedded DBMSs, any product not start-\ning with a cloud offering will likely fail.Data Lakes / Lakehouses: Cloud-based object stor-\nage using open-source formats will be the OLAP\nDBMS archetype for the next ten years.NewSQL Systems: They leverage new ideas but\nhave yet to have the same impact as columnar and\ncloud DBMSs.It has led to new distributed DBMSs\nthat support stronger ACID semantics as a counter\nto NoSQL’s weaker BASE guarantees.Hardware Accelerators: We do not see a use case\nfor specialized hardware outside of the major cloud\nvendors, though start-ups will continue to try.Blockchain Databases: An inefﬁcient technology\nlooking for an application.History has shown this is\nthe wrong way to approach systems development.•\n\n•\n\n•\n\n•\n\n4 Parting Comments\nOur analysis of the last two decades in databases has sev-\neral takeaways.Unfortunately, some of these are repeats\nof the warnings from the 2005 paper.Never underestimate the value of good marketing for\nbad products.The database market is highly competi-\ntive and lucrative.This competition drives vendors to\nclaim that their new technologies will solve all sorts of\nproblems and change developers’ lives for the better.Ev-\nery developer has struggled with databases before, so\nthey are especially amenable to such marketing.Infe-\nrior DBMS products have succeeded via strong market-\ning despite the existence of better options available at\nthe time: Oracle did this in the 1980s, MySQL did this\nin the 2000s, and MongoDB did this in the 2010s.These\nsystems got enough traction early on to buy them time\nto ﬁx the engineering debt they accumulated earlier.Beware of DBMSs from large non-DBMS vendors.One interesting aspect in the last ten years of databases\nis the trend of tech companies building DBMSs in-house\nthat they then spin out as open-source projects.All these\nsystems started life as purpose-built applications for a\ntech company.The company then releases the DBMS\nas an open-source project (often pushed to the Apache\nFoundation for stewardship) in hopes to achieve “free”\ndevelopment from external users.Some times they come from large companies that can\nafford to allocate resources to developing new systems.Notable examples include Meta (Hive [197], Presto [63],\nCassandra [14], RocksDB [68]) and LinkedIn (Kafka [33],\nPinot [59], Voldemort [82]).Other systems are from\nstart-ups building a data-intensive product where they\nfelt the need to also build a DBMS.The most successful\nexamples are 10gen (MongoDB) and PowerSet (HBase),\nbut there also many failed endeavors.This trend to avoid “not invented here” software is\npartly because many companies’ promotion path favors\n\nSIGMOD Record, June 2024 (Vol.53, No. 2)\n\n31\n\n\fengineers who make new internal systems, even if ex-\nisting tools are sufﬁcient.But this perversion led many\nteams without DBMS engineering experience to under-\ntake building a new system.One should be wary of\nsuch systems when a company ﬁrst open-sources them,\nas they are almost always immature technologies.Do not ignore the out-of-box experience.One of the\nsalient selling points of many non-relational DBMSs is\na better “out-of-box” experience than RDBMSs.Most\nSQL systems require one ﬁrst to create a database and\nthen deﬁne their tables before they can load data.This\nis why data scientists use Python notebooks to analyze\ndata ﬁles quickly.Every DBMS should, therefore, make\nit easy to perform in situ processing of local and cloud-\nstorage ﬁles.DuckDB’s rising popularity is partly due\nto its ability to do this well.Vendors should also consider additional challenges\nthat customers will inevitably face with databases, in-\ncluding physical design, knob tuning, schema design,\nand query tuning.There is a crucial need for what one\nof us calls “self-driving” DBMSs [173].Developers need to query their database directly.Most OLTP applications created in the last 20 years pri-\nmarily interact with databases via an abstraction layer,\nsuch as an endpoint API (e.g., REST, GraphQL) or\nan object-relational mapper (ORM) library.Such lay-\ners translate an application’s high-level requests into\ndatabase queries.ORMs also automatically handle main-\ntenance tasks, such as schema migrations.One could\nargue that since OLTP developers never write raw SQL\nin their applications, it does not matter what data model\ntheir DBMS uses as these layers hide it.ORMs are a vital tool for rapid prototyping.But they\noften sacriﬁce the ability to push logic into the DBMS\nin exchange for interoperability with multiple DBMSs.Developers fall back to writing explicit database queries\nto override the poor auto-generated queries.This is why\nusing a RDBMS that supports SQL is the better choice.The impact of AI/ML on DBMSs will be signiﬁcant.How DBMSs should interact with modern AI/ML tools\nhas recently become a crucial question, especially with\nthe advent of LLMs (e.g., ChatGPT).Although this ﬁeld\nis moving rapidly, we offer a few initial comments.There is a resurgence in using natural languages (NLs)\nto query databases due to advancements in LLMs at\nconverting NL to query code (e.g., SQL) [133].Some\nhave even suggested that such AI-powered query inter-\nfaces will render SQL obsolete.NL interfaces are an\nold research topic that dates back to the 1970s [139],\nbut which historically has poor outcomes and thus little\nwidespread use [88].We acknowledge LLMs have im-\npressive results for this task but caution those who think\nNL will replace SQL.Nobody will write OLTP appli-\ncations using an NL, as most generate queries using\n\nORMs.For OLAP databases, NL could prove helpful\nin constructing the initial queries for exploratory anal-\nysis.However, these queries should be exposed to a\ndashboard-like reﬁnement tool since English and other\nNLs are rife with ambiguities and impreciseness.There is a reluctance to depend on current LLM tech-\nnology for decision-making inside the enterprise, espe-\ncially with ﬁnancial data.The biggest issue is that the\noutput of an LLM is not explainable to a human.Sec-\nond, LLM systems require more training data than “tra-\nditional” ML systems (e.g., random forests, Bayesian\nmodels).Companies generally cannot outsource the cre-\nation of training data for these models to unskilled peo-\nple.For these reasons, the uptake of LLMs for enter-\nprise data will be cautiously slow.Lastly, there is a considerable amount of recent re-\nsearch on using AI/ML to optimize the DBMSs [174].Examples include ML-oriented query optimizers [152,\n156], conﬁguration tuners [200, 204], and access meth-\nods [151, 193].Although such ML-assisted optimiza-\ntions are powerful tools to improve the performance of\nDBMSs, it does not obviate the need for high-quality\nsystems engineering.5 Conclusion\nWe predict that what goes around with databases will\ncontinue to come around in upcoming decades.Another\nwave of developers will claim that SQL and the RM are\ninsufﬁcient for emerging application domains.People\nwill then propose new query languages and data models\nto overcome these problems.There is tremendous value\nin exploring new ideas and concepts for DBMSs (it is\nwhere we get new features for SQL).The database re-\nsearch community and marketplace are more robust be-\ncause of it.However, we do not expect these new data\nmodels to supplant the RM.Another concern is the wasted effort of new projects\nreimplementing the same components that are not novel\nbut necessary to have a production-ready DBMS (e.g.,\nconﬁg handlers, parsers, buffer pools).To accelerate\nthe next generation of DBMSs, the community should\nfoster the development of open-source reusable compo-\nnents and services [112, 176].There are some efforts to-\nwards this goal, including for ﬁle formats (see Sec.3.3),\nquery optimization (e.g., Calcite [104], Orca [186]), and\nexecution engines (e.g., DataFusion [18], Velox [175]).We contend that the database community should strive\nfor a POSIX-like standard of DBMS internals to accel-\nerate interoperability.We caution developers to learn from history.In other\nwords, stand on the shoulders of those who came before\nand not on their toes.One of us will likely still be alive\nand out on bail in two decades, and thus fully expects to\nwrite a follow-up to this paper in 2044.32\n\nSIGMOD Record, June 2024 (Vol. 53, No.2)\n\n\fReferences\n\n[1] TeraData Forums.https://downloads.teradata.com/forum/\ndatabase/what-is-the-difference-between-a-ynet-and-\nbynet, September 2011.[2] Netezza TwinFin Architecture.https://www.iexpertify.com/\nlearn/netezza-twinfin-architecture/#.YYq5_S1h17Y,\nApril 2020.[3] Graph processing with sql server and azure sql database.https://docs.microsoft.com/en-us/sql/relational-\ndatabases/graphs/sql-graph-overview, 2021.[4] Georaster in oracle database.https://www.oracle.com/a/\n\ntech/docs/georaster-2021.pdf, mar 2021.[5] Apache Hudi. https://hudi.apache.org/, 2023.[6] Apache Iceberg. https://iceberg.apache.org/, 2023.[7] Oracle introduces integrated vector database to augment\ngenerative ai and dramatically increase developer produc-\nhttps://www.oracle.com/news/announcement/ocw-\ntivity.integrated-vector-database-augments-generative-ai-\n2023-09-19/, sep 2023.[8] Introducing vector search on rockset.https://rockset.com/\nblog/introducing-vector-search-on-rockset/, apr 2023.\nhttps://docs.aerospike.com/tools/aql,\n\n[9] Aerospike AQL.2024. [10] Apache AGE. https://age.apache.org, 2024.[11] Apache Arrow. https://arrow.apache.org, 2024.[12] BigchainDB. https://www.bigchaindb.com/, 2024.[13] Brytlyt. https://brytlyt.io/, 2024.[14] Apache Cassandra. https://cassandra.apache.org, 2024.[15] The Cassandra Query Language\n\n(CQL).https:\n\n//cassandra.apache.org/doc/latest/cassandra/cql/,\n2024.[16] ChatGPT Plugins. https://openai.com/blog/chatgpt-\n\nplugins, March 2024.[17] Clustrix. https://clustrix.com, 2024. [18] Apache Arrow DataFusion.https://arrow.apache.org/\n\nhaystack.readthedocs.io, 2024.[21] Dremio. https://dremio.com/, 2024.[22] Apache drill. https://drill.apache.org, 2024.[23] Elasticsearch. https://www.elastic.co, 2024.[24] FAISS – Facebook AI Similarity Search.ai.facebook.com/tools/faiss/, 2024.\n\nhttps://\n\n[25] Fluree.https://flur.ee/, 2024. [26] Apache Giraph.https://giraph.apache.org, 2024. [27] Graphlab.https://en.wikipedia.org/wiki/GraphLab, 2024.[28] Apache Hbase. https://hbase.apache.org, 2024.[29] The hdf5 library & ﬁle format.https://www.hdfgroup.org/\n\nsolutions/hdf5, 2024.[30] Apache Hive. https://hive.apache.org, 2024.[31] Informix extensions and datablade modules.https:\n\n//www.ibm.com/docs/en/informix-servers/12.10?topic=\ninformix-extensions-datablade-modules, 2024.[32] Janusgraph. https://janusgraph.org/, 2024.[33] Apache Kafka. https://kafka.apache.org/, 2024.[34] kdb+. https://kx.com/, 2024.[35] Kinetica. https://www.kinetica.com/, 2024.[36] LangChain. https://langchain.com, 2024.[37] LevelDB. https://github.com/google/leveldb, 2024.[38] Apache Lucene. https://lucene.apache.org, 2024.[39] Malloy - Experimental Language.looker-open-source/malloy, 2024.[40] Milvus. https://milvus.io/, 2024. [41] MongoDB.https://mongodb.com, 2024.\n\nhttps://github.com/\n\n[42] Mongodb – querying with sql.https://docs.mongodb.com/\n\ndatalake/admin/query-with-sql/, 2024.[43] MySQL\n\n–\n\nInnoDB Full-Text\n\nIndexes.https:\n\n//dev.mysql.com/doc/refman/8.0/en/innodb-fulltext-\nindex.html, 2024.[44] Neo4j. https://neo4j.com/, 2024. [45] Amazon Neptune.https://aws.amazon.com/neptune/, 2024.[46] Network Common Data Form (NetCDF).https://\n\nwww.unidata.ucar.edu/software/netcdf/, 2024.[47] Nuodb. https://nuodb.com, 2024.[48] Heavydb. https://www.heavy.ai, 2024.[49] openCypher. https://opencypher.org, 2024. [50] Oracle graph database.https://www.oracle.com/database/\n\ngraph/, 2024.\n\nlang.org/, 2024.[51] PGQL – Property Graph Query Language.https://pgql-\n\n[52] Oracle\n\nText.https://www.oracle.com/database/\n\ntechnologies/datawarehouse-bigdata/text.html, 2024.[53] Apache ORC. https://orc.apache.org/, 2024.[54] Paradigm4 platform overview.https://www.paradigm4.com/\n\ntechnology/scidb-platform-overview/, 2024.[55] Apache Parquet. https://parquet.apache.org/, 2024.[56] Partiql – sql-compatible access to relational, semi-structured,\n\nand nested data.https://partiql.org/, 2024. [57] Apache Phoenix.https://phoenix.apache.org, 2024.[58] Pinecone. https://www.pinecone.io/, 2024.[59] Apache Pinot. https://pinot.apache.org/, 2024.[60] PlanetScale. https://planetscale.com/, 2024.[61] Polars. https://www.pola.rs, 2024. –\n[62] PostgreSQL\n\nSearch.Text\n\nFull\n\nwww.postgresql.org/docs/current/textsearch.html,\n2024.\n\nhttps://\n\n[63] PrestoDB.https://prestodb.io/, 2024. [64] PRQL – A Proposal for a Better SQL.https://prql-\n\nlang.org/, 2024.[65] Amazon Quantum Ledger Database (QLDB).https://\n\n[67] Redis. https://redis.io/, 2024.[68] RocksDB. https://rocksdb.org, 2024.[69] Singestore. https://www.singlestore.com/, 2024.[70] Apache Solr. https://solr.apache.org/, 2024.[71] SQLite. https://www.sqlite.org, 2024.[72] Sql++ – the next-generation query language for managing json\ndata.https://www.couchbase.com/sqlplusplus, 2024.[73] Teradata – creating an array data\n\ntype.https:\n\n//docs.teradata.com/r/S0Fw2AVH8ff3MDA0wDOHlQ/\nun3kj~t3qMDO66LF4YXuiw, 2024.[74] Tigergraph. https://www.tigergraph.com/, 2024.[75] Tigergraph – gsql. https://www.tigergraph.com/gsql/,\n\n2024.[76] Tiledb. https://tiledb.com, 2024.[77] Trino. https://trino.io/, 2024.[78] Turi. http://turi.com/, 2024.[79] Vespa. https://vespa.ai/, 2024.[80] Vitess. https://vitess.io, 2024. [81] Vitesse Deepgreen DB.products/deepgreen-db/, 2024.\n\nhttps://www.vitessedata.com/\n\n[82] Project Voldemort.https://www.project-voldemort.com,\n\n2024.[83] Voltdb. https://www.voltactivedata.com/, 2024.[84] Weaviate. https://weaviate.io, 2024.[85] Dbc 1012. https://en.wikipedia.org/wiki/DBC_1012, 2024.[86] YugabyteDB. https://www.yugabyte.com/, 2024. [87] D. J. Abadi.Query Execution in Column-Oriented Database\n\nSystems.PhD thesis, MIT, 2008.\n\ndatafusion/, 2024.[19] Microsoft DiskANN. DiskANN, 2024. [20] Django\n\nHaystack.https://github.com/microsoft/\n\nhttps://django-\n\naws.amazon.com/qldb/, 2024.[66] The\n\nraster\nrasdaman\nwww.rasdaman.org, 2024.\n\narray\n\ndatabase.http://\n\nSIGMOD Record, June 2024 (Vol. 53, No.2)\n\n33\n\n\f[88] K. Affolter, K. Stockinger, and A. Bernstein.A compara-\ntive survey of recent natural language interfaces for databases.VLDB J., 28(5):793–819, 2019. doi: 10.1007/s00778-019-\n00567-8.[89] H. Ahmadi. In-memory query execution in google bigquery.https://cloud.google.com/blog/products/bigquery/in-\nmemory-query-execution-in-google-bigquery, Aug 2016.[90] A. Ailamaki, D. J. DeWitt, M. D. Hill, and M. Skounakis.Weaving relations for cache performance.In VLDB, volume 1,\npages 169–180, 2001. [91] G. Anadiotis.Open source postgresql on steroids: Swarm64\ndatabase acceleration software for performance improvement\nhttps://www.zdnet.com/article/open-\nand analytics.source-postgresql-on-steroids-swarm64-database-\nacceleration-software-for-performance-improvement-\nand-analytics/, apr 2023.[92] M. Armbrust, T. Das, L. Sun, B. Yavuz, S. Zhu, M. Murthy,\nJ. Torres, H. van Hovell, A. Ionescu, A. Łuszczak, et al.Delta\nlake: high-performance acid table storage over cloud object\nstores.Proceedings of the VLDB Endowment, 13(12):3411–\n3424, 2020.[93] M. Armbrust, A. Ghodsi, R. Xin, and M. Zaharia.Lakehouse:\na new generation of open platforms that unify data warehousing\nand advanced analytics.In Proceedings of CIDR, page 8, 2021.[94] N. Armenatzoglou, S. Basu, N. Bhanoori, M. Cai, N. Chainani,\nK. Chinta, V. Govindaraju, T. J.Green, M. Gupta, S. Hillig,\nE. Hotinger, Y. Leshinksy, J. Liang, M. McCreedy, F. Nagel,\nI. Pandis, P. Parchas, R. Pathak, O. Polychroniou, F. Rahman,\nG. Saxena, G. Soundararajan, S. Subramanian, and D. Terry.Amazon redshift re-invented. In Proceedings of the 2022 Inter-\nnational Conference on Management of Data, SIGMOD ’22,\npages 2205–2217, 2022. doi: 10.1145/3514221.3526045.[95] M. Aslett. How will the database incumbents respond to\n\nNoSQL and NewSQL?The 451 Group, April 2011. [96] M. Aslett.Ten years of NewSQL: Back to the future of dis-\ntributed relational databases.The 451 Group, June 2021. [97] S. Babu and P. Bizarro.Adaptive query processing in the look-\n\ning glass.In CIDR, pages 238–249, January 2005.[98] D. F. Bacon, N. Bales, N. Bruno, B. F. Cooper, A. Dickinson,\nA. Fikes, C. Fraser, A. Gubarev, M. Joshi, E. Kogan, A. Lloyd,\nS. Melnik, R. Rao, D. Shue, C. Taylor, M. van der Holst, and\nIn Pro-\nD. Woodford.Spanner: Becoming a sql system.ceedings of the 2017 ACM International Conference on Man-\nagement of Data, SIGMOD ’17, pages 331–343, 2017. doi:\n10.1145/3035918.3056103.[99] J. Baker, C. Bond, J. C. Corbett, J. Furman, A. Khorlin, J. Lar-\nson, J.-M. Leon, Y. Li, A. Lloyd, and V. Yushprakh.Megastore:\nProviding scalable, highly available storage for interactive ser-\nIn Proceedings of the Conference on Innovative Data\nvices.system Research (CIDR), pages 223–234, 2011.[100] N. Bakibayev, D. Olteanu, and J. Závodný.Fdb: A query en-\ngine for factorised relational databases. Proc.VLDB Endow., 5\n(11):1232–1243, jul 2012. doi: 10.14778/2350229.2350242. [101] S. Banon.Amazon: NOT OK - why we had to change Elas-\nhttps://www.elastic.co/blog/why-license-\n\ntic licensing.change-aws, jan 2021. [102] J. Barr.AQUA (Advanced Query Accelerator) –\nfor Your Amazon Redshift Queries.A Speed Boost\nhttps://aws.amazon.com/blogs/aws/new-aqua-advanced-\nquery-accelerator-for-amazon-redshift/, Apr 2021.[103] P. Baumann. A database array algebra for spatio-temporal data\nand beyond.In Next Generation Information Technologies and\nSystems, 4th International Workshop, NGITS’99, volume 1649\nof Lecture Notes in Computer Science, pages 76–93, 1999. doi:\n10.1007/3-540-48521-X_7.[104] E. Begoli, J. Camacho-Rodríguez, J. Hyde, M. J. Mior, and\nD. Lemire.Apache calcite: A foundational framework for\noptimized query processing over heterogeneous data sources.In Proceedings of the 2018 International Conference on Man-\nagement of Data, SIGMOD ’18, pages 221–230, 2018. doi:\n10.1145/3183713.3190662.[105] A. Behm, S. Palkar, U. Agarwal, T. Armstrong, D. Cashman,\nA. Dave, T. Greenstein, S. Hovsepian, R. Johnson, A. Sai Krish-\nnan, P. Leventis, A. Luszczak, P. Menon, M. Mokhtar, G. Pang,\nS. Paranjpye, G. Rahn, B. Samwel, T. van Bussel, H. van Hov-\nell, M. Xue, R. Xin, and M. Zaharia.Photon: A fast query\nengine for lakehouse systems.In Proceedings of the 2022 In-\nternational Conference on Management of Data, SIGMOD ’22,\npages 2326–2339, 2022. doi: 10.1145/3514221.3526054.[106] P. A. Boncz, M. Zukowski, and N. Nes.Monetdb/x100: Hyper-\n\npipelining query execution.In CIDR, pages 225–237, 2005. [107] H. Boral and D. J. DeWitt.Database machines: An idea whose\ntime passed?A critique of the future of database machines.pages 166–187, 1983. doi: 10.1007/978-3-642-69419-6\n_10.https://www.tbray.org/\nnov\n\n[108] T. Bray. AWS and Blockchain.ongoing/When/202x/2022/11/19/AWS-Blockchain,\n2019.\\\n\n[109] P. Carbone, A. Katsifodimos, S. Ewen, V. Markl, S. Haridi, and\nK. Tzoumas.Apache ﬂink: Stream and batch processing in a\nsingle engine.The Bulletin of the Technical Committee on Data\nEngineering, 38(4), 2015.[110] R. Cattell. Scalable sql and nosql data stores.SIGMOD Rec.,\n\n39:12–27, 2011. [111] F. Chang, J.Dean, S. Ghemawat, W. C. Hsieh, D. A. Wallach,\nM. Burrows, T. Chandra, A. Fikes, and R. E. Gruber.Bigtable:\nA distributed storage system for structured data.In Proceedings\nof the USENIX Symposium on Operating Systems Design and\nImplementation, OSDI ’06, pages 205–218, 2006.[112] S. Chaudhuri and G. Weikum.Rethinking database system ar-\nchitecture: Towards a self-tuning risc-style database system.In\nVLDB 2000, Proceedings of 26th International Conference on\nVery Large Data Bases, pages 1–10, 2000.[113] C. Chin. The rise and fall of the olap cube.https:\n\n//www.holistics.io/blog/the-rise-and-fall-of-the-\nolap-cube/, January 2020.[114] M. Chock, A. F. Cardenas, and A. Klinger.Database struc-\nture and manipulation capabilities of a picture database man-\nagement system (picdms).IEEE Transactions on Pattern Anal-\nysis and Machine Intelligence, PAMI-6(4):484–492, 1984. doi:\n10.1109/TPAMI.1984.4767553.[115] E. F. Codd. A relational model of data for large shared\ndata banks.Commun. ACM, 13(6):377–387, jun 1970. doi:\n10.1145/362384.362685.[116] E. F. Codd. Further normalization of the data base relational\nmodel.Research Report / RJ / IBM / San Jose, California,\nRJ909, 1971.[117] W. W. W. Consortium. Overview of sgml resources.https:\n\n//www.w3.org/MarkUp/SGML/, 2004.[118] W. W. W. Consortium. Extensible Markup Language (XML).https://www.w3.org/XML/, 2016. [119] J. C. Corbett, J.Dean, M. Epstein, A. Fikes, C. Frost, J. Furman,\nS. Ghemawat, A. Gubarev, C. Heiser, P. Hochschild, W. Hsieh,\nS. Kanthak, E. Kogan, H. Li, A. Lloyd, S. Melnik, D. Mwaura,\nD. Nagle, S. Quinlan, R. Rao, L. Rolig, M. S. Yasushi Saito,\nC. Taylor, R. Wang, and D. Woodford.Spanner: Google’s\nGlobally-Distributed Database.In OSDI, 2012. [120] A. Crotty, V. Leis, and A. Pavlo.Are you sure you want to use\nMMAP in your database management system?In Conference\non Innovative Data Systems Research. www.cidrdb.org, 2022.[121] B. Dageville, T. Cruanes, M. Zukowski, V. Antonov, A. Avanes,\nJ. Bock, J. Claybaugh, D. Engovatov, M. Hentschel, J. Huang,\nA. W. Lee, A. Motivala, A. Q. Munir, S. Pelley, P. Povinec,\nG. Rahn, S. Triantafyllis, and P. Unterbrunner.The snowﬂake\nIn Proceedings of the 2016 Inter-\nelastic data warehouse.national Conference on Management of Data, SIGMOD ’16,\npages 215–226, 2016. doi: 10.1145/2882903.2903741.[122] J. Dean and S. Ghemawat.MapReduce: Simpliﬁed data pro-\ncessing on large clusters.In 6th Symposium on Operating Sys-\ntems Design & Implementation (OSDI 04).USENIX Associa-\ntion, Dec. 2004.34\n\nSIGMOD Record, June 2024 (Vol.53, No. 2)\n\n\f[123] J. Dean and S. Ghemawat.Mapreduce: A ﬂexible data process-\n\ning tool.Commun. ACM, 53(1):72–77, Jan. 2010. [124] A. Dearmer.Storing apache hadoop data on the cloud - hdfs\nhttps://www.xplenty.com/blog/storing-apache-\n\nvs. s3.hadoop-data-cloud-hdfs-vs-s3/, November 2019.[125] G. DeCandia, D. Hastorun, M. Jampani, G. Kakulapati, A. Lak-\nshman, A. Pilchin, S. Sivasubramanian, P. Vosshall, and W. Vo-\ngels.Dynamo: Amazon’s highly available key-value store.SIGOPS Oper. Syst. Rev., 41(6):205–220, oct 2007.[126] A. Deutsch, N. Francis, A.Green, K. Hare, B. Li, L. Libkin,\nT. Lindaaker, V. Marsault, W. Martens, J. Michels, F. Murlak,\nS. Plantikow, P. Selmer, O. van Rest, H. Voigt, D. Vrgoˇc,\nM. Wu, and F. Zemke.Graph pattern matching in gql and\nIn Proceedings of the 2022 International Confer-\nsql/pgq.ence on Management of Data, SIGMOD ’22, pages 2246–2258,\n2022. doi: 10.1145/3514221.3526057.[127] D. DeWitt and J. Gray. Parallel database systems: The future\nof high performance database systems.Commun. ACM, 35(6):\n85–98, jun 1992. doi: 10.1145/129888.129894.[128] C. Diaconu, C. Freedman, E. Ismert, P. Larson, P. Mit-\ntal, R. Stonecipher, N. Verma, and M. Zwilling.Hekaton:\nIn Proceed-\nSQL server’s memory-optimized OLTP engine.ings of the ACM SIGMOD International Conference on Man-\ndoi: 10.1145/\nagement of Data, pages 1243–1254, 2013. 2463676.2463710.[129] M. Elhemali, N. Gallagher, N. Gordon, J. Idziorek, R. Krog,\nC. Lazier, E. Mo, A. Mritunjai, S. Perianayagam, T. Rath,\nS. Sivasubramanian, J. C. S. III, S. Sosothikul, D. Terry, and\nA. Vig.Amazon DynamoDB: A scalable, predictably perfor-\nmant, and fully managed NoSQL database service.In USENIX\nAnnual Technical Conference, pages 1037–1048, July 2022.[130] J. Fan, A. G. S. Raj, and J. M. Patel.The case against special-\nized graph analytics engines.In Seventh Biennial Conference\non Innovative Data Systems Research, CIDR, 2015.[131] B. Fitzpatrick. Distributed caching with memcached.Linux J.,\n\n2004(124):5, aug 2004. ISSN 1075–3583.[132] M. Freitag, M. Bandle, T. Schmidt, A. Kemper, and T. Neu-\nmann.Adopting worst-case optimal joins in relational database\nsystems. Proc.VLDB Endow., 13(12):1891–1904, jul 2020.\ndoi: 10.14778/3407790.3407797.[133] H. Fu, C. Liu, B. Wu, F. Li, J. Tan, and J. Sun.Catsql: To-\nwards real world natural language to sql applications. Proc.VLDB Endow., 16(6):1534–1547, feb 2023. doi: 10.14778/\n3583140.3583165.[134] S. Ghemawat, H. Gobioff, and S.-T. Leung.The google ﬁle\nsystem. SIGOPS Oper.Syst. Rev., 37(5):29–43, oct 2003.ISSN\n0163-5980. doi: 10.1145/1165389.945450. [135] J.Gray, A. Bosworth, A. Layman, and H. Pirahesh.Data\ncube: A relational aggregation operator generalizing group-by,\nIn Proceedings of the International\ncross-tab, and sub-total.Conference on Data Engineering, pages 152–159, 1996. doi:\n10.1109/ICDE.1996.492099.[136] S. Gupta, S. Rahnama, J. Hellings, and M. Sadoghi.Re-\nProc. silientdb: Global scale resilient blockchain fabric.10.14778/\nVLDB Endow., 13(6):868–883, 2020.3380750.3380757.\n\ndoi:\n\n[137] E. Hanson and A. Comet.Why Your Vector Database Should\nNot be a Vector Database.https://www.singlestore.com/\nblog/why-your-vector-database-should-not-be-a-\nvector-database/, April 2023.[138] G. Harrison. How WiredTiger Revolutionized MongoDB.https://www.dbta.com/Columns/MongoDB-Matters/How-\nWiredTiger-Revolutionized-MongoDB-145510.aspx,\n2021.\n\nmar\n\n[139] G. G. Hendrix, E. D. Sacerdoti, D. Sagalowicz, and J. Slocum.Developing a natural language interface to complex data. ACM\nTrans.Database Syst., 3(2):105–147, jun 1978. doi: 10.1145/\n320251.320253. [140] Y. Huai, A. Chauhan, A.Gates, G. Hagleitner, E. N. Hanson,\nO. O’Malley, J. Pandey, Y. Yuan, R. Lee, and X. Zhang.Major\ntechnical advancements in apache hive.In Proceedings of the\n2014 ACM SIGMOD international conference on Management\nof data, pages 1235–1246, 2014.[141] D. Huang, Q. Liu, Q. Cui, Z. Fang, X. Ma, F. Xu, L. Shen,\nL. Tang, Y. Zhou, M. Huang, W. Wei, C. Liu, J. Zhang,\nJ. Li, X. Wu, L. Song, R. Sun, S. Yu, L. Zhao, N. Cameron,\nL. Pei, and X. Tang.Tidb: A raft-based htap database. Proc.VLDB Endow., 13(12):3072–3084, aug 2020. doi: 10.14778/\n3415478.3415535.[142] K. E. Iverson. A Programming Language.John Wiley & Sons,\n\nInc., 1962. ISBN 0471430145.[143] A. Jindal, S. Madden, M. Castellanos, and M. Hsu.Graph ana-\nlytics using vertica relational database.In 2015 IEEE Interna-\ntional Conference on Big Data, pages 1191–1200, 2015.[144] R. Kallman, H. Kimura, J. Natkins, A. Pavlo, A. Rasin,\nS. Zdonik, E. P. C. Jones, S. Madden, M. Stonebraker, Y. Zhang,\nJ. Hugg, and D. J. Abadi.H-store: A high-performance, dis-\ntributed main memory transaction processing system.Proc. VLDB Endow., 1(2):1496–1499, aug 2008. doi: 10.14778/\n1454159.1454211.[145] A. Kane. pgvector. https://github.com/pgvector/pgvector,\n\n2024.[146] A. Kemper and T. Neumann.Hyper: A hybrid oltp&olap main\nmemory database system based on virtual memory snapshots.In Proceedings of the 27th International Conference on Data\nEngineering, pages 195–206.IEEE Computer Society, 2011.\ndoi: 10.1109/ICDE.2011.5767867.[147] T. Kersten, V. Leis, A. Kemper, T. Neumann, A. Pavlo, and\nP. Boncz.Everything you always wanted to know about com-\npiled and vectorized queries but were afraid to ask.Proc. VLDB Endow., 11(13):2209–2222, jan 2019. doi: 10.14778/\n3275366.3284966. [148] R. Kimball.The Data Warehouse Toolkit: Practical Techniques\nfor Building Dimensional Data Warehouses.John Wiley, 1996. [149] R. Kimball and K. Strehlo.Why decision support fails and how\n\nto ﬁx it.SIGMOD Rec., 24(3):92–97, 1995.[150] M. Kornacker, A. Behm, V. Bittorf, T. Bobrovytsky, C. Ching,\nA. Choi, J. Erickson, M. Grund, D. Hecht, M. Jacobs, I. Joshi,\nL. Kuff, D. Kumar, A. Leblang, N. Li, I. Pandis, H. Robinson,\nD. Rorke, S. Rus, J. Russell, D. Tsirogiannis, S. Wanderman-\nMilne, and M. Yoder.Impala: A modern, open-source sql en-\ngine for hadoop.In CIDR, 2015. [151] T. Kraska, A. Beutel, E. H. Chi, J.Dean, and N. Polyzotis. The\ncase for learned index structures.In Proceedings of the 2018\nInternational Conference on Management of Data, SIGMOD\n’18, pages 489–504, 2018. doi: 10.1145/3183713.3196909.[152] S. Krishnan, Z. Yang, K. Goldberg, J. Hellerstein, and I. Sto-\nica.Learning to optimize join queries with deep reinforcement\nlearning, 2018.URL https://arxiv.org/abs/1808.03196. [153] F. Lardinois.Aws gives open source the middle ﬁn-\nger.https://techcrunch.com/2019/01/09/aws-gives-open-\nsource-the-middle-finger/, jan 2019.[154] V. Leis, A. Gubichev, A. Mirchev, P. A. Boncz, A. Kemper,\nand T. Neumann.How good are query optimizers, really?doi: 10.14778/\nProc. VLDB Endow., 9(3):204–215, 2015.2850583.2850594. [155] D. Maier and B. Vance. A call to order.In Proceedings\nof the Twelfth ACM SIGACT-SIGMOD-SIGART Symposium\non Principles of Database Systems, pages 1–16, 1993. doi:\n10.1145/153850.153851.[156] R. Marcus, P. Negi, H. Mao, N. Tatbul, M. Alizadeh, and\nT. Kraska.Bao: Making learned query optimization practical.In Proceedings of the 2021 International Conference on Man-\nagement of Data, SIGMOD ’21, pages 1275–1288, 2021. doi:\n10.1145/3448016.3452838.[157] D. McDiarmid. Vector search with clickhouse.https://\nclickhouse.com/blog/vector-search-clickhouse-p2, May\n2023.SIGMOD Record, June 2024 (Vol.53, No. 2)\n\n35\n\n\f[158] C. McDonnell.The graph-relational database, deﬁned.https://www.edgedb.com/blog/the-graph-relational-\ndatabase-defined, March 2022.[159] W. McKinney et al. Data structures for statistical computing\nin python.In Proceedings of the 9th Python in Science Confer-\nence, volume 445, pages 51–56, 2010.[160] F. McSherry. Scalability! but at what cost?http:\n\n//www.frankmcsherry.org/graph/scalability/cost/2015/\n01/15/COST.html, January 2015.[161] S. Melnik, A. Gubarev, J. J.Long, G. Romer, S. Shivakumar,\nM. Tolton, and T. Vassilakis.Dremel: Interactive analysis of\nweb-scale datasets.Proc. VLDB Endow., 3(12):330–339, sep\n2010.ISSN 2150-8097. doi: 10.14778/1920841.1920886.[162] S. Melnik, A. Gubarev, J. J.Long, G. Romer, S. Shivakumar,\nM. Tolton, T. Vassilakis, H. Ahmadi, D. Delorey, S. Min, M. Pa-\nsumansky, and J. Shute.Dremel: A decade of interactive sql\nanalysis at web scale.Proc. VLDB Endow., 13(12):3461–3472,\naug 2020.ISSN 2150-8097. doi: 10.14778/3415478.3415568.[163] P. Menon, A. Ngom, T. C. Mowry, A. Pavlo, and L. Ma.Per-\nmutable compiled queries: Dynamically adapting compiled\nqueries without recompiling.Proc. VLDB Endow., 14(2):101–\n113, 2020. doi: 10.14778/3425879.3425882.[164] C. Metz. duce. google_caffeine_explained/, September 2010.Google search index splits with mapre-\nhttps://www.theregister.com/2010/09/09/\n\n[165] J. Michels, K. Hare, K. Kulkarni, C. Zuzarte, Z. H. Liu,\nB. Hammerschmidt, and F. Zemke.The new and improved sql:\n2016 standard.SIGMOD Rec., 47(2):51–60, dec 2018. doi:\n10.1145/3299887.3299897.[166] D. Misev and P. Baumann.Sql support for multidimen-\nsional arrays.Technical Report 34, Jacobs University, July\n2017.URL https://nbn-resolving.org/urn:nbn:de:gbv:\n579-opus-1007237.[167] F. Nargesian, E. Zhu, R. J. Miller, K. Q. Pu, and P. C. Arocena.Data lake management: Challenges and opportunities. Proc.VLDB Endow., 12(12):1986–1989, aug 2019. doi: 10.14778/\n3352063.3352116.[168] H. Q. Ngo, C. Ré, and A. Rudra.Skew strikes back: New\ndevelopments in the theory of join algorithms.SIGMOD Rec.,\n42(4):5–16, feb 2014. doi: 10.1145/2590989.2590991.[169] NVIDIA, P. Vingelmann, and F. H. Fitzek. Cuda toolkit.https:\n\n//developer.nvidia.com/cuda-toolkit, 2020.[170] M. A. Olson, K. Bostic, and M. I. Seltzer. Berkeley DB.In Pro-\nceedings of the FREENIX Track: 1999 USENIX Annual Tech-\nnical Conference, pages 183–191, 1999.[171] A. Pavlo and M. Aslett. What’s really new with newsql?SIG-\n\nMOD Record, 45(2):45–55, Sep 2016.[172] A. Pavlo, E. Paulson, A. Rasin, D. J. Abadi, D. J. DeWitt,\nS. Madden, and M. Stonebraker.A comparison of approaches\nto large-scale data analysis.In Proceedings of the ACM SIG-\nMOD International Conference on Management of Data, pages\n165–178, 2009.[173] A. Pavlo, G. Angulo, J. Arulraj, H. Lin, J. Lin, L. Ma, P. Menon,\nT. Mowry, M. Perron, I. Quah, S. Santurkar, A. Tomasic,\nS. Toor, D. V. Aken, Z. Wang, Y. Wu, R. Xian, and T. Zhang.In CIDR 2017,\nSelf-driving database management systems.Conference on Innovative Data Systems Research, 2017.[174] A. Pavlo, M. Butrovich, A. Joshi, L. Ma, P. Menon, D. V. Aken,\nL. Lee, and R. Salakhutdinov.External vs. internal: An essay\non machine learning agents for autonomous database manage-\nment systems.IEEE Data Eng. Bull., 42(2):32–46, 2019.[175] P. Pedreira, O. Erling, M. Basmanova, K. Wilfong, L. Sakka,\nK. Pai, W. He, and B. Chattopadhyay.Velox: Meta’s uniﬁed\nexecution engine. Proc.VLDB Endow., 15(12):3372–3384, aug\n2022. doi: 10.14778/3554821.3554829.[176] P. Pedreira, O. Erling, K. Karanasos, S. Schneider, W. McK-\ninney, S. R. Valluri, M. Zait, and J. Nadeau.The composable\ndata management system manifesto. Proc.VLDB Endow., 16\n(10):2679–2685, jun 2023. doi: 10.14778/3603581.3603604.[177] D. Petersohn, S. Macke, D. Xin, W. Ma, D. Lee, X. Mo,\nJ. E. Gonzalez,\nJ. M. Hellerstein, A. D. Joseph, and\nA. Parameswaran.Towards scalable dataframe systems. Proc.VLDB Endow., 13(12):2033–2046, jul 2020. doi: 10.14778/\n3407790.3407807.[178] D. Petkovic. SQL/JSON standard: Properties and deﬁciencies.doi: 10.1007/\n\nDatenbank-Spektrum, 17(3):277–287, 2017.\ns13222-017-0267-4. [179] D. Pritchett.BASE: An Acid Alternative:\n\nIn Partitioned\nDatabases, Trading Some Consistency for Availability Can\nLead to Dramatic Improvements in Scalability.ACM Queue,\n6(3):48–55, may 2008. doi: 10.1145/1394127.1394128.[180] M. Raasveldt and H. Mühleisen.Duckdb: An embeddable ana-\nlytical database.In Proceedings of the 2019 International Con-\nference on Management of Data, SIGMOD ’19, pages 1981–\n1984, 2019. doi: 10.1145/3299869.3320212.[181] M. Rocklin. Dask: Parallel computation with blocked algo-\nrithms and task scheduling.In Proceedings of the 14th Python\nin Science Conference, pages 130–136, 2015.[182] F. Rusu. Multidimensional array data management. Found.doi: 10.1561/\n\nTrends Databases, 12(2-3):69–220, 2023. 1900000069.[183] S. Sakr, A. Bonifati, H. Voigt, A. Iosup, K. Ammar, R. An-\ngles, W. Aref, M. Arenas, M. Besta, P. A. Boncz, K. Daudjee,\nE. D. Valle, S. Dumbrava, O. Hartig, B. Haslhofer, T. Hege-\nman, J. Hidders, K. Hose, A. Iamnitchi, V. Kalavri, H. Kapp,\nW. Martens, M. T. Özsu, E. Peukert, S. Plantikow, M. Ragab,\nM. R. Ripeanu, S. Salihoglu, C. Schulz, P. Selmer, J. F. Se-\nqueda, J. Shinavier, G. Szárnyas, R. Tommasini, A. Tumeo,\nA. Uta, A. L. Varbanescu, H.-Y.Wu, N. Yakovets, D. Yan, and\nE. Yoneki.The future is big graphs: A community view on\ngraph processing systems.Commun. ACM, 64(9):62–71, aug\n2021. doi: 10.1145/3434642.[184] G. Salton and M. E. Lesk.The smart automatic document re-\ntrieval systems–an illustration.Commun. ACM, 8(6):391–398,\njun 1965. doi: 10.1145/364955.364990.[185] R. Sethi, M. Traverso, D. Sundstrom, D. Phillips, W. Xie,\nY.Sun, N. Yegitbasi, H. Jin, E. Hwang, N. Shingte, and\nIn 2019 IEEE 35th\nC. Berner. Presto: Sql on everything.International Conference on Data Engineering (ICDE), pages\n1802–1813, 2019. doi: 10.1109/ICDE.2019.00196.[186] M. A. Soliman, L. Antova, V. Raghavan, A. El-Helw, Z. Gu,\nE. Shen, G. C. Caragea, C. Garcia-Alvarado, F. Rahman,\nM. Petropoulos, F. Waas, S. Narayanan, K. Krikellas, and\nR. Baldwin.Orca: a modular query optimizer architecture for\nIn Proceedings of the 2014 ACM SIGMOD Inter-\nbig data.national Conference on Management of Data, SIGMOD ’14,\npages 337–348, 2014. doi: 10.1145/2588555.2595637.[187] M. Stonebraker. The case for polystores.https://\n\nwp.sigmod.org/?p=1629, 2015.[188] M. Stonebraker and J. Hellerstein.Readings in Database Sys-\ntems, chapter What Goes Around Comes Around, pages 2–41. 4th edition, 2005.[189] M. Stonebraker, S. Madden, D. J. Abadi, S. Harizopoulos,\nN. Hachem, and P. Helland.The end of an architectural era:\n(it’s time for a complete rewrite).In Proceedings of the 33rd\nInternational Conference on Very Large Data Bases, VLDB\n’07, pages 1150–1160.VLDB Endowment, 2007. [190] M. Stonebraker, D. Abadi, D. J. DeWitt, S. Madden, E. Paulson,\nA. Pavlo, and A. Rasin.Mapreduce and parallel dbmss: Friends\nor foes?Commun. ACM, 53(1):64–71, Jan. 2010.[191] M. Stonebraker, P. Brown, A. Poliakov, and S. Raman. The ar-\nchitecture of scidb.In Scientiﬁc and Statistical Database Man-\nagement - 23rd International Conference, SSDBM 2011, vol-\nume 6809 of Lecture Notes in Computer Science, pages 1–16.Springer, 2011. doi: 10.1007/978-3-642-22351-8\n\n_1. [192] L. Sullivan.Performance issues in mid-sized relational\ndatabase machines.Master’s thesis, Rochester Institute of Tech-\nnology, 1989.\\\n\n36\n\nSIGMOD Record, June 2024 (Vol.53, No. 2)\n\n\f[193] Z. Sun, X. Zhou, and G. Li.Learned index: A comprehen-\nsive experimental evaluation. Proc.VLDB Endow., 16(8):1992–\n2004, apr 2023. doi: 10.14778/3594512.3594528.Google\n\ndumps mapreduce\n\n[194] Y.\n\nSverdlik.in\nfa-\nhttps:\n\nvor of new hyper-scale\n//www.datacenterknowledge.com/archives/2014/06/\n25/google-dumps-mapreduce-favor-new-hyper-scale-\nanalytics-system, June 2014.\n\nanalytics\n\nsystem.[195] R. Taft, I. Sharif, A. Matei, N. VanBenschoten, J. Lewis,\nT. Grieger, K. Niemi, A.Woods, A. Birzin, R. Poss, P. Bardea,\nA. Ranade, B. Darnell, B. Gruneir, J. Jaffray, L. Zhang, and\nP. Mattis.Cockroachdb: The resilient geo-distributed SQL\ndatabase.In Proceedings of the 2020 International Conference\non Management of Data, SIGMOD, pages 1493–1509, 2020.\ndoi: 10.1145/3318464.3386134.[196] D. ten Wolde, T. Singh, G. Szarnyas, and P. Boncz.Duckpgq:\nEfﬁcient property graph queries in an analytical\nrdbms.In CIDR, 2023. URL https://www.cidrdb.org/cidr2023/\npapers/p66-wolde.pdf.[197] A. Thusoo, J. S. Sarma, N. Jain, Z. Shao, P. Chakka, N. Zhang,\nS. Antony, H. Liu, and R. Murthy.Hive - a petabyte scale\ndata warehouse using hadoop.In International Conference on\nData Engineering (ICDE 2010), pages 996–1005, 2010. doi:\n10.1109/ICDE.2010.5447738.[198] E. Totoni, T. A. Anderson, and T. Shpeisman.HPAT: high per-\nformance analytics with scripting ease-of-use.In Proceedings\n\nof the International Conference on Supercomputing, pages 9:1–\n9:10, 2017. doi: 10.1145/3079079.3079099.[199] T. Trautmann. database. relational-database, September 2021.Understanding the document-relational\nhttps://fauna.com/blog/what-is-a-document-\n\n[200] D. Van Aken, A. Pavlo, G. J. Gordon, and B. Zhang.Auto-\nmatic database management system tuning through large-scale\nIn Proceedings of the 2017 ACM Inter-\nmachine learning.national Conference on Management of Data, SIGMOD ’17,\npages 1009–1024, 2017. doi: 10.1145/3035918.3064029.[201] M. Zaharia, R. S. Xin, P. Wendell, T. Das, M. Armbrust,\nA. Dave, X. Meng, J. Rosen, S. Venkataraman, M. J. Franklin,\nA. Ghodsi, J. Gonzalez, S. Shenker, and I. Stoica.Apache\nspark: a uniﬁed engine for big data processing.Commun. ACM,\n59(11):56–65, oct 2016. doi: 10.1145/2934664.[202] C. Zaniolo. The database language GEM.In SIGMOD, pages\n\n207–218, 1983.[203] X. Zeng, Y. Hui, J. Shen, A. Pavlo, W. McKinney, and\nH. Zhang.An empirical evaluation of columnar storage for-\nmats.Proc. VLDB Endow., 17(2):148–161, 2023.URL https:\n//www.vldb.org/pvldb/vol17/p148-zeng.pdf.[204] X. Zhang, Z. Chang, Y. Li, H. Wu, J. Tan, F. Li, and\nB. Cui.Facilitating database tuning with hyper-parameter op-\ntimization: a comprehensive experimental evaluation.Proc. VLDB Endow., 15(9):1808–1821, may 2022. doi: 10.14778/\n3538598.3538604.SIGMOD Record, June 2024 (Vol. 53, No. 2)\n\n37",
          "time": 3013.88649225235,
          "input_token_size": 26184,
          "output_token_size": 2,
          "original_provenance_id": 0
        }
      ],
      "metadata": {
        "question_id": "whatgoesaround-sigmodrec2024_64ef7c84",
        "created_at": 1750200233.6975517,
        "processing_time": 3019.9670560359955,
        "processing_complete": true,
        "max_provenances": 5
      },
      "source_info": {
        "selected_from": "test_outputs",
        "reason": "shorter_provenance",
        "sentence_count": 964,
        "provenance_count": 1,
        "alternatives": [
          {
            "source": "test_outputs",
            "sentence_count": 964,
            "provenance_count": 1,
            "has_answer": true
          }
        ],
        "selection_timestamp": "2025-06-17T16:48:52.925914"
      }
    }
  },
  {
    "6d9915f2": {
      "question": "How have alternative data models and query languages been integrated into SQL and RM systems?",
      "answer": "1. SQL has absorbed the best ideas from alternative data models and query languages.\n2. Many systems that started out rejecting the RM now expose a SQL-like interface.\n3. Document DBMSs have added SQL interfaces, such as DynamoDB PartiQL, Cassandra CQL, Aerospike AQL, and Couchbase SQL++.\n4. SQL:2023 introduced property graph queries (SQL/PGQ) for defining and traversing graphs in a RDBMS.\n5. RDBMSs have added vector indexes to support similarity searches.\n6. NoSQL vendors have added strong ACID transactions to their systems.\n7. SQL has incorporated JSON data types and operations since 2016.\n8. NewSQL systems emerged to provide scalability of NoSQL while maintaining SQL support.\n9. RDBMSs have integrated features from various non-relational systems, leading to a convergence of functionalities.",
      "provenance": [],
      "metadata": {
        "question_id": "whatgoesaround-sigmodrec2024_6d9915f2",
        "created_at": 1749627409.3980732,
        "processing_complete": false,
        "max_provenances": 5
      },
      "source_info": {
        "selected_from": "test_outputs_prev",
        "reason": "default",
        "sentence_count": 999999,
        "provenance_count": 0,
        "alternatives": [
          {
            "source": "test_outputs_prev",
            "sentence_count": 999999,
            "provenance_count": 0,
            "has_answer": true
          }
        ],
        "selection_timestamp": "2025-06-17T16:48:52.928766"
      }
    }
  },
  {
    "729cb51d": {
      "question": "Which databases cater to niche scientific applications according to the document?",
      "answer": "1. Array Databases\n2. Vector Databases\n3. Graph Databases",
      "provenance": [
        {
          "provenance_id": 0,
          "input_sentence_ids": [
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            11,
            12,
            13,
            14,
            15,
            16,
            17,
            18,
            19,
            20,
            21,
            22,
            23,
            24,
            25,
            26,
            27,
            28,
            29,
            30,
            31,
            32,
            33,
            34,
            35,
            36,
            37,
            38,
            39,
            40,
            41,
            42,
            43,
            44,
            45,
            46,
            47,
            48,
            49,
            50,
            51,
            52,
            53,
            54,
            55,
            56,
            57,
            58,
            59,
            60,
            61,
            62,
            63,
            64,
            65,
            66,
            67,
            68,
            69,
            70,
            71,
            72,
            73,
            74,
            75,
            76,
            77,
            78,
            79,
            80,
            81,
            82,
            83,
            84,
            85,
            86,
            87,
            88,
            89,
            90,
            91,
            92,
            93,
            94,
            95,
            96,
            97,
            98,
            99,
            100,
            101,
            102,
            103,
            104,
            105,
            106,
            107,
            108,
            109,
            110,
            111,
            112,
            113,
            114,
            115,
            116,
            117,
            118,
            119,
            120,
            121,
            122,
            123,
            124,
            125,
            126,
            127,
            128,
            129,
            130,
            131,
            132,
            133,
            134,
            135,
            136,
            137,
            138,
            139,
            140,
            141,
            142,
            143,
            144,
            145,
            146,
            147,
            148,
            149,
            150,
            151,
            152,
            153,
            154,
            155,
            156,
            157,
            158,
            159,
            160,
            161,
            162,
            163,
            164,
            165,
            166,
            167,
            168,
            169,
            170,
            171,
            172,
            173,
            174,
            175,
            176,
            177,
            178,
            179,
            180,
            181,
            182,
            183,
            184,
            185,
            186,
            187,
            188,
            189,
            190,
            191,
            192,
            193,
            194,
            195,
            196,
            197,
            198,
            199,
            200,
            201,
            202,
            203,
            204,
            205,
            206,
            207,
            208,
            209,
            210,
            211,
            212,
            213,
            214,
            215,
            216,
            217,
            218,
            219,
            220,
            221,
            222,
            223,
            224,
            225,
            226,
            227,
            228,
            229,
            230,
            231,
            232,
            233,
            234,
            235,
            236,
            237,
            238,
            239,
            240
          ],
          "provenance_ids": [
            17,
            21,
            22,
            23,
            24,
            27,
            28,
            29,
            42,
            46,
            47,
            48,
            57,
            58,
            59,
            60,
            61,
            62,
            63,
            64,
            65,
            67,
            68,
            69,
            70,
            71,
            72,
            73,
            74,
            75,
            76,
            77,
            78,
            80,
            82,
            83,
            85,
            86,
            87,
            94,
            95,
            96,
            97,
            98,
            99,
            100,
            101,
            102,
            103,
            104,
            105,
            107,
            108,
            109,
            113,
            126,
            130,
            131,
            132,
            137,
            138,
            139,
            140,
            141,
            147,
            148,
            149,
            150,
            151,
            159,
            160,
            161,
            162,
            163,
            164,
            165,
            166,
            168,
            169,
            170,
            171,
            172,
            173,
            175,
            176,
            177,
            178,
            179,
            180,
            181,
            182,
            183,
            184,
            185,
            186,
            188,
            189,
            190,
            191,
            192,
            194,
            204,
            205,
            206,
            207,
            208,
            209,
            210,
            211,
            212,
            222,
            226,
            227,
            228,
            229,
            230,
            231,
            233,
            235,
            237,
            240
          ],
          "provenance": "In this paper, we analyze the last 20 years of data\nmodel and query language activity in databases.Such systems are now on a path to conver-\ngence with RDBMSs.Meanwhile, SQL incorporated\nthe best query language ideas to expand its support for\nmodern applications and remain relevant.Although there has not been much change in RM\nfundamentals, there were dramatic changes in RM sys-\ntem implementations.The second part of this paper\ndiscusses advancements in DBMS architectures that ad-\ndress modern applications and hardware: (1) Columnar\nSystems, (2) Cloud Databases, (3) Data Lakes / Lake-\nhouses, (4) NewSQL Systems, (5) Hardware Acceler-\nators, and (6) Blockchain Databases.SIGMOD Record, June 2024 (Vol. 53, No.2)\n\n21\n\n\f2 Data Models & Query Languages\nFor our discussion here, we group the research and de-\nvelopment thrusts in data models and query languages\nfor database into eight categories.2.1 MapReduce Systems\nGoogle constructed their MapReduce (MR) framework\nin 2003 as a “point solution” for processing its periodic\ncrawl of the internet [122].This\ngenerated dueling articles from Google and the DBMS\ncommunity [123, 190].Furthermore, the use of higher-level\nlanguages (SQL) operating over partitioned tables has\nproven to be a good programming model [127].A lot of the discussion in the two papers was on imple-\nmentation issues (e.g., indexing, parsing, push vs. pull\nquery processing, failure recovery).From reading both\npapers a reasonable conclusion would be that there is a\nplace for both kinds of systems.The ﬁrst event left the three leading Hadoop vendors\n(Cloudera, Hortonworks, MapR) without a viable prod-\nuct to sell.Cloudera rebranded Hadoop to mean the\nwhole stack (application, Hadoop, HDFS).In a further\nsleight-of-hand, Cloudera built a RDBMS, Impala [150],\non top of HDFS but not using Hadoop.They realized\nthat Hadoop had no place as an internal interface in a\nSQL DBMS, and they conﬁgured it out of their stack\nwith software built directly on HDFS.In a similar vein,\nMapR built Drill [22] directly on HDFS, and Meta cre-\nated Presto [185] to replace Hive.Discussion: MR’s deﬁciencies were so signiﬁcant that\nit could not be saved despite the adoption and enthu-\nsiasm from the developer community.Hadoop died\nabout a decade ago, leaving a legacy of HDFS clusters\nin enterprises and a collection of companies dedicated\nto making money from them.At present, HDFS has\nlost its luster, as enterprises realize that there are better\ndistributed storage alternatives [124].Meanwhile, dis-\ntributed RDBMSs are thriving, especially in the cloud.MR also brought about\nthe revival of shared-disk architectures with disaggre-\ngated storage, subsequently giving rise to open-source\nﬁle formats and data lakes (see Sec.3.3). Hadoop’s lim-\nitations opened the door for other data processing plat-\nforms, namely Spark [201] and Flink [109].Both sys-\ntems started as better implementations of MR with pro-\ncedural APIs but have since added support for SQL [105].2.2 Key/Value Stores\nThe key/value (KV) data model is the simplest model\npossible.It represents the following binary relation:\n\n(key,value)\n\nA KV DBMS represents a collection of data as an as-\nsociative array that maps a key to a value.The value is\ntypically an untyped array of bytes (i.e., a blob), and the\nDBMS is unaware of its contents.It is up to the appli-\ncation to maintain the schema and parse the value into\nits corresponding parts.Most KV DBMSs only provide\nget/set/delete operations on a single value.In the 2000s, several new Internet companies built\ntheir own shared-nothing, distributed KV stores for nar-\n\n22\n\nSIGMOD Record, June 2024 (Vol.53, No. 2)\n\n\frowly focused applications, like caching and storing ses-\nsion data.For caching, Memcached [131] is the most\nwell-known example of this approach.Redis [67] mar-\nkets itself as a Memcached replacement, offering a more\nrobust query API with checkpointing support.Such systems offer higher and\nmore predictable performance, compared to a RDBMS,\nin exchange for more limited functionality.One of the ﬁrst stan-\ndalone embedded KV DBMSs was BerkeleyDB from\nthe early 1990s [170].Recent notable entries include\nGoogle’s LevelDB [37], which Meta later forked as\nRocksDB [68].Of course, it is dangerous to use a KV store\nin a complex application that requires more than just a\nbinary relation.If an application requires multiple ﬁelds\nin a record, then KV stores are probably a bad idea.Not\nonly must the application parse record ﬁelds, but also\nthere are no secondary indexes to retrieve other ﬁelds\nby value.Hence,\na RDBMS may be a better choice, even for simple appli-\ncations, because they offer a path forward if the applica-\ntion’s complexity increases.One new architecture trend from the last 20 years is\nusing embedded KV stores as the underlying storage\nmanager for full-featured DBMSs.Prior to this, build-\ning a new DBMS requires engineers to build a custom\nstorage manager that is natively integrated in the DBMS.MySQL was the ﬁrst DBMS to expose an API that al-\nlowed developers to replace its default KV storage man-\nager.This API enabled Meta to build RocksDB to re-\nplace InnoDB for its massive ﬂeet of MySQL databases.Similarly, MongoDB discarded their ill-fated MMAP-\nbased storage manager in favor of WiredTiger’s KV\nstore in 2014 [120, 138].Using an existing KV store\nallows developers to write a new DBMS in less time.2.3 Document Databases\n\nThe document data model represents a database as a col-\nlection of record objects.Each document contains a hier-\narchy of ﬁeld/value pairs, where each ﬁeld is identiﬁed\nby a name and a ﬁeld’s value can be either a scalar type,\nan array of values, or another document.The following\nexample in JSON is a customer document that contain\na nested list of purchase order records with their corre-\nsponding order items.{ “name”: “First Last”,\n\n“orders”: [ { “id”: 123, “items”: [...] },\n\n{ “id”: 456, “items”: [...] }, ] }\n\nDocument data models have been an active ﬁeld of\neffort for several decades.This has given rise to data\nformats like SGML [117] and XML [118].JSON has since overtaken XML to\nbecome the standard for data exchange for web-based\napplications.JavaScript’s popularity with developers\nand the accompanying ubiquity of JSON led several\ncompanies to create document-oriented systems that na-\ntively stored JSON in the 2000s.The inability of OLTP RDBMSs to scale in the 2000s\nushered in dozens of document DBMSs that marketed\nthemselves using the catchphrase NoSQL [110].Because of these two thrusts, NoSQL came to stand\nfor a DBMS that stored records or documents as JSON,\nsupported a lower-level API, and weak or non-existent\ntransactions.Many of the remaining NoSQL DBMSs also added\nstrongly consistent (ACID) transactions (see Sec. 3.4).But the SQL standard added a JSON data\ntype and operations in 2016 [165, 178].And as RDBMSs\ncontinue to improve their “ﬁrst ﬁve minutes” experience\nfor developers, we believe that the two kinds of systems\nwill soon be effectively identical.Higher level languages are almost universally pre-\nferred to record-at-a-time notations as they require less\ncode and provide greater data independence.Despite its name, column-family is not a columnar data\nmodel.Instead, it is a reduction of the document data\nmodel that only supports one level of nesting instead\nof arbitrary nesting; it is relation-like, but each record\ncan have optional attributes, and cells can contain an ar-\nray of values.The following example shows a mapping\nfrom user identiﬁer keys to JSON documents that con-\ntain each user’s varying proﬁle information:\n\nUser1000 → { “name”: “Alice”,\n\n“accounts”: [ 123, 456 ],\n“email”: \"xxx@xxx.edu” }\n\nUser1001 → { “name”: “Bob”,\n\n“email”: [ “yyy@yyy.org”, “zzz@zzz.com” ] }\n\nThe ﬁrst column-family model DBMS was Google’s\nBigTable in 2004 [111].Instead of adopting SQL and\n\nemerging columnar storage, Google used this data model\nwith procedural client APIs.Other systems adopted the\ncolumn-family model in an attempt to copy Google’s be-\nspoke implementation.Since then, Google rewrote Spanner to remove\nthe BigTable remnants [98], and it is now the primary\ndatabase for many of its internal applications.Several\nNoSQL DBMSs deprecated their proprietary APIs in\nfavor of SQL but still retain their non-relational archi-\ntectures.Cassandra replaced their Thrift-API with a\nSQL-like language called CQL [15], and HBase now\nrecommends the Phoenix SQL-frontend [57].Google\nstill offers BigTable as a cloud service, but the column-\nfamily model is a singular outlier with the same disad-\nvantages as NoSQL DBMSs.2.5 Text Search Engines\nText search engines have existed for a long time, begin-\nning with the seminal SMART system in the 1960s [184].They also have\nthe advantage of built-in transaction support.But their\nintegration of search operations in SQL is often clunky\nand differs between DBMSs.Discussion: Text data is inherently unstructured, which\nmeans that there is no data model.Instead, a DBMS\nseeks to extract structure (i.e., meta-data, indexes) from\ntext to avoid “needle in the haystack” sequential searches.24\n\nSIGMOD Record, June 2024 (Vol. 53, No.2)\n\n\fThere are three ways to manage text data in application.First, one can run multiple systems, such as Elastic-\nsearch for text and a RDBMS for operational workloads.This approach allows one to run “best of breed” systems\nbut requires additional ETL plumbing to push data from\nthe operational DBMS to the text DBMS and to rewrite\napplications to route queries to the right DBMSs based\non their needs.This latter issue is often over-\ncome by application frameworks that hide this complex-\nity (e.g., Django Haystack [20]).The third option is\na polystore system [187] that masks the system differ-\nences via middleware that exposes a uniﬁed interface.Inverted index-centric search engines based on SMART\n\nare used for exact match searches.These methods have\nbeen supplanted in recent years by similarity search us-\ning ML-generated embeddings (see Sec.2.7). 2.6 Array Databases\nThere are many areas of computing where arrays are an\nobvious data representation.We use the term “array” to\nmean all variants of them [182]: vectors (one dimen-\nsion – see Sec.For example, sci-\nentiﬁc surveys for geographic regions usually represent\ndata as a multi-dimensional array that stores sensor mea-\nsurements using location/time-based coordinates:\n\n(latitude, longitude, time, [vector-of-values])\n\nSeveral other data sets look like this, including ge-\nnomic sequencing and computational ﬂuid dynamics.Arrays are also the core of most ML data sets.Although array-based programming languages have\nexisted since the 1960s (APL [142]), the initial work\non array DBMSs began in the 1980s.PICDMS is con-\nsidered to be the ﬁrst DBMS implementation using the\narray data model [114].The two oldest array DBMSs\nstill being developed today are Rasdaman [66, 103] and\nkdb+ [34].Newer array DBMSs include SciDB [54,\n191] and TileDB [76].HDF5 [29] and NetCDF [46] are\npopular array ﬁle formats for scientiﬁc data.There are several system challenges with storing and\nquerying real-world array data sets.Foremost is that ar-\nray data does not always align to a regular integer grid;\nfor example, geospatial data is often split into irregular\nshapes.An application can map such grids to integer\ncoordinates via metadata describing this mapping [166].Hence, most applications maintain array and non-array\ndata together in a single database.Unlike row- or column-based DBMSs, querying array\ndata in arbitrary dimensions presents unique challenges.To overcome these challenges, array DBMSs must em-\n\nploy indexing and data structures to support efﬁcient\ntraversal across array dimensions.Discussion: Array DBMSs are a niche market that has\nonly seen adoption in speciﬁc verticals (we discuss vec-\ntor DBMSs next).For example, they have considerable\ntraction in the genomics space.HDF5 is popular for\nsatellite imagery and other gridded scientiﬁc data.But\nbusiness applications rarely use dedicated array DBMSs,\nwhich is necessary for any product to survive.The challenge that array DBMS vendors have al-\nways faced is that the SQL includes support for or-\ndered arrays as ﬁrst-class data types (despite this be-\ning against the original RM proposal [115]).2.7 Vector Databases\nSimilar to how the column-family model is a reduction\nof the document model, the vector data model simpliﬁes\nthe array data model to one-dimensional rasters.Given\nthat vector DBMSs are attracting the most attention\nright now from developers and investors (similar to the\nNoSQL fad), it is necessary to discuss them separately.The reason for this interest is because developers use\nthem to store single-dimension embeddings generated\nfrom AI tools.These tools use learned transformations\nto convert a record’s data (e.g., text, image) into a vec-\ntor representing its latent semantics.For example, one\ncould convert each Wikipedia article into an embedding\nusing Google BERT and store them in a vector database\nalong with additional article meta-data:\n\n(title, date, author, [embedding-vector])\n\nThe size of these embedding vectors range from 100s\nof dimensions for simple transformers to 1000s for high-\nend models; these sizes will obviously grow over time\nwith the development of more sophisticated models.SIGMOD Record, June 2024 (Vol. 53, No.2)\n\n25\n\n\fThe key difference between vector and array DBMSs\nis their query patterns.The former are designed for\nsimilarity searches that ﬁnd records whose vectors have\nthe shortest distance to a given input vector in a high-\ndimensional space.The input vector is another embed-\nding generated with the same transformer used to popu-\nlate the database.These sys-\ntems natively support transforming a record’s data into\nan embedding upon insertion using these tools and then\nuses the same transformation to convert a query’s in-\nput arguments into an embedding to perform the ANN\nsearch; other DBMSs require the application to perform\nthese transformations outside of the database.many of the major RDBMSs added vector indexes, in-\ncluding Oracle [7], SingleStore [137], Rockset [8], and\nClickhouse [157].Contrast this with JSON support in\nRDBMSs.NoSQL systems like MongoDB and CouchDB\nbecame popular in the late 2000s and it took several\nyears for RDBMSs to add support for it.There are two likely explanations for the quick pro-\nliferation of vector indexes.The ﬁrst is that similarity\nsearch via embeddings is such a compelling use case\nthat every DBMS vendor rushed out their version and\nannounced it immediately.The second is that the en-\ngineering effort to introduce a new index data structure\n\nis small enough that it did not take that much work for\nthe DBMS vendors to add vector search.We anticipate that vector DBMSs will undergo the\nsame evolution as document DBMSs by adding features\nto become more relational-like (e.g., SQL, transactions,\nextensibility).2.8 Graph Databases\nThere has been a lot of academic and industry interest\nin the last decade in graph databases [183].Social media applications inherently con-\ntain graph-oriented relationships (“likes”, “friend-of”).The two most prevalent approaches to represent graphs\nare (1) the resource description framework (RDF) and\n(2) property graphs [126].",
          "time": 171.08329510688782,
          "input_token_size": 34917,
          "output_token_size": 65,
          "original_provenance_id": 0
        }
      ],
      "metadata": {
        "question_id": "whatgoesaround-sigmodrec2024_729cb51d",
        "created_at": 1750200189.695278,
        "processing_time": 176.01513648033142,
        "processing_complete": true,
        "max_provenances": 5
      },
      "source_info": {
        "selected_from": "test_outputs",
        "reason": "shorter_provenance",
        "sentence_count": 241,
        "provenance_count": 1,
        "alternatives": [
          {
            "source": "test_outputs",
            "sentence_count": 241,
            "provenance_count": 1,
            "has_answer": true
          }
        ],
        "selection_timestamp": "2025-06-17T16:48:52.928766"
      }
    }
  },
  {
    "7a9e4378": {
      "question": "What are the limitations of blockchain databases in DBMSs as discussed in the document?",
      "answer": "1. Performance issues (about five orders of magnitude slower).\n2. Lack of compelling use cases outside of cryptocurrencies.\n3. Inefficiency in using a decentralized model for applications that can trust each other.\n4. Misleading claims of better security and auditability.\n5. Reliance on random participants on the Internet for data resiliency is not sensible.\n6. Major cryptocurrency exchanges operate on traditional RDBMSs, not blockchain systems.",
      "provenance": [],
      "metadata": {
        "question_id": "whatgoesaround-sigmodrec2024_7a9e4378",
        "created_at": 1749774446.8857331,
        "processing_complete": false,
        "max_provenances": 5
      },
      "source_info": {
        "selected_from": "test_outputs_prev1",
        "reason": "default",
        "sentence_count": 999999,
        "provenance_count": 0,
        "alternatives": [
          {
            "source": "test_outputs_prev1",
            "sentence_count": 999999,
            "provenance_count": 0,
            "has_answer": true
          }
        ],
        "selection_timestamp": "2025-06-17T16:48:52.928766"
      }
    }
  },
  {
    "7d4222ca": {
      "question": "What are NewSQL systems attempting to combine?",
      "answer": "NewSQL systems are attempting to combine the scalability of NoSQL systems with the relational model (RM) and ACID transactions of traditional database management systems (DBMSs).",
      "provenance": [
        {
          "provenance_id": 0,
          "input_sentence_ids": [
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            11,
            12,
            13,
            14,
            15,
            16,
            17,
            18,
            19,
            20,
            21,
            22,
            23,
            24,
            25,
            26,
            27,
            28,
            29,
            30,
            31,
            32,
            33,
            34,
            35,
            36,
            37,
            38,
            39,
            40,
            41,
            42,
            43,
            44,
            45,
            46,
            47,
            48,
            49,
            50,
            51,
            52,
            53,
            54,
            55,
            56,
            57,
            58,
            59,
            60,
            61,
            62,
            63,
            64,
            65,
            66,
            67,
            68,
            69,
            70,
            71,
            72,
            73,
            74,
            75,
            76,
            77,
            78,
            79,
            80,
            81,
            82,
            83,
            84,
            85,
            86,
            87,
            88,
            89,
            90,
            91,
            92,
            93,
            94,
            95,
            96,
            97,
            98,
            99,
            100,
            101,
            102,
            103,
            104,
            105,
            106,
            107,
            108,
            109,
            110,
            111,
            112,
            113,
            114,
            115,
            116,
            117,
            118,
            119,
            120,
            121,
            122,
            123,
            124,
            125,
            126,
            127,
            128,
            129,
            130,
            131,
            132,
            133,
            134,
            135,
            136,
            137,
            138,
            139,
            140,
            141,
            142,
            143,
            144,
            145,
            146,
            147,
            148,
            149,
            150,
            151,
            152,
            153,
            154,
            155,
            156,
            157,
            158,
            159,
            160,
            161,
            162,
            163,
            164,
            165,
            166,
            167,
            168,
            169,
            170,
            171,
            172,
            173,
            174,
            175,
            176,
            177,
            178,
            179,
            180,
            181,
            182,
            183,
            184,
            185,
            186,
            187,
            188,
            189,
            190,
            191,
            192,
            193,
            194,
            195,
            196,
            197,
            198,
            199,
            200,
            201,
            202,
            203,
            204,
            205,
            206,
            207,
            208,
            209,
            210,
            211,
            212,
            213,
            214,
            215,
            216,
            217,
            218,
            219,
            220,
            221,
            222,
            223,
            224,
            225,
            226,
            227,
            228,
            229,
            230,
            231,
            232,
            233,
            234,
            235,
            236,
            237,
            238,
            239,
            240,
            241,
            242,
            243,
            244,
            245,
            246,
            247,
            248,
            249,
            250,
            251,
            252,
            253,
            254,
            255,
            256,
            257,
            258,
            259,
            260,
            261,
            262,
            263,
            264,
            265,
            266,
            267,
            268,
            269,
            270,
            271,
            272,
            273,
            274,
            275,
            276,
            277,
            278,
            279,
            280,
            281,
            282,
            283,
            284,
            285,
            286,
            287,
            288,
            289,
            290,
            291,
            292,
            293,
            294,
            295,
            296,
            297,
            298,
            299,
            300,
            301,
            302,
            303,
            304,
            305,
            306,
            307,
            308,
            309,
            310,
            311,
            312,
            313,
            314,
            315,
            316,
            317,
            318,
            319,
            320,
            321,
            322,
            323,
            324,
            325,
            326,
            327,
            328,
            329,
            330,
            331,
            332,
            333,
            334,
            335,
            336,
            337,
            338,
            339,
            340,
            341,
            342,
            343,
            344,
            345,
            346,
            347,
            348,
            349,
            350,
            351,
            352,
            353,
            354,
            355,
            356,
            357,
            358,
            359,
            360,
            361,
            362,
            363,
            364,
            365,
            366,
            367,
            368,
            369,
            370,
            371,
            372,
            373,
            374,
            375,
            376,
            377,
            378,
            379,
            380,
            381,
            382,
            383,
            384,
            385,
            386,
            387,
            388,
            389,
            390,
            391,
            392,
            393,
            394,
            395,
            396,
            397,
            398,
            399,
            400,
            401,
            402,
            403,
            404,
            405,
            406,
            407,
            408,
            409,
            410,
            411,
            412,
            413,
            414,
            415,
            416,
            417,
            418,
            419,
            420,
            421,
            422,
            423,
            424,
            425,
            426,
            427,
            428,
            429,
            430,
            431,
            432,
            433,
            434,
            435,
            436,
            437,
            438,
            439,
            440,
            441,
            442,
            443,
            444,
            445,
            446,
            447,
            448,
            449,
            450,
            451,
            452,
            453,
            454,
            455,
            456,
            457,
            458,
            459,
            460,
            461,
            462,
            463,
            464,
            465,
            466,
            467,
            468,
            469,
            470,
            471,
            472,
            473,
            474,
            475,
            476,
            477,
            478,
            479,
            480,
            481
          ],
          "provenance_ids": [
            3,
            4,
            5,
            13,
            14,
            15,
            16,
            20,
            21,
            22,
            23,
            24,
            25,
            26,
            27,
            30,
            31,
            32,
            33,
            34,
            36,
            37,
            38,
            39,
            40,
            41,
            42,
            43,
            44,
            45,
            46,
            47,
            48,
            49,
            50,
            51,
            52,
            54,
            55,
            56,
            57,
            58,
            59,
            60,
            61,
            62,
            63,
            64,
            65,
            66,
            67,
            69,
            70,
            71,
            72,
            73,
            74,
            75,
            76,
            77,
            78,
            79,
            80,
            81,
            82,
            83,
            84,
            85,
            86,
            87,
            88,
            89,
            90,
            91,
            92,
            93,
            94,
            95,
            96,
            97,
            98,
            99,
            100,
            101,
            102,
            103,
            104,
            105,
            106,
            107,
            108,
            110,
            111,
            112,
            113,
            114,
            115,
            116,
            117,
            118,
            119,
            121,
            122,
            123,
            124,
            125,
            126,
            128,
            129,
            130,
            131,
            132,
            134,
            135,
            137,
            138,
            139,
            140,
            141,
            142,
            143,
            144,
            145,
            148,
            149,
            150,
            152,
            153,
            154,
            155,
            156,
            157,
            158,
            160,
            161,
            162,
            163,
            164,
            165,
            166,
            167,
            168,
            169,
            170,
            172,
            173,
            174,
            175,
            176,
            177,
            178,
            179,
            181,
            182,
            183,
            184,
            185,
            186,
            187,
            188,
            189,
            190,
            191,
            192,
            194,
            195,
            196,
            197,
            198,
            199,
            200,
            201,
            205,
            209,
            210,
            211,
            212,
            213,
            214,
            215,
            219,
            222,
            225,
            226,
            227,
            228,
            229,
            231,
            272,
            274,
            278,
            279,
            280,
            281,
            282,
            284,
            285,
            286,
            287,
            289,
            290,
            294,
            360,
            361,
            362,
            365,
            381,
            382,
            383
          ],
          "provenance": "We revisit this issue and argue that this same evolu-\ntion has continued since 2005.Once again there have\nbeen repeated efforts to replace either SQL or the RM.But the RM continues to be the dominant data model\nand SQL has been extended to capture the good ideas\nfrom others.But no start-up would willingly\nchoose to build a new application on IMS.A lot has happened in the world of databases since our\n2005 survey.During this time, DBMSs have expanded\nfrom their roots in business data processing and are now\nused for almost every kind of data.This led to the “Big\nData” era of the early 2010s and the current trend of inte-\ngrating machine learning (ML) with DBMS technology.Many sys-\ntems that started out rejecting the RM with much fanfare\n(think NoSQL) now expose a SQL-like interface for RM\ndatabases.Such systems are now on a path to conver-\ngence with RDBMSs.Meanwhile, SQL incorporated\nthe best query language ideas to expand its support for\nmodern applications and remain relevant.Although there has not been much change in RM\nfundamentals, there were dramatic changes in RM sys-\ntem implementations.The second part of this paper\ndiscusses advancements in DBMS architectures that ad-\ndress modern applications and hardware: (1) Columnar\nSystems, (2) Cloud Databases, (3) Data Lakes / Lake-\nhouses, (4) NewSQL Systems, (5) Hardware Acceler-\nators, and (6) Blockchain Databases.Some of these\nare profound changes to DBMS implementations, while\nothers are merely trends based on faulty premises.We ﬁnish with a discussion of important considera-\ntions for the next generation of DBMSs and provide part-\ning comments on our hope for the future of databases in\nboth research and commercial settings.SIGMOD Record, June 2024 (Vol. 53, No.At the time, Google had\nlittle expertise in DBMS technology, and they built MR\nto meet their crawl needs.In database terms, Map is a\nuser-deﬁned function (UDF) that performs computation\nand/or ﬁltering while Reduce is a GROUP BY operation.To a ﬁrst approximation, MR runs a single query:\n\nSELECT map() FROM crawl_table GROUP BY reduce()\n\nGoogle’s MR approach did not prescribe a speciﬁc\ndata model or query language.Rather, it was up to the\nMap and Reduce functions written in a procedural MR\nprogram to parse and decipher the contents of data ﬁles.There was a lot of interest in MR-based systems at\nother companies in the late 2000s.It ran on top of a distributed ﬁle system HDFS that was\na clone of the Google File System [134].Several start-\nups were formed to support Hadoop in the commercial\nmarketplace.We will use MR to refer to the Google\nimplementation and Hadoop to refer to the open-source\nversion.They are functionally similar.There was a controversy about the value of Hadoop\ncompared to RDBMSs designed for OLAP workloads.This culminated in a 2009 study that showed that data\nwarehouse DBMSs outperformed Hadoop [172].This\ngenerated dueling articles from Google and the DBMS\ncommunity [123, 190].Google argued that with care-\nful engineering, a MR system will beat DBMSs, and a\nuser does not have to load data with a schema before\nrunning queries on it.Thus, MR is better for “one shot”\ntasks, such as text processing and ETL operations.The\nDBMS community argued that MR incurs performance\nproblems due to its design that existing parallel DBMSs\nalready solved.Furthermore, the use of higher-level\nlanguages (SQL) operating over partitioned tables has\nproven to be a good programming model [127].A lot of the discussion in the two papers was on imple-\nmentation issues (e.g., indexing, parsing, push vs. pull\nquery processing, failure recovery).From reading both\npapers a reasonable conclusion would be that there is a\nplace for both kinds of systems.However, two changes\nin the technology world rendered the debate moot.The ﬁrst event was that the Hadoop technology and\nservices market cratered in the 2010s.Many enterprises\nspent a lot of money on Hadoop clusters, only to ﬁnd\nthere was little interest in this functionality.Developers\nfound it difﬁcult to shoehorn their application into the\n\nrestricted MR/Hadoop paradigm.The next event occurred eight months after the CACM\narticle when Google announced that they were moving\ntheir crawl processing from MR to BigTable [164].The\nreason was that Google needed to interactively update\nits crawl database in real time but MR was a batch sys-\ntem.Google ﬁnally announced in 2014 that MR had no\nplace in their technology stack and killed it off [194].The ﬁrst event left the three leading Hadoop vendors\n(Cloudera, Hortonworks, MapR) without a viable prod-\nuct to sell.Cloudera rebranded Hadoop to mean the\nwhole stack (application, Hadoop, HDFS).In a further\nsleight-of-hand, Cloudera built a RDBMS, Impala [150],\non top of HDFS but not using Hadoop.They realized\nthat Hadoop had no place as an internal interface in a\nSQL DBMS, and they conﬁgured it out of their stack\nwith software built directly on HDFS.In a similar vein,\nMapR built Drill [22] directly on HDFS, and Meta cre-\nated Presto [185] to replace Hive.Discussion: MR’s deﬁciencies were so signiﬁcant that\nit could not be saved despite the adoption and enthu-\nsiasm from the developer community.Hadoop died\nabout a decade ago, leaving a legacy of HDFS clusters\nin enterprises and a collection of companies dedicated\nto making money from them.At present, HDFS has\nlost its luster, as enterprises realize that there are better\ndistributed storage alternatives [124].Meanwhile, dis-\ntributed RDBMSs are thriving, especially in the cloud.Some aspects of MR system implementations related\nto scalability, elasticity, and fault tolerance are carried\nover into distributed RDBMSs.MR also brought about\nthe revival of shared-disk architectures with disaggre-\ngated storage, subsequently giving rise to open-source\nﬁle formats and data lakes (see Sec.Both sys-\ntems started as better implementations of MR with pro-\ncedural APIs but have since added support for SQL [105].2.2 Key/Value Stores\nThe key/value (KV) data model is the simplest model\npossible.It represents the following binary relation:\n\n(key,value)\n\nA KV DBMS represents a collection of data as an as-\nsociative array that maps a key to a value.The value is\ntypically an untyped array of bytes (i.e., a blob), and the\nDBMS is unaware of its contents.It is up to the appli-\ncation to maintain the schema and parse the value into\nits corresponding parts.Most KV DBMSs only provide\nget/set/delete operations on a single value.In the 2000s, several new Internet companies built\ntheir own shared-nothing, distributed KV stores for nar-\n\n22\n\nSIGMOD Record, June 2024 (Vol.53, No. 2)\n\n\frowly focused applications, like caching and storing ses-\nsion data.For caching, Memcached [131] is the most\nwell-known example of this approach.Redis [67] mar-\nkets itself as a Memcached replacement, offering a more\nrobust query API with checkpointing support.For more\npersistent application data, Amazon created the Dynamo\nKV store in 2007 [125].Such systems offer higher and\nmore predictable performance, compared to a RDBMS,\nin exchange for more limited functionality.The second KV DBMS category are embedded stor-\nage managers designed to run in the same address space\nas a higher-level application.One of the ﬁrst stan-\ndalone embedded KV DBMSs was BerkeleyDB from\nthe early 1990s [170].Recent notable entries include\nGoogle’s LevelDB [37], which Meta later forked as\nRocksDB [68].Discussion: Key/value stores provide a quick “out-of-\nthe-box” way for developers to store data, compared to\nthe more laborious effort required to set up a table in a\nRDBMS.Of course, it is dangerous to use a KV store\nin a complex application that requires more than just a\nbinary relation.If an application requires multiple ﬁelds\nin a record, then KV stores are probably a bad idea.Not\nonly must the application parse record ﬁelds, but also\nthere are no secondary indexes to retrieve other ﬁelds\nby value.Likewise, developers must implement joins or\nmulti-get operations in their application.To deal with these issues, several systems began as\na KV store and then morphed into a more feature-rich\nrecord store.Such systems replace the opaque value\nwith a semi-structured value, such as a JSON docu-\nment.Examples of this transition are Amazon’s Dy-\nnamoDB [129] and Aerospike [9].It is not trivial to re-\nengineer a KV store to make it support a complex data\nmodel, whereas RDBMSs easily emulates KV stores\nwithout any changes.If an application needs an embed-\nded DBMS, there are full-featured choices available to-\nday, including SQLite [71] and DuckDB [180].Hence,\na RDBMS may be a better choice, even for simple appli-\ncations, because they offer a path forward if the applica-\ntion’s complexity increases.One new architecture trend from the last 20 years is\nusing embedded KV stores as the underlying storage\nmanager for full-featured DBMSs.Prior to this, build-\ning a new DBMS requires engineers to build a custom\nstorage manager that is natively integrated in the DBMS.MySQL was the ﬁrst DBMS to expose an API that al-\nlowed developers to replace its default KV storage man-\nager.This API enabled Meta to build RocksDB to re-\nplace InnoDB for its massive ﬂeet of MySQL databases.Similarly, MongoDB discarded their ill-fated MMAP-\nbased storage manager in favor of WiredTiger’s KV\nstore in 2014 [120, 138].Using an existing KV store\nallows developers to write a new DBMS in less time.2.3 Document Databases\n\nThe document data model represents a database as a col-\nlection of record objects.Each document contains a hier-\narchy of ﬁeld/value pairs, where each ﬁeld is identiﬁed\nby a name and a ﬁeld’s value can be either a scalar type,\nan array of values, or another document.The following\nexample in JSON is a customer document that contain\na nested list of purchase order records with their corre-\nsponding order items.{ “name”: “First Last”,\n\n“orders”: [ { “id”: 123, “items”: [...] },\n\n{ “id”: 456, “items”: [...] }, ] }\n\nDocument data models have been an active ﬁeld of\neffort for several decades.This has given rise to data\nformats like SGML [117] and XML [118].Despite\nthe buzz with XML databases in the late 1990s, we\ncorrectly predicted in 2005 they would not supplant\nRDBMSs [188].JSON has since overtaken XML to\nbecome the standard for data exchange for web-based\napplications.JavaScript’s popularity with developers\nand the accompanying ubiquity of JSON led several\ncompanies to create document-oriented systems that na-\ntively stored JSON in the 2000s.There\nwere two marketing messages for such systems that res-\nonated with developers.First, SQL and joins are slow,\nand one should use a “faster” lower-level, record-at-a-\ntime interface.Second, ACID transactions are unneces-\nsary for modern applications, so the DBMS should only\nprovide weaker notion of it (i.e., BASE [179]).Because of these two thrusts, NoSQL came to stand\nfor a DBMS that stored records or documents as JSON,\nsupported a lower-level API, and weak or non-existent\ntransactions.There are dozens of such systems, of\nwhich MongoDB [41] is the most popular.Discussion: Document DBMSs are essentially the same\nas object-oriented DBMSs from the 1980s and XML\nDBMSs from the late 1990s.Proponents of document\nDBMSs make the same argument as their OO/XML\npredecessors: storing data as documents removes the\nimpedance mismatch between how application OO code\ninteracts with data and how relational databases store\nthem.They also claim that denormalizing entries into\nnested structures is better for performance because it re-\nmoves the need to dispatch multiple queries to retrieve\ndata related to a given object (i.e., “N+1 problem” in\nORMs).The problems with denormalization/prejoining\nis an old topic that dates back to the 1970s [116]: (1)\nif the join is not one-to-many, then there will be dupli-\ncated data, (2) prejoins are not necessarily faster than\njoins, and (3) there is no data independence.SIGMOD Record, June 2024 (Vol. 53, No.Notable examples include DynamoDB\nPartiQL [56], Cassandra CQL [15], Aerospike AQL [9],\nand Couchbase SQL++ [72].The last holdout was Mon-\ngoDB, but they added SQL for their Atlas service in\n2021 [42].Instead of supporting the SQL standard for\nDDL and DML operations, NoSQL vendors claim that\nthey support their own proprietary query language de-\nrived or inspired from SQL.For most applications, these\ndistinctions are without merit.Any language differences\nbetween SQL and NoSQL derivatives are mostly due to\nJSON extensions and maintenance operations.Many of the remaining NoSQL DBMSs also added\nstrongly consistent (ACID) transactions (see Sec. 3.4).Adding SQL and ACID to a NoSQL DBMS lowers\ntheir intellectual distance from RDBMSs.The main\ndifferences between them seems to be JSON support\nand the fact that NoSQL vendors allow “schema later”\ndatabases.But the SQL standard added a JSON data\ntype and operations in 2016 [165, 178].And as RDBMSs\ncontinue to improve their “ﬁrst ﬁve minutes” experience\nfor developers, we believe that the two kinds of systems\nwill soon be effectively identical.Higher level languages are almost universally pre-\nferred to record-at-a-time notations as they require less\ncode and provide greater data independence.But the optimizer remains the hardest part\nof building a DBMS.We suspect that this engineering\nburden was a contributing factor to why NoSQL systems\noriginally chose to not support SQL.Despite its name, column-family is not a columnar data\nmodel.Instead, it is a reduction of the document data\nmodel that only supports one level of nesting instead\nof arbitrary nesting; it is relation-like, but each record\ncan have optional attributes, and cells can contain an ar-\nray of values.The following example shows a mapping\nfrom user identiﬁer keys to JSON documents that con-\ntain each user’s varying proﬁle information:\n\nUser1000 → { “name”: “Alice”,\n\n“accounts”: [ 123, 456 ],\n“email”: \"xxx@xxx.edu” }\n\nUser1001 → { “name”: “Bob”,\n\n“email”: [ “yyy@yyy.org”, “zzz@zzz.com” ] }\n\nThe ﬁrst column-family model DBMS was Google’s\nBigTable in 2004 [111].Instead of adopting SQL and\n\nemerging columnar storage, Google used this data model\nwith procedural client APIs.Other systems adopted the\ncolumn-family model in an attempt to copy Google’s be-\nspoke implementation.Most notable are Cassandra [14]\nand HBase [28].They also copied BigTable’s limita-\ntions, including the lack of joins and secondary indexes.Discussion: All our comments in Sec.2.3 about the\ndocument model are also applicable here.Several\nNoSQL DBMSs deprecated their proprietary APIs in\nfavor of SQL but still retain their non-relational archi-\ntectures.Cassandra replaced their Thrift-API with a\nSQL-like language called CQL [15], and HBase now\nrecommends the Phoenix SQL-frontend [57].Google\nstill offers BigTable as a cloud service, but the column-\nfamily model is a singular outlier with the same disad-\nvantages as NoSQL DBMSs.SMART pioneered information retrieval and the vector\nspace model, now nearly universal in modern search\nengines, by tokenizing documents into a “bag of words”\nand then building full-text indexes (aka inverted indexes)\non those tokens to support queries on their contents.The\nsystem was also cognizant of noise words (e.g., “the”,\n“a”), synonyms (e.g., “The Big Apple” is a synonym for\n“New York City”), salient keywords, and distance (e.g.,\n“drought” often appears close to “climate change”).The leading text search systems today include Elastic-\nsearch [23] and Solr [70], which both use Lucene [38]\nas their internal search library.These systems offer\ngood support for storing and indexing text data but offer\nnone-to-limited transaction capabilities.This limitation\nmeans that a DBMS has to recover from data corruption\nby rebuilding the document index from scratch, which\nresults in signiﬁcant downtime.All the leading RDBMSs support full-text search in-\ndexes, including Oracle [52], Microsoft SQL Server [52],\nMySQL [43], and PostgreSQL [62].Their search fea-\ntures have improved recently and are generally on par\nwith the special-purpose systems above.But their\nintegration of search operations in SQL is often clunky\nand differs between DBMSs.Discussion: Text data is inherently unstructured, which\nmeans that there is no data model.Instead, a DBMS\nseeks to extract structure (i.e., meta-data, indexes) from\ntext to avoid “needle in the haystack” sequential searches.24\n\nSIGMOD Record, June 2024 (Vol. 53, No.2)\n\n\fThere are three ways to manage text data in application.First, one can run multiple systems, such as Elastic-\nsearch for text and a RDBMS for operational workloads.This approach allows one to run “best of breed” systems\nbut requires additional ETL plumbing to push data from\nthe operational DBMS to the text DBMS and to rewrite\napplications to route queries to the right DBMSs based\non their needs.Alternatively, one can run a RDBMS\nwith good text-search integration capabilities but with\ndivergent APIs in SQL.This latter issue is often over-\ncome by application frameworks that hide this complex-\nity (e.g., Django Haystack [20]).The third option is\na polystore system [187] that masks the system differ-\nences via middleware that exposes a uniﬁed interface.Inverted index-centric search engines based on SMART\n\nare used for exact match searches.2.7). 2.6 Array Databases\nThere are many areas of computing where arrays are an\nobvious data representation.We use the term “array” to\nmean all variants of them [182]: vectors (one dimen-\nsion – see Sec.2.7), matrices (two dimensions), and\ntensors (three or more dimensions).For example, sci-\nentiﬁc surveys for geographic regions usually represent\ndata as a multi-dimensional array that stores sensor mea-\nsurements using location/time-based coordinates:\n\n(latitude, longitude, time, [vector-of-values])\n\nSeveral other data sets look like this, including ge-\nnomic sequencing and computational ﬂuid dynamics.Arrays are also the core of most ML data sets.Although array-based programming languages have\nexisted since the 1960s (APL [142]), the initial work\non array DBMSs began in the 1980s.PICDMS is con-\nsidered to be the ﬁrst DBMS implementation using the\narray data model [114].The two oldest array DBMSs\nstill being developed today are Rasdaman [66, 103] and\nkdb+ [34].HDF5 [29] and NetCDF [46] are\npopular array ﬁle formats for scientiﬁc data.There are several system challenges with storing and\nquerying real-world array data sets.Foremost is that ar-\nray data does not always align to a regular integer grid;\nfor example, geospatial data is often split into irregular\nshapes.An application can map such grids to integer\ncoordinates via metadata describing this mapping [166].Hence, most applications maintain array and non-array\ndata together in a single database.Unlike row- or column-based DBMSs, querying array\ndata in arbitrary dimensions presents unique challenges.The difﬁculty arises from storing multi-dimensional ar-\nray data on a linear physical storage medium like a disk.To overcome these challenges, array DBMSs must em-\n\nploy indexing and data structures to support efﬁcient\ntraversal across array dimensions.Discussion: Array DBMSs are a niche market that has\nonly seen adoption in speciﬁc verticals (we discuss vec-\ntor DBMSs next).For example, they have considerable\ntraction in the genomics space.HDF5 is popular for\nsatellite imagery and other gridded scientiﬁc data.But\nbusiness applications rarely use dedicated array DBMSs,\nwhich is necessary for any product to survive.The challenge that array DBMS vendors have al-\nways faced is that the SQL includes support for or-\ndered arrays as ﬁrst-class data types (despite this be-\ning against the original RM proposal [115]).The ﬁrst\nproposal to extend the unordered set-based RM with\nordered rasters was in 1993 [155].An early exam-\nple of this was Illustra’s temporal (one-dimensional)\ndata plugin [31].SQL:1999 introduced limited sup-\nport for single-dimension, ﬁxed-length array data types.SQL:2003 expanded to support nested arrays without a\npredeﬁned maximum cardinality.Later entrants include\nOracle Georaster [4] and Teradata [73].Data cubes are\nspecial-purpose arrays [135], but columnar RDBMSs\nhave eclipsed them for OLAP workloads because of\ntheir better ﬂexibility and lower engineering costs [113].More recently, the SQL:2023 standard includes sup-\nport for true multi-dimensional arrays (SQL/MDA) that\nis heavily inspired by Rasdaman’s RQL [166].Given\nthat vector DBMSs are attracting the most attention\nright now from developers and investors (similar to the\nNoSQL fad), it is necessary to discuss them separately.SIGMOD Record, June 2024 (Vol. 53, No.2)\n\n25\n\n\fThe key difference between vector and array DBMSs\nis their query patterns.The former are designed for\nsimilarity searches that ﬁnd records whose vectors have\nthe shortest distance to a given input vector in a high-\ndimensional space.The input vector is another embed-\nding generated with the same transformer used to popu-\nlate the database.Unlike array DBMSs, applications do\nnot use vector DBMSs to search for matches at an off-\nset in a vector nor extract slices across multiple vectors.Instead, the dominant use case is this similarity search.To avoid brute force scans for ﬁnding the most sim-\nilar records, vector DBMSs build indexes to accelerate\napproximate nearest neighbor (ANN) searches.Text search engines,\nincluding Elasticsearch [23], Solr [70], and Vespa [79],\nexpanded their APIs to support vector search.These sys-\ntems natively support transforming a record’s data into\nan embedding upon insertion using these tools and then\nuses the same transformation to convert a query’s in-\nput arguments into an embedding to perform the ANN\nsearch; other DBMSs require the application to perform\nthese transformations outside of the database.After LLMs became “mainstream” with ChatGPT in\nlate 2022, it took less than one year for several RDBMSs\nIn 2023,\nto add their own vector search extensions.many of the major RDBMSs added vector indexes, in-\ncluding Oracle [7], SingleStore [137], Rockset [8], and\nClickhouse [157].Contrast this with JSON support in\nRDBMSs.NoSQL systems like MongoDB and CouchDB\nbecame popular in the late 2000s and it took several\nyears for RDBMSs to add support for it.There are two likely explanations for the quick pro-\nliferation of vector indexes.The second is that the en-\ngineering effort to introduce a new index data structure\n\nis small enough that it did not take that much work for\nthe DBMS vendors to add vector search.This\ntrend will continue with further improvements in worst-\ncase optimal joins [132, 168] and factorized execution\nalgorithms [100] for graph queries in RDBMSs.Speciﬁcally:\n\n•\n\nMapReduce Systems: They died years ago and are,\nat best, a legacy technology at present.The differences\nbetween the two kinds of systems have diminished\nover time and should become nearly indistinguish-\nable in the future.Column-Family Systems: These remain a niche\nmarket.Without Google, this paper would not be\ntalking about this category.Text Search Engines: These systems are used for\ntext ﬁelds in a polystore architecture.It would be\nvaluable if RDBMSs had a better story for search so\nthese would not have to be a separate product.They may become more important because\nRDBMSs cannot efﬁciently store and analyze arrays\ndespite new SQL/MDA enhancements.Vector Databases: They are single-purpose DBMSs\nwith indexes to accelerate nearest-neighbor search.RM DBMSs should soon provide native support for\nthese data structures and search methods using their\nextendable type system that will render such special-\nized databases unnecessary.Graph Databases: OLTP graph applications will\nbe largely served by RDBMSs.RDBMSs will provide graph-centric\nAPIs on top of SQL or via extensions.We do not ex-\npect specialized graph DBMSs to be a large market.Others provide a\nnon-SQL veneer over a RDBMS (e.g., PRQL [64], Mal-\nloy [39]).The latter is crucial\nas the last decade has shown that data scientists and ML\npractitioners typically use Python-based notebooks that\nuse Panda’s DataFrame API [159] to access data instead\nof SQL.Several projects leverage DBMS methods to\noptimize DataFrame processing, including Dask [181],\nPolars [61], Modin [177], and Bodo [198].Instead of using DBMS-speciﬁc proprietary ﬁle for-\nmats or inefﬁcient text-based ﬁles (e.g., CSV, JSON),\napplications write data to data lakes using open-source,\ndisk-resident ﬁle formats [203].Apache Arrow [11] is a similar\nbinary format for exchanging in-memory data between\nsystems.But the\nexisting RDBMSs (especially open-source ones) were\nnot able to (natively) scale across multiple machines.In\nresponse, NewSQL systems arrived in the early 2010s\nseeking to provide the scalability of NoSQL systems for\nOLTP workloads while still supporting SQL [95, 171].In other words, these new systems sought to achieve the\nsame scalability of NoSQL DBMSs from the 2000s but\nstill keep the RM and ACID transactions of the legacy\nDBMSs from the 1990s.",
          "time": 381.9245276451111,
          "input_token_size": 27653,
          "output_token_size": 87,
          "original_provenance_id": 0
        }
      ],
      "metadata": {
        "question_id": "whatgoesaround-sigmodrec2024_7d4222ca",
        "created_at": 1750200211.7019918,
        "processing_time": 392.2506949901581,
        "processing_complete": true,
        "max_provenances": 5
      },
      "source_info": {
        "selected_from": "test_outputs",
        "reason": "shorter_provenance",
        "sentence_count": 482,
        "provenance_count": 1,
        "alternatives": [
          {
            "source": "test_outputs",
            "sentence_count": 482,
            "provenance_count": 1,
            "has_answer": true
          }
        ],
        "selection_timestamp": "2025-06-17T16:48:52.929770"
      }
    }
  },
  {
    "8e2869b7": {
      "question": "What are the challenges faced by hardware accelerators such as FPGAs and GPUs in DBMSs as mentioned in the document?",
      "answer": "1. Integration challenges with existing DBMS architectures.\n2. Limited support for in-memory data processing.\n3. High costs associated with custom hardware development.\n4. Difficulty in achieving widespread adoption due to the need for DBMS vendor support.\n5. Performance bottlenecks when data does not fit in GPU memory.\n6. Lack of compelling use cases outside of major cloud vendors.",
      "provenance": [],
      "metadata": {
        "question_id": "whatgoesaround-sigmodrec2024_8e2869b7",
        "created_at": 1749774375.3728151,
        "processing_complete": false,
        "max_provenances": 5
      },
      "source_info": {
        "selected_from": "test_outputs_prev1",
        "reason": "default",
        "sentence_count": 999999,
        "provenance_count": 0,
        "alternatives": [
          {
            "source": "test_outputs_prev1",
            "sentence_count": 999999,
            "provenance_count": 0,
            "has_answer": true
          }
        ],
        "selection_timestamp": "2025-06-17T16:48:52.929770"
      }
    }
  },
  {
    "901f8517": {
      "question": "Where is Andrew Pavlo affiliated, according to the document?",
      "answer": "Carnegie Mellon University",
      "provenance": [
        {
          "provenance_id": 0,
          "input_sentence_ids": [
            0,
            1,
            2
          ],
          "provenance_ids": [
            0
          ],
          "provenance": "What Goes Around Comes Around... And Around...\n\nMichael Stonebraker\nMassachusetts Institute of Technology\nstonebraker@csail.mit.edu\n\nAndrew Pavlo\nCarnegie Mellon University\npavlo@cs.cmu.edu\n\nABSTRACT\nTwo decades ago, one of us co-authored a paper com-\nmenting on the previous 40 years of data modelling re-\nsearch and development [188].",
          "time": 8.406928300857544,
          "input_token_size": 30013,
          "output_token_size": 43,
          "original_provenance_id": 0
        }
      ],
      "metadata": {
        "question_id": "whatgoesaround-sigmodrec2024_901f8517",
        "created_at": 1749870184.298652,
        "processing_time": 23.816184043884277,
        "processing_complete": true,
        "max_provenances": 5
      },
      "source_info": {
        "selected_from": "test_outputs_prev1",
        "reason": "shorter_provenance",
        "sentence_count": 3,
        "provenance_count": 1,
        "alternatives": [
          {
            "source": "test_outputs_prev1",
            "sentence_count": 3,
            "provenance_count": 1,
            "has_answer": true
          }
        ],
        "selection_timestamp": "2025-06-17T16:48:52.929770"
      }
    }
  },
  {
    "912fd789": {
      "question": "What are the evolving roles of SQL in modern DBMSs as discussed in the document?",
      "answer": "1. SQL has absorbed the best ideas from alternative approaches.\n2. SQL has been extended to capture good ideas from other systems.\n3. Many systems that initially rejected SQL now expose a SQL-like interface.\n4. SQL incorporated the best query language ideas to expand its support for modern applications.\n5. SQL has added support for JSON data types and operations.\n6. SQL:2023 includes support for true multi-dimensional arrays (SQL/MDA).\n7. SQL/PGQ introduced property graph queries for defining and traversing graphs in a RDBMS.\n8. RDBMSs are adding vector indexes to support similarity searches.",
      "provenance": [],
      "metadata": {
        "question_id": "whatgoesaround-sigmodrec2024_912fd789",
        "created_at": 1749870235.2907753,
        "processing_complete": false,
        "max_provenances": 5
      },
      "source_info": {
        "selected_from": "test_outputs_prev1",
        "reason": "default",
        "sentence_count": 999999,
        "provenance_count": 0,
        "alternatives": [
          {
            "source": "test_outputs_prev1",
            "sentence_count": 999999,
            "provenance_count": 0,
            "has_answer": true
          }
        ],
        "selection_timestamp": "2025-06-17T16:48:52.930771"
      }
    }
  },
  {
    "98762242": {
      "question": "What are the key strengths and weaknesses of the various data models and system architectures discussed in the document?",
      "answer": "**Key Strengths and Weaknesses of Data Models and System Architectures:**\n\n1. **MapReduce Systems:**\n   - Strengths: Scalability, flexibility for one-shot tasks, no need for schema before queries.\n   - Weaknesses: Performance issues compared to RDBMS, limited to batch processing, ultimately phased out.\n\n2. **Key/Value Stores:**\n   - Strengths: Simple data model, high performance for specific tasks, quick setup.\n   - Weaknesses: Limited functionality, no support for complex queries, requires application-level schema management.\n\n3. **Document Databases:**\n   - Strengths: Flexibility in data representation, better alignment with object-oriented programming.\n   - Weaknesses: Similar issues as object-oriented DBMS, performance concerns with denormalization, SQL integration challenges.\n\n4. **Column-Family Databases:**\n   - Strengths: Efficient for specific use cases, can handle optional attributes and arrays.\n   - Weaknesses: Limited functionality compared to RDBMS, lack of joins and secondary indexes.\n\n5. **Text Search Engines:**\n   - Strengths: Effective for full-text search, good indexing capabilities.\n   - Weaknesses: Limited transaction support, potential downtime during data corruption recovery.\n\n6. **Array Databases:**\n   - Strengths: Specialized for multi-dimensional data, effective in scientific applications.\n   - Weaknesses: Niche market, limited adoption in business applications, SQL support challenges.\n\n7. **Vector Databases:**\n   - Strengths: Optimized for similarity searches, integration with AI tools.\n   - Weaknesses: Single-purpose design, may become redundant as RDBMSs adopt similar features.\n\n8. **Graph Databases:**\n   - Strengths: Efficient for traversing relationships, specialized query capabilities.\n   - Weaknesses: Can be simulated with RDBMS, performance issues compared to optimized SQL queries.\n\n9. **Columnar Systems:**\n   - Strengths: Superior performance for OLAP workloads, effective data compression.\n   - Weaknesses: Transition from row-based systems can be complex.\n\n10. **Cloud Databases:**\n    - Strengths: Scalability, elasticity, and cost-effectiveness.\n    - Weaknesses: Dependency on network performance, potential security concerns.\n\n11. **Data Lakes / Lakehouses:**\n    - Strengths: Flexibility in data storage, support for diverse workloads.\n    - Weaknesses: Governance and integrity challenges, query optimization difficulties.\n\n12. **NewSQL Systems:**\n    - Strengths: Scalability with ACID compliance, modern architecture.\n    - Weaknesses: Limited adoption due to existing systems being sufficient.\n\n13. **Hardware Accelerators:**\n    - Strengths: Potential for performance improvements.\n    - Weaknesses: High integration costs, limited use cases outside cloud environments.\n\n14. **Blockchain Databases:**\n    - Strengths: Immutability and decentralized trust.\n    - Weaknesses: Inefficiency, high performance costs, limited practical applications outside cryptocurrencies.",
      "provenance": [],
      "metadata": {
        "question_id": "whatgoesaround-sigmodrec2024_98762242",
        "created_at": 1749627452.718753,
        "processing_complete": false,
        "max_provenances": 5
      },
      "source_info": {
        "selected_from": "test_outputs_prev",
        "reason": "default",
        "sentence_count": 999999,
        "provenance_count": 0,
        "alternatives": [
          {
            "source": "test_outputs_prev",
            "sentence_count": 999999,
            "provenance_count": 0,
            "has_answer": true
          }
        ],
        "selection_timestamp": "2025-06-17T16:48:52.931301"
      }
    }
  },
  {
    "9adecc26": {
      "question": "What is the primary data model that remains dominant according to the document?",
      "answer": "Relational model (RM)",
      "provenance": [
        {
          "provenance_id": 0,
          "input_sentence_ids": [
            3,
            4,
            5,
            6
          ],
          "provenance_ids": [
            4,
            5
          ],
          "provenance": "Once again there have\nbeen repeated efforts to replace either SQL or the RM.But the RM continues to be the dominant data model\nand SQL has been extended to capture the good ideas\nfrom others.",
          "time": 7.505713701248169,
          "input_token_size": 29860,
          "output_token_size": 52,
          "original_provenance_id": 0
        },
        {
          "provenance_id": 1,
          "input_sentence_ids": [
            0,
            1,
            2
          ],
          "provenance_ids": [
            0,
            1
          ],
          "provenance": "What Goes Around Comes Around... And Around...\n\nMichael Stonebraker\nMassachusetts Institute of Technology\nstonebraker@csail.mit.edu\n\nAndrew Pavlo\nCarnegie Mellon University\npavlo@cs.cmu.edu\n\nABSTRACT\nTwo decades ago, one of us co-authored a paper com-\nmenting on the previous 40 years of data modelling re-\nsearch and development [188].That paper demonstrated\nthat the relational model (RM) and SQL are the prevail-\ning choice for database management systems (DBMSs),\ndespite efforts to replace either them.",
          "time": 9.442878484725952,
          "input_token_size": 30035,
          "output_token_size": 58,
          "original_provenance_id": 1
        }
      ],
      "metadata": {
        "question_id": "whatgoesaround-sigmodrec2024_9adecc26",
        "created_at": 1750200138.9134142,
        "processing_time": 16.198359966278076,
        "processing_complete": true,
        "max_provenances": 5
      },
      "source_info": {
        "selected_from": "test_outputs",
        "reason": "shorter_provenance",
        "sentence_count": 7,
        "provenance_count": 2,
        "alternatives": [
          {
            "source": "test_outputs",
            "sentence_count": 7,
            "provenance_count": 2,
            "has_answer": true
          }
        ],
        "selection_timestamp": "2025-06-17T16:48:52.931772"
      }
    }
  },
  {
    "a059b89a": {
      "question": "Who are some of the notable authors referenced in the document?",
      "answer": "Michael Stonebraker  \nAndrew Pavlo",
      "provenance": [
        {
          "provenance_id": 0,
          "input_sentence_ids": [
            0,
            1,
            2
          ],
          "provenance_ids": [
            0
          ],
          "provenance": "What Goes Around Comes Around... And Around...\n\nMichael Stonebraker\nMassachusetts Institute of Technology\nstonebraker@csail.mit.edu\n\nAndrew Pavlo\nCarnegie Mellon University\npavlo@cs.cmu.edu\n\nABSTRACT\nTwo decades ago, one of us co-authored a paper com-\nmenting on the previous 40 years of data modelling re-\nsearch and development [188].",
          "time": 8.749829053878784,
          "input_token_size": 30013,
          "output_token_size": 72,
          "original_provenance_id": 0
        }
      ],
      "metadata": {
        "question_id": "whatgoesaround-sigmodrec2024_a059b89a",
        "created_at": 1749870220.5991669,
        "processing_time": 49.464343786239624,
        "processing_complete": true,
        "max_provenances": 5
      },
      "source_info": {
        "selected_from": "test_outputs_prev1",
        "reason": "shorter_provenance",
        "sentence_count": 3,
        "provenance_count": 1,
        "alternatives": [
          {
            "source": "test_outputs_prev1",
            "sentence_count": 3,
            "provenance_count": 1,
            "has_answer": true
          }
        ],
        "selection_timestamp": "2025-06-17T16:48:52.931772"
      }
    }
  },
  {
    "a5256e6e": {
      "question": "What type of hardware has the pursuit of accelerators for DBMSs shifted towards?",
      "answer": "FPGAs, GPUs",
      "provenance": [
        {
          "provenance_id": 0,
          "input_sentence_ids": [
            406,
            407,
            408,
            409,
            410,
            411,
            412,
            413,
            414,
            415,
            416,
            417,
            418,
            419,
            420
          ],
          "provenance_ids": [
            411
          ],
          "provenance": "Instead of building custom hardware for DBMSs, the\nlast 20 years have been about using commodity hard-\nware (FPGAs, GPUs) to accelerate queries.",
          "time": 10.137890100479126,
          "input_token_size": 29104,
          "output_token_size": 50,
          "original_provenance_id": 0
        }
      ],
      "metadata": {
        "question_id": "whatgoesaround-sigmodrec2024_a5256e6e",
        "created_at": 1750200219.0451891,
        "processing_time": 16.235374927520752,
        "processing_complete": true,
        "max_provenances": 5
      },
      "source_info": {
        "selected_from": "test_outputs",
        "reason": "shorter_provenance",
        "sentence_count": 15,
        "provenance_count": 1,
        "alternatives": [
          {
            "source": "test_outputs",
            "sentence_count": 15,
            "provenance_count": 1,
            "has_answer": true
          }
        ],
        "selection_timestamp": "2025-06-17T16:48:52.932802"
      }
    }
  },
  {
    "a5b9c164": {
      "question": "What system did Google transition to after MapReduce?",
      "answer": "BigTable",
      "provenance": [
        {
          "provenance_id": 0,
          "input_sentence_ids": [
            52,
            53,
            54,
            55
          ],
          "provenance_ids": [
            54
          ],
          "provenance": "The next event occurred eight months after the CACM\narticle when Google announced that they were moving\ntheir crawl processing from MR to BigTable [164].",
          "time": 8.036856889724731,
          "input_token_size": 30218,
          "output_token_size": 21,
          "original_provenance_id": 0
        }
      ],
      "metadata": {
        "question_id": "whatgoesaround-sigmodrec2024_a5b9c164",
        "created_at": 1749870191.7740307,
        "processing_time": 27.23067831993103,
        "processing_complete": true,
        "max_provenances": 5
      },
      "source_info": {
        "selected_from": "test_outputs_prev1",
        "reason": "shorter_provenance",
        "sentence_count": 4,
        "provenance_count": 1,
        "alternatives": [
          {
            "source": "test_outputs_prev1",
            "sentence_count": 4,
            "provenance_count": 1,
            "has_answer": true
          }
        ],
        "selection_timestamp": "2025-06-17T16:48:52.932802"
      }
    }
  },
  {
    "a5ee93f5": {
      "question": "Which company developed Dynamo, a key-value store mentioned in the document?",
      "answer": "Amazon",
      "provenance": [
        {
          "provenance_id": 0,
          "input_sentence_ids": [
            120,
            121,
            122,
            123,
            124,
            125,
            126,
            127,
            128,
            129,
            130,
            131,
            132,
            133,
            134,
            135,
            136,
            137,
            138,
            139,
            140,
            141,
            142,
            143,
            144,
            145,
            146,
            147,
            148,
            149,
            150,
            151,
            152,
            153,
            154,
            155,
            156,
            157,
            158,
            159,
            160,
            161,
            162,
            163,
            164,
            165,
            166,
            167,
            168,
            169,
            170,
            171,
            172,
            173,
            174,
            175,
            176,
            177,
            178,
            179,
            180,
            181,
            182,
            183,
            184,
            185,
            186,
            187,
            188,
            189,
            190,
            191,
            192,
            193,
            194,
            195,
            196,
            197,
            198,
            199,
            200,
            201,
            202,
            203,
            204,
            205,
            206,
            207,
            208,
            209,
            210,
            211,
            212,
            213,
            214,
            215,
            216,
            217,
            218,
            219,
            220,
            221,
            222,
            223,
            224,
            225,
            226,
            227,
            228,
            229,
            230,
            231,
            232,
            233,
            234,
            235,
            236,
            237,
            238,
            239,
            240
          ],
          "provenance_ids": [
            120,
            122,
            123,
            125,
            126,
            128,
            129,
            130,
            131,
            132,
            133,
            134,
            135,
            136,
            137,
            138,
            139,
            140,
            141,
            142,
            143,
            144,
            145,
            146,
            147,
            149,
            150,
            151,
            153,
            154,
            155,
            156,
            157,
            158,
            159,
            160,
            161,
            165,
            166,
            167,
            168,
            169,
            170,
            171,
            172,
            173,
            174,
            175,
            177,
            178,
            179,
            181,
            182,
            183,
            184,
            185,
            186,
            187,
            188,
            189,
            190,
            191,
            192,
            193,
            194,
            195,
            196,
            197,
            198,
            199,
            200,
            201,
            202,
            203,
            204,
            205,
            206,
            207,
            208,
            209,
            210,
            211,
            212,
            213,
            214,
            215,
            216,
            217,
            218,
            219,
            220,
            221,
            222,
            223,
            224,
            225,
            226,
            227,
            228,
            229,
            230,
            231,
            232,
            233,
            234,
            235,
            236,
            237,
            238,
            239,
            240
          ],
          "provenance": "2)\n\n23\n\n\fDespite strong protestations that SQL was terrible, by\nthe end of the 2010s, almost every NoSQL DBMS added\na SQL interface.The last holdout was Mon-\ngoDB, but they added SQL for their Atlas service in\n2021 [42].Instead of supporting the SQL standard for\nDDL and DML operations, NoSQL vendors claim that\nthey support their own proprietary query language de-\nrived or inspired from SQL.Any language differences\nbetween SQL and NoSQL derivatives are mostly due to\nJSON extensions and maintenance operations.Many of the remaining NoSQL DBMSs also added\nstrongly consistent (ACID) transactions (see Sec. 3.4).Adding SQL and ACID to a NoSQL DBMS lowers\ntheir intellectual distance from RDBMSs.The main\ndifferences between them seems to be JSON support\nand the fact that NoSQL vendors allow “schema later”\ndatabases.But the SQL standard added a JSON data\ntype and operations in 2016 [165, 178].And as RDBMSs\ncontinue to improve their “ﬁrst ﬁve minutes” experience\nfor developers, we believe that the two kinds of systems\nwill soon be effectively identical.Higher level languages are almost universally pre-\nferred to record-at-a-time notations as they require less\ncode and provide greater data independence.Although\nwe acknowledge that the ﬁrst SQL optimizers were slow\nand ineffective, they have improved immensely in the\nlast 50 years.But the optimizer remains the hardest part\nof building a DBMS.We suspect that this engineering\nburden was a contributing factor to why NoSQL systems\noriginally chose to not support SQL.2.4 Column-Family Databases\nThere is another category of NoSQL systems that uses\na data model called column-family (aka wide-column).Despite its name, column-family is not a columnar data\nmodel.Instead, it is a reduction of the document data\nmodel that only supports one level of nesting instead\nof arbitrary nesting; it is relation-like, but each record\ncan have optional attributes, and cells can contain an ar-\nray of values.The following example shows a mapping\nfrom user identiﬁer keys to JSON documents that con-\ntain each user’s varying proﬁle information:\n\nUser1000 → { “name”: “Alice”,\n\n“accounts”: [ 123, 456 ],\n“email”: \"xxx@xxx.edu” }\n\nUser1001 → { “name”: “Bob”,\n\n“email”: [ “yyy@yyy.org”, “zzz@zzz.com” ] }\n\nThe ﬁrst column-family model DBMS was Google’s\nBigTable in 2004 [111].Instead of adopting SQL and\n\nemerging columnar storage, Google used this data model\nwith procedural client APIs.Other systems adopted the\ncolumn-family model in an attempt to copy Google’s be-\nspoke implementation.Most notable are Cassandra [14]\nand HBase [28].They also copied BigTable’s limita-\ntions, including the lack of joins and secondary indexes.Discussion: All our comments in Sec.2.3 about the\ndocument model are also applicable here.In the early\n2010s, Google built RDBMSs on top of BigTable, in-\ncluding MegaStore [99] and the ﬁrst version of Span-\nner.Since then, Google rewrote Spanner to remove\nthe BigTable remnants [98], and it is now the primary\ndatabase for many of its internal applications.Cassandra replaced their Thrift-API with a\nSQL-like language called CQL [15], and HBase now\nrecommends the Phoenix SQL-frontend [57].Google\nstill offers BigTable as a cloud service, but the column-\nfamily model is a singular outlier with the same disad-\nvantages as NoSQL DBMSs.2.5 Text Search Engines\nText search engines have existed for a long time, begin-\nning with the seminal SMART system in the 1960s [184].The\nsystem was also cognizant of noise words (e.g., “the”,\n“a”), synonyms (e.g., “The Big Apple” is a synonym for\n“New York City”), salient keywords, and distance (e.g.,\n“drought” often appears close to “climate change”).The leading text search systems today include Elastic-\nsearch [23] and Solr [70], which both use Lucene [38]\nas their internal search library.These systems offer\ngood support for storing and indexing text data but offer\nnone-to-limited transaction capabilities.This limitation\nmeans that a DBMS has to recover from data corruption\nby rebuilding the document index from scratch, which\nresults in signiﬁcant downtime.All the leading RDBMSs support full-text search in-\ndexes, including Oracle [52], Microsoft SQL Server [52],\nMySQL [43], and PostgreSQL [62].Their search fea-\ntures have improved recently and are generally on par\nwith the special-purpose systems above.They also have\nthe advantage of built-in transaction support.But their\nintegration of search operations in SQL is often clunky\nand differs between DBMSs.Discussion: Text data is inherently unstructured, which\nmeans that there is no data model.First, one can run multiple systems, such as Elastic-\nsearch for text and a RDBMS for operational workloads.This approach allows one to run “best of breed” systems\nbut requires additional ETL plumbing to push data from\nthe operational DBMS to the text DBMS and to rewrite\napplications to route queries to the right DBMSs based\non their needs.Alternatively, one can run a RDBMS\nwith good text-search integration capabilities but with\ndivergent APIs in SQL.This latter issue is often over-\ncome by application frameworks that hide this complex-\nity (e.g., Django Haystack [20]).The third option is\na polystore system [187] that masks the system differ-\nences via middleware that exposes a uniﬁed interface.Inverted index-centric search engines based on SMART\n\nare used for exact match searches.These methods have\nbeen supplanted in recent years by similarity search us-\ning ML-generated embeddings (see Sec.2.7). 2.6 Array Databases\nThere are many areas of computing where arrays are an\nobvious data representation.We use the term “array” to\nmean all variants of them [182]: vectors (one dimen-\nsion – see Sec.2.7), matrices (two dimensions), and\ntensors (three or more dimensions).For example, sci-\nentiﬁc surveys for geographic regions usually represent\ndata as a multi-dimensional array that stores sensor mea-\nsurements using location/time-based coordinates:\n\n(latitude, longitude, time, [vector-of-values])\n\nSeveral other data sets look like this, including ge-\nnomic sequencing and computational ﬂuid dynamics.Although array-based programming languages have\nexisted since the 1960s (APL [142]), the initial work\non array DBMSs began in the 1980s.PICDMS is con-\nsidered to be the ﬁrst DBMS implementation using the\narray data model [114].The two oldest array DBMSs\nstill being developed today are Rasdaman [66, 103] and\nkdb+ [34].HDF5 [29] and NetCDF [46] are\npopular array ﬁle formats for scientiﬁc data.There are several system challenges with storing and\nquerying real-world array data sets.Foremost is that ar-\nray data does not always align to a regular integer grid;\nfor example, geospatial data is often split into irregular\nshapes.An application can map such grids to integer\ncoordinates via metadata describing this mapping [166].Hence, most applications maintain array and non-array\ndata together in a single database.Unlike row- or column-based DBMSs, querying array\ndata in arbitrary dimensions presents unique challenges.The difﬁculty arises from storing multi-dimensional ar-\nray data on a linear physical storage medium like a disk.To overcome these challenges, array DBMSs must em-\n\nploy indexing and data structures to support efﬁcient\ntraversal across array dimensions.Discussion: Array DBMSs are a niche market that has\nonly seen adoption in speciﬁc verticals (we discuss vec-\ntor DBMSs next).For example, they have considerable\ntraction in the genomics space.HDF5 is popular for\nsatellite imagery and other gridded scientiﬁc data.But\nbusiness applications rarely use dedicated array DBMSs,\nwhich is necessary for any product to survive.No ma-\njor cloud provider offers a hosted array DBMS service,\nmeaning they do not see a sizable market.The challenge that array DBMS vendors have al-\nways faced is that the SQL includes support for or-\ndered arrays as ﬁrst-class data types (despite this be-\ning against the original RM proposal [115]).The ﬁrst\nproposal to extend the unordered set-based RM with\nordered rasters was in 1993 [155].An early exam-\nple of this was Illustra’s temporal (one-dimensional)\ndata plugin [31].SQL:1999 introduced limited sup-\nport for single-dimension, ﬁxed-length array data types.SQL:2003 expanded to support nested arrays without a\npredeﬁned maximum cardinality.Later entrants include\nOracle Georaster [4] and Teradata [73].Data cubes are\nspecial-purpose arrays [135], but columnar RDBMSs\nhave eclipsed them for OLAP workloads because of\ntheir better ﬂexibility and lower engineering costs [113].More recently, the SQL:2023 standard includes sup-\nport for true multi-dimensional arrays (SQL/MDA) that\nis heavily inspired by Rasdaman’s RQL [166].This\nupdate allows SQL to represent arrays with arbitrary\nIn effect,\ndimensions using integer-based coordinates.this allows data cubes to exist in a SQL framework, but\ncolumnar DBMSs now dominate this market.2.7 Vector Databases\nSimilar to how the column-family model is a reduction\nof the document model, the vector data model simpliﬁes\nthe array data model to one-dimensional rasters.Given\nthat vector DBMSs are attracting the most attention\nright now from developers and investors (similar to the\nNoSQL fad), it is necessary to discuss them separately.The reason for this interest is because developers use\nthem to store single-dimension embeddings generated\nfrom AI tools.These tools use learned transformations\nto convert a record’s data (e.g., text, image) into a vec-\ntor representing its latent semantics.For example, one\ncould convert each Wikipedia article into an embedding\nusing Google BERT and store them in a vector database\nalong with additional article meta-data:\n\n(title, date, author, [embedding-vector])\n\nThe size of these embedding vectors range from 100s\nof dimensions for simple transformers to 1000s for high-\nend models; these sizes will obviously grow over time\nwith the development of more sophisticated models.SIGMOD Record, June 2024 (Vol. 53, No.2)\n\n25\n\n\fThe key difference between vector and array DBMSs\nis their query patterns.The former are designed for\nsimilarity searches that ﬁnd records whose vectors have\nthe shortest distance to a given input vector in a high-\ndimensional space.The input vector is another embed-\nding generated with the same transformer used to popu-\nlate the database.Unlike array DBMSs, applications do\nnot use vector DBMSs to search for matches at an off-\nset in a vector nor extract slices across multiple vectors.Instead, the dominant use case is this similarity search.To avoid brute force scans for ﬁnding the most sim-\nilar records, vector DBMSs build indexes to accelerate\napproximate nearest neighbor (ANN) searches.Appli-\ncations issue queries with predicates on both the em-\nbedding index and non-embedding attributes (i.e., meta-\ndata).The DBMS then chooses whether to use the non-\nembedding predicate on records before (pre-ﬁlter) or af-\nter (post-ﬁlter) the vector search.There are dozens of new DBMSs in this emerging\ncategory, with Pinecone [58], Milvus [40], and Weav-\niate [84] as the leading systems.Text search engines,\nincluding Elasticsearch [23], Solr [70], and Vespa [79],\nexpanded their APIs to support vector search.Other\nDBMSs rebranded themselves as vector databases to\njump on the bandwagon, such as Kdb+ [34].One compelling feature of vector DBMSs is that\nthey provide better integration with AI tools (e.g., Chat-\nGPT [16], LangChain [36]) than RDBMSs.These sys-\ntems natively support transforming a record’s data into\nan embedding upon insertion using these tools and then\nuses the same transformation to convert a query’s in-\nput arguments into an embedding to perform the ANN\nsearch; other DBMSs require the application to perform\nthese transformations outside of the database.Discussion: Unlike array DBMSs that require a cus-\ntomized storage manager and execution engine to sup-\nport efﬁcient operations on multi-dimensional data, vec-\ntor DBMSs are essentially document-oriented DBMSs\nwith specialized ANN indexes.Such indexes are a fea-\nture, not the foundation of a new system architecture.After LLMs became “mainstream” with ChatGPT in\nlate 2022, it took less than one year for several RDBMSs\nIn 2023,\nto add their own vector search extensions.many of the major RDBMSs added vector indexes, in-\ncluding Oracle [7], SingleStore [137], Rockset [8], and\nClickhouse [157].Contrast this with JSON support in\nRDBMSs.NoSQL systems like MongoDB and CouchDB\nbecame popular in the late 2000s and it took several\nyears for RDBMSs to add support for it.There are two likely explanations for the quick pro-\nliferation of vector indexes.The ﬁrst is that similarity\nsearch via embeddings is such a compelling use case\nthat every DBMS vendor rushed out their version and\nannounced it immediately.The second is that the en-\ngineering effort to introduce a new index data structure\n\nis small enough that it did not take that much work for\nthe DBMS vendors to add vector search.Most of them\ndid not write their vector index from scratch and instead\nintegrated an open-source library (e.g., pgVector [145],\nDiskANN [19], FAISS [24]).We anticipate that vector DBMSs will undergo the\nsame evolution as document DBMSs by adding features\nto become more relational-like (e.g., SQL, transactions,\nextensibility).Meanwhile, relational incumbents will\nhave added vector indexes to their already long list of\nfeatures and moved on to the next emerging trend.2.8 Graph Databases\nThere has been a lot of academic and industry interest\nin the last decade in graph databases [183].Many appli-\ncations use knowledge graphs to model semi-structured\ninformation.Social media applications inherently con-\ntain graph-oriented relationships (“likes”, “friend-of”).Relational design tools provide users with an entity-\nrelationship (ER) model of their database.An ER dia-\ngram is a graph; thus, this paradigm has clear use cases.The two most prevalent approaches to represent graphs\nare (1) the resource description framework (RDF) and\n(2) property graphs [126].",
          "time": 61.13021969795227,
          "input_token_size": 28173,
          "output_token_size": 5,
          "original_provenance_id": 0
        },
        {
          "provenance_id": 1,
          "input_sentence_ids": [
            90,
            91,
            92
          ],
          "provenance_ids": [
            91
          ],
          "provenance": "Examples of this transition are Amazon’s Dy-\nnamoDB [129] and Aerospike [9].",
          "time": 66.84875154495239,
          "input_token_size": 36628,
          "output_token_size": 14,
          "original_provenance_id": 1
        },
        {
          "provenance_id": 2,
          "input_sentence_ids": [
            78,
            79,
            80,
            81
          ],
          "provenance_ids": [
            79
          ],
          "provenance": "For more\npersistent application data, Amazon created the Dynamo\nKV store in 2007 [125].",
          "time": 70.56711959838867,
          "input_token_size": 38506,
          "output_token_size": 19,
          "original_provenance_id": 2
        },
        {
          "provenance_id": 3,
          "input_sentence_ids": [
            421,
            422,
            423,
            424,
            425,
            426,
            427,
            428,
            429,
            430,
            431,
            432,
            433,
            434,
            435,
            436,
            437,
            438,
            439,
            440,
            441,
            442,
            443,
            444,
            445,
            446,
            447,
            448,
            449,
            450,
            451,
            452,
            453,
            454,
            455,
            456,
            457,
            458,
            459,
            460,
            461,
            462,
            463,
            464,
            465,
            466,
            467,
            468,
            469,
            470,
            471,
            472,
            473,
            474,
            475,
            476,
            477,
            478,
            479,
            480,
            481
          ],
          "provenance_ids": [
            436,
            468,
            469,
            470,
            471,
            472,
            474,
            475,
            476,
            477,
            478,
            479,
            481
          ],
          "provenance": "Amazon did this already with their\nRedshift AQUA accelerators [102].History has shown this is\nthe wrong way to approach systems development.•\n\n•\n\n•\n\n•\n\n4 Parting Comments\nOur analysis of the last two decades in databases has sev-\neral takeaways.Unfortunately, some of these are repeats\nof the warnings from the 2005 paper.Never underestimate the value of good marketing for\nbad products.The database market is highly competi-\ntive and lucrative.Ev-\nery developer has struggled with databases before, so\nthey are especially amenable to such marketing.Infe-\nrior DBMS products have succeeded via strong market-\ning despite the existence of better options available at\nthe time: Oracle did this in the 1980s, MySQL did this\nin the 2000s, and MongoDB did this in the 2010s.These\nsystems got enough traction early on to buy them time\nto ﬁx the engineering debt they accumulated earlier.Beware of DBMSs from large non-DBMS vendors.One interesting aspect in the last ten years of databases\nis the trend of tech companies building DBMSs in-house\nthat they then spin out as open-source projects.All these\nsystems started life as purpose-built applications for a\ntech company.Some times they come from large companies that can\nafford to allocate resources to developing new systems.",
          "time": 86.12862730026245,
          "input_token_size": 54210,
          "output_token_size": 27,
          "original_provenance_id": 3
        },
        {
          "provenance_id": 4,
          "input_sentence_ids": [
            753,
            754,
            755
          ],
          "provenance_ids": [
            754
          ],
          "provenance": "Amazon DynamoDB: A scalable, predictably perfor-\nmant, and fully managed NoSQL database service.",
          "time": 97.44856715202332,
          "input_token_size": 91188,
          "output_token_size": 42,
          "original_provenance_id": 4
        }
      ],
      "metadata": {
        "question_id": "whatgoesaround-sigmodrec2024_a5ee93f5",
        "created_at": 1749665342.7835011,
        "processing_time": 106.26174736022949,
        "processing_complete": true,
        "max_provenances": 5
      },
      "source_info": {
        "selected_from": "test_outputs_prev",
        "reason": "shorter_provenance",
        "sentence_count": 192,
        "provenance_count": 5,
        "alternatives": [
          {
            "source": "test_outputs_prev",
            "sentence_count": 192,
            "provenance_count": 5,
            "has_answer": true
          },
          {
            "source": "test_outputs_prev1",
            "sentence_count": 192,
            "provenance_count": 5,
            "has_answer": true
          }
        ],
        "selection_timestamp": "2025-06-17T16:48:52.933803"
      }
    }
  },
  {
    "b5fb3a0e": {
      "question": "What significant shift in DBMS architecture is highlighted in relation to cloud platforms?",
      "answer": "Cloud Databases: The rise of cloud platforms has caused a profound rethinking of DBMS architectures, leading to the adoption of network-attached storage (NAS) and serverless computing models.",
      "provenance": [
        {
          "provenance_id": 0,
          "input_sentence_ids": [
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            11,
            12,
            13,
            14,
            15,
            16,
            17,
            18,
            19,
            20,
            21,
            22,
            23,
            24,
            25,
            26,
            27,
            28,
            29,
            30,
            31,
            32,
            33,
            34,
            35,
            36,
            37,
            38,
            39,
            40,
            41,
            42,
            43,
            44,
            45,
            46,
            47,
            48,
            49,
            50,
            51,
            52,
            53,
            54,
            55,
            56,
            57,
            58,
            59,
            60,
            61,
            62,
            63,
            64,
            65,
            66,
            67,
            68,
            69,
            70,
            71,
            72,
            73,
            74,
            75,
            76,
            77,
            78,
            79,
            80,
            81,
            82,
            83,
            84,
            85,
            86,
            87,
            88,
            89,
            90,
            91,
            92,
            93,
            94,
            95,
            96,
            97,
            98,
            99,
            100,
            101,
            102,
            103,
            104,
            105,
            106,
            107,
            108,
            109,
            110,
            111,
            112,
            113,
            114,
            115,
            116,
            117,
            118,
            119,
            120,
            121,
            122,
            123,
            124,
            125,
            126,
            127,
            128,
            129,
            130,
            131,
            132,
            133,
            134,
            135,
            136,
            137,
            138,
            139,
            140,
            141,
            142,
            143,
            144,
            145,
            146,
            147,
            148,
            149,
            150,
            151,
            152,
            153,
            154,
            155,
            156,
            157,
            158,
            159,
            160,
            161,
            162,
            163,
            164,
            165,
            166,
            167,
            168,
            169,
            170,
            171,
            172,
            173,
            174,
            175,
            176,
            177,
            178,
            179,
            180,
            181,
            182,
            183,
            184,
            185,
            186,
            187,
            188,
            189,
            190,
            191,
            192,
            193,
            194,
            195,
            196,
            197,
            198,
            199,
            200,
            201,
            202,
            203,
            204,
            205,
            206,
            207,
            208,
            209,
            210,
            211,
            212,
            213,
            214,
            215,
            216,
            217,
            218,
            219,
            220,
            221,
            222,
            223,
            224,
            225,
            226,
            227,
            228,
            229,
            230,
            231,
            232,
            233,
            234,
            235,
            236,
            237,
            238,
            239,
            240,
            241,
            242,
            243,
            244,
            245,
            246,
            247,
            248,
            249,
            250,
            251,
            252,
            253,
            254,
            255,
            256,
            257,
            258,
            259,
            260,
            261,
            262,
            263,
            264,
            265,
            266,
            267,
            268,
            269,
            270,
            271,
            272,
            273,
            274,
            275,
            276,
            277,
            278,
            279,
            280,
            281,
            282,
            283,
            284,
            285,
            286,
            287,
            288,
            289,
            290,
            291,
            292,
            293,
            294,
            295,
            296,
            297,
            298,
            299,
            300,
            301,
            302,
            303,
            304,
            305,
            306,
            307,
            308,
            309,
            310,
            311,
            312,
            313,
            314,
            315,
            316,
            317,
            318,
            319,
            320,
            321,
            322,
            323,
            324,
            325,
            326,
            327,
            328,
            329,
            330,
            331,
            332,
            333,
            334,
            335,
            336,
            337,
            338,
            339,
            340,
            341,
            342,
            343,
            344,
            345,
            346,
            347,
            348,
            349,
            350,
            351,
            352,
            353,
            354,
            355,
            356,
            357,
            358,
            359,
            360,
            361,
            362,
            363,
            364,
            365,
            366,
            367,
            368,
            369,
            370,
            371,
            372,
            373,
            374,
            375,
            376,
            377,
            378,
            379,
            380,
            381,
            382,
            383,
            384,
            385,
            386,
            387,
            388,
            389,
            390,
            391,
            392,
            393,
            394,
            395,
            396,
            397,
            398,
            399,
            400,
            401,
            402,
            403,
            404,
            405,
            406,
            407,
            408,
            409,
            410,
            411,
            412,
            413,
            414,
            415,
            416,
            417,
            418,
            419,
            420,
            421,
            422,
            423,
            424,
            425,
            426,
            427,
            428,
            429,
            430,
            431,
            432,
            433,
            434,
            435,
            436,
            437,
            438,
            439,
            440,
            441,
            442,
            443,
            444,
            445,
            446,
            447,
            448,
            449,
            450,
            451,
            452,
            453,
            454,
            455,
            456,
            457,
            458,
            459,
            460,
            461,
            462,
            463,
            464,
            465,
            466,
            467,
            468,
            469,
            470,
            471,
            472,
            473,
            474,
            475,
            476,
            477,
            478,
            479,
            480,
            481,
            482,
            483,
            484,
            485,
            486,
            487,
            488,
            489,
            490,
            491,
            492,
            493,
            494,
            495,
            496,
            497,
            498,
            499,
            500,
            501,
            502,
            503,
            504,
            505,
            506,
            507,
            508,
            509,
            510,
            511,
            512,
            513,
            514,
            515,
            516,
            517,
            518,
            519,
            520,
            521,
            522,
            523,
            524,
            525,
            526,
            527,
            528,
            529,
            530,
            531,
            532,
            533,
            534,
            535,
            536,
            537,
            538,
            539,
            540,
            541,
            542,
            543,
            544,
            545,
            546,
            547,
            548,
            549,
            550,
            551,
            552,
            553,
            554,
            555,
            556,
            557,
            558,
            559,
            560,
            561,
            562,
            563,
            564,
            565,
            566,
            567,
            568,
            569,
            570,
            571,
            572,
            573,
            574,
            575,
            576,
            577,
            578,
            579,
            580,
            581,
            582,
            583,
            584,
            585,
            586,
            587,
            588,
            589,
            590,
            591,
            592,
            593,
            594,
            595,
            596,
            597,
            598,
            599,
            600,
            601,
            602,
            603,
            604,
            605,
            606,
            607,
            608,
            609,
            610,
            611,
            612,
            613,
            614,
            615,
            616,
            617,
            618,
            619,
            620,
            621,
            622,
            623,
            624,
            625,
            626,
            627,
            628,
            629,
            630,
            631,
            632,
            633,
            634,
            635,
            636,
            637,
            638,
            639,
            640,
            641,
            642,
            643,
            644,
            645,
            646,
            647,
            648,
            649,
            650,
            651,
            652,
            653,
            654,
            655,
            656,
            657,
            658,
            659,
            660,
            661,
            662,
            663,
            664,
            665,
            666,
            667,
            668,
            669,
            670,
            671,
            672,
            673,
            674,
            675,
            676,
            677,
            678,
            679,
            680,
            681,
            682,
            683,
            684,
            685,
            686,
            687,
            688,
            689,
            690,
            691,
            692,
            693,
            694,
            695,
            696,
            697,
            698,
            699,
            700,
            701,
            702,
            703,
            704,
            705,
            706,
            707,
            708,
            709,
            710,
            711,
            712,
            713,
            714,
            715,
            716,
            717,
            718,
            719,
            720,
            721,
            722,
            723,
            724,
            725,
            726,
            727,
            728,
            729,
            730,
            731,
            732,
            733,
            734,
            735,
            736,
            737,
            738,
            739,
            740,
            741,
            742,
            743,
            744,
            745,
            746,
            747,
            748,
            749,
            750,
            751,
            752,
            753,
            754,
            755,
            756,
            757,
            758,
            759,
            760,
            761,
            762,
            763,
            764,
            765,
            766,
            767,
            768,
            769,
            770,
            771,
            772,
            773,
            774,
            775,
            776,
            777,
            778,
            779,
            780,
            781,
            782,
            783,
            784,
            785,
            786,
            787,
            788,
            789,
            790,
            791,
            792,
            793,
            794,
            795,
            796,
            797,
            798,
            799,
            800,
            801,
            802,
            803,
            804,
            805,
            806,
            807,
            808,
            809,
            810,
            811,
            812,
            813,
            814,
            815,
            816,
            817,
            818,
            819,
            820,
            821,
            822,
            823,
            824,
            825,
            826,
            827,
            828,
            829,
            830,
            831,
            832,
            833,
            834,
            835,
            836,
            837,
            838,
            839,
            840,
            841,
            842,
            843,
            844,
            845,
            846,
            847,
            848,
            849,
            850,
            851,
            852,
            853,
            854,
            855,
            856,
            857,
            858,
            859,
            860,
            861,
            862,
            863,
            864,
            865,
            866,
            867,
            868,
            869,
            870,
            871,
            872,
            873,
            874,
            875,
            876,
            877,
            878,
            879,
            880,
            881,
            882,
            883,
            884,
            885,
            886,
            887,
            888,
            889,
            890,
            891,
            892,
            893,
            894,
            895,
            896,
            897,
            898,
            899,
            900,
            901,
            902,
            903,
            904,
            905,
            906,
            907,
            908,
            909,
            910,
            911,
            912,
            913,
            914,
            915,
            916,
            917,
            918,
            919,
            920,
            921,
            922,
            923,
            924,
            925,
            926,
            927,
            928,
            929,
            930,
            931,
            932,
            933,
            934,
            935,
            936,
            937,
            938,
            939,
            940,
            941,
            942,
            943,
            944,
            945,
            946,
            947,
            948,
            949,
            950,
            951,
            952,
            953,
            954,
            955,
            956,
            957,
            958,
            959,
            960,
            961,
            962,
            963
          ],
          "provenance_ids": [
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            11,
            12,
            13,
            14,
            15,
            16,
            17,
            18,
            19,
            20,
            21,
            22,
            23,
            24,
            25,
            26,
            27,
            28,
            29,
            30,
            31,
            32,
            33,
            34,
            35,
            36,
            37,
            38,
            39,
            40,
            41,
            42,
            43,
            44,
            45,
            46,
            47,
            48,
            49,
            50,
            51,
            52,
            53,
            54,
            55,
            56,
            57,
            58,
            59,
            60,
            61,
            62,
            63,
            64,
            65,
            66,
            67,
            68,
            69,
            70,
            71,
            72,
            73,
            74,
            75,
            76,
            77,
            78,
            79,
            80,
            81,
            82,
            83,
            84,
            85,
            86,
            87,
            88,
            89,
            90,
            91,
            92,
            93,
            94,
            95,
            96,
            97,
            98,
            99,
            100,
            101,
            102,
            103,
            104,
            105,
            106,
            107,
            108,
            109,
            110,
            111,
            112,
            113,
            114,
            115,
            116,
            117,
            118,
            119,
            120,
            121,
            122,
            123,
            124,
            125,
            126,
            127,
            128,
            129,
            130,
            131,
            132,
            133,
            134,
            135,
            136,
            137,
            138,
            139,
            140,
            141,
            142,
            143,
            144,
            145,
            146,
            147,
            148,
            149,
            150,
            151,
            152,
            153,
            154,
            155,
            156,
            157,
            158,
            159,
            160,
            161,
            162,
            163,
            164,
            165,
            166,
            167,
            168,
            169,
            170,
            171,
            172,
            173,
            174,
            175,
            176,
            177,
            178,
            179,
            180,
            181,
            182,
            183,
            184,
            185,
            186,
            187,
            188,
            189,
            190,
            191,
            192,
            193,
            194,
            195,
            196,
            197,
            198,
            199,
            200,
            201,
            202,
            203,
            204,
            205,
            206,
            207,
            208,
            209,
            210,
            211,
            212,
            213,
            214,
            215,
            216,
            217,
            218,
            219,
            220,
            221,
            222,
            223,
            224,
            225,
            226,
            227,
            228,
            229,
            230,
            231,
            232,
            233,
            234,
            235,
            236,
            237,
            238,
            239,
            240,
            241,
            242,
            243,
            244,
            245,
            246,
            247,
            248,
            249,
            250,
            251,
            252,
            253,
            254,
            255,
            256,
            257,
            258,
            259,
            260,
            261,
            262,
            263,
            264,
            265,
            266,
            267,
            268,
            269,
            270,
            271,
            272,
            273,
            274,
            275,
            276,
            277,
            278,
            279,
            280,
            281,
            282,
            283,
            284,
            285,
            286,
            287,
            288,
            289,
            290,
            291,
            292,
            293,
            294,
            295,
            296,
            297,
            298,
            299,
            300,
            301,
            302,
            303,
            304,
            305,
            306,
            307,
            308,
            309,
            310,
            311,
            312,
            313,
            314,
            315,
            316,
            317,
            318,
            319,
            320,
            321,
            322,
            323,
            324,
            325,
            326,
            327,
            328,
            329,
            330,
            331,
            332,
            333,
            334,
            335,
            336,
            337,
            338,
            339,
            340,
            341,
            342,
            343,
            344,
            345,
            346,
            347,
            348,
            349,
            350,
            351,
            352,
            353,
            354,
            355,
            356,
            357,
            358,
            359,
            360,
            361,
            362,
            363,
            364,
            365,
            366,
            367,
            368,
            369,
            370,
            371,
            372,
            373,
            374,
            375,
            376,
            377,
            378,
            379,
            380,
            381,
            382,
            383,
            384,
            385,
            386,
            387,
            388,
            389,
            390,
            391,
            392,
            393,
            394,
            395,
            396,
            397,
            398,
            399,
            400,
            401,
            402,
            403,
            404,
            405,
            406,
            407,
            408,
            409,
            410,
            411,
            412,
            413,
            414,
            415,
            416,
            417,
            418,
            419,
            420,
            421,
            422,
            423,
            424,
            425,
            426,
            427,
            428,
            429,
            430,
            431,
            432,
            433,
            434,
            435,
            436,
            437,
            438,
            439,
            440,
            441,
            442,
            443,
            444,
            445,
            446,
            447,
            448,
            449,
            450,
            451,
            452,
            453,
            454,
            455,
            456,
            457,
            458,
            459,
            460,
            461,
            462,
            463,
            464,
            465,
            466,
            467,
            468,
            469,
            470,
            471,
            472,
            473,
            474,
            475,
            476,
            477,
            478,
            479,
            480,
            481,
            482,
            483,
            484,
            485,
            486,
            487,
            488,
            489,
            490,
            491,
            492,
            493,
            494,
            495,
            496,
            497,
            498,
            499,
            500,
            501,
            502,
            503,
            504,
            505,
            506,
            507,
            508,
            509,
            510,
            511,
            512,
            513,
            514,
            515,
            516,
            517,
            518,
            519,
            520,
            521,
            522,
            523,
            524,
            525,
            526,
            527,
            528,
            529,
            530,
            531,
            532,
            533,
            534,
            535,
            536,
            537,
            538,
            539,
            540,
            541,
            542,
            543,
            544,
            545,
            546,
            547,
            548,
            549,
            550,
            551,
            552,
            553,
            554,
            555,
            556,
            557,
            558,
            559,
            560,
            561,
            562,
            563,
            564,
            565,
            566,
            567,
            568,
            569,
            570,
            571,
            572,
            573,
            574,
            575,
            576,
            577,
            578,
            579,
            580,
            581,
            582,
            583,
            584,
            585,
            586,
            587,
            588,
            589,
            590,
            591,
            592,
            593,
            594,
            595,
            596,
            597,
            598,
            599,
            600,
            601,
            602,
            603,
            604,
            605,
            606,
            607,
            608,
            609,
            610,
            611,
            612,
            613,
            614,
            615,
            616,
            617,
            618,
            619,
            620,
            621,
            622,
            623,
            624,
            625,
            626,
            627,
            628,
            629,
            630,
            631,
            632,
            633,
            634,
            635,
            636,
            637,
            638,
            639,
            640,
            641,
            642,
            643,
            644,
            645,
            646,
            647,
            648,
            649,
            650,
            651,
            652,
            653,
            654,
            655,
            656,
            657,
            658,
            659,
            660,
            661,
            662,
            663,
            664,
            665,
            666,
            667,
            668,
            669,
            670,
            671,
            672,
            673,
            674,
            675,
            676,
            677,
            678,
            679,
            680,
            681,
            682,
            683,
            684,
            685,
            686,
            687,
            688,
            689,
            690,
            691,
            692,
            693,
            694,
            695,
            696,
            697,
            698,
            699,
            700,
            701,
            702,
            703,
            704,
            705,
            706,
            707,
            708,
            709,
            710,
            711,
            712,
            713,
            714,
            715,
            716,
            717,
            718,
            719,
            720,
            721,
            722,
            723,
            724,
            725,
            726,
            727,
            728,
            729,
            730,
            731,
            732,
            733,
            734,
            735,
            736,
            737,
            738,
            739,
            740,
            741,
            742,
            743,
            744,
            745,
            746,
            747,
            748,
            749,
            750,
            751,
            752,
            753,
            754,
            755,
            756,
            757,
            758,
            759,
            760,
            761,
            762,
            763,
            764,
            765,
            766,
            767,
            768,
            769,
            770,
            771,
            772,
            773,
            774,
            775,
            776,
            777,
            778,
            779,
            780,
            781,
            782,
            783,
            784,
            785,
            786,
            787,
            788,
            789,
            790,
            791,
            792,
            793,
            794,
            795,
            796,
            797,
            798,
            799,
            800,
            801,
            802,
            803,
            804,
            805,
            806,
            807,
            808,
            809,
            810,
            811,
            812,
            813,
            814,
            815,
            816,
            817,
            818,
            819,
            820,
            821,
            822,
            823,
            824,
            825,
            826,
            827,
            828,
            829,
            830,
            831,
            832,
            833,
            834,
            835,
            836,
            837,
            838,
            839,
            840,
            841,
            842,
            843,
            844,
            845,
            846,
            847,
            848,
            849,
            850,
            851,
            852,
            853,
            854,
            855,
            856,
            857,
            858,
            859,
            860,
            861,
            862,
            863,
            864,
            865,
            866,
            867,
            868,
            869,
            870,
            871,
            872,
            873,
            874,
            875,
            876,
            877,
            878,
            879,
            880,
            881,
            882,
            883,
            884,
            885,
            886,
            887,
            888,
            889,
            890,
            891,
            892,
            893,
            894,
            895,
            896,
            897,
            898,
            899,
            900,
            901,
            902,
            903,
            904,
            905,
            906,
            907,
            908,
            909,
            910,
            911,
            912,
            913,
            914,
            915,
            916,
            917,
            918,
            919,
            920,
            921,
            922,
            923,
            924,
            925,
            926,
            927,
            928,
            929,
            930,
            931,
            932,
            933,
            934,
            935,
            936,
            937,
            938,
            939,
            940,
            941,
            942,
            943,
            944,
            945,
            946,
            947,
            948,
            949,
            950,
            951,
            952,
            953,
            954,
            955,
            956,
            957,
            958,
            959,
            960,
            961,
            962,
            963
          ],
          "provenance": "What Goes Around Comes Around... And Around...\n\nMichael Stonebraker\nMassachusetts Institute of Technology\nstonebraker@csail.mit.edu\n\nAndrew Pavlo\nCarnegie Mellon University\npavlo@cs.cmu.edu\n\nABSTRACT\nTwo decades ago, one of us co-authored a paper com-\nmenting on the previous 40 years of data modelling re-\nsearch and development [188].That paper demonstrated\nthat the relational model (RM) and SQL are the prevail-\ning choice for database management systems (DBMSs),\ndespite efforts to replace either them.Instead, SQL ab-\nsorbed the best ideas from these alternative approaches.We revisit this issue and argue that this same evolu-\ntion has continued since 2005.Once again there have\nbeen repeated efforts to replace either SQL or the RM.But the RM continues to be the dominant data model\nand SQL has been extended to capture the good ideas\nfrom others.As such, we expect more of the same in\nthe future, namely the continued evolution of SQL and\nrelational DBMSs (RDBMSs).We also discuss DBMS\nimplementations and argue that the major advancements\nhave been in the RM systems, primarily driven by chang-\ning hardware characteristics.1 Introduction\nIn 2005, one of the authors participated in writing a\nchapter for the Red Book titled “What Goes Around\nComes Around” [188].That paper examined the major\ndata modelling movements since the 1960s:\n\nHierarchical (e.g., IMS): late 1960s and 1970s\nNetwork (e.g., CODASYL): 1970s\nRelational: 1970s and early 1980s\nEntity-Relationship: 1970s\nExtended Relational: 1980s\nSemantic: late 1970s and 1980s\nObject-Oriented: late 1980s and early 1990s\nObject-Relational: late 1980s and early 1990s\nSemi-structured (e.g., XML): late 1990s and 2000s\n\n•\n•\n•\n•\n•\n•\n•\n•\n•\n\nOur conclusion was that the relational model with an\nextendable type system (i.e., object-relational) has dom-\ninated all comers, and nothing else has succeeded in\nthe marketplace.Although many of the non-relational\nDBMSs covered in 2005 still exist today, their vendors\nhave relegated them to legacy maintenance mode and\nnobody is building new applications on them.This per-\nsistence is more of a testament to the “stickiness” of data\n\nrather than the lasting power of these systems.In other\nwords, there still are many IBM IMS databases running\ntoday because it is expensive and risky to switch them\nto use a modern DBMS.But no start-up would willingly\nchoose to build a new application on IMS.A lot has happened in the world of databases since our\n2005 survey.During this time, DBMSs have expanded\nfrom their roots in business data processing and are now\nused for almost every kind of data.This led to the “Big\nData” era of the early 2010s and the current trend of inte-\ngrating machine learning (ML) with DBMS technology.In this paper, we analyze the last 20 years of data\nmodel and query language activity in databases.We\nstructure our commentary into the following areas: (1)\nMapReduce Systems, (2) Key-value Stores, (3) Docu-\nment Databases, (4) Column Family / Wide-Column,\n(5) Text Search Engines, (6) Array Databases, (7)\nVector Databases, and (8) Graph Databases.We contend that most systems that deviated from\nSQL or the RM have not dominated the DBMS land-\nscape and often only serve niche markets.Many sys-\ntems that started out rejecting the RM with much fanfare\n(think NoSQL) now expose a SQL-like interface for RM\ndatabases.Such systems are now on a path to conver-\ngence with RDBMSs.Meanwhile, SQL incorporated\nthe best query language ideas to expand its support for\nmodern applications and remain relevant.Although there has not been much change in RM\nfundamentals, there were dramatic changes in RM sys-\ntem implementations.The second part of this paper\ndiscusses advancements in DBMS architectures that ad-\ndress modern applications and hardware: (1) Columnar\nSystems, (2) Cloud Databases, (3) Data Lakes / Lake-\nhouses, (4) NewSQL Systems, (5) Hardware Acceler-\nators, and (6) Blockchain Databases.Some of these\nare profound changes to DBMS implementations, while\nothers are merely trends based on faulty premises.We ﬁnish with a discussion of important considera-\ntions for the next generation of DBMSs and provide part-\ning comments on our hope for the future of databases in\nboth research and commercial settings.SIGMOD Record, June 2024 (Vol. 53, No.2)\n\n21\n\n\f2 Data Models & Query Languages\nFor our discussion here, we group the research and de-\nvelopment thrusts in data models and query languages\nfor database into eight categories.2.1 MapReduce Systems\nGoogle constructed their MapReduce (MR) framework\nin 2003 as a “point solution” for processing its periodic\ncrawl of the internet [122].At the time, Google had\nlittle expertise in DBMS technology, and they built MR\nto meet their crawl needs.In database terms, Map is a\nuser-deﬁned function (UDF) that performs computation\nand/or ﬁltering while Reduce is a GROUP BY operation.To a ﬁrst approximation, MR runs a single query:\n\nSELECT map() FROM crawl_table GROUP BY reduce()\n\nGoogle’s MR approach did not prescribe a speciﬁc\ndata model or query language.Rather, it was up to the\nMap and Reduce functions written in a procedural MR\nprogram to parse and decipher the contents of data ﬁles.There was a lot of interest in MR-based systems at\nother companies in the late 2000s.Yahoo! developed\nan open-source version of MR in 2005, called Hadoop.It ran on top of a distributed ﬁle system HDFS that was\na clone of the Google File System [134].Several start-\nups were formed to support Hadoop in the commercial\nmarketplace.We will use MR to refer to the Google\nimplementation and Hadoop to refer to the open-source\nversion.They are functionally similar.There was a controversy about the value of Hadoop\ncompared to RDBMSs designed for OLAP workloads.This culminated in a 2009 study that showed that data\nwarehouse DBMSs outperformed Hadoop [172].This\ngenerated dueling articles from Google and the DBMS\ncommunity [123, 190].Google argued that with care-\nful engineering, a MR system will beat DBMSs, and a\nuser does not have to load data with a schema before\nrunning queries on it.Thus, MR is better for “one shot”\ntasks, such as text processing and ETL operations.The\nDBMS community argued that MR incurs performance\nproblems due to its design that existing parallel DBMSs\nalready solved.Furthermore, the use of higher-level\nlanguages (SQL) operating over partitioned tables has\nproven to be a good programming model [127].A lot of the discussion in the two papers was on imple-\nmentation issues (e.g., indexing, parsing, push vs. pull\nquery processing, failure recovery).From reading both\npapers a reasonable conclusion would be that there is a\nplace for both kinds of systems.However, two changes\nin the technology world rendered the debate moot.The ﬁrst event was that the Hadoop technology and\nservices market cratered in the 2010s.Many enterprises\nspent a lot of money on Hadoop clusters, only to ﬁnd\nthere was little interest in this functionality.Developers\nfound it difﬁcult to shoehorn their application into the\n\nrestricted MR/Hadoop paradigm.There were consider-\nable efforts to provide a SQL and RM interface on top\nof Hadoop, most notable was Meta’s Hive [30, 197].The next event occurred eight months after the CACM\narticle when Google announced that they were moving\ntheir crawl processing from MR to BigTable [164].The\nreason was that Google needed to interactively update\nits crawl database in real time but MR was a batch sys-\ntem.Google ﬁnally announced in 2014 that MR had no\nplace in their technology stack and killed it off [194].The ﬁrst event left the three leading Hadoop vendors\n(Cloudera, Hortonworks, MapR) without a viable prod-\nuct to sell.Cloudera rebranded Hadoop to mean the\nwhole stack (application, Hadoop, HDFS).In a further\nsleight-of-hand, Cloudera built a RDBMS, Impala [150],\non top of HDFS but not using Hadoop.They realized\nthat Hadoop had no place as an internal interface in a\nSQL DBMS, and they conﬁgured it out of their stack\nwith software built directly on HDFS.In a similar vein,\nMapR built Drill [22] directly on HDFS, and Meta cre-\nated Presto [185] to replace Hive.Discussion: MR’s deﬁciencies were so signiﬁcant that\nit could not be saved despite the adoption and enthu-\nsiasm from the developer community.Hadoop died\nabout a decade ago, leaving a legacy of HDFS clusters\nin enterprises and a collection of companies dedicated\nto making money from them.At present, HDFS has\nlost its luster, as enterprises realize that there are better\ndistributed storage alternatives [124].Meanwhile, dis-\ntributed RDBMSs are thriving, especially in the cloud.Some aspects of MR system implementations related\nto scalability, elasticity, and fault tolerance are carried\nover into distributed RDBMSs.MR also brought about\nthe revival of shared-disk architectures with disaggre-\ngated storage, subsequently giving rise to open-source\nﬁle formats and data lakes (see Sec.3.3). Hadoop’s lim-\nitations opened the door for other data processing plat-\nforms, namely Spark [201] and Flink [109].Both sys-\ntems started as better implementations of MR with pro-\ncedural APIs but have since added support for SQL [105].2.2 Key/Value Stores\nThe key/value (KV) data model is the simplest model\npossible.It represents the following binary relation:\n\n(key,value)\n\nA KV DBMS represents a collection of data as an as-\nsociative array that maps a key to a value.The value is\ntypically an untyped array of bytes (i.e., a blob), and the\nDBMS is unaware of its contents.It is up to the appli-\ncation to maintain the schema and parse the value into\nits corresponding parts.Most KV DBMSs only provide\nget/set/delete operations on a single value.In the 2000s, several new Internet companies built\ntheir own shared-nothing, distributed KV stores for nar-\n\n22\n\nSIGMOD Record, June 2024 (Vol.53, No. 2)\n\n\frowly focused applications, like caching and storing ses-\nsion data.For caching, Memcached [131] is the most\nwell-known example of this approach.Redis [67] mar-\nkets itself as a Memcached replacement, offering a more\nrobust query API with checkpointing support.For more\npersistent application data, Amazon created the Dynamo\nKV store in 2007 [125].Such systems offer higher and\nmore predictable performance, compared to a RDBMS,\nin exchange for more limited functionality.The second KV DBMS category are embedded stor-\nage managers designed to run in the same address space\nas a higher-level application.One of the ﬁrst stan-\ndalone embedded KV DBMSs was BerkeleyDB from\nthe early 1990s [170].Recent notable entries include\nGoogle’s LevelDB [37], which Meta later forked as\nRocksDB [68].Discussion: Key/value stores provide a quick “out-of-\nthe-box” way for developers to store data, compared to\nthe more laborious effort required to set up a table in a\nRDBMS.Of course, it is dangerous to use a KV store\nin a complex application that requires more than just a\nbinary relation.If an application requires multiple ﬁelds\nin a record, then KV stores are probably a bad idea.Not\nonly must the application parse record ﬁelds, but also\nthere are no secondary indexes to retrieve other ﬁelds\nby value.Likewise, developers must implement joins or\nmulti-get operations in their application.To deal with these issues, several systems began as\na KV store and then morphed into a more feature-rich\nrecord store.Such systems replace the opaque value\nwith a semi-structured value, such as a JSON docu-\nment.Examples of this transition are Amazon’s Dy-\nnamoDB [129] and Aerospike [9].It is not trivial to re-\nengineer a KV store to make it support a complex data\nmodel, whereas RDBMSs easily emulates KV stores\nwithout any changes.If an application needs an embed-\nded DBMS, there are full-featured choices available to-\nday, including SQLite [71] and DuckDB [180].Hence,\na RDBMS may be a better choice, even for simple appli-\ncations, because they offer a path forward if the applica-\ntion’s complexity increases.One new architecture trend from the last 20 years is\nusing embedded KV stores as the underlying storage\nmanager for full-featured DBMSs.Prior to this, build-\ning a new DBMS requires engineers to build a custom\nstorage manager that is natively integrated in the DBMS.MySQL was the ﬁrst DBMS to expose an API that al-\nlowed developers to replace its default KV storage man-\nager.This API enabled Meta to build RocksDB to re-\nplace InnoDB for its massive ﬂeet of MySQL databases.Similarly, MongoDB discarded their ill-fated MMAP-\nbased storage manager in favor of WiredTiger’s KV\nstore in 2014 [120, 138].Using an existing KV store\nallows developers to write a new DBMS in less time.2.3 Document Databases\n\nThe document data model represents a database as a col-\nlection of record objects.Each document contains a hier-\narchy of ﬁeld/value pairs, where each ﬁeld is identiﬁed\nby a name and a ﬁeld’s value can be either a scalar type,\nan array of values, or another document.The following\nexample in JSON is a customer document that contain\na nested list of purchase order records with their corre-\nsponding order items.{ “name”: “First Last”,\n\n“orders”: [ { “id”: 123, “items”: [...] },\n\n{ “id”: 456, “items”: [...] }, ] }\n\nDocument data models have been an active ﬁeld of\neffort for several decades.This has given rise to data\nformats like SGML [117] and XML [118].Despite\nthe buzz with XML databases in the late 1990s, we\ncorrectly predicted in 2005 they would not supplant\nRDBMSs [188].JSON has since overtaken XML to\nbecome the standard for data exchange for web-based\napplications.JavaScript’s popularity with developers\nand the accompanying ubiquity of JSON led several\ncompanies to create document-oriented systems that na-\ntively stored JSON in the 2000s.The inability of OLTP RDBMSs to scale in the 2000s\nushered in dozens of document DBMSs that marketed\nthemselves using the catchphrase NoSQL [110].There\nwere two marketing messages for such systems that res-\nonated with developers.First, SQL and joins are slow,\nand one should use a “faster” lower-level, record-at-a-\ntime interface.Second, ACID transactions are unneces-\nsary for modern applications, so the DBMS should only\nprovide weaker notion of it (i.e., BASE [179]).Because of these two thrusts, NoSQL came to stand\nfor a DBMS that stored records or documents as JSON,\nsupported a lower-level API, and weak or non-existent\ntransactions.There are dozens of such systems, of\nwhich MongoDB [41] is the most popular.Discussion: Document DBMSs are essentially the same\nas object-oriented DBMSs from the 1980s and XML\nDBMSs from the late 1990s.Proponents of document\nDBMSs make the same argument as their OO/XML\npredecessors: storing data as documents removes the\nimpedance mismatch between how application OO code\ninteracts with data and how relational databases store\nthem.They also claim that denormalizing entries into\nnested structures is better for performance because it re-\nmoves the need to dispatch multiple queries to retrieve\ndata related to a given object (i.e., “N+1 problem” in\nORMs).The problems with denormalization/prejoining\nis an old topic that dates back to the 1970s [116]: (1)\nif the join is not one-to-many, then there will be dupli-\ncated data, (2) prejoins are not necessarily faster than\njoins, and (3) there is no data independence.SIGMOD Record, June 2024 (Vol. 53, No.2)\n\n23\n\n\fDespite strong protestations that SQL was terrible, by\nthe end of the 2010s, almost every NoSQL DBMS added\na SQL interface.Notable examples include DynamoDB\nPartiQL [56], Cassandra CQL [15], Aerospike AQL [9],\nand Couchbase SQL++ [72].The last holdout was Mon-\ngoDB, but they added SQL for their Atlas service in\n2021 [42].Instead of supporting the SQL standard for\nDDL and DML operations, NoSQL vendors claim that\nthey support their own proprietary query language de-\nrived or inspired from SQL.For most applications, these\ndistinctions are without merit.Any language differences\nbetween SQL and NoSQL derivatives are mostly due to\nJSON extensions and maintenance operations.Many of the remaining NoSQL DBMSs also added\nstrongly consistent (ACID) transactions (see Sec. 3.4).As such, the NoSQL message has morphed from “Do\nnot use SQL – it is too slow!” to “Not only SQL” (i.e.,\nSQL is ﬁne for some things).Adding SQL and ACID to a NoSQL DBMS lowers\ntheir intellectual distance from RDBMSs.The main\ndifferences between them seems to be JSON support\nand the fact that NoSQL vendors allow “schema later”\ndatabases.But the SQL standard added a JSON data\ntype and operations in 2016 [165, 178].And as RDBMSs\ncontinue to improve their “ﬁrst ﬁve minutes” experience\nfor developers, we believe that the two kinds of systems\nwill soon be effectively identical.Higher level languages are almost universally pre-\nferred to record-at-a-time notations as they require less\ncode and provide greater data independence.Although\nwe acknowledge that the ﬁrst SQL optimizers were slow\nand ineffective, they have improved immensely in the\nlast 50 years.But the optimizer remains the hardest part\nof building a DBMS.We suspect that this engineering\nburden was a contributing factor to why NoSQL systems\noriginally chose to not support SQL.2.4 Column-Family Databases\nThere is another category of NoSQL systems that uses\na data model called column-family (aka wide-column).Despite its name, column-family is not a columnar data\nmodel.Instead, it is a reduction of the document data\nmodel that only supports one level of nesting instead\nof arbitrary nesting; it is relation-like, but each record\ncan have optional attributes, and cells can contain an ar-\nray of values.The following example shows a mapping\nfrom user identiﬁer keys to JSON documents that con-\ntain each user’s varying proﬁle information:\n\nUser1000 → { “name”: “Alice”,\n\n“accounts”: [ 123, 456 ],\n“email”: \"xxx@xxx.edu” }\n\nUser1001 → { “name”: “Bob”,\n\n“email”: [ “yyy@yyy.org”, “zzz@zzz.com” ] }\n\nThe ﬁrst column-family model DBMS was Google’s\nBigTable in 2004 [111].Instead of adopting SQL and\n\nemerging columnar storage, Google used this data model\nwith procedural client APIs.Other systems adopted the\ncolumn-family model in an attempt to copy Google’s be-\nspoke implementation.Most notable are Cassandra [14]\nand HBase [28].They also copied BigTable’s limita-\ntions, including the lack of joins and secondary indexes.Discussion: All our comments in Sec.2.3 about the\ndocument model are also applicable here.In the early\n2010s, Google built RDBMSs on top of BigTable, in-\ncluding MegaStore [99] and the ﬁrst version of Span-\nner.Since then, Google rewrote Spanner to remove\nthe BigTable remnants [98], and it is now the primary\ndatabase for many of its internal applications.Several\nNoSQL DBMSs deprecated their proprietary APIs in\nfavor of SQL but still retain their non-relational archi-\ntectures.Cassandra replaced their Thrift-API with a\nSQL-like language called CQL [15], and HBase now\nrecommends the Phoenix SQL-frontend [57].Google\nstill offers BigTable as a cloud service, but the column-\nfamily model is a singular outlier with the same disad-\nvantages as NoSQL DBMSs.2.5 Text Search Engines\nText search engines have existed for a long time, begin-\nning with the seminal SMART system in the 1960s [184].SMART pioneered information retrieval and the vector\nspace model, now nearly universal in modern search\nengines, by tokenizing documents into a “bag of words”\nand then building full-text indexes (aka inverted indexes)\non those tokens to support queries on their contents.The\nsystem was also cognizant of noise words (e.g., “the”,\n“a”), synonyms (e.g., “The Big Apple” is a synonym for\n“New York City”), salient keywords, and distance (e.g.,\n“drought” often appears close to “climate change”).The leading text search systems today include Elastic-\nsearch [23] and Solr [70], which both use Lucene [38]\nas their internal search library.These systems offer\ngood support for storing and indexing text data but offer\nnone-to-limited transaction capabilities.This limitation\nmeans that a DBMS has to recover from data corruption\nby rebuilding the document index from scratch, which\nresults in signiﬁcant downtime.All the leading RDBMSs support full-text search in-\ndexes, including Oracle [52], Microsoft SQL Server [52],\nMySQL [43], and PostgreSQL [62].Their search fea-\ntures have improved recently and are generally on par\nwith the special-purpose systems above.They also have\nthe advantage of built-in transaction support.But their\nintegration of search operations in SQL is often clunky\nand differs between DBMSs.Discussion: Text data is inherently unstructured, which\nmeans that there is no data model.Instead, a DBMS\nseeks to extract structure (i.e., meta-data, indexes) from\ntext to avoid “needle in the haystack” sequential searches.24\n\nSIGMOD Record, June 2024 (Vol. 53, No.2)\n\n\fThere are three ways to manage text data in application.First, one can run multiple systems, such as Elastic-\nsearch for text and a RDBMS for operational workloads.This approach allows one to run “best of breed” systems\nbut requires additional ETL plumbing to push data from\nthe operational DBMS to the text DBMS and to rewrite\napplications to route queries to the right DBMSs based\non their needs.Alternatively, one can run a RDBMS\nwith good text-search integration capabilities but with\ndivergent APIs in SQL.This latter issue is often over-\ncome by application frameworks that hide this complex-\nity (e.g., Django Haystack [20]).The third option is\na polystore system [187] that masks the system differ-\nences via middleware that exposes a uniﬁed interface.Inverted index-centric search engines based on SMART\n\nare used for exact match searches.These methods have\nbeen supplanted in recent years by similarity search us-\ning ML-generated embeddings (see Sec.2.7). 2.6 Array Databases\nThere are many areas of computing where arrays are an\nobvious data representation.We use the term “array” to\nmean all variants of them [182]: vectors (one dimen-\nsion – see Sec.2.7), matrices (two dimensions), and\ntensors (three or more dimensions).For example, sci-\nentiﬁc surveys for geographic regions usually represent\ndata as a multi-dimensional array that stores sensor mea-\nsurements using location/time-based coordinates:\n\n(latitude, longitude, time, [vector-of-values])\n\nSeveral other data sets look like this, including ge-\nnomic sequencing and computational ﬂuid dynamics.Arrays are also the core of most ML data sets.Although array-based programming languages have\nexisted since the 1960s (APL [142]), the initial work\non array DBMSs began in the 1980s.PICDMS is con-\nsidered to be the ﬁrst DBMS implementation using the\narray data model [114].The two oldest array DBMSs\nstill being developed today are Rasdaman [66, 103] and\nkdb+ [34].Newer array DBMSs include SciDB [54,\n191] and TileDB [76].HDF5 [29] and NetCDF [46] are\npopular array ﬁle formats for scientiﬁc data.There are several system challenges with storing and\nquerying real-world array data sets.Foremost is that ar-\nray data does not always align to a regular integer grid;\nfor example, geospatial data is often split into irregular\nshapes.An application can map such grids to integer\ncoordinates via metadata describing this mapping [166].Hence, most applications maintain array and non-array\ndata together in a single database.Unlike row- or column-based DBMSs, querying array\ndata in arbitrary dimensions presents unique challenges.The difﬁculty arises from storing multi-dimensional ar-\nray data on a linear physical storage medium like a disk.To overcome these challenges, array DBMSs must em-\n\nploy indexing and data structures to support efﬁcient\ntraversal across array dimensions.Discussion: Array DBMSs are a niche market that has\nonly seen adoption in speciﬁc verticals (we discuss vec-\ntor DBMSs next).For example, they have considerable\ntraction in the genomics space.HDF5 is popular for\nsatellite imagery and other gridded scientiﬁc data.But\nbusiness applications rarely use dedicated array DBMSs,\nwhich is necessary for any product to survive.No ma-\njor cloud provider offers a hosted array DBMS service,\nmeaning they do not see a sizable market.The challenge that array DBMS vendors have al-\nways faced is that the SQL includes support for or-\ndered arrays as ﬁrst-class data types (despite this be-\ning against the original RM proposal [115]).The ﬁrst\nproposal to extend the unordered set-based RM with\nordered rasters was in 1993 [155].An early exam-\nple of this was Illustra’s temporal (one-dimensional)\ndata plugin [31].SQL:1999 introduced limited sup-\nport for single-dimension, ﬁxed-length array data types.SQL:2003 expanded to support nested arrays without a\npredeﬁned maximum cardinality.Later entrants include\nOracle Georaster [4] and Teradata [73].Data cubes are\nspecial-purpose arrays [135], but columnar RDBMSs\nhave eclipsed them for OLAP workloads because of\ntheir better ﬂexibility and lower engineering costs [113].More recently, the SQL:2023 standard includes sup-\nport for true multi-dimensional arrays (SQL/MDA) that\nis heavily inspired by Rasdaman’s RQL [166].This\nupdate allows SQL to represent arrays with arbitrary\nIn effect,\ndimensions using integer-based coordinates.this allows data cubes to exist in a SQL framework, but\ncolumnar DBMSs now dominate this market.2.7 Vector Databases\nSimilar to how the column-family model is a reduction\nof the document model, the vector data model simpliﬁes\nthe array data model to one-dimensional rasters.Given\nthat vector DBMSs are attracting the most attention\nright now from developers and investors (similar to the\nNoSQL fad), it is necessary to discuss them separately.The reason for this interest is because developers use\nthem to store single-dimension embeddings generated\nfrom AI tools.These tools use learned transformations\nto convert a record’s data (e.g., text, image) into a vec-\ntor representing its latent semantics.For example, one\ncould convert each Wikipedia article into an embedding\nusing Google BERT and store them in a vector database\nalong with additional article meta-data:\n\n(title, date, author, [embedding-vector])\n\nThe size of these embedding vectors range from 100s\nof dimensions for simple transformers to 1000s for high-\nend models; these sizes will obviously grow over time\nwith the development of more sophisticated models.SIGMOD Record, June 2024 (Vol. 53, No.2)\n\n25\n\n\fThe key difference between vector and array DBMSs\nis their query patterns.The former are designed for\nsimilarity searches that ﬁnd records whose vectors have\nthe shortest distance to a given input vector in a high-\ndimensional space.The input vector is another embed-\nding generated with the same transformer used to popu-\nlate the database.Unlike array DBMSs, applications do\nnot use vector DBMSs to search for matches at an off-\nset in a vector nor extract slices across multiple vectors.Instead, the dominant use case is this similarity search.To avoid brute force scans for ﬁnding the most sim-\nilar records, vector DBMSs build indexes to accelerate\napproximate nearest neighbor (ANN) searches.Appli-\ncations issue queries with predicates on both the em-\nbedding index and non-embedding attributes (i.e., meta-\ndata).The DBMS then chooses whether to use the non-\nembedding predicate on records before (pre-ﬁlter) or af-\nter (post-ﬁlter) the vector search.There are dozens of new DBMSs in this emerging\ncategory, with Pinecone [58], Milvus [40], and Weav-\niate [84] as the leading systems.Text search engines,\nincluding Elasticsearch [23], Solr [70], and Vespa [79],\nexpanded their APIs to support vector search.Other\nDBMSs rebranded themselves as vector databases to\njump on the bandwagon, such as Kdb+ [34].One compelling feature of vector DBMSs is that\nthey provide better integration with AI tools (e.g., Chat-\nGPT [16], LangChain [36]) than RDBMSs.These sys-\ntems natively support transforming a record’s data into\nan embedding upon insertion using these tools and then\nuses the same transformation to convert a query’s in-\nput arguments into an embedding to perform the ANN\nsearch; other DBMSs require the application to perform\nthese transformations outside of the database.Discussion: Unlike array DBMSs that require a cus-\ntomized storage manager and execution engine to sup-\nport efﬁcient operations on multi-dimensional data, vec-\ntor DBMSs are essentially document-oriented DBMSs\nwith specialized ANN indexes.Such indexes are a fea-\nture, not the foundation of a new system architecture.After LLMs became “mainstream” with ChatGPT in\nlate 2022, it took less than one year for several RDBMSs\nIn 2023,\nto add their own vector search extensions.many of the major RDBMSs added vector indexes, in-\ncluding Oracle [7], SingleStore [137], Rockset [8], and\nClickhouse [157].Contrast this with JSON support in\nRDBMSs.NoSQL systems like MongoDB and CouchDB\nbecame popular in the late 2000s and it took several\nyears for RDBMSs to add support for it.There are two likely explanations for the quick pro-\nliferation of vector indexes.The ﬁrst is that similarity\nsearch via embeddings is such a compelling use case\nthat every DBMS vendor rushed out their version and\nannounced it immediately.The second is that the en-\ngineering effort to introduce a new index data structure\n\nis small enough that it did not take that much work for\nthe DBMS vendors to add vector search.Most of them\ndid not write their vector index from scratch and instead\nintegrated an open-source library (e.g., pgVector [145],\nDiskANN [19], FAISS [24]).We anticipate that vector DBMSs will undergo the\nsame evolution as document DBMSs by adding features\nto become more relational-like (e.g., SQL, transactions,\nextensibility).Meanwhile, relational incumbents will\nhave added vector indexes to their already long list of\nfeatures and moved on to the next emerging trend.2.8 Graph Databases\nThere has been a lot of academic and industry interest\nin the last decade in graph databases [183].Many appli-\ncations use knowledge graphs to model semi-structured\ninformation.Social media applications inherently con-\ntain graph-oriented relationships (“likes”, “friend-of”).Relational design tools provide users with an entity-\nrelationship (ER) model of their database.An ER dia-\ngram is a graph; thus, this paradigm has clear use cases.The two most prevalent approaches to represent graphs\nare (1) the resource description framework (RDF) and\n(2) property graphs [126].With property graphs, the\nDBMS maintains a directed multi-graph structure that\nsupports key/value labels for nodes and edges.RDF\ndatabases (aka triplestores) only model a directed graph\nwith labeled edges.Since property graphs are more com-\nmon and are a superset of RDF, we will only discuss\nthem.We consider two use cases for graph DBMSs and\ndiscuss the problems that will limit their adoption.The ﬁrst category of systems are for operational /\nOLTP workloads: an application, for example, adds a\nfriend link in the database by updating a single record,\npresumably in a transactional manner.Neo4j [44] is the\nmost popular graph DBMS for OLTP applications.It\nsupports edges using pointers (as in CODASYL) but it\ndoes not cluster nodes with their “parent” or “offspring”.Such an architecture is advantageous for traversing long\nedge chains since it will do pointer chasing, whereas a\nRDBMS has to do this via joins.But their potential mar-\nket success comes down to whether there are enough\n“long chain” scenarios that merit forgoing a RDBMS.The second use case is analytics, which seeks to de-\nrive information from the graph.An example of this\nscenario is ﬁnding which user has the most friends un-\nder 30 years old.Notable entries like Tigergraph [74]\nand JanusGraph [32] focus on query languages and\nstorage on a graph DBMS.Other systems, such as Gi-\nraph [26] and Turi [78] (formerly Graphlab [27]) pro-\nvide a computing fabric to support parallel execution of\ngraph-oriented programs, typically written by a user.Unlike queries in relational analytics that are charac-\nterized by chains of joins, queries for graph analytics\ncontain operations like shortest path, cut set, or clique\n\n26\n\nSIGMOD Record, June 2024 (Vol.53, No. 2)\n\n\fdetermination. Algorithm choice and data representa-\ntion will determine a DBMS’s performance.This argues\nfor a computing fabric that allows developers to write\ntheir own algorithms using an abstraction that hides\nthe underlying system topology.However, previous\nresearch shows that distributed algorithms rarely out-\nperform single-node implementations because of com-\nmunication costs [160].A better strategy is to compress\na graph into a space-efﬁcient data structure that ﬁts in\nmemory on a single node and then run the query against\nthis data structure.All but the largest graph databases\nare probably best handled this way.Discussion: Regardless of whether a graph DBMS tar-\ngets OLTP or OLAP workloads, the key challenge these\nsystems have to overcome is that it is possible to simu-\nlate a graph as a collection of tables:\n\nNode (node_id, node_data)\nEdge (node_id_1, node_id_2, edge_data)\n\nThis means that RDBMSs are always an option to sup-\nport graphs.But “vanilla” SQL is not expressive enough\nfor graph queries and thus require multiple client-server\nroundtrips for traversal operations.Some RDBMSs, including MSSQL [3] and Oracle [50],\n\nprovide built-in SQL extensions that make storing and\nquerying graph data easier.Other DBMSs use a transla-\ntion layer on top of relations to support graph-oriented\nAPIs.Amazon Neptune [45] is a graph-oriented veneer\non top of Aurora MySQL.Apache AGE provides an\nOpenCypher interface on top of PostgreSQL [10].More recently, SQL:2023 introduced property graph\nqueries (SQL/PGQ) for deﬁning and traversing graphs\nin a RDBMS [196].The syntax builds on existing lan-\nguages (e.g., Neo4j’s Cypher [49], Oracle’s PGQL [51],\nand TigerGraph’s GSQL [75]), and shares aspects of the\nemerging GQL standard [126].Thus, SQL/PGQ further\nnarrows the functionality difference between RDBMSs\nand native graph DBMSs.The question is whether graph DBMS vendors can\nmake their specialized systems fast enough to over-\ncome the above disadvantages.There have been several\nperformance studies showing that graph simulation on\nRDBMSs outperform graph DBMSs [130, 143].More\nrecent work showed how SQL/PGQ in DuckDB outper-\nforms a leading graph DBMS by up to 10\n[196].This\ntrend will continue with further improvements in worst-\ncase optimal joins [132, 168] and factorized execution\nalgorithms [100] for graph queries in RDBMSs.⇥\n\n2.9 Summary\nA reasonable conclusion from the above section is that\nnon-SQL, non-relational systems are either a niche mar-\nket or are fast becoming SQL/RM systems.Speciﬁcally:\n\n•\n\nMapReduce Systems: They died years ago and are,\nat best, a legacy technology at present.•\n\n•\n\n•\n\n•\n\n•\n\n•\n\n•\n\nKey-value Stores: Many have either matured into\nRM systems or are only used for speciﬁc problems.These can generally be equaled or beaten by modern\nhigh-performance RDBMSs.Document Databases: Such NoSQL systems are on\na collision course with RDBMSs.The differences\nbetween the two kinds of systems have diminished\nover time and should become nearly indistinguish-\nable in the future.Column-Family Systems: These remain a niche\nmarket.Without Google, this paper would not be\ntalking about this category.Text Search Engines: These systems are used for\ntext ﬁelds in a polystore architecture.It would be\nvaluable if RDBMSs had a better story for search so\nthese would not have to be a separate product.Array Databases: Scientiﬁc applications will con-\ntinue to ignore RDBMSs in favor of bespoke array\nsystems.They may become more important because\nRDBMSs cannot efﬁciently store and analyze arrays\ndespite new SQL/MDA enhancements.Vector Databases: They are single-purpose DBMSs\nwith indexes to accelerate nearest-neighbor search.RM DBMSs should soon provide native support for\nthese data structures and search methods using their\nextendable type system that will render such special-\nized databases unnecessary.Graph Databases: OLTP graph applications will\nbe largely served by RDBMSs.In addition, ana-\nlytic graph applications have unique requirements\nthat are best done in main memory with specialized\ndata structures.RDBMSs will provide graph-centric\nAPIs on top of SQL or via extensions.We do not ex-\npect specialized graph DBMSs to be a large market.Beyond the above, there are also proposals to rebrand\nprevious data models as something novel.For example,\ngraph-relational [158] is the same as the semantic data\nmodel [202].Likewise, document-relational is the doc-\nument model with foreign keys [199].Others provide a\nnon-SQL veneer over a RDBMS (e.g., PRQL [64], Mal-\nloy [39]).Although these languages deal with some of\nSQL’s shortcomings, they are not compelling enough to\novercome its entrenched userbase and ecosystem.3 System Architectures\nThere have been major new ideas in DBMS architec-\ntures put forward in the last two decades that reﬂect-\ning changing application and hardware characteristics.These ideas range from terriﬁc to questionable, and we\ndiscuss them in turn.3.1 Columnar Systems\nTo understand the appeal of columnar DBMSs, we need\nto explain the origins of the data warehouse (OLAP)\nmarket.Beginning in the mid-1990s, enterprises started\n\nSIGMOD Record, June 2024 (Vol.53, No. 2)\n\n27\n\n\fcollecting their customer facing (usually sales) data.Brick-and-mortar retailers (e.g., Walmart) were at fore-\nfront of constructing historical sales databases.These\ncompanies generally found that a sales data warehouse\nwould pay for itself in better stock ordering and rota-\ntion decisions within six months.Such customer facing\ndatabases are now omnipresent in enterprises.Data warehouse applications have common proper-\n\nties that are distinct from OLTP workloads:\n1.They are historical in nature (i.e., they are loaded\n\nperiodically and then are read-only). 2.Organizations retain everything as long as they can\n\nafford the storage — think terabytes to petabytes.3. Queries typically only access a small subset of at-\ntributes from tables and are ad-hoc in nature.Ralph Kimball was an early proponent of star schema\ndata modelling for data warehouses [148, 149].The idea\nwas to construct a fact table that held item-level trans-\nactional data.The classic example is a fact table that\ncontains a record for every item purchased in a retail en-\nterprise.Then, one surrounds the fact table with dimen-\nsion tables that contain common information factored\nout from the fact table to save space.Again, in a retail\nsetting, these dimension tables would include informa-\ntion about customers, products, stores, and time.Organizing the DBMS’s storage by columns instead\nof rows has several beneﬁts [87].First, compressing\ncolumnar data is more effective than row-based data be-\ncause there is a single value type in a data block of-\nten many repeated bytes.Second, a Volcano-style en-\ngine executes operators once per row.In contrast, a\ncolumn-oriented engine has an inner loop that processes\na whole column using vectorized instructions [106, 147].Lastly, row stores have a large header for each record\n(e.g., 20 bytes) to track nulls and versioning meta-data,\nwhereas column stores have minimal storage overhead\nper record.Discussion: Over the last two decades, all vendors ac-\ntive in the data warehouse market have converted their\nofferings from a row store to a column store.This tran-\nsition brought about signiﬁcant changes in the design\nof DBMSs.In addition, several new vendors have en-\ntered the market in the last two decades with column\nstore offerings, for example Amazon’s Redshift [94] and\nGoogle’s BigQuery [162] along with offerings from in-\ndependent companies (e.g., Snowﬂake [121]).In summary, column stores are new DBMS implemen-\ntations with specialized optimizers, executors, and stor-\nage formats.They have taken over the data warehouse\nmarketplace because of their superior performance.3.2 Cloud Databases\nThe rise of cloud platforms in the late 2000s has also\ngreatly affected the implementation (and sales model) of\n\nDBMSs.Initial cloud DBMS offerings repackaged on-\nprem systems into managed VMs with direct-attached\nstorage.But over the last 20 years, networking band-\nwidth has increased much faster than disk bandwidth,\nmaking network attached storage (NAS) attractive as an\nalternative to attached storage.This has caused a pro-\nfound rethinking of DBMS architectures for the cloud.All major cloud vendors offer NAS via object stores\n(e.g., Amazon S3) with some DBMS functionality (e.g.,\nreplication, ﬁltering).Beyond better economics com-\npared to direct-attached storage, object stores have sev-\neral advantages that compensate for the cost of the\nadded network link.First, because the compute nodes\nare disconnected from the storage nodes, a system can\nprovide per-query elasticity; the DBMS can add new\ncompute nodes dynamically without having to reshufﬂe\ndata.It also allows the DBMS to use different hard-\nware for its storage nodes than compute nodes.Second,\nthe system can reassign compute nodes to other tasks\nif a DBMS is underutilized.On the other hand, in a\nshared-nothing DBMS, a node must always be online to\nhandle incoming query requests.Lastly, pushing down\ncomputation into the storage nodes is possible (and gen-\nerally advantageous).This execution strategy is known\nas “pushing the query to the data” versus “pulling the\ndata to the query” and is well understood in DBMSs.Generally, the ﬁrst two ideas are called “serverless\ncomputing”, and was introduced for cloud-native DBMSs\nby Snowﬂake [121].Other vendors have moved or\nare in the process of moving to a serverless environ-\nment for their cloud offerings.Effective utilization of\nthis model requires a hosted multi-node environment in\nwhich multiple DBMS customers are grouped onto the\nsame node(s) with a multi-tenant execution scheme.Discussion: The advent of cloud databases is another\nexample of “what goes around comes around”.Multi-\nnode shared-disk DBMSs are an old idea that histori-\ncally tended not to work out well.However, it is back in\nvogue with technology change (faster networking) and\nmoving to the cloud.In addition, time-sharing services\nwere popular in the 1970s when computers were big and\nexpensive.Cloud platforms are big time-sharing ser-\nvices, so the concept is back after a few decades.Since\nenterprises are moving everything possible to the cloud,\nwe expect this shared-disk to dominate DBMS architec-\ntures.Hence, we do not foresee shared-nothing architec-\ntures resurfacing in the future.The cloud has profoundly impacted DBMSs, causing\nthem to be completely re-architected.The movement\nof computing from on-prem to the cloud generates a\nonce-in-a-lifetime opportunity for enterprises to refac-\ntor codebases and remove bad historical technology de-\ncisions.A cloud environment also provides several ben-\neﬁts to vendors that are not possible with on-prem de-\nployments.Foremost is that vendors can track usage\n\n28\n\nSIGMOD Record, June 2024 (Vol. 53, No.2)\n\n\ftrends for all their customers: they can monitor unex-\npected behavior, performance degradations, and usage\npatterns.Moreover, they can push incremental updates\nand code patches without disrupting service.From a business perspective, open-source DBMSs\nface the danger of becoming too popular and being mon-\netized by the major cloud providers.The public spats\nbetween Amazon and ISVs like MongoDB [153] and\nElasticsearch [101] are notable examples.3.3 Data Lakes / Lakehouses\nAnother trend that the cloud platforms fomented is the\nmovement away from monolithic, dedicated data ware-\nhouses for OLAP workloads and towards data lakes\nbacked by object stores.With legacy data warehouses,\norganizations load data into the DBMS, which the sys-\ntem stashes in managed storage with proprietary for-\nmats.Vendors viewed their DBMSs as the “gatekeepers”\nfor all things related to data in an organization.However,\nthis has not been the model of many organizations, es-\npecially technology companies, for the last decade.With a data lake architecture, applications upload ﬁles\nto a distributed object store, bypassing the traditional\nroute through the DBMS [167].Users then execute\nqueries and processing pipelines on these accumulated\nﬁles using a lakehouse (a portmanteau of data ware-\nhouse and data lake) execution engine [93].These lake-\nhouse systems provide a uniﬁed infrastructure support-\ning SQL and non-SQL workloads.The latter is crucial\nas the last decade has shown that data scientists and ML\npractitioners typically use Python-based notebooks that\nuse Panda’s DataFrame API [159] to access data instead\nof SQL.Several projects leverage DBMS methods to\noptimize DataFrame processing, including Dask [181],\nPolars [61], Modin [177], and Bodo [198].Instead of using DBMS-speciﬁc proprietary ﬁle for-\nmats or inefﬁcient text-based ﬁles (e.g., CSV, JSON),\napplications write data to data lakes using open-source,\ndisk-resident ﬁle formats [203].The two most pop-\nular formats are Twitter/Cloudera’s Parquet [55] and\nMeta’s ORC [53, 140].Both of them borrow tech-\nniques from earlier columnar storage research, such as\nPAX [90], compression [87], and nested-data (JSON)\nshredding [121, 161].Apache Arrow [11] is a similar\nbinary format for exchanging in-memory data between\nsystems.Open-source libraries for reading/writing these\nformats allow disparate applications to create data ﬁles\nthat other systems then parse and consume, thereby en-\nhancing data sharing across services and business units.Discussion: Data lakes are the successor to “Big Data”\nmovement from the early 2010s, partly led by the pop-\nularity of MR systems (Sec.2.1) and column stores\n(Sec. 3.1).At ﬁrst glance, a data lake seems like a terri-\nble idea for an organization: allowing any application to\nwrite arbitrary ﬁles into a centralized repository without\n\nany governance is a recipe for integrity, discovery, and\nversioning problems [167].Lakehouses provide much-\nneeded control over these environments to help mitigate\nmany problems with meta-data, caching, and indexing\nservices [93].Additional middleware that tracks new\ndata and supports transactional updates, such as Delta\nLake [92], Iceberg [6], and Hudi [5], make lakehouses\nlook more like a traditional data warehouse.Data lakes introduce new challenges to query opti-\nmization.DBMSs have always struggled with acquir-\ning precise statistics on data,\nleading to poor query\nplan choices [154].However, a data lake system may\ncompletely lack statistics on newly ingested data ﬁles.Consequently, incorporating adaptive query processing\nstrategies is imperative in the cloud to enable a DBMS to\ndynamically modify query plans during execution based\non observed data characteristics [97, 105, 163].All the major cloud vendors now offer some variation\nof a managed data lake service.Since data lake sys-\ntems backed by object stores are much cheaper per giga-\nbyte than proprietary data warehouses, the legacy OLAP\nvendors (e.g., Teradata, Vertica) have extended their\nDBMSs to support reading data from object stores in re-\nsponse to this pricing pressure.Several independent sys-\ntems are also in this space, including Databricks [105],\nDremio [21], PrestoDB [63], and Trino [77].3.4 NewSQL Systems\nIn the late 2000s, there were multiple distributed NoSQL\nDBMSs available designed to scale horizontally to sup-\nport online applications with large number of concurrent\nusers [110].However, many organizations could not use\nthese NoSQL systems because their applications could\nnot give up strong transactional requirements.But the\nexisting RDBMSs (especially open-source ones) were\nnot able to (natively) scale across multiple machines.In\nresponse, NewSQL systems arrived in the early 2010s\nseeking to provide the scalability of NoSQL systems for\nOLTP workloads while still supporting SQL [95, 171].In other words, these new systems sought to achieve the\nsame scalability of NoSQL DBMSs from the 2000s but\nstill keep the RM and ACID transactions of the legacy\nDBMSs from the 1990s.There were two main groups of NewSQL systems.The ﬁrst was in-memory DBMSs, including H-Store [144,\n189] (commercialized as VoltDB [83]), SingleStore [69],\nMicrosoft Hekaton [128], and HyPer [146].Other start-\nup offerings included disk-oriented, distributed DBMSs\nlike NuoDB [47] and Clustrix [17].Discussion: There has yet to be a dramatic uptake in\nNewSQL DBMS adoption [96].The reason for this lack-\nluster interest is that existing DBMSs were good enough\nfor the time, which means organizations are unwilling to\ntake on the costs and risk of migrating existing applica-\ntions to newer technologies.Companies are more risk-\n\nSIGMOD Record, June 2024 (Vol. 53, No.2)\n\n29\n\n\faverse with changing OLTP DBMSs than with OLAP.If an OLTP DBMS fails, companies cannot execute the\ntransactions they need to generate revenue.In contrast,\nan OLAP DBMS failure could be limited to temporarily\ninconveniencing an analyst or data scientist.There were other restrictions in NewSQL DBMSs,\nsuch as only supporting a subset of standard SQL or\nbad performance on multi-node transactions.Some\nNewSQL products, like Microsoft’s Hekaton, were only\navailable as an extension to a legacy DBMS, requiring\nthe faster engine to use the slower DBMS’s interfaces.NewSQL vendors also incorrectly anticipated that in-\nmemory DBMS adoption would be larger in the last\ndecade.Flash vendors drove down costs while improv-\ning storage densities, bandwidth, and latencies.Higher\nDRAM costs and the collapse of persistent memory\n(e.g., Intel Optane) means that SSDs will remain domi-\nnant for OLTP DBMSs.The aftermath of NewSQL is a new crop of distributed,\ntransactional SQL RDBMSs.These include TiDB [141],\nCockroachDB [195], PlanetScale [60] (based on the\nVitess sharding middleware [80]), and YugabyteDB [86].The major NoSQL vendors also added transactions to\ntheir systems in the last decade despite previously strong\nclaims that they were unnecessary.Notable DBMSs that\nmade the shift include MongoDB, Cassandra, and Dy-\nnamoDB.This is of course due to customer requests\nthat transactions are in fact necessary.Google said this\ncogently when they discarded eventual consistency in\nfavor of real transactions with Spanner in 2012 [119].3.5 Hardware Accelerators\nThere has been a hunt for a cost-effective hardware ac-\ncelerator for DBMSs for the last 50 years.The promise\nis obvious: specialized hardware designed for a DBMS\nshould easily outperform a conventional CPU.In the 1980s, vendors fabricated custom hardware to\naccelerate DBMSs and marketed them as database ma-\nchines [107].Britton-Lee released the ﬁrst commercial\naccelerator product (IDM/500) in 1981 [192] that con-\ntained a conventional CPU with a hardware accelerator\nthat ofﬂoaded portions of a query’s execution.This ac-\ncelerator targeted a small subset of the execution path,\nand was not cost-effective.Teradata introduced its own\ndatabase machine that provided network hardware for\nsorting in-ﬂight tuples (Y-net [1]), but it was dropped\nfor a software-only solution [85].All other custom hard-\nware DBMS acceleration during the 1980s failed.Instead of building custom hardware for DBMSs, the\nlast 20 years have been about using commodity hard-\nware (FPGAs, GPUs) to accelerate queries.This is an\nenticing idea: a vendor can get the beneﬁts of a DBMS\naccelerator without the cost of fabricating the hardware.Netezza was one of the ﬁrst FPGA-based DBMSs\nthat started in the late 1990s as a fork of PostgreSQL.It used an FPGA to accelerate searches on disk-resident\npages, but originally could not search in-memory pages.Netezza corrected this limitation in a later version [2].Swarm64 attempted to sell a FPGA accelerator for Post-\ngreSQL but switched to a software-only architecture\nwithout the FPGA before they were acquired [91].Vitesse’s\nDeepgreen DB [81] is the only remaining FPGA-enhanced\nDBMS available from an ISV.There is more activity in the GPU-accelerated DBMS\nmarket.Notable GPU DBMSs include Kinetica [35],\nSqream [35], Brytlyt [13], and HeavyDB [48].If data\ndoes not ﬁt in GPU memory, then query execution is\nbottlenecked on loading data into the device, thereby\nrendering the hardware’s parallelization beneﬁts moot.Discussion: There are several conclusions that we can\ndraw from the above analysis.First, these systems are\nall focused on the OLAP market and only for RDBMSs;\nthere are essentially no data model implications to the\ndiscussion in this section.Also, OLAP workloads will\ncontinue to move aggressively to the cloud, but special-\npurpose hardware is not likely to ﬁnd acceptance unless\nit is built by the cloud vendor.Creating custom hardware just for a DBMS is not\ncost-effective for most companies.Commodity hard-\nware avoids this problem but there is still the challenge\nof integrating the hardware into a DBMS.The reason\nwhy there are more GPU DBMSs than FPGA systems\nis because there are existing support libraries available\nfor GPUs (e.g., Nvidia CUDA [169]).But cloud CPU-\nbased compute resources are incredibly cheap due to\neconomies of scale.The success of any accelerator is\nlikely to be limited to on-prem databases, but this mar-\nket is not growing at the same rate as cloud databases.Even if one could get an accelerator to market that\nshowed orders of magnitude improvement over existing\ntechnologies, that only solves half the problem needed\nfor adoption and success.A hardware-only company\nmust ﬁnd somebody to add support for its accelerator\nin a DBMS.If the accelerator is an optional add-on to\nthe DBMS, then adoption will be low and thus a DBMS\nvendor will not want to spend engineering time on sup-\nporting it.If the accelerator is a critical component of\nthe DBMS, then no vendor would outsource the devel-\nopment of such an important part to an outside vendor.The only place that custom hardware accelerators will\nsucceed is for the large cloud vendors.They can justify\nthe $50–100m R&D cost of custom hardware at their\nmassive scale.They also control the entire stack (hard-\nware and software) and can integrate their hardware at\ncritical locations.Amazon did this already with their\nRedshift AQUA accelerators [102].Google BigQuery\nhas custom components for in-memory shufﬂes [89].In spite of the long odds, we predict that there will be\nmany attempts in this space over the next two decades.30\n\nSIGMOD Record, June 2024 (Vol. 53, No.2)\n\n\f3.6 Blockchain Databases\nAs of this writing, a waning database technology fad\nis blockchains.These are decentralized log-structured\ndatabases (i.e., ledger) that maintain incremental check-\nsums using some variation of Merkle trees.These in-\ncremental checksums are how a blockchain ensures that\nthe database’s log records are immutable: applications\nuse these checksums to verify that previous database up-\ndates have not been altered.The ideal use case for blockchain databases is peer-to-\npeer applications where one cannot trust anybody.There\nis no centralized authority that controls the ordering of\nupdates to the database.Thus, blockchain implementa-\ntions use a BFT commit protocol to determine which\ntransaction to apply to the database next.At the present time, cryptocurrencies (Bitcoin) are\nthe only use case for blockchains.In addition, there\nhave been attempts to build a usable DBMS on top of\nblockchains, notably Fluree [25], BigChainDB [12], and\nResilientDB [136].These vendors (incorrectly) promote\nthe blockchain as providing better security and auditabil-\nity that are not possible in previous DBMSs.Discussion: We are required to place trust in several en-\ntities in today’s society.When one sells a house, they\ntrust the title company to manage the transaction.The\nonly applications without real-world trust are dark web\ninteractions (e.g., money laundering).Legitimate busi-\nnesses are unwilling to pay the performance price (about\nﬁve orders of magnitude) to use a blockchain DBMS.If\norganizations trust each other, they can run a shared dis-\ntributed DBMS more efﬁciently without wasting time\nwith blockchains.To the best of our knowledge, all the\nmajor cryptocurrency exchanges run their businesses off\ntraditional RDBMSs and not blockchain systems.Blockchain proponents make additional meaningless\nclaims of achieving data resiliency through replication\nin a peer-to-peer environment.No sensible company\nwould rely on random participants on the Internet as the\nbackup solution for mission-critical databases.There is possibly a (small) market for private block-\nchain DBMSs.Amazon’s Quantum Ledger Database\n(QLDB) released in 2018 [65] provides the same im-\nmutable and veriﬁable update guarantees as a blockchain,\nbut it is not decentralized (i.e., no BFT commit protocol).Amazon built QLDB after ﬁnding no compelling use\ncase for a fully decentralized blockchain DBMS [108].3.7 Summary\nThe key takeaways from the major technological thrusts\nin database systems are as follows:\n\n•\n\n•\n\nColumnar Systems: The change to columnar stor-\nage revolutionized OLAP DBMS architectures.Cloud Databases: The cloud has upended the con-\nventional wisdom on how to build scalable DBMSs.Except for embedded DBMSs, any product not start-\ning with a cloud offering will likely fail.Data Lakes / Lakehouses: Cloud-based object stor-\nage using open-source formats will be the OLAP\nDBMS archetype for the next ten years.NewSQL Systems: They leverage new ideas but\nhave yet to have the same impact as columnar and\ncloud DBMSs.It has led to new distributed DBMSs\nthat support stronger ACID semantics as a counter\nto NoSQL’s weaker BASE guarantees.Hardware Accelerators: We do not see a use case\nfor specialized hardware outside of the major cloud\nvendors, though start-ups will continue to try.Blockchain Databases: An inefﬁcient technology\nlooking for an application.History has shown this is\nthe wrong way to approach systems development.•\n\n•\n\n•\n\n•\n\n4 Parting Comments\nOur analysis of the last two decades in databases has sev-\neral takeaways.Unfortunately, some of these are repeats\nof the warnings from the 2005 paper.Never underestimate the value of good marketing for\nbad products.The database market is highly competi-\ntive and lucrative.This competition drives vendors to\nclaim that their new technologies will solve all sorts of\nproblems and change developers’ lives for the better.Ev-\nery developer has struggled with databases before, so\nthey are especially amenable to such marketing.Infe-\nrior DBMS products have succeeded via strong market-\ning despite the existence of better options available at\nthe time: Oracle did this in the 1980s, MySQL did this\nin the 2000s, and MongoDB did this in the 2010s.These\nsystems got enough traction early on to buy them time\nto ﬁx the engineering debt they accumulated earlier.Beware of DBMSs from large non-DBMS vendors.One interesting aspect in the last ten years of databases\nis the trend of tech companies building DBMSs in-house\nthat they then spin out as open-source projects.All these\nsystems started life as purpose-built applications for a\ntech company.The company then releases the DBMS\nas an open-source project (often pushed to the Apache\nFoundation for stewardship) in hopes to achieve “free”\ndevelopment from external users.Some times they come from large companies that can\nafford to allocate resources to developing new systems.Notable examples include Meta (Hive [197], Presto [63],\nCassandra [14], RocksDB [68]) and LinkedIn (Kafka [33],\nPinot [59], Voldemort [82]).Other systems are from\nstart-ups building a data-intensive product where they\nfelt the need to also build a DBMS.The most successful\nexamples are 10gen (MongoDB) and PowerSet (HBase),\nbut there also many failed endeavors.This trend to avoid “not invented here” software is\npartly because many companies’ promotion path favors\n\nSIGMOD Record, June 2024 (Vol.53, No. 2)\n\n31\n\n\fengineers who make new internal systems, even if ex-\nisting tools are sufﬁcient.But this perversion led many\nteams without DBMS engineering experience to under-\ntake building a new system.One should be wary of\nsuch systems when a company ﬁrst open-sources them,\nas they are almost always immature technologies.Do not ignore the out-of-box experience.One of the\nsalient selling points of many non-relational DBMSs is\na better “out-of-box” experience than RDBMSs.Most\nSQL systems require one ﬁrst to create a database and\nthen deﬁne their tables before they can load data.This\nis why data scientists use Python notebooks to analyze\ndata ﬁles quickly.Every DBMS should, therefore, make\nit easy to perform in situ processing of local and cloud-\nstorage ﬁles.DuckDB’s rising popularity is partly due\nto its ability to do this well.Vendors should also consider additional challenges\nthat customers will inevitably face with databases, in-\ncluding physical design, knob tuning, schema design,\nand query tuning.There is a crucial need for what one\nof us calls “self-driving” DBMSs [173].Developers need to query their database directly.Most OLTP applications created in the last 20 years pri-\nmarily interact with databases via an abstraction layer,\nsuch as an endpoint API (e.g., REST, GraphQL) or\nan object-relational mapper (ORM) library.Such lay-\ners translate an application’s high-level requests into\ndatabase queries.ORMs also automatically handle main-\ntenance tasks, such as schema migrations.One could\nargue that since OLTP developers never write raw SQL\nin their applications, it does not matter what data model\ntheir DBMS uses as these layers hide it.ORMs are a vital tool for rapid prototyping.But they\noften sacriﬁce the ability to push logic into the DBMS\nin exchange for interoperability with multiple DBMSs.Developers fall back to writing explicit database queries\nto override the poor auto-generated queries.This is why\nusing a RDBMS that supports SQL is the better choice.The impact of AI/ML on DBMSs will be signiﬁcant.How DBMSs should interact with modern AI/ML tools\nhas recently become a crucial question, especially with\nthe advent of LLMs (e.g., ChatGPT).Although this ﬁeld\nis moving rapidly, we offer a few initial comments.There is a resurgence in using natural languages (NLs)\nto query databases due to advancements in LLMs at\nconverting NL to query code (e.g., SQL) [133].Some\nhave even suggested that such AI-powered query inter-\nfaces will render SQL obsolete.NL interfaces are an\nold research topic that dates back to the 1970s [139],\nbut which historically has poor outcomes and thus little\nwidespread use [88].We acknowledge LLMs have im-\npressive results for this task but caution those who think\nNL will replace SQL.Nobody will write OLTP appli-\ncations using an NL, as most generate queries using\n\nORMs.For OLAP databases, NL could prove helpful\nin constructing the initial queries for exploratory anal-\nysis.However, these queries should be exposed to a\ndashboard-like reﬁnement tool since English and other\nNLs are rife with ambiguities and impreciseness.There is a reluctance to depend on current LLM tech-\nnology for decision-making inside the enterprise, espe-\ncially with ﬁnancial data.The biggest issue is that the\noutput of an LLM is not explainable to a human.Sec-\nond, LLM systems require more training data than “tra-\nditional” ML systems (e.g., random forests, Bayesian\nmodels).Companies generally cannot outsource the cre-\nation of training data for these models to unskilled peo-\nple.For these reasons, the uptake of LLMs for enter-\nprise data will be cautiously slow.Lastly, there is a considerable amount of recent re-\nsearch on using AI/ML to optimize the DBMSs [174].Examples include ML-oriented query optimizers [152,\n156], conﬁguration tuners [200, 204], and access meth-\nods [151, 193].Although such ML-assisted optimiza-\ntions are powerful tools to improve the performance of\nDBMSs, it does not obviate the need for high-quality\nsystems engineering.5 Conclusion\nWe predict that what goes around with databases will\ncontinue to come around in upcoming decades.Another\nwave of developers will claim that SQL and the RM are\ninsufﬁcient for emerging application domains.People\nwill then propose new query languages and data models\nto overcome these problems.There is tremendous value\nin exploring new ideas and concepts for DBMSs (it is\nwhere we get new features for SQL).The database re-\nsearch community and marketplace are more robust be-\ncause of it.However, we do not expect these new data\nmodels to supplant the RM.Another concern is the wasted effort of new projects\nreimplementing the same components that are not novel\nbut necessary to have a production-ready DBMS (e.g.,\nconﬁg handlers, parsers, buffer pools).To accelerate\nthe next generation of DBMSs, the community should\nfoster the development of open-source reusable compo-\nnents and services [112, 176].There are some efforts to-\nwards this goal, including for ﬁle formats (see Sec.3.3),\nquery optimization (e.g., Calcite [104], Orca [186]), and\nexecution engines (e.g., DataFusion [18], Velox [175]).We contend that the database community should strive\nfor a POSIX-like standard of DBMS internals to accel-\nerate interoperability.We caution developers to learn from history.In other\nwords, stand on the shoulders of those who came before\nand not on their toes.One of us will likely still be alive\nand out on bail in two decades, and thus fully expects to\nwrite a follow-up to this paper in 2044.32\n\nSIGMOD Record, June 2024 (Vol. 53, No.2)\n\n\fReferences\n\n[1] TeraData Forums.https://downloads.teradata.com/forum/\ndatabase/what-is-the-difference-between-a-ynet-and-\nbynet, September 2011.[2] Netezza TwinFin Architecture.https://www.iexpertify.com/\nlearn/netezza-twinfin-architecture/#.YYq5_S1h17Y,\nApril 2020.[3] Graph processing with sql server and azure sql database.https://docs.microsoft.com/en-us/sql/relational-\ndatabases/graphs/sql-graph-overview, 2021.[4] Georaster in oracle database.https://www.oracle.com/a/\n\ntech/docs/georaster-2021.pdf, mar 2021.[5] Apache Hudi. https://hudi.apache.org/, 2023.[6] Apache Iceberg. https://iceberg.apache.org/, 2023.[7] Oracle introduces integrated vector database to augment\ngenerative ai and dramatically increase developer produc-\nhttps://www.oracle.com/news/announcement/ocw-\ntivity.integrated-vector-database-augments-generative-ai-\n2023-09-19/, sep 2023.[8] Introducing vector search on rockset.https://rockset.com/\nblog/introducing-vector-search-on-rockset/, apr 2023.\nhttps://docs.aerospike.com/tools/aql,\n\n[9] Aerospike AQL.2024. [10] Apache AGE. https://age.apache.org, 2024.[11] Apache Arrow. https://arrow.apache.org, 2024.[12] BigchainDB. https://www.bigchaindb.com/, 2024.[13] Brytlyt. https://brytlyt.io/, 2024.[14] Apache Cassandra. https://cassandra.apache.org, 2024.[15] The Cassandra Query Language\n\n(CQL).https:\n\n//cassandra.apache.org/doc/latest/cassandra/cql/,\n2024.[16] ChatGPT Plugins. https://openai.com/blog/chatgpt-\n\nplugins, March 2024.[17] Clustrix. https://clustrix.com, 2024. [18] Apache Arrow DataFusion.https://arrow.apache.org/\n\nhaystack.readthedocs.io, 2024.[21] Dremio. https://dremio.com/, 2024.[22] Apache drill. https://drill.apache.org, 2024.[23] Elasticsearch. https://www.elastic.co, 2024.[24] FAISS – Facebook AI Similarity Search.ai.facebook.com/tools/faiss/, 2024.\n\nhttps://\n\n[25] Fluree.https://flur.ee/, 2024. [26] Apache Giraph.https://giraph.apache.org, 2024. [27] Graphlab.https://en.wikipedia.org/wiki/GraphLab, 2024.[28] Apache Hbase. https://hbase.apache.org, 2024.[29] The hdf5 library & ﬁle format.https://www.hdfgroup.org/\n\nsolutions/hdf5, 2024.[30] Apache Hive. https://hive.apache.org, 2024.[31] Informix extensions and datablade modules.https:\n\n//www.ibm.com/docs/en/informix-servers/12.10?topic=\ninformix-extensions-datablade-modules, 2024.[32] Janusgraph. https://janusgraph.org/, 2024.[33] Apache Kafka. https://kafka.apache.org/, 2024.[34] kdb+. https://kx.com/, 2024.[35] Kinetica. https://www.kinetica.com/, 2024.[36] LangChain. https://langchain.com, 2024.[37] LevelDB. https://github.com/google/leveldb, 2024.[38] Apache Lucene. https://lucene.apache.org, 2024.[39] Malloy - Experimental Language.looker-open-source/malloy, 2024.[40] Milvus. https://milvus.io/, 2024. [41] MongoDB.https://mongodb.com, 2024.\n\nhttps://github.com/\n\n[42] Mongodb – querying with sql.https://docs.mongodb.com/\n\ndatalake/admin/query-with-sql/, 2024.[43] MySQL\n\n–\n\nInnoDB Full-Text\n\nIndexes.https:\n\n//dev.mysql.com/doc/refman/8.0/en/innodb-fulltext-\nindex.html, 2024.[44] Neo4j. https://neo4j.com/, 2024. [45] Amazon Neptune.https://aws.amazon.com/neptune/, 2024.[46] Network Common Data Form (NetCDF).https://\n\nwww.unidata.ucar.edu/software/netcdf/, 2024.[47] Nuodb. https://nuodb.com, 2024.[48] Heavydb. https://www.heavy.ai, 2024.[49] openCypher. https://opencypher.org, 2024. [50] Oracle graph database.https://www.oracle.com/database/\n\ngraph/, 2024.\n\nlang.org/, 2024.[51] PGQL – Property Graph Query Language.https://pgql-\n\n[52] Oracle\n\nText.https://www.oracle.com/database/\n\ntechnologies/datawarehouse-bigdata/text.html, 2024.[53] Apache ORC. https://orc.apache.org/, 2024.[54] Paradigm4 platform overview.https://www.paradigm4.com/\n\ntechnology/scidb-platform-overview/, 2024.[55] Apache Parquet. https://parquet.apache.org/, 2024.[56] Partiql – sql-compatible access to relational, semi-structured,\n\nand nested data.https://partiql.org/, 2024. [57] Apache Phoenix.https://phoenix.apache.org, 2024.[58] Pinecone. https://www.pinecone.io/, 2024.[59] Apache Pinot. https://pinot.apache.org/, 2024.[60] PlanetScale. https://planetscale.com/, 2024.[61] Polars. https://www.pola.rs, 2024. –\n[62] PostgreSQL\n\nSearch.Text\n\nFull\n\nwww.postgresql.org/docs/current/textsearch.html,\n2024.\n\nhttps://\n\n[63] PrestoDB.https://prestodb.io/, 2024. [64] PRQL – A Proposal for a Better SQL.https://prql-\n\nlang.org/, 2024.[65] Amazon Quantum Ledger Database (QLDB).https://\n\n[67] Redis. https://redis.io/, 2024.[68] RocksDB. https://rocksdb.org, 2024.[69] Singestore. https://www.singlestore.com/, 2024.[70] Apache Solr. https://solr.apache.org/, 2024.[71] SQLite. https://www.sqlite.org, 2024.[72] Sql++ – the next-generation query language for managing json\ndata.https://www.couchbase.com/sqlplusplus, 2024.[73] Teradata – creating an array data\n\ntype.https:\n\n//docs.teradata.com/r/S0Fw2AVH8ff3MDA0wDOHlQ/\nun3kj~t3qMDO66LF4YXuiw, 2024.[74] Tigergraph. https://www.tigergraph.com/, 2024.[75] Tigergraph – gsql. https://www.tigergraph.com/gsql/,\n\n2024.[76] Tiledb. https://tiledb.com, 2024.[77] Trino. https://trino.io/, 2024.[78] Turi. http://turi.com/, 2024.[79] Vespa. https://vespa.ai/, 2024.[80] Vitess. https://vitess.io, 2024. [81] Vitesse Deepgreen DB.products/deepgreen-db/, 2024.\n\nhttps://www.vitessedata.com/\n\n[82] Project Voldemort.https://www.project-voldemort.com,\n\n2024.[83] Voltdb. https://www.voltactivedata.com/, 2024.[84] Weaviate. https://weaviate.io, 2024.[85] Dbc 1012. https://en.wikipedia.org/wiki/DBC_1012, 2024.[86] YugabyteDB. https://www.yugabyte.com/, 2024. [87] D. J. Abadi.Query Execution in Column-Oriented Database\n\nSystems.PhD thesis, MIT, 2008.\n\ndatafusion/, 2024.[19] Microsoft DiskANN. DiskANN, 2024. [20] Django\n\nHaystack.https://github.com/microsoft/\n\nhttps://django-\n\naws.amazon.com/qldb/, 2024.[66] The\n\nraster\nrasdaman\nwww.rasdaman.org, 2024.\n\narray\n\ndatabase.http://\n\nSIGMOD Record, June 2024 (Vol. 53, No.2)\n\n33\n\n\f[88] K. Affolter, K. Stockinger, and A. Bernstein.A compara-\ntive survey of recent natural language interfaces for databases.VLDB J., 28(5):793–819, 2019. doi: 10.1007/s00778-019-\n00567-8.[89] H. Ahmadi. In-memory query execution in google bigquery.https://cloud.google.com/blog/products/bigquery/in-\nmemory-query-execution-in-google-bigquery, Aug 2016.[90] A. Ailamaki, D. J. DeWitt, M. D. Hill, and M. Skounakis.Weaving relations for cache performance.In VLDB, volume 1,\npages 169–180, 2001. [91] G. Anadiotis.Open source postgresql on steroids: Swarm64\ndatabase acceleration software for performance improvement\nhttps://www.zdnet.com/article/open-\nand analytics.source-postgresql-on-steroids-swarm64-database-\nacceleration-software-for-performance-improvement-\nand-analytics/, apr 2023.[92] M. Armbrust, T. Das, L. Sun, B. Yavuz, S. Zhu, M. Murthy,\nJ. Torres, H. van Hovell, A. Ionescu, A. Łuszczak, et al.Delta\nlake: high-performance acid table storage over cloud object\nstores.Proceedings of the VLDB Endowment, 13(12):3411–\n3424, 2020.[93] M. Armbrust, A. Ghodsi, R. Xin, and M. Zaharia.Lakehouse:\na new generation of open platforms that unify data warehousing\nand advanced analytics.In Proceedings of CIDR, page 8, 2021.[94] N. Armenatzoglou, S. Basu, N. Bhanoori, M. Cai, N. Chainani,\nK. Chinta, V. Govindaraju, T. J.Green, M. Gupta, S. Hillig,\nE. Hotinger, Y. Leshinksy, J. Liang, M. McCreedy, F. Nagel,\nI. Pandis, P. Parchas, R. Pathak, O. Polychroniou, F. Rahman,\nG. Saxena, G. Soundararajan, S. Subramanian, and D. Terry.Amazon redshift re-invented. In Proceedings of the 2022 Inter-\nnational Conference on Management of Data, SIGMOD ’22,\npages 2205–2217, 2022. doi: 10.1145/3514221.3526045.[95] M. Aslett. How will the database incumbents respond to\n\nNoSQL and NewSQL?The 451 Group, April 2011. [96] M. Aslett.Ten years of NewSQL: Back to the future of dis-\ntributed relational databases.The 451 Group, June 2021. [97] S. Babu and P. Bizarro.Adaptive query processing in the look-\n\ning glass.In CIDR, pages 238–249, January 2005.[98] D. F. Bacon, N. Bales, N. Bruno, B. F. Cooper, A. Dickinson,\nA. Fikes, C. Fraser, A. Gubarev, M. Joshi, E. Kogan, A. Lloyd,\nS. Melnik, R. Rao, D. Shue, C. Taylor, M. van der Holst, and\nIn Pro-\nD. Woodford.Spanner: Becoming a sql system.ceedings of the 2017 ACM International Conference on Man-\nagement of Data, SIGMOD ’17, pages 331–343, 2017. doi:\n10.1145/3035918.3056103.[99] J. Baker, C. Bond, J. C. Corbett, J. Furman, A. Khorlin, J. Lar-\nson, J.-M. Leon, Y. Li, A. Lloyd, and V. Yushprakh.Megastore:\nProviding scalable, highly available storage for interactive ser-\nIn Proceedings of the Conference on Innovative Data\nvices.system Research (CIDR), pages 223–234, 2011.[100] N. Bakibayev, D. Olteanu, and J. Závodný.Fdb: A query en-\ngine for factorised relational databases. Proc.VLDB Endow., 5\n(11):1232–1243, jul 2012. doi: 10.14778/2350229.2350242. [101] S. Banon.Amazon: NOT OK - why we had to change Elas-\nhttps://www.elastic.co/blog/why-license-\n\ntic licensing.change-aws, jan 2021. [102] J. Barr.AQUA (Advanced Query Accelerator) –\nfor Your Amazon Redshift Queries.A Speed Boost\nhttps://aws.amazon.com/blogs/aws/new-aqua-advanced-\nquery-accelerator-for-amazon-redshift/, Apr 2021.[103] P. Baumann. A database array algebra for spatio-temporal data\nand beyond.In Next Generation Information Technologies and\nSystems, 4th International Workshop, NGITS’99, volume 1649\nof Lecture Notes in Computer Science, pages 76–93, 1999. doi:\n10.1007/3-540-48521-X_7.[104] E. Begoli, J. Camacho-Rodríguez, J. Hyde, M. J. Mior, and\nD. Lemire.Apache calcite: A foundational framework for\noptimized query processing over heterogeneous data sources.In Proceedings of the 2018 International Conference on Man-\nagement of Data, SIGMOD ’18, pages 221–230, 2018. doi:\n10.1145/3183713.3190662.[105] A. Behm, S. Palkar, U. Agarwal, T. Armstrong, D. Cashman,\nA. Dave, T. Greenstein, S. Hovsepian, R. Johnson, A. Sai Krish-\nnan, P. Leventis, A. Luszczak, P. Menon, M. Mokhtar, G. Pang,\nS. Paranjpye, G. Rahn, B. Samwel, T. van Bussel, H. van Hov-\nell, M. Xue, R. Xin, and M. Zaharia.Photon: A fast query\nengine for lakehouse systems.In Proceedings of the 2022 In-\nternational Conference on Management of Data, SIGMOD ’22,\npages 2326–2339, 2022. doi: 10.1145/3514221.3526054.[106] P. A. Boncz, M. Zukowski, and N. Nes.Monetdb/x100: Hyper-\n\npipelining query execution.In CIDR, pages 225–237, 2005. [107] H. Boral and D. J. DeWitt.Database machines: An idea whose\ntime passed?A critique of the future of database machines.pages 166–187, 1983. doi: 10.1007/978-3-642-69419-6\n_10.https://www.tbray.org/\nnov\n\n[108] T. Bray. AWS and Blockchain.ongoing/When/202x/2022/11/19/AWS-Blockchain,\n2019.\\\n\n[109] P. Carbone, A. Katsifodimos, S. Ewen, V. Markl, S. Haridi, and\nK. Tzoumas.Apache ﬂink: Stream and batch processing in a\nsingle engine.The Bulletin of the Technical Committee on Data\nEngineering, 38(4), 2015.[110] R. Cattell. Scalable sql and nosql data stores.SIGMOD Rec.,\n\n39:12–27, 2011. [111] F. Chang, J.Dean, S. Ghemawat, W. C. Hsieh, D. A. Wallach,\nM. Burrows, T. Chandra, A. Fikes, and R. E. Gruber.Bigtable:\nA distributed storage system for structured data.In Proceedings\nof the USENIX Symposium on Operating Systems Design and\nImplementation, OSDI ’06, pages 205–218, 2006.[112] S. Chaudhuri and G. Weikum.Rethinking database system ar-\nchitecture: Towards a self-tuning risc-style database system.In\nVLDB 2000, Proceedings of 26th International Conference on\nVery Large Data Bases, pages 1–10, 2000.[113] C. Chin. The rise and fall of the olap cube.https:\n\n//www.holistics.io/blog/the-rise-and-fall-of-the-\nolap-cube/, January 2020.[114] M. Chock, A. F. Cardenas, and A. Klinger.Database struc-\nture and manipulation capabilities of a picture database man-\nagement system (picdms).IEEE Transactions on Pattern Anal-\nysis and Machine Intelligence, PAMI-6(4):484–492, 1984. doi:\n10.1109/TPAMI.1984.4767553.[115] E. F. Codd. A relational model of data for large shared\ndata banks.Commun. ACM, 13(6):377–387, jun 1970. doi:\n10.1145/362384.362685.[116] E. F. Codd. Further normalization of the data base relational\nmodel.Research Report / RJ / IBM / San Jose, California,\nRJ909, 1971.[117] W. W. W. Consortium. Overview of sgml resources.https:\n\n//www.w3.org/MarkUp/SGML/, 2004.[118] W. W. W. Consortium. Extensible Markup Language (XML).https://www.w3.org/XML/, 2016. [119] J. C. Corbett, J.Dean, M. Epstein, A. Fikes, C. Frost, J. Furman,\nS. Ghemawat, A. Gubarev, C. Heiser, P. Hochschild, W. Hsieh,\nS. Kanthak, E. Kogan, H. Li, A. Lloyd, S. Melnik, D. Mwaura,\nD. Nagle, S. Quinlan, R. Rao, L. Rolig, M. S. Yasushi Saito,\nC. Taylor, R. Wang, and D. Woodford.Spanner: Google’s\nGlobally-Distributed Database.In OSDI, 2012. [120] A. Crotty, V. Leis, and A. Pavlo.Are you sure you want to use\nMMAP in your database management system?In Conference\non Innovative Data Systems Research. www.cidrdb.org, 2022.[121] B. Dageville, T. Cruanes, M. Zukowski, V. Antonov, A. Avanes,\nJ. Bock, J. Claybaugh, D. Engovatov, M. Hentschel, J. Huang,\nA. W. Lee, A. Motivala, A. Q. Munir, S. Pelley, P. Povinec,\nG. Rahn, S. Triantafyllis, and P. Unterbrunner.The snowﬂake\nIn Proceedings of the 2016 Inter-\nelastic data warehouse.national Conference on Management of Data, SIGMOD ’16,\npages 215–226, 2016. doi: 10.1145/2882903.2903741.[122] J. Dean and S. Ghemawat.MapReduce: Simpliﬁed data pro-\ncessing on large clusters.In 6th Symposium on Operating Sys-\ntems Design & Implementation (OSDI 04).USENIX Associa-\ntion, Dec. 2004.34\n\nSIGMOD Record, June 2024 (Vol.53, No. 2)\n\n\f[123] J. Dean and S. Ghemawat.Mapreduce: A ﬂexible data process-\n\ning tool.Commun. ACM, 53(1):72–77, Jan. 2010. [124] A. Dearmer.Storing apache hadoop data on the cloud - hdfs\nhttps://www.xplenty.com/blog/storing-apache-\n\nvs. s3.hadoop-data-cloud-hdfs-vs-s3/, November 2019.[125] G. DeCandia, D. Hastorun, M. Jampani, G. Kakulapati, A. Lak-\nshman, A. Pilchin, S. Sivasubramanian, P. Vosshall, and W. Vo-\ngels.Dynamo: Amazon’s highly available key-value store.SIGOPS Oper. Syst. Rev., 41(6):205–220, oct 2007.[126] A. Deutsch, N. Francis, A.Green, K. Hare, B. Li, L. Libkin,\nT. Lindaaker, V. Marsault, W. Martens, J. Michels, F. Murlak,\nS. Plantikow, P. Selmer, O. van Rest, H. Voigt, D. Vrgoˇc,\nM. Wu, and F. Zemke.Graph pattern matching in gql and\nIn Proceedings of the 2022 International Confer-\nsql/pgq.ence on Management of Data, SIGMOD ’22, pages 2246–2258,\n2022. doi: 10.1145/3514221.3526057.[127] D. DeWitt and J. Gray. Parallel database systems: The future\nof high performance database systems.Commun. ACM, 35(6):\n85–98, jun 1992. doi: 10.1145/129888.129894.[128] C. Diaconu, C. Freedman, E. Ismert, P. Larson, P. Mit-\ntal, R. Stonecipher, N. Verma, and M. Zwilling.Hekaton:\nIn Proceed-\nSQL server’s memory-optimized OLTP engine.ings of the ACM SIGMOD International Conference on Man-\ndoi: 10.1145/\nagement of Data, pages 1243–1254, 2013. 2463676.2463710.[129] M. Elhemali, N. Gallagher, N. Gordon, J. Idziorek, R. Krog,\nC. Lazier, E. Mo, A. Mritunjai, S. Perianayagam, T. Rath,\nS. Sivasubramanian, J. C. S. III, S. Sosothikul, D. Terry, and\nA. Vig.Amazon DynamoDB: A scalable, predictably perfor-\nmant, and fully managed NoSQL database service.In USENIX\nAnnual Technical Conference, pages 1037–1048, July 2022.[130] J. Fan, A. G. S. Raj, and J. M. Patel.The case against special-\nized graph analytics engines.In Seventh Biennial Conference\non Innovative Data Systems Research, CIDR, 2015.[131] B. Fitzpatrick. Distributed caching with memcached.Linux J.,\n\n2004(124):5, aug 2004. ISSN 1075–3583.[132] M. Freitag, M. Bandle, T. Schmidt, A. Kemper, and T. Neu-\nmann.Adopting worst-case optimal joins in relational database\nsystems. Proc.VLDB Endow., 13(12):1891–1904, jul 2020.\ndoi: 10.14778/3407790.3407797.[133] H. Fu, C. Liu, B. Wu, F. Li, J. Tan, and J. Sun.Catsql: To-\nwards real world natural language to sql applications. Proc.VLDB Endow., 16(6):1534–1547, feb 2023. doi: 10.14778/\n3583140.3583165.[134] S. Ghemawat, H. Gobioff, and S.-T. Leung.The google ﬁle\nsystem. SIGOPS Oper.Syst. Rev., 37(5):29–43, oct 2003.ISSN\n0163-5980. doi: 10.1145/1165389.945450. [135] J.Gray, A. Bosworth, A. Layman, and H. Pirahesh.Data\ncube: A relational aggregation operator generalizing group-by,\nIn Proceedings of the International\ncross-tab, and sub-total.Conference on Data Engineering, pages 152–159, 1996. doi:\n10.1109/ICDE.1996.492099.[136] S. Gupta, S. Rahnama, J. Hellings, and M. Sadoghi.Re-\nProc. silientdb: Global scale resilient blockchain fabric.10.14778/\nVLDB Endow., 13(6):868–883, 2020.3380750.3380757.\n\ndoi:\n\n[137] E. Hanson and A. Comet.Why Your Vector Database Should\nNot be a Vector Database.https://www.singlestore.com/\nblog/why-your-vector-database-should-not-be-a-\nvector-database/, April 2023.[138] G. Harrison. How WiredTiger Revolutionized MongoDB.https://www.dbta.com/Columns/MongoDB-Matters/How-\nWiredTiger-Revolutionized-MongoDB-145510.aspx,\n2021.\n\nmar\n\n[139] G. G. Hendrix, E. D. Sacerdoti, D. Sagalowicz, and J. Slocum.Developing a natural language interface to complex data. ACM\nTrans.Database Syst., 3(2):105–147, jun 1978. doi: 10.1145/\n320251.320253. [140] Y. Huai, A. Chauhan, A.Gates, G. Hagleitner, E. N. Hanson,\nO. O’Malley, J. Pandey, Y. Yuan, R. Lee, and X. Zhang.Major\ntechnical advancements in apache hive.In Proceedings of the\n2014 ACM SIGMOD international conference on Management\nof data, pages 1235–1246, 2014.[141] D. Huang, Q. Liu, Q. Cui, Z. Fang, X. Ma, F. Xu, L. Shen,\nL. Tang, Y. Zhou, M. Huang, W. Wei, C. Liu, J. Zhang,\nJ. Li, X. Wu, L. Song, R. Sun, S. Yu, L. Zhao, N. Cameron,\nL. Pei, and X. Tang.Tidb: A raft-based htap database. Proc.VLDB Endow., 13(12):3072–3084, aug 2020. doi: 10.14778/\n3415478.3415535.[142] K. E. Iverson. A Programming Language.John Wiley & Sons,\n\nInc., 1962. ISBN 0471430145.[143] A. Jindal, S. Madden, M. Castellanos, and M. Hsu.Graph ana-\nlytics using vertica relational database.In 2015 IEEE Interna-\ntional Conference on Big Data, pages 1191–1200, 2015.[144] R. Kallman, H. Kimura, J. Natkins, A. Pavlo, A. Rasin,\nS. Zdonik, E. P. C. Jones, S. Madden, M. Stonebraker, Y. Zhang,\nJ. Hugg, and D. J. Abadi.H-store: A high-performance, dis-\ntributed main memory transaction processing system.Proc. VLDB Endow., 1(2):1496–1499, aug 2008. doi: 10.14778/\n1454159.1454211.[145] A. Kane. pgvector. https://github.com/pgvector/pgvector,\n\n2024.[146] A. Kemper and T. Neumann.Hyper: A hybrid oltp&olap main\nmemory database system based on virtual memory snapshots.In Proceedings of the 27th International Conference on Data\nEngineering, pages 195–206.IEEE Computer Society, 2011.\ndoi: 10.1109/ICDE.2011.5767867.[147] T. Kersten, V. Leis, A. Kemper, T. Neumann, A. Pavlo, and\nP. Boncz.Everything you always wanted to know about com-\npiled and vectorized queries but were afraid to ask.Proc. VLDB Endow., 11(13):2209–2222, jan 2019. doi: 10.14778/\n3275366.3284966. [148] R. Kimball.The Data Warehouse Toolkit: Practical Techniques\nfor Building Dimensional Data Warehouses.John Wiley, 1996. [149] R. Kimball and K. Strehlo.Why decision support fails and how\n\nto ﬁx it.SIGMOD Rec., 24(3):92–97, 1995.[150] M. Kornacker, A. Behm, V. Bittorf, T. Bobrovytsky, C. Ching,\nA. Choi, J. Erickson, M. Grund, D. Hecht, M. Jacobs, I. Joshi,\nL. Kuff, D. Kumar, A. Leblang, N. Li, I. Pandis, H. Robinson,\nD. Rorke, S. Rus, J. Russell, D. Tsirogiannis, S. Wanderman-\nMilne, and M. Yoder.Impala: A modern, open-source sql en-\ngine for hadoop.In CIDR, 2015. [151] T. Kraska, A. Beutel, E. H. Chi, J.Dean, and N. Polyzotis. The\ncase for learned index structures.In Proceedings of the 2018\nInternational Conference on Management of Data, SIGMOD\n’18, pages 489–504, 2018. doi: 10.1145/3183713.3196909.[152] S. Krishnan, Z. Yang, K. Goldberg, J. Hellerstein, and I. Sto-\nica.Learning to optimize join queries with deep reinforcement\nlearning, 2018.URL https://arxiv.org/abs/1808.03196. [153] F. Lardinois.Aws gives open source the middle ﬁn-\nger.https://techcrunch.com/2019/01/09/aws-gives-open-\nsource-the-middle-finger/, jan 2019.[154] V. Leis, A. Gubichev, A. Mirchev, P. A. Boncz, A. Kemper,\nand T. Neumann.How good are query optimizers, really?doi: 10.14778/\nProc. VLDB Endow., 9(3):204–215, 2015.2850583.2850594. [155] D. Maier and B. Vance. A call to order.In Proceedings\nof the Twelfth ACM SIGACT-SIGMOD-SIGART Symposium\non Principles of Database Systems, pages 1–16, 1993. doi:\n10.1145/153850.153851.[156] R. Marcus, P. Negi, H. Mao, N. Tatbul, M. Alizadeh, and\nT. Kraska.Bao: Making learned query optimization practical.In Proceedings of the 2021 International Conference on Man-\nagement of Data, SIGMOD ’21, pages 1275–1288, 2021. doi:\n10.1145/3448016.3452838.[157] D. McDiarmid. Vector search with clickhouse.https://\nclickhouse.com/blog/vector-search-clickhouse-p2, May\n2023.SIGMOD Record, June 2024 (Vol.53, No. 2)\n\n35\n\n\f[158] C. McDonnell.The graph-relational database, deﬁned.https://www.edgedb.com/blog/the-graph-relational-\ndatabase-defined, March 2022.[159] W. McKinney et al. Data structures for statistical computing\nin python.In Proceedings of the 9th Python in Science Confer-\nence, volume 445, pages 51–56, 2010.[160] F. McSherry. Scalability! but at what cost?http:\n\n//www.frankmcsherry.org/graph/scalability/cost/2015/\n01/15/COST.html, January 2015.[161] S. Melnik, A. Gubarev, J. J.Long, G. Romer, S. Shivakumar,\nM. Tolton, and T. Vassilakis.Dremel: Interactive analysis of\nweb-scale datasets.Proc. VLDB Endow., 3(12):330–339, sep\n2010.ISSN 2150-8097. doi: 10.14778/1920841.1920886.[162] S. Melnik, A. Gubarev, J. J.Long, G. Romer, S. Shivakumar,\nM. Tolton, T. Vassilakis, H. Ahmadi, D. Delorey, S. Min, M. Pa-\nsumansky, and J. Shute.Dremel: A decade of interactive sql\nanalysis at web scale.Proc. VLDB Endow., 13(12):3461–3472,\naug 2020.ISSN 2150-8097. doi: 10.14778/3415478.3415568.[163] P. Menon, A. Ngom, T. C. Mowry, A. Pavlo, and L. Ma.Per-\nmutable compiled queries: Dynamically adapting compiled\nqueries without recompiling.Proc. VLDB Endow., 14(2):101–\n113, 2020. doi: 10.14778/3425879.3425882.[164] C. Metz. duce. google_caffeine_explained/, September 2010.Google search index splits with mapre-\nhttps://www.theregister.com/2010/09/09/\n\n[165] J. Michels, K. Hare, K. Kulkarni, C. Zuzarte, Z. H. Liu,\nB. Hammerschmidt, and F. Zemke.The new and improved sql:\n2016 standard.SIGMOD Rec., 47(2):51–60, dec 2018. doi:\n10.1145/3299887.3299897.[166] D. Misev and P. Baumann.Sql support for multidimen-\nsional arrays.Technical Report 34, Jacobs University, July\n2017.URL https://nbn-resolving.org/urn:nbn:de:gbv:\n579-opus-1007237.[167] F. Nargesian, E. Zhu, R. J. Miller, K. Q. Pu, and P. C. Arocena.Data lake management: Challenges and opportunities. Proc.VLDB Endow., 12(12):1986–1989, aug 2019. doi: 10.14778/\n3352063.3352116.[168] H. Q. Ngo, C. Ré, and A. Rudra.Skew strikes back: New\ndevelopments in the theory of join algorithms.SIGMOD Rec.,\n42(4):5–16, feb 2014. doi: 10.1145/2590989.2590991.[169] NVIDIA, P. Vingelmann, and F. H. Fitzek. Cuda toolkit.https:\n\n//developer.nvidia.com/cuda-toolkit, 2020.[170] M. A. Olson, K. Bostic, and M. I. Seltzer. Berkeley DB.In Pro-\nceedings of the FREENIX Track: 1999 USENIX Annual Tech-\nnical Conference, pages 183–191, 1999.[171] A. Pavlo and M. Aslett. What’s really new with newsql?SIG-\n\nMOD Record, 45(2):45–55, Sep 2016.[172] A. Pavlo, E. Paulson, A. Rasin, D. J. Abadi, D. J. DeWitt,\nS. Madden, and M. Stonebraker.A comparison of approaches\nto large-scale data analysis.In Proceedings of the ACM SIG-\nMOD International Conference on Management of Data, pages\n165–178, 2009.[173] A. Pavlo, G. Angulo, J. Arulraj, H. Lin, J. Lin, L. Ma, P. Menon,\nT. Mowry, M. Perron, I. Quah, S. Santurkar, A. Tomasic,\nS. Toor, D. V. Aken, Z. Wang, Y. Wu, R. Xian, and T. Zhang.In CIDR 2017,\nSelf-driving database management systems.Conference on Innovative Data Systems Research, 2017.[174] A. Pavlo, M. Butrovich, A. Joshi, L. Ma, P. Menon, D. V. Aken,\nL. Lee, and R. Salakhutdinov.External vs. internal: An essay\non machine learning agents for autonomous database manage-\nment systems.IEEE Data Eng. Bull., 42(2):32–46, 2019.[175] P. Pedreira, O. Erling, M. Basmanova, K. Wilfong, L. Sakka,\nK. Pai, W. He, and B. Chattopadhyay.Velox: Meta’s uniﬁed\nexecution engine. Proc.VLDB Endow., 15(12):3372–3384, aug\n2022. doi: 10.14778/3554821.3554829.[176] P. Pedreira, O. Erling, K. Karanasos, S. Schneider, W. McK-\ninney, S. R. Valluri, M. Zait, and J. Nadeau.The composable\ndata management system manifesto. Proc.VLDB Endow., 16\n(10):2679–2685, jun 2023. doi: 10.14778/3603581.3603604.[177] D. Petersohn, S. Macke, D. Xin, W. Ma, D. Lee, X. Mo,\nJ. E. Gonzalez,\nJ. M. Hellerstein, A. D. Joseph, and\nA. Parameswaran.Towards scalable dataframe systems. Proc.VLDB Endow., 13(12):2033–2046, jul 2020. doi: 10.14778/\n3407790.3407807.[178] D. Petkovic. SQL/JSON standard: Properties and deﬁciencies.doi: 10.1007/\n\nDatenbank-Spektrum, 17(3):277–287, 2017.\ns13222-017-0267-4. [179] D. Pritchett.BASE: An Acid Alternative:\n\nIn Partitioned\nDatabases, Trading Some Consistency for Availability Can\nLead to Dramatic Improvements in Scalability.ACM Queue,\n6(3):48–55, may 2008. doi: 10.1145/1394127.1394128.[180] M. Raasveldt and H. Mühleisen.Duckdb: An embeddable ana-\nlytical database.In Proceedings of the 2019 International Con-\nference on Management of Data, SIGMOD ’19, pages 1981–\n1984, 2019. doi: 10.1145/3299869.3320212.[181] M. Rocklin. Dask: Parallel computation with blocked algo-\nrithms and task scheduling.In Proceedings of the 14th Python\nin Science Conference, pages 130–136, 2015.[182] F. Rusu. Multidimensional array data management. Found.doi: 10.1561/\n\nTrends Databases, 12(2-3):69–220, 2023. 1900000069.[183] S. Sakr, A. Bonifati, H. Voigt, A. Iosup, K. Ammar, R. An-\ngles, W. Aref, M. Arenas, M. Besta, P. A. Boncz, K. Daudjee,\nE. D. Valle, S. Dumbrava, O. Hartig, B. Haslhofer, T. Hege-\nman, J. Hidders, K. Hose, A. Iamnitchi, V. Kalavri, H. Kapp,\nW. Martens, M. T. Özsu, E. Peukert, S. Plantikow, M. Ragab,\nM. R. Ripeanu, S. Salihoglu, C. Schulz, P. Selmer, J. F. Se-\nqueda, J. Shinavier, G. Szárnyas, R. Tommasini, A. Tumeo,\nA. Uta, A. L. Varbanescu, H.-Y.Wu, N. Yakovets, D. Yan, and\nE. Yoneki.The future is big graphs: A community view on\ngraph processing systems.Commun. ACM, 64(9):62–71, aug\n2021. doi: 10.1145/3434642.[184] G. Salton and M. E. Lesk.The smart automatic document re-\ntrieval systems–an illustration.Commun. ACM, 8(6):391–398,\njun 1965. doi: 10.1145/364955.364990.[185] R. Sethi, M. Traverso, D. Sundstrom, D. Phillips, W. Xie,\nY.Sun, N. Yegitbasi, H. Jin, E. Hwang, N. Shingte, and\nIn 2019 IEEE 35th\nC. Berner. Presto: Sql on everything.International Conference on Data Engineering (ICDE), pages\n1802–1813, 2019. doi: 10.1109/ICDE.2019.00196.[186] M. A. Soliman, L. Antova, V. Raghavan, A. El-Helw, Z. Gu,\nE. Shen, G. C. Caragea, C. Garcia-Alvarado, F. Rahman,\nM. Petropoulos, F. Waas, S. Narayanan, K. Krikellas, and\nR. Baldwin.Orca: a modular query optimizer architecture for\nIn Proceedings of the 2014 ACM SIGMOD Inter-\nbig data.national Conference on Management of Data, SIGMOD ’14,\npages 337–348, 2014. doi: 10.1145/2588555.2595637.[187] M. Stonebraker. The case for polystores.https://\n\nwp.sigmod.org/?p=1629, 2015.[188] M. Stonebraker and J. Hellerstein.Readings in Database Sys-\ntems, chapter What Goes Around Comes Around, pages 2–41. 4th edition, 2005.[189] M. Stonebraker, S. Madden, D. J. Abadi, S. Harizopoulos,\nN. Hachem, and P. Helland.The end of an architectural era:\n(it’s time for a complete rewrite).In Proceedings of the 33rd\nInternational Conference on Very Large Data Bases, VLDB\n’07, pages 1150–1160.VLDB Endowment, 2007. [190] M. Stonebraker, D. Abadi, D. J. DeWitt, S. Madden, E. Paulson,\nA. Pavlo, and A. Rasin.Mapreduce and parallel dbmss: Friends\nor foes?Commun. ACM, 53(1):64–71, Jan. 2010.[191] M. Stonebraker, P. Brown, A. Poliakov, and S. Raman. The ar-\nchitecture of scidb.In Scientiﬁc and Statistical Database Man-\nagement - 23rd International Conference, SSDBM 2011, vol-\nume 6809 of Lecture Notes in Computer Science, pages 1–16.Springer, 2011. doi: 10.1007/978-3-642-22351-8\n\n_1. [192] L. Sullivan.Performance issues in mid-sized relational\ndatabase machines.Master’s thesis, Rochester Institute of Tech-\nnology, 1989.\\\n\n36\n\nSIGMOD Record, June 2024 (Vol.53, No. 2)\n\n\f[193] Z. Sun, X. Zhou, and G. Li.Learned index: A comprehen-\nsive experimental evaluation. Proc.VLDB Endow., 16(8):1992–\n2004, apr 2023. doi: 10.14778/3594512.3594528.Google\n\ndumps mapreduce\n\n[194] Y.\n\nSverdlik.in\nfa-\nhttps:\n\nvor of new hyper-scale\n//www.datacenterknowledge.com/archives/2014/06/\n25/google-dumps-mapreduce-favor-new-hyper-scale-\nanalytics-system, June 2014.\n\nanalytics\n\nsystem.[195] R. Taft, I. Sharif, A. Matei, N. VanBenschoten, J. Lewis,\nT. Grieger, K. Niemi, A.Woods, A. Birzin, R. Poss, P. Bardea,\nA. Ranade, B. Darnell, B. Gruneir, J. Jaffray, L. Zhang, and\nP. Mattis.Cockroachdb: The resilient geo-distributed SQL\ndatabase.In Proceedings of the 2020 International Conference\non Management of Data, SIGMOD, pages 1493–1509, 2020.\ndoi: 10.1145/3318464.3386134.[196] D. ten Wolde, T. Singh, G. Szarnyas, and P. Boncz.Duckpgq:\nEfﬁcient property graph queries in an analytical\nrdbms.In CIDR, 2023. URL https://www.cidrdb.org/cidr2023/\npapers/p66-wolde.pdf.[197] A. Thusoo, J. S. Sarma, N. Jain, Z. Shao, P. Chakka, N. Zhang,\nS. Antony, H. Liu, and R. Murthy.Hive - a petabyte scale\ndata warehouse using hadoop.In International Conference on\nData Engineering (ICDE 2010), pages 996–1005, 2010. doi:\n10.1109/ICDE.2010.5447738.[198] E. Totoni, T. A. Anderson, and T. Shpeisman.HPAT: high per-\nformance analytics with scripting ease-of-use.In Proceedings\n\nof the International Conference on Supercomputing, pages 9:1–\n9:10, 2017. doi: 10.1145/3079079.3079099.[199] T. Trautmann. database. relational-database, September 2021.Understanding the document-relational\nhttps://fauna.com/blog/what-is-a-document-\n\n[200] D. Van Aken, A. Pavlo, G. J. Gordon, and B. Zhang.Auto-\nmatic database management system tuning through large-scale\nIn Proceedings of the 2017 ACM Inter-\nmachine learning.national Conference on Management of Data, SIGMOD ’17,\npages 1009–1024, 2017. doi: 10.1145/3035918.3064029.[201] M. Zaharia, R. S. Xin, P. Wendell, T. Das, M. Armbrust,\nA. Dave, X. Meng, J. Rosen, S. Venkataraman, M. J. Franklin,\nA. Ghodsi, J. Gonzalez, S. Shenker, and I. Stoica.Apache\nspark: a uniﬁed engine for big data processing.Commun. ACM,\n59(11):56–65, oct 2016. doi: 10.1145/2934664.[202] C. Zaniolo. The database language GEM.In SIGMOD, pages\n\n207–218, 1983.[203] X. Zeng, Y. Hui, J. Shen, A. Pavlo, W. McKinney, and\nH. Zhang.An empirical evaluation of columnar storage for-\nmats.Proc. VLDB Endow., 17(2):148–161, 2023.URL https:\n//www.vldb.org/pvldb/vol17/p148-zeng.pdf.[204] X. Zhang, Z. Chang, Y. Li, H. Wu, J. Tan, F. Li, and\nB. Cui.Facilitating database tuning with hyper-parameter op-\ntimization: a comprehensive experimental evaluation.Proc. VLDB Endow., 15(9):1808–1821, may 2022. doi: 10.14778/\n3538598.3538604.SIGMOD Record, June 2024 (Vol. 53, No. 2)\n\n37",
          "time": 1446.6500849723816,
          "input_token_size": 26190,
          "output_token_size": 48,
          "original_provenance_id": 0
        }
      ],
      "metadata": {
        "question_id": "whatgoesaround-sigmodrec2024_b5fb3a0e",
        "created_at": 1750200204.2853193,
        "processing_time": 1451.4778008460999,
        "processing_complete": true,
        "max_provenances": 5
      },
      "source_info": {
        "selected_from": "test_outputs",
        "reason": "shorter_provenance",
        "sentence_count": 964,
        "provenance_count": 1,
        "alternatives": [
          {
            "source": "test_outputs",
            "sentence_count": 964,
            "provenance_count": 1,
            "has_answer": true
          }
        ],
        "selection_timestamp": "2025-06-17T16:48:52.934803"
      }
    }
  },
  {
    "baf90ec0": {
      "question": "Who authored the document discussed in the summary?",
      "answer": "Michael Stonebraker, Andrew Pavlo",
      "provenance": [
        {
          "provenance_id": 0,
          "input_sentence_ids": [
            0,
            1,
            2
          ],
          "provenance_ids": [
            0
          ],
          "provenance": "What Goes Around Comes Around... And Around...\n\nMichael Stonebraker\nMassachusetts Institute of Technology\nstonebraker@csail.mit.edu\n\nAndrew Pavlo\nCarnegie Mellon University\npavlo@cs.cmu.edu\n\nABSTRACT\nTwo decades ago, one of us co-authored a paper com-\nmenting on the previous 40 years of data modelling re-\nsearch and development [188].",
          "time": 9.562760829925537,
          "input_token_size": 29980,
          "output_token_size": 67,
          "original_provenance_id": 0
        }
      ],
      "metadata": {
        "question_id": "whatgoesaround-sigmodrec2024_baf90ec0",
        "created_at": 1749665313.0557988,
        "processing_time": 20.367672443389893,
        "processing_complete": true,
        "max_provenances": 5
      },
      "source_info": {
        "selected_from": "test_outputs_prev",
        "reason": "shorter_provenance",
        "sentence_count": 3,
        "provenance_count": 1,
        "alternatives": [
          {
            "source": "test_outputs_prev",
            "sentence_count": 3,
            "provenance_count": 1,
            "has_answer": true
          },
          {
            "source": "test_outputs_prev1",
            "sentence_count": 3,
            "provenance_count": 1,
            "has_answer": true
          }
        ],
        "selection_timestamp": "2025-06-17T16:48:52.935801"
      }
    }
  },
  {
    "c1e325b3": {
      "question": "What are text search engines like Elasticsearch and Solr popular for?",
      "answer": "- Storing and indexing text data\n- Supporting full-text search queries\n- Handling unstructured text data\n- Providing good performance for text retrieval\n- Integrating with other systems in a polystore architecture",
      "provenance": [
        {
          "provenance_id": 0,
          "input_sentence_ids": [
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            11,
            12,
            13,
            14,
            15,
            16,
            17,
            18,
            19,
            20,
            21,
            22,
            23,
            24,
            25,
            26,
            27,
            28,
            29,
            30,
            31,
            32,
            33,
            34,
            35,
            36,
            37,
            38,
            39,
            40,
            41,
            42,
            43,
            44,
            45,
            46,
            47,
            48,
            49,
            50,
            51,
            52,
            53,
            54,
            55,
            56,
            57,
            58,
            59,
            60,
            61,
            62,
            63,
            64,
            65,
            66,
            67,
            68,
            69,
            70,
            71,
            72,
            73,
            74,
            75,
            76,
            77,
            78,
            79,
            80,
            81,
            82,
            83,
            84,
            85,
            86,
            87,
            88,
            89,
            90,
            91,
            92,
            93,
            94,
            95,
            96,
            97,
            98,
            99,
            100,
            101,
            102,
            103,
            104,
            105,
            106,
            107,
            108,
            109,
            110,
            111,
            112,
            113,
            114,
            115,
            116,
            117,
            118,
            119,
            120,
            121,
            122,
            123,
            124,
            125,
            126,
            127,
            128,
            129,
            130,
            131,
            132,
            133,
            134,
            135,
            136,
            137,
            138,
            139,
            140,
            141,
            142,
            143,
            144,
            145,
            146,
            147,
            148,
            149,
            150,
            151,
            152,
            153,
            154,
            155,
            156,
            157,
            158,
            159,
            160,
            161,
            162,
            163,
            164,
            165,
            166,
            167,
            168,
            169,
            170,
            171,
            172,
            173,
            174,
            175,
            176,
            177,
            178,
            179,
            180,
            181,
            182,
            183,
            184,
            185,
            186,
            187,
            188,
            189,
            190,
            191,
            192,
            193,
            194,
            195,
            196,
            197,
            198,
            199,
            200,
            201,
            202,
            203,
            204,
            205,
            206,
            207,
            208,
            209,
            210,
            211,
            212,
            213,
            214,
            215,
            216,
            217,
            218,
            219,
            220,
            221,
            222,
            223,
            224,
            225,
            226,
            227,
            228,
            229,
            230,
            231,
            232,
            233,
            234,
            235,
            236,
            237,
            238,
            239,
            240,
            241,
            242,
            243,
            244,
            245,
            246,
            247,
            248,
            249,
            250,
            251,
            252,
            253,
            254,
            255,
            256,
            257,
            258,
            259,
            260,
            261,
            262,
            263,
            264,
            265,
            266,
            267,
            268,
            269,
            270,
            271,
            272,
            273,
            274,
            275,
            276,
            277,
            278,
            279,
            280,
            281,
            282,
            283,
            284,
            285,
            286,
            287,
            288,
            289,
            290,
            291,
            292,
            293,
            294,
            295,
            296,
            297,
            298,
            299,
            300,
            301,
            302,
            303,
            304,
            305,
            306,
            307,
            308,
            309,
            310,
            311,
            312,
            313,
            314,
            315,
            316,
            317,
            318,
            319,
            320,
            321,
            322,
            323,
            324,
            325,
            326,
            327,
            328,
            329,
            330,
            331,
            332,
            333,
            334,
            335,
            336,
            337,
            338,
            339,
            340,
            341,
            342,
            343,
            344,
            345,
            346,
            347,
            348,
            349,
            350,
            351,
            352,
            353,
            354,
            355,
            356,
            357,
            358,
            359,
            360,
            361,
            362,
            363,
            364,
            365,
            366,
            367,
            368,
            369,
            370,
            371,
            372,
            373,
            374,
            375,
            376,
            377,
            378,
            379,
            380,
            381,
            382,
            383,
            384,
            385,
            386,
            387,
            388,
            389,
            390,
            391,
            392,
            393,
            394,
            395,
            396,
            397,
            398,
            399,
            400,
            401,
            402,
            403,
            404,
            405,
            406,
            407,
            408,
            409,
            410,
            411,
            412,
            413,
            414,
            415,
            416,
            417,
            418,
            419,
            420,
            421,
            422,
            423,
            424,
            425,
            426,
            427,
            428,
            429,
            430,
            431,
            432,
            433,
            434,
            435,
            436,
            437,
            438,
            439,
            440,
            441,
            442,
            443,
            444,
            445,
            446,
            447,
            448,
            449,
            450,
            451,
            452,
            453,
            454,
            455,
            456,
            457,
            458,
            459,
            460,
            461,
            462,
            463,
            464,
            465,
            466,
            467,
            468,
            469,
            470,
            471,
            472,
            473,
            474,
            475,
            476,
            477,
            478,
            479,
            480,
            481,
            482,
            483,
            484,
            485,
            486,
            487,
            488,
            489,
            490,
            491,
            492,
            493,
            494,
            495,
            496,
            497,
            498,
            499,
            500,
            501,
            502,
            503,
            504,
            505,
            506,
            507,
            508,
            509,
            510,
            511,
            512,
            513,
            514,
            515,
            516,
            517,
            518,
            519,
            520,
            521,
            522,
            523,
            524,
            525,
            526,
            527,
            528,
            529,
            530,
            531,
            532,
            533,
            534,
            535,
            536,
            537,
            538,
            539,
            540,
            541,
            542,
            543,
            544,
            545,
            546,
            547,
            548,
            549,
            550,
            551,
            552,
            553,
            554,
            555,
            556,
            557,
            558,
            559,
            560,
            561,
            562,
            563,
            564,
            565,
            566,
            567,
            568,
            569,
            570,
            571,
            572,
            573,
            574,
            575,
            576,
            577,
            578,
            579,
            580,
            581,
            582,
            583,
            584,
            585,
            586,
            587,
            588,
            589,
            590,
            591,
            592,
            593,
            594,
            595,
            596,
            597,
            598,
            599,
            600,
            601,
            602,
            603,
            604,
            605,
            606,
            607,
            608,
            609,
            610,
            611,
            612,
            613,
            614,
            615,
            616,
            617,
            618,
            619,
            620,
            621,
            622,
            623,
            624,
            625,
            626,
            627,
            628,
            629,
            630,
            631,
            632,
            633,
            634,
            635,
            636,
            637,
            638,
            639,
            640,
            641,
            642,
            643,
            644,
            645,
            646,
            647,
            648,
            649,
            650,
            651,
            652,
            653,
            654,
            655,
            656,
            657,
            658,
            659,
            660,
            661,
            662,
            663,
            664,
            665,
            666,
            667,
            668,
            669,
            670,
            671,
            672,
            673,
            674,
            675,
            676,
            677,
            678,
            679,
            680,
            681,
            682,
            683,
            684,
            685,
            686,
            687,
            688,
            689,
            690,
            691,
            692,
            693,
            694,
            695,
            696,
            697,
            698,
            699,
            700,
            701,
            702,
            703,
            704,
            705,
            706,
            707,
            708,
            709,
            710,
            711,
            712,
            713,
            714,
            715,
            716,
            717,
            718,
            719,
            720,
            721,
            722,
            723,
            724,
            725,
            726,
            727,
            728,
            729,
            730,
            731,
            732,
            733,
            734,
            735,
            736,
            737,
            738,
            739,
            740,
            741,
            742,
            743,
            744,
            745,
            746,
            747,
            748,
            749,
            750,
            751,
            752,
            753,
            754,
            755,
            756,
            757,
            758,
            759,
            760,
            761,
            762,
            763,
            764,
            765,
            766,
            767,
            768,
            769,
            770,
            771,
            772,
            773,
            774,
            775,
            776,
            777,
            778,
            779,
            780,
            781,
            782,
            783,
            784,
            785,
            786,
            787,
            788,
            789,
            790,
            791,
            792,
            793,
            794,
            795,
            796,
            797,
            798,
            799,
            800,
            801,
            802,
            803,
            804,
            805,
            806,
            807,
            808,
            809,
            810,
            811,
            812,
            813,
            814,
            815,
            816,
            817,
            818,
            819,
            820,
            821,
            822,
            823,
            824,
            825,
            826,
            827,
            828,
            829,
            830,
            831,
            832,
            833,
            834,
            835,
            836,
            837,
            838,
            839,
            840,
            841,
            842,
            843,
            844,
            845,
            846,
            847,
            848,
            849,
            850,
            851,
            852,
            853,
            854,
            855,
            856,
            857,
            858,
            859,
            860,
            861,
            862,
            863,
            864,
            865,
            866,
            867,
            868,
            869,
            870,
            871,
            872,
            873,
            874,
            875,
            876,
            877,
            878,
            879,
            880,
            881,
            882,
            883,
            884,
            885,
            886,
            887,
            888,
            889,
            890,
            891,
            892,
            893,
            894,
            895,
            896,
            897,
            898,
            899,
            900,
            901,
            902,
            903,
            904,
            905,
            906,
            907,
            908,
            909,
            910,
            911,
            912,
            913,
            914,
            915,
            916,
            917,
            918,
            919,
            920,
            921,
            922,
            923,
            924,
            925,
            926,
            927,
            928,
            929,
            930,
            931,
            932,
            933,
            934,
            935,
            936,
            937,
            938,
            939,
            940,
            941,
            942,
            943,
            944,
            945,
            946,
            947,
            948,
            949,
            950,
            951,
            952,
            953,
            954,
            955,
            956,
            957,
            958,
            959,
            960,
            961,
            962,
            963
          ],
          "provenance_ids": [
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            11,
            12,
            13,
            14,
            15,
            16,
            17,
            18,
            19,
            20,
            21,
            22,
            23,
            24,
            25,
            26,
            27,
            28,
            29,
            30,
            31,
            32,
            33,
            34,
            35,
            36,
            37,
            38,
            39,
            40,
            41,
            42,
            43,
            44,
            45,
            46,
            47,
            48,
            49,
            50,
            51,
            52,
            53,
            54,
            55,
            56,
            57,
            58,
            59,
            60,
            61,
            62,
            63,
            64,
            65,
            66,
            67,
            68,
            69,
            70,
            71,
            72,
            73,
            74,
            75,
            76,
            77,
            78,
            79,
            80,
            81,
            82,
            83,
            84,
            85,
            86,
            87,
            88,
            89,
            90,
            91,
            92,
            93,
            94,
            95,
            96,
            97,
            98,
            99,
            100,
            101,
            102,
            103,
            104,
            105,
            106,
            107,
            108,
            109,
            110,
            111,
            112,
            113,
            114,
            115,
            116,
            117,
            118,
            119,
            120,
            121,
            122,
            123,
            124,
            125,
            126,
            127,
            128,
            129,
            130,
            131,
            132,
            133,
            134,
            135,
            136,
            137,
            138,
            139,
            140,
            141,
            142,
            143,
            144,
            145,
            146,
            147,
            148,
            149,
            150,
            151,
            152,
            153,
            154,
            155,
            156,
            157,
            158,
            159,
            160,
            161,
            162,
            163,
            164,
            165,
            166,
            167,
            168,
            169,
            170,
            171,
            172,
            173,
            174,
            175,
            176,
            177,
            178,
            179,
            180,
            181,
            182,
            183,
            184,
            185,
            186,
            187,
            188,
            189,
            190,
            191,
            192,
            193,
            194,
            195,
            196,
            197,
            198,
            199,
            200,
            201,
            202,
            203,
            204,
            205,
            206,
            207,
            208,
            209,
            210,
            211,
            212,
            213,
            214,
            215,
            216,
            217,
            218,
            219,
            220,
            221,
            222,
            223,
            224,
            225,
            226,
            227,
            228,
            229,
            230,
            231,
            232,
            234,
            235,
            236,
            237,
            238,
            239,
            240,
            241,
            242,
            243,
            244,
            245,
            246,
            247,
            248,
            249,
            250,
            251,
            252,
            253,
            254,
            255,
            256,
            257,
            258,
            259,
            260,
            261,
            262,
            263,
            264,
            265,
            266,
            267,
            268,
            269,
            270,
            271,
            272,
            273,
            274,
            275,
            276,
            277,
            278,
            279,
            280,
            281,
            282,
            283,
            284,
            285,
            286,
            287,
            288,
            289,
            290,
            291,
            292,
            293,
            294,
            295,
            296,
            297,
            298,
            299,
            300,
            301,
            302,
            303,
            304,
            305,
            306,
            307,
            308,
            309,
            310,
            311,
            312,
            313,
            314,
            315,
            316,
            317,
            318,
            319,
            320,
            321,
            322,
            323,
            324,
            325,
            326,
            327,
            328,
            329,
            331,
            332,
            333,
            334,
            335,
            336,
            337,
            338,
            339,
            340,
            341,
            342,
            343,
            344,
            345,
            346,
            347,
            348,
            349,
            350,
            351,
            352,
            353,
            354,
            355,
            356,
            357,
            358,
            359,
            360,
            361,
            362,
            363,
            364,
            365,
            366,
            367,
            368,
            369,
            370,
            371,
            372,
            373,
            374,
            375,
            376,
            377,
            378,
            379,
            380,
            381,
            382,
            383,
            384,
            385,
            386,
            387,
            388,
            389,
            390,
            391,
            392,
            393,
            394,
            395,
            396,
            397,
            398,
            399,
            400,
            401,
            402,
            403,
            404,
            405,
            406,
            407,
            408,
            409,
            410,
            411,
            412,
            413,
            414,
            415,
            416,
            417,
            418,
            419,
            420,
            421,
            422,
            423,
            424,
            425,
            426,
            427,
            428,
            429,
            430,
            431,
            432,
            433,
            434,
            435,
            436,
            437,
            438,
            439,
            440,
            441,
            442,
            443,
            444,
            445,
            446,
            447,
            448,
            449,
            450,
            451,
            452,
            453,
            454,
            455,
            456,
            457,
            458,
            459,
            460,
            461,
            462,
            463,
            464,
            465,
            466,
            467,
            468,
            469,
            470,
            471,
            472,
            473,
            475,
            476,
            477,
            478,
            479,
            480,
            481,
            482,
            483,
            484,
            485,
            486,
            487,
            488,
            489,
            490,
            491,
            492,
            493,
            494,
            495,
            496,
            497,
            498,
            499,
            500,
            501,
            502,
            503,
            504,
            505,
            506,
            507,
            508,
            509,
            510,
            511,
            512,
            513,
            514,
            515,
            516,
            517,
            518,
            519,
            520,
            521,
            522,
            523,
            524,
            525,
            526,
            527,
            528,
            529,
            530,
            531,
            532,
            533,
            534,
            535,
            536,
            537,
            538,
            539,
            540,
            541,
            542,
            543,
            544,
            545,
            546,
            547,
            548,
            549,
            550,
            551,
            552,
            553,
            554,
            555,
            556,
            557,
            558,
            559,
            560,
            561,
            562,
            563,
            564,
            565,
            569,
            570,
            571,
            572,
            573,
            574,
            575,
            576,
            577,
            578,
            579,
            580,
            581,
            582,
            583,
            584,
            585,
            586,
            587,
            588,
            589,
            591,
            592,
            593,
            594,
            595,
            596,
            597,
            598,
            599,
            600,
            601,
            602,
            603,
            604,
            605,
            606,
            607,
            608,
            609,
            610,
            611,
            612,
            613,
            614,
            615,
            616,
            617,
            618,
            619,
            620,
            621,
            622,
            623,
            624,
            625,
            626,
            627,
            628,
            630,
            631,
            632,
            633,
            634,
            635,
            636,
            637,
            638,
            639,
            640,
            641,
            642,
            643,
            644,
            645,
            646,
            647,
            648,
            649,
            650,
            651,
            653,
            654,
            655,
            656,
            657,
            658,
            659,
            660,
            661,
            662,
            663,
            664,
            665,
            666,
            667,
            668,
            669,
            670,
            671,
            672,
            673,
            674,
            675,
            676,
            677,
            678,
            679,
            680,
            681,
            682,
            683,
            684,
            685,
            686,
            687,
            688,
            689,
            690,
            691,
            692,
            693,
            694,
            695,
            696,
            697,
            698,
            699,
            700,
            701,
            702,
            703,
            704,
            705,
            706,
            707,
            708,
            709,
            710,
            711,
            712,
            713,
            714,
            715,
            716,
            717,
            718,
            719,
            720,
            721,
            722,
            723,
            724,
            725,
            726,
            728,
            729,
            730,
            731,
            732,
            733,
            734,
            735,
            736,
            737,
            738,
            739,
            740,
            741,
            742,
            743,
            744,
            745,
            746,
            747,
            748,
            749,
            750,
            751,
            752,
            753,
            754,
            755,
            756,
            757,
            758,
            759,
            760,
            761,
            762,
            763,
            764,
            765,
            766,
            767,
            768,
            769,
            770,
            771,
            772,
            773,
            774,
            775,
            776,
            777,
            778,
            779,
            780,
            781,
            782,
            783,
            784,
            785,
            786,
            787,
            788,
            789,
            790,
            791,
            792,
            793,
            794,
            795,
            796,
            797,
            798,
            799,
            800,
            801,
            802,
            803,
            804,
            805,
            806,
            807,
            808,
            809,
            810,
            811,
            812,
            813,
            814,
            815,
            816,
            817,
            818,
            819,
            820,
            821,
            822,
            823,
            824,
            825,
            826,
            827,
            828,
            829,
            830,
            831,
            832,
            833,
            834,
            835,
            836,
            837,
            838,
            839,
            840,
            841,
            842,
            843,
            844,
            845,
            846,
            847,
            848,
            849,
            850,
            851,
            852,
            853,
            854,
            855,
            856,
            857,
            858,
            859,
            860,
            861,
            862,
            863,
            864,
            865,
            866,
            867,
            868,
            869,
            870,
            871,
            872,
            873,
            874,
            875,
            876,
            877,
            878,
            879,
            880,
            881,
            882,
            883,
            884,
            885,
            886,
            887,
            888,
            889,
            890,
            891,
            892,
            893,
            894,
            895,
            896,
            897,
            898,
            899,
            900,
            901,
            902,
            903,
            904,
            905,
            906,
            907,
            908,
            909,
            910,
            911,
            912,
            913,
            914,
            915,
            916,
            918,
            919,
            920,
            921,
            922,
            923,
            924,
            925,
            926,
            927,
            928,
            929,
            930,
            931,
            932,
            933,
            934,
            935,
            936,
            937,
            938,
            939,
            940,
            941,
            942,
            943,
            944,
            945,
            946,
            947,
            948,
            949,
            950,
            951,
            952,
            953,
            954,
            955,
            956,
            957,
            958,
            959,
            960,
            961,
            962,
            963
          ],
          "provenance": "What Goes Around Comes Around... And Around...\n\nMichael Stonebraker\nMassachusetts Institute of Technology\nstonebraker@csail.mit.edu\n\nAndrew Pavlo\nCarnegie Mellon University\npavlo@cs.cmu.edu\n\nABSTRACT\nTwo decades ago, one of us co-authored a paper com-\nmenting on the previous 40 years of data modelling re-\nsearch and development [188].That paper demonstrated\nthat the relational model (RM) and SQL are the prevail-\ning choice for database management systems (DBMSs),\ndespite efforts to replace either them.Instead, SQL ab-\nsorbed the best ideas from these alternative approaches.We revisit this issue and argue that this same evolu-\ntion has continued since 2005.Once again there have\nbeen repeated efforts to replace either SQL or the RM.But the RM continues to be the dominant data model\nand SQL has been extended to capture the good ideas\nfrom others.As such, we expect more of the same in\nthe future, namely the continued evolution of SQL and\nrelational DBMSs (RDBMSs).We also discuss DBMS\nimplementations and argue that the major advancements\nhave been in the RM systems, primarily driven by chang-\ning hardware characteristics.1 Introduction\nIn 2005, one of the authors participated in writing a\nchapter for the Red Book titled “What Goes Around\nComes Around” [188].That paper examined the major\ndata modelling movements since the 1960s:\n\nHierarchical (e.g., IMS): late 1960s and 1970s\nNetwork (e.g., CODASYL): 1970s\nRelational: 1970s and early 1980s\nEntity-Relationship: 1970s\nExtended Relational: 1980s\nSemantic: late 1970s and 1980s\nObject-Oriented: late 1980s and early 1990s\nObject-Relational: late 1980s and early 1990s\nSemi-structured (e.g., XML): late 1990s and 2000s\n\n•\n•\n•\n•\n•\n•\n•\n•\n•\n\nOur conclusion was that the relational model with an\nextendable type system (i.e., object-relational) has dom-\ninated all comers, and nothing else has succeeded in\nthe marketplace.Although many of the non-relational\nDBMSs covered in 2005 still exist today, their vendors\nhave relegated them to legacy maintenance mode and\nnobody is building new applications on them.This per-\nsistence is more of a testament to the “stickiness” of data\n\nrather than the lasting power of these systems.In other\nwords, there still are many IBM IMS databases running\ntoday because it is expensive and risky to switch them\nto use a modern DBMS.But no start-up would willingly\nchoose to build a new application on IMS.A lot has happened in the world of databases since our\n2005 survey.During this time, DBMSs have expanded\nfrom their roots in business data processing and are now\nused for almost every kind of data.This led to the “Big\nData” era of the early 2010s and the current trend of inte-\ngrating machine learning (ML) with DBMS technology.In this paper, we analyze the last 20 years of data\nmodel and query language activity in databases.We\nstructure our commentary into the following areas: (1)\nMapReduce Systems, (2) Key-value Stores, (3) Docu-\nment Databases, (4) Column Family / Wide-Column,\n(5) Text Search Engines, (6) Array Databases, (7)\nVector Databases, and (8) Graph Databases.We contend that most systems that deviated from\nSQL or the RM have not dominated the DBMS land-\nscape and often only serve niche markets.Many sys-\ntems that started out rejecting the RM with much fanfare\n(think NoSQL) now expose a SQL-like interface for RM\ndatabases.Such systems are now on a path to conver-\ngence with RDBMSs.Meanwhile, SQL incorporated\nthe best query language ideas to expand its support for\nmodern applications and remain relevant.Although there has not been much change in RM\nfundamentals, there were dramatic changes in RM sys-\ntem implementations.The second part of this paper\ndiscusses advancements in DBMS architectures that ad-\ndress modern applications and hardware: (1) Columnar\nSystems, (2) Cloud Databases, (3) Data Lakes / Lake-\nhouses, (4) NewSQL Systems, (5) Hardware Acceler-\nators, and (6) Blockchain Databases.Some of these\nare profound changes to DBMS implementations, while\nothers are merely trends based on faulty premises.We ﬁnish with a discussion of important considera-\ntions for the next generation of DBMSs and provide part-\ning comments on our hope for the future of databases in\nboth research and commercial settings.SIGMOD Record, June 2024 (Vol. 53, No.2)\n\n21\n\n\f2 Data Models & Query Languages\nFor our discussion here, we group the research and de-\nvelopment thrusts in data models and query languages\nfor database into eight categories.2.1 MapReduce Systems\nGoogle constructed their MapReduce (MR) framework\nin 2003 as a “point solution” for processing its periodic\ncrawl of the internet [122].At the time, Google had\nlittle expertise in DBMS technology, and they built MR\nto meet their crawl needs.In database terms, Map is a\nuser-deﬁned function (UDF) that performs computation\nand/or ﬁltering while Reduce is a GROUP BY operation.To a ﬁrst approximation, MR runs a single query:\n\nSELECT map() FROM crawl_table GROUP BY reduce()\n\nGoogle’s MR approach did not prescribe a speciﬁc\ndata model or query language.Rather, it was up to the\nMap and Reduce functions written in a procedural MR\nprogram to parse and decipher the contents of data ﬁles.There was a lot of interest in MR-based systems at\nother companies in the late 2000s.Yahoo! developed\nan open-source version of MR in 2005, called Hadoop.It ran on top of a distributed ﬁle system HDFS that was\na clone of the Google File System [134].Several start-\nups were formed to support Hadoop in the commercial\nmarketplace.We will use MR to refer to the Google\nimplementation and Hadoop to refer to the open-source\nversion.They are functionally similar.There was a controversy about the value of Hadoop\ncompared to RDBMSs designed for OLAP workloads.This culminated in a 2009 study that showed that data\nwarehouse DBMSs outperformed Hadoop [172].This\ngenerated dueling articles from Google and the DBMS\ncommunity [123, 190].Google argued that with care-\nful engineering, a MR system will beat DBMSs, and a\nuser does not have to load data with a schema before\nrunning queries on it.Thus, MR is better for “one shot”\ntasks, such as text processing and ETL operations.The\nDBMS community argued that MR incurs performance\nproblems due to its design that existing parallel DBMSs\nalready solved.Furthermore, the use of higher-level\nlanguages (SQL) operating over partitioned tables has\nproven to be a good programming model [127].A lot of the discussion in the two papers was on imple-\nmentation issues (e.g., indexing, parsing, push vs. pull\nquery processing, failure recovery).From reading both\npapers a reasonable conclusion would be that there is a\nplace for both kinds of systems.However, two changes\nin the technology world rendered the debate moot.The ﬁrst event was that the Hadoop technology and\nservices market cratered in the 2010s.Many enterprises\nspent a lot of money on Hadoop clusters, only to ﬁnd\nthere was little interest in this functionality.Developers\nfound it difﬁcult to shoehorn their application into the\n\nrestricted MR/Hadoop paradigm.There were consider-\nable efforts to provide a SQL and RM interface on top\nof Hadoop, most notable was Meta’s Hive [30, 197].The next event occurred eight months after the CACM\narticle when Google announced that they were moving\ntheir crawl processing from MR to BigTable [164].The\nreason was that Google needed to interactively update\nits crawl database in real time but MR was a batch sys-\ntem.Google ﬁnally announced in 2014 that MR had no\nplace in their technology stack and killed it off [194].The ﬁrst event left the three leading Hadoop vendors\n(Cloudera, Hortonworks, MapR) without a viable prod-\nuct to sell.Cloudera rebranded Hadoop to mean the\nwhole stack (application, Hadoop, HDFS).In a further\nsleight-of-hand, Cloudera built a RDBMS, Impala [150],\non top of HDFS but not using Hadoop.They realized\nthat Hadoop had no place as an internal interface in a\nSQL DBMS, and they conﬁgured it out of their stack\nwith software built directly on HDFS.In a similar vein,\nMapR built Drill [22] directly on HDFS, and Meta cre-\nated Presto [185] to replace Hive.Discussion: MR’s deﬁciencies were so signiﬁcant that\nit could not be saved despite the adoption and enthu-\nsiasm from the developer community.Hadoop died\nabout a decade ago, leaving a legacy of HDFS clusters\nin enterprises and a collection of companies dedicated\nto making money from them.At present, HDFS has\nlost its luster, as enterprises realize that there are better\ndistributed storage alternatives [124].Meanwhile, dis-\ntributed RDBMSs are thriving, especially in the cloud.Some aspects of MR system implementations related\nto scalability, elasticity, and fault tolerance are carried\nover into distributed RDBMSs.MR also brought about\nthe revival of shared-disk architectures with disaggre-\ngated storage, subsequently giving rise to open-source\nﬁle formats and data lakes (see Sec.3.3). Hadoop’s lim-\nitations opened the door for other data processing plat-\nforms, namely Spark [201] and Flink [109].Both sys-\ntems started as better implementations of MR with pro-\ncedural APIs but have since added support for SQL [105].2.2 Key/Value Stores\nThe key/value (KV) data model is the simplest model\npossible.It represents the following binary relation:\n\n(key,value)\n\nA KV DBMS represents a collection of data as an as-\nsociative array that maps a key to a value.The value is\ntypically an untyped array of bytes (i.e., a blob), and the\nDBMS is unaware of its contents.It is up to the appli-\ncation to maintain the schema and parse the value into\nits corresponding parts.Most KV DBMSs only provide\nget/set/delete operations on a single value.In the 2000s, several new Internet companies built\ntheir own shared-nothing, distributed KV stores for nar-\n\n22\n\nSIGMOD Record, June 2024 (Vol.53, No. 2)\n\n\frowly focused applications, like caching and storing ses-\nsion data.For caching, Memcached [131] is the most\nwell-known example of this approach.Redis [67] mar-\nkets itself as a Memcached replacement, offering a more\nrobust query API with checkpointing support.For more\npersistent application data, Amazon created the Dynamo\nKV store in 2007 [125].Such systems offer higher and\nmore predictable performance, compared to a RDBMS,\nin exchange for more limited functionality.The second KV DBMS category are embedded stor-\nage managers designed to run in the same address space\nas a higher-level application.One of the ﬁrst stan-\ndalone embedded KV DBMSs was BerkeleyDB from\nthe early 1990s [170].Recent notable entries include\nGoogle’s LevelDB [37], which Meta later forked as\nRocksDB [68].Discussion: Key/value stores provide a quick “out-of-\nthe-box” way for developers to store data, compared to\nthe more laborious effort required to set up a table in a\nRDBMS.Of course, it is dangerous to use a KV store\nin a complex application that requires more than just a\nbinary relation.If an application requires multiple ﬁelds\nin a record, then KV stores are probably a bad idea.Not\nonly must the application parse record ﬁelds, but also\nthere are no secondary indexes to retrieve other ﬁelds\nby value.Likewise, developers must implement joins or\nmulti-get operations in their application.To deal with these issues, several systems began as\na KV store and then morphed into a more feature-rich\nrecord store.Such systems replace the opaque value\nwith a semi-structured value, such as a JSON docu-\nment.Examples of this transition are Amazon’s Dy-\nnamoDB [129] and Aerospike [9].It is not trivial to re-\nengineer a KV store to make it support a complex data\nmodel, whereas RDBMSs easily emulates KV stores\nwithout any changes.If an application needs an embed-\nded DBMS, there are full-featured choices available to-\nday, including SQLite [71] and DuckDB [180].Hence,\na RDBMS may be a better choice, even for simple appli-\ncations, because they offer a path forward if the applica-\ntion’s complexity increases.One new architecture trend from the last 20 years is\nusing embedded KV stores as the underlying storage\nmanager for full-featured DBMSs.Prior to this, build-\ning a new DBMS requires engineers to build a custom\nstorage manager that is natively integrated in the DBMS.MySQL was the ﬁrst DBMS to expose an API that al-\nlowed developers to replace its default KV storage man-\nager.This API enabled Meta to build RocksDB to re-\nplace InnoDB for its massive ﬂeet of MySQL databases.Similarly, MongoDB discarded their ill-fated MMAP-\nbased storage manager in favor of WiredTiger’s KV\nstore in 2014 [120, 138].Using an existing KV store\nallows developers to write a new DBMS in less time.2.3 Document Databases\n\nThe document data model represents a database as a col-\nlection of record objects.Each document contains a hier-\narchy of ﬁeld/value pairs, where each ﬁeld is identiﬁed\nby a name and a ﬁeld’s value can be either a scalar type,\nan array of values, or another document.The following\nexample in JSON is a customer document that contain\na nested list of purchase order records with their corre-\nsponding order items.{ “name”: “First Last”,\n\n“orders”: [ { “id”: 123, “items”: [...] },\n\n{ “id”: 456, “items”: [...] }, ] }\n\nDocument data models have been an active ﬁeld of\neffort for several decades.This has given rise to data\nformats like SGML [117] and XML [118].Despite\nthe buzz with XML databases in the late 1990s, we\ncorrectly predicted in 2005 they would not supplant\nRDBMSs [188].JSON has since overtaken XML to\nbecome the standard for data exchange for web-based\napplications.JavaScript’s popularity with developers\nand the accompanying ubiquity of JSON led several\ncompanies to create document-oriented systems that na-\ntively stored JSON in the 2000s.The inability of OLTP RDBMSs to scale in the 2000s\nushered in dozens of document DBMSs that marketed\nthemselves using the catchphrase NoSQL [110].There\nwere two marketing messages for such systems that res-\nonated with developers.First, SQL and joins are slow,\nand one should use a “faster” lower-level, record-at-a-\ntime interface.Second, ACID transactions are unneces-\nsary for modern applications, so the DBMS should only\nprovide weaker notion of it (i.e., BASE [179]).Because of these two thrusts, NoSQL came to stand\nfor a DBMS that stored records or documents as JSON,\nsupported a lower-level API, and weak or non-existent\ntransactions.There are dozens of such systems, of\nwhich MongoDB [41] is the most popular.Discussion: Document DBMSs are essentially the same\nas object-oriented DBMSs from the 1980s and XML\nDBMSs from the late 1990s.Proponents of document\nDBMSs make the same argument as their OO/XML\npredecessors: storing data as documents removes the\nimpedance mismatch between how application OO code\ninteracts with data and how relational databases store\nthem.They also claim that denormalizing entries into\nnested structures is better for performance because it re-\nmoves the need to dispatch multiple queries to retrieve\ndata related to a given object (i.e., “N+1 problem” in\nORMs).The problems with denormalization/prejoining\nis an old topic that dates back to the 1970s [116]: (1)\nif the join is not one-to-many, then there will be dupli-\ncated data, (2) prejoins are not necessarily faster than\njoins, and (3) there is no data independence.SIGMOD Record, June 2024 (Vol. 53, No.2)\n\n23\n\n\fDespite strong protestations that SQL was terrible, by\nthe end of the 2010s, almost every NoSQL DBMS added\na SQL interface.Notable examples include DynamoDB\nPartiQL [56], Cassandra CQL [15], Aerospike AQL [9],\nand Couchbase SQL++ [72].The last holdout was Mon-\ngoDB, but they added SQL for their Atlas service in\n2021 [42].Instead of supporting the SQL standard for\nDDL and DML operations, NoSQL vendors claim that\nthey support their own proprietary query language de-\nrived or inspired from SQL.For most applications, these\ndistinctions are without merit.Any language differences\nbetween SQL and NoSQL derivatives are mostly due to\nJSON extensions and maintenance operations.Many of the remaining NoSQL DBMSs also added\nstrongly consistent (ACID) transactions (see Sec. 3.4).As such, the NoSQL message has morphed from “Do\nnot use SQL – it is too slow!” to “Not only SQL” (i.e.,\nSQL is ﬁne for some things).Adding SQL and ACID to a NoSQL DBMS lowers\ntheir intellectual distance from RDBMSs.The main\ndifferences between them seems to be JSON support\nand the fact that NoSQL vendors allow “schema later”\ndatabases.But the SQL standard added a JSON data\ntype and operations in 2016 [165, 178].And as RDBMSs\ncontinue to improve their “ﬁrst ﬁve minutes” experience\nfor developers, we believe that the two kinds of systems\nwill soon be effectively identical.Higher level languages are almost universally pre-\nferred to record-at-a-time notations as they require less\ncode and provide greater data independence.Although\nwe acknowledge that the ﬁrst SQL optimizers were slow\nand ineffective, they have improved immensely in the\nlast 50 years.But the optimizer remains the hardest part\nof building a DBMS.We suspect that this engineering\nburden was a contributing factor to why NoSQL systems\noriginally chose to not support SQL.2.4 Column-Family Databases\nThere is another category of NoSQL systems that uses\na data model called column-family (aka wide-column).Despite its name, column-family is not a columnar data\nmodel.Instead, it is a reduction of the document data\nmodel that only supports one level of nesting instead\nof arbitrary nesting; it is relation-like, but each record\ncan have optional attributes, and cells can contain an ar-\nray of values.The following example shows a mapping\nfrom user identiﬁer keys to JSON documents that con-\ntain each user’s varying proﬁle information:\n\nUser1000 → { “name”: “Alice”,\n\n“accounts”: [ 123, 456 ],\n“email”: \"xxx@xxx.edu” }\n\nUser1001 → { “name”: “Bob”,\n\n“email”: [ “yyy@yyy.org”, “zzz@zzz.com” ] }\n\nThe ﬁrst column-family model DBMS was Google’s\nBigTable in 2004 [111].Instead of adopting SQL and\n\nemerging columnar storage, Google used this data model\nwith procedural client APIs.Other systems adopted the\ncolumn-family model in an attempt to copy Google’s be-\nspoke implementation.Most notable are Cassandra [14]\nand HBase [28].They also copied BigTable’s limita-\ntions, including the lack of joins and secondary indexes.Discussion: All our comments in Sec.2.3 about the\ndocument model are also applicable here.In the early\n2010s, Google built RDBMSs on top of BigTable, in-\ncluding MegaStore [99] and the ﬁrst version of Span-\nner.Since then, Google rewrote Spanner to remove\nthe BigTable remnants [98], and it is now the primary\ndatabase for many of its internal applications.Several\nNoSQL DBMSs deprecated their proprietary APIs in\nfavor of SQL but still retain their non-relational archi-\ntectures.Cassandra replaced their Thrift-API with a\nSQL-like language called CQL [15], and HBase now\nrecommends the Phoenix SQL-frontend [57].Google\nstill offers BigTable as a cloud service, but the column-\nfamily model is a singular outlier with the same disad-\nvantages as NoSQL DBMSs.2.5 Text Search Engines\nText search engines have existed for a long time, begin-\nning with the seminal SMART system in the 1960s [184].SMART pioneered information retrieval and the vector\nspace model, now nearly universal in modern search\nengines, by tokenizing documents into a “bag of words”\nand then building full-text indexes (aka inverted indexes)\non those tokens to support queries on their contents.The\nsystem was also cognizant of noise words (e.g., “the”,\n“a”), synonyms (e.g., “The Big Apple” is a synonym for\n“New York City”), salient keywords, and distance (e.g.,\n“drought” often appears close to “climate change”).The leading text search systems today include Elastic-\nsearch [23] and Solr [70], which both use Lucene [38]\nas their internal search library.These systems offer\ngood support for storing and indexing text data but offer\nnone-to-limited transaction capabilities.This limitation\nmeans that a DBMS has to recover from data corruption\nby rebuilding the document index from scratch, which\nresults in signiﬁcant downtime.All the leading RDBMSs support full-text search in-\ndexes, including Oracle [52], Microsoft SQL Server [52],\nMySQL [43], and PostgreSQL [62].Their search fea-\ntures have improved recently and are generally on par\nwith the special-purpose systems above.They also have\nthe advantage of built-in transaction support.But their\nintegration of search operations in SQL is often clunky\nand differs between DBMSs.Discussion: Text data is inherently unstructured, which\nmeans that there is no data model.Instead, a DBMS\nseeks to extract structure (i.e., meta-data, indexes) from\ntext to avoid “needle in the haystack” sequential searches.24\n\nSIGMOD Record, June 2024 (Vol. 53, No.2)\n\n\fThere are three ways to manage text data in application.First, one can run multiple systems, such as Elastic-\nsearch for text and a RDBMS for operational workloads.This approach allows one to run “best of breed” systems\nbut requires additional ETL plumbing to push data from\nthe operational DBMS to the text DBMS and to rewrite\napplications to route queries to the right DBMSs based\non their needs.Alternatively, one can run a RDBMS\nwith good text-search integration capabilities but with\ndivergent APIs in SQL.This latter issue is often over-\ncome by application frameworks that hide this complex-\nity (e.g., Django Haystack [20]).The third option is\na polystore system [187] that masks the system differ-\nences via middleware that exposes a uniﬁed interface.Inverted index-centric search engines based on SMART\n\nare used for exact match searches.These methods have\nbeen supplanted in recent years by similarity search us-\ning ML-generated embeddings (see Sec.2.7). 2.6 Array Databases\nThere are many areas of computing where arrays are an\nobvious data representation.We use the term “array” to\nmean all variants of them [182]: vectors (one dimen-\nsion – see Sec.2.7), matrices (two dimensions), and\ntensors (three or more dimensions).For example, sci-\nentiﬁc surveys for geographic regions usually represent\ndata as a multi-dimensional array that stores sensor mea-\nsurements using location/time-based coordinates:\n\n(latitude, longitude, time, [vector-of-values])\n\nSeveral other data sets look like this, including ge-\nnomic sequencing and computational ﬂuid dynamics.Arrays are also the core of most ML data sets.Although array-based programming languages have\nexisted since the 1960s (APL [142]), the initial work\non array DBMSs began in the 1980s.PICDMS is con-\nsidered to be the ﬁrst DBMS implementation using the\narray data model [114].The two oldest array DBMSs\nstill being developed today are Rasdaman [66, 103] and\nkdb+ [34].Newer array DBMSs include SciDB [54,\n191] and TileDB [76].HDF5 [29] and NetCDF [46] are\npopular array ﬁle formats for scientiﬁc data.There are several system challenges with storing and\nquerying real-world array data sets.Foremost is that ar-\nray data does not always align to a regular integer grid;\nfor example, geospatial data is often split into irregular\nshapes.An application can map such grids to integer\ncoordinates via metadata describing this mapping [166].Hence, most applications maintain array and non-array\ndata together in a single database.Unlike row- or column-based DBMSs, querying array\ndata in arbitrary dimensions presents unique challenges.The difﬁculty arises from storing multi-dimensional ar-\nray data on a linear physical storage medium like a disk.To overcome these challenges, array DBMSs must em-\n\nploy indexing and data structures to support efﬁcient\ntraversal across array dimensions.Discussion: Array DBMSs are a niche market that has\nonly seen adoption in speciﬁc verticals (we discuss vec-\ntor DBMSs next).For example, they have considerable\ntraction in the genomics space.HDF5 is popular for\nsatellite imagery and other gridded scientiﬁc data.But\nbusiness applications rarely use dedicated array DBMSs,\nwhich is necessary for any product to survive.No ma-\njor cloud provider offers a hosted array DBMS service,\nmeaning they do not see a sizable market.The challenge that array DBMS vendors have al-\nways faced is that the SQL includes support for or-\ndered arrays as ﬁrst-class data types (despite this be-\ning against the original RM proposal [115]).The ﬁrst\nproposal to extend the unordered set-based RM with\nordered rasters was in 1993 [155].An early exam-\nple of this was Illustra’s temporal (one-dimensional)\ndata plugin [31].SQL:1999 introduced limited sup-\nport for single-dimension, ﬁxed-length array data types.SQL:2003 expanded to support nested arrays without a\npredeﬁned maximum cardinality.Later entrants include\nOracle Georaster [4] and Teradata [73].Data cubes are\nspecial-purpose arrays [135], but columnar RDBMSs\nhave eclipsed them for OLAP workloads because of\ntheir better ﬂexibility and lower engineering costs [113].More recently, the SQL:2023 standard includes sup-\nport for true multi-dimensional arrays (SQL/MDA) that\nis heavily inspired by Rasdaman’s RQL [166].This\nupdate allows SQL to represent arrays with arbitrary\nIn effect,\ndimensions using integer-based coordinates.this allows data cubes to exist in a SQL framework, but\ncolumnar DBMSs now dominate this market.2.7 Vector Databases\nSimilar to how the column-family model is a reduction\nof the document model, the vector data model simpliﬁes\nthe array data model to one-dimensional rasters.Given\nthat vector DBMSs are attracting the most attention\nright now from developers and investors (similar to the\nNoSQL fad), it is necessary to discuss them separately.The reason for this interest is because developers use\nthem to store single-dimension embeddings generated\nfrom AI tools.These tools use learned transformations\nto convert a record’s data (e.g., text, image) into a vec-\ntor representing its latent semantics.For example, one\ncould convert each Wikipedia article into an embedding\nusing Google BERT and store them in a vector database\nalong with additional article meta-data:\n\n(title, date, author, [embedding-vector])\n\nThe size of these embedding vectors range from 100s\nof dimensions for simple transformers to 1000s for high-\nend models; these sizes will obviously grow over time\nwith the development of more sophisticated models.SIGMOD Record, June 2024 (Vol. 53, No.2)\n\n25\n\n\fThe key difference between vector and array DBMSs\nis their query patterns.The former are designed for\nsimilarity searches that ﬁnd records whose vectors have\nthe shortest distance to a given input vector in a high-\ndimensional space.The input vector is another embed-\nding generated with the same transformer used to popu-\nlate the database.Unlike array DBMSs, applications do\nnot use vector DBMSs to search for matches at an off-\nset in a vector nor extract slices across multiple vectors.Instead, the dominant use case is this similarity search.To avoid brute force scans for ﬁnding the most sim-\nilar records, vector DBMSs build indexes to accelerate\napproximate nearest neighbor (ANN) searches.Appli-\ncations issue queries with predicates on both the em-\nbedding index and non-embedding attributes (i.e., meta-\ndata).The DBMS then chooses whether to use the non-\nembedding predicate on records before (pre-ﬁlter) or af-\nter (post-ﬁlter) the vector search.There are dozens of new DBMSs in this emerging\ncategory, with Pinecone [58], Milvus [40], and Weav-\niate [84] as the leading systems.Text search engines,\nincluding Elasticsearch [23], Solr [70], and Vespa [79],\nexpanded their APIs to support vector search.Other\nDBMSs rebranded themselves as vector databases to\njump on the bandwagon, such as Kdb+ [34].One compelling feature of vector DBMSs is that\nthey provide better integration with AI tools (e.g., Chat-\nGPT [16], LangChain [36]) than RDBMSs.These sys-\ntems natively support transforming a record’s data into\nan embedding upon insertion using these tools and then\nuses the same transformation to convert a query’s in-\nput arguments into an embedding to perform the ANN\nsearch; other DBMSs require the application to perform\nthese transformations outside of the database.Discussion: Unlike array DBMSs that require a cus-\ntomized storage manager and execution engine to sup-\nport efﬁcient operations on multi-dimensional data, vec-\ntor DBMSs are essentially document-oriented DBMSs\nwith specialized ANN indexes.Such indexes are a fea-\nture, not the foundation of a new system architecture.After LLMs became “mainstream” with ChatGPT in\nlate 2022, it took less than one year for several RDBMSs\nIn 2023,\nto add their own vector search extensions.many of the major RDBMSs added vector indexes, in-\ncluding Oracle [7], SingleStore [137], Rockset [8], and\nClickhouse [157].Contrast this with JSON support in\nRDBMSs.NoSQL systems like MongoDB and CouchDB\nbecame popular in the late 2000s and it took several\nyears for RDBMSs to add support for it.There are two likely explanations for the quick pro-\nliferation of vector indexes.The ﬁrst is that similarity\nsearch via embeddings is such a compelling use case\nthat every DBMS vendor rushed out their version and\nannounced it immediately.The second is that the en-\ngineering effort to introduce a new index data structure\n\nis small enough that it did not take that much work for\nthe DBMS vendors to add vector search.Most of them\ndid not write their vector index from scratch and instead\nintegrated an open-source library (e.g., pgVector [145],\nDiskANN [19], FAISS [24]).Meanwhile, relational incumbents will\nhave added vector indexes to their already long list of\nfeatures and moved on to the next emerging trend.2.8 Graph Databases\nThere has been a lot of academic and industry interest\nin the last decade in graph databases [183].Many appli-\ncations use knowledge graphs to model semi-structured\ninformation.Social media applications inherently con-\ntain graph-oriented relationships (“likes”, “friend-of”).Relational design tools provide users with an entity-\nrelationship (ER) model of their database.An ER dia-\ngram is a graph; thus, this paradigm has clear use cases.The two most prevalent approaches to represent graphs\nare (1) the resource description framework (RDF) and\n(2) property graphs [126].With property graphs, the\nDBMS maintains a directed multi-graph structure that\nsupports key/value labels for nodes and edges.RDF\ndatabases (aka triplestores) only model a directed graph\nwith labeled edges.Since property graphs are more com-\nmon and are a superset of RDF, we will only discuss\nthem.We consider two use cases for graph DBMSs and\ndiscuss the problems that will limit their adoption.The ﬁrst category of systems are for operational /\nOLTP workloads: an application, for example, adds a\nfriend link in the database by updating a single record,\npresumably in a transactional manner.Neo4j [44] is the\nmost popular graph DBMS for OLTP applications.It\nsupports edges using pointers (as in CODASYL) but it\ndoes not cluster nodes with their “parent” or “offspring”.Such an architecture is advantageous for traversing long\nedge chains since it will do pointer chasing, whereas a\nRDBMS has to do this via joins.But their potential mar-\nket success comes down to whether there are enough\n“long chain” scenarios that merit forgoing a RDBMS.The second use case is analytics, which seeks to de-\nrive information from the graph.An example of this\nscenario is ﬁnding which user has the most friends un-\nder 30 years old.Notable entries like Tigergraph [74]\nand JanusGraph [32] focus on query languages and\nstorage on a graph DBMS.Other systems, such as Gi-\nraph [26] and Turi [78] (formerly Graphlab [27]) pro-\nvide a computing fabric to support parallel execution of\ngraph-oriented programs, typically written by a user.Unlike queries in relational analytics that are charac-\nterized by chains of joins, queries for graph analytics\ncontain operations like shortest path, cut set, or clique\n\n26\n\nSIGMOD Record, June 2024 (Vol.53, No. 2)\n\n\fdetermination. Algorithm choice and data representa-\ntion will determine a DBMS’s performance.This argues\nfor a computing fabric that allows developers to write\ntheir own algorithms using an abstraction that hides\nthe underlying system topology.However, previous\nresearch shows that distributed algorithms rarely out-\nperform single-node implementations because of com-\nmunication costs [160].A better strategy is to compress\na graph into a space-efﬁcient data structure that ﬁts in\nmemory on a single node and then run the query against\nthis data structure.All but the largest graph databases\nare probably best handled this way.Discussion: Regardless of whether a graph DBMS tar-\ngets OLTP or OLAP workloads, the key challenge these\nsystems have to overcome is that it is possible to simu-\nlate a graph as a collection of tables:\n\nNode (node_id, node_data)\nEdge (node_id_1, node_id_2, edge_data)\n\nThis means that RDBMSs are always an option to sup-\nport graphs.But “vanilla” SQL is not expressive enough\nfor graph queries and thus require multiple client-server\nroundtrips for traversal operations.Some RDBMSs, including MSSQL [3] and Oracle [50],\n\nprovide built-in SQL extensions that make storing and\nquerying graph data easier.Other DBMSs use a transla-\ntion layer on top of relations to support graph-oriented\nAPIs.Amazon Neptune [45] is a graph-oriented veneer\non top of Aurora MySQL.Apache AGE provides an\nOpenCypher interface on top of PostgreSQL [10].More recently, SQL:2023 introduced property graph\nqueries (SQL/PGQ) for deﬁning and traversing graphs\nin a RDBMS [196].The syntax builds on existing lan-\nguages (e.g., Neo4j’s Cypher [49], Oracle’s PGQL [51],\nand TigerGraph’s GSQL [75]), and shares aspects of the\nemerging GQL standard [126].Thus, SQL/PGQ further\nnarrows the functionality difference between RDBMSs\nand native graph DBMSs.The question is whether graph DBMS vendors can\nmake their specialized systems fast enough to over-\ncome the above disadvantages.There have been several\nperformance studies showing that graph simulation on\nRDBMSs outperform graph DBMSs [130, 143].More\nrecent work showed how SQL/PGQ in DuckDB outper-\nforms a leading graph DBMS by up to 10\n[196].This\ntrend will continue with further improvements in worst-\ncase optimal joins [132, 168] and factorized execution\nalgorithms [100] for graph queries in RDBMSs.⇥\n\n2.9 Summary\nA reasonable conclusion from the above section is that\nnon-SQL, non-relational systems are either a niche mar-\nket or are fast becoming SQL/RM systems.Speciﬁcally:\n\n•\n\nMapReduce Systems: They died years ago and are,\nat best, a legacy technology at present.•\n\n•\n\n•\n\n•\n\n•\n\n•\n\n•\n\nKey-value Stores: Many have either matured into\nRM systems or are only used for speciﬁc problems.These can generally be equaled or beaten by modern\nhigh-performance RDBMSs.Document Databases: Such NoSQL systems are on\na collision course with RDBMSs.The differences\nbetween the two kinds of systems have diminished\nover time and should become nearly indistinguish-\nable in the future.Column-Family Systems: These remain a niche\nmarket.Without Google, this paper would not be\ntalking about this category.Text Search Engines: These systems are used for\ntext ﬁelds in a polystore architecture.It would be\nvaluable if RDBMSs had a better story for search so\nthese would not have to be a separate product.Array Databases: Scientiﬁc applications will con-\ntinue to ignore RDBMSs in favor of bespoke array\nsystems.They may become more important because\nRDBMSs cannot efﬁciently store and analyze arrays\ndespite new SQL/MDA enhancements.Vector Databases: They are single-purpose DBMSs\nwith indexes to accelerate nearest-neighbor search.RM DBMSs should soon provide native support for\nthese data structures and search methods using their\nextendable type system that will render such special-\nized databases unnecessary.Graph Databases: OLTP graph applications will\nbe largely served by RDBMSs.In addition, ana-\nlytic graph applications have unique requirements\nthat are best done in main memory with specialized\ndata structures.RDBMSs will provide graph-centric\nAPIs on top of SQL or via extensions.We do not ex-\npect specialized graph DBMSs to be a large market.Beyond the above, there are also proposals to rebrand\nprevious data models as something novel.For example,\ngraph-relational [158] is the same as the semantic data\nmodel [202].Likewise, document-relational is the doc-\nument model with foreign keys [199].Others provide a\nnon-SQL veneer over a RDBMS (e.g., PRQL [64], Mal-\nloy [39]).Although these languages deal with some of\nSQL’s shortcomings, they are not compelling enough to\novercome its entrenched userbase and ecosystem.3 System Architectures\nThere have been major new ideas in DBMS architec-\ntures put forward in the last two decades that reﬂect-\ning changing application and hardware characteristics.These ideas range from terriﬁc to questionable, and we\ndiscuss them in turn.3.1 Columnar Systems\nTo understand the appeal of columnar DBMSs, we need\nto explain the origins of the data warehouse (OLAP)\nmarket.Beginning in the mid-1990s, enterprises started\n\nSIGMOD Record, June 2024 (Vol.53, No. 2)\n\n27\n\n\fcollecting their customer facing (usually sales) data.Brick-and-mortar retailers (e.g., Walmart) were at fore-\nfront of constructing historical sales databases.These\ncompanies generally found that a sales data warehouse\nwould pay for itself in better stock ordering and rota-\ntion decisions within six months.Such customer facing\ndatabases are now omnipresent in enterprises.Data warehouse applications have common proper-\n\nties that are distinct from OLTP workloads:\n1.They are historical in nature (i.e., they are loaded\n\nperiodically and then are read-only). 2.Organizations retain everything as long as they can\n\nafford the storage — think terabytes to petabytes.3. Queries typically only access a small subset of at-\ntributes from tables and are ad-hoc in nature.Ralph Kimball was an early proponent of star schema\ndata modelling for data warehouses [148, 149].The idea\nwas to construct a fact table that held item-level trans-\nactional data.The classic example is a fact table that\ncontains a record for every item purchased in a retail en-\nterprise.Then, one surrounds the fact table with dimen-\nsion tables that contain common information factored\nout from the fact table to save space.Again, in a retail\nsetting, these dimension tables would include informa-\ntion about customers, products, stores, and time.Organizing the DBMS’s storage by columns instead\nof rows has several beneﬁts [87].First, compressing\ncolumnar data is more effective than row-based data be-\ncause there is a single value type in a data block of-\nten many repeated bytes.Second, a Volcano-style en-\ngine executes operators once per row.In contrast, a\ncolumn-oriented engine has an inner loop that processes\na whole column using vectorized instructions [106, 147].Lastly, row stores have a large header for each record\n(e.g., 20 bytes) to track nulls and versioning meta-data,\nwhereas column stores have minimal storage overhead\nper record.Discussion: Over the last two decades, all vendors ac-\ntive in the data warehouse market have converted their\nofferings from a row store to a column store.This tran-\nsition brought about signiﬁcant changes in the design\nof DBMSs.In addition, several new vendors have en-\ntered the market in the last two decades with column\nstore offerings, for example Amazon’s Redshift [94] and\nGoogle’s BigQuery [162] along with offerings from in-\ndependent companies (e.g., Snowﬂake [121]).In summary, column stores are new DBMS implemen-\ntations with specialized optimizers, executors, and stor-\nage formats.They have taken over the data warehouse\nmarketplace because of their superior performance.3.2 Cloud Databases\nThe rise of cloud platforms in the late 2000s has also\ngreatly affected the implementation (and sales model) of\n\nDBMSs.Initial cloud DBMS offerings repackaged on-\nprem systems into managed VMs with direct-attached\nstorage.But over the last 20 years, networking band-\nwidth has increased much faster than disk bandwidth,\nmaking network attached storage (NAS) attractive as an\nalternative to attached storage.This has caused a pro-\nfound rethinking of DBMS architectures for the cloud.All major cloud vendors offer NAS via object stores\n(e.g., Amazon S3) with some DBMS functionality (e.g.,\nreplication, ﬁltering).Beyond better economics com-\npared to direct-attached storage, object stores have sev-\neral advantages that compensate for the cost of the\nadded network link.First, because the compute nodes\nare disconnected from the storage nodes, a system can\nprovide per-query elasticity; the DBMS can add new\ncompute nodes dynamically without having to reshufﬂe\ndata.Second,\nthe system can reassign compute nodes to other tasks\nif a DBMS is underutilized.On the other hand, in a\nshared-nothing DBMS, a node must always be online to\nhandle incoming query requests.Lastly, pushing down\ncomputation into the storage nodes is possible (and gen-\nerally advantageous).This execution strategy is known\nas “pushing the query to the data” versus “pulling the\ndata to the query” and is well understood in DBMSs.Generally, the ﬁrst two ideas are called “serverless\ncomputing”, and was introduced for cloud-native DBMSs\nby Snowﬂake [121].Other vendors have moved or\nare in the process of moving to a serverless environ-\nment for their cloud offerings.Effective utilization of\nthis model requires a hosted multi-node environment in\nwhich multiple DBMS customers are grouped onto the\nsame node(s) with a multi-tenant execution scheme.Discussion: The advent of cloud databases is another\nexample of “what goes around comes around”.Multi-\nnode shared-disk DBMSs are an old idea that histori-\ncally tended not to work out well.However, it is back in\nvogue with technology change (faster networking) and\nmoving to the cloud.In addition, time-sharing services\nwere popular in the 1970s when computers were big and\nexpensive.Cloud platforms are big time-sharing ser-\nvices, so the concept is back after a few decades.Since\nenterprises are moving everything possible to the cloud,\nwe expect this shared-disk to dominate DBMS architec-\ntures.Hence, we do not foresee shared-nothing architec-\ntures resurfacing in the future.The cloud has profoundly impacted DBMSs, causing\nthem to be completely re-architected.The movement\nof computing from on-prem to the cloud generates a\nonce-in-a-lifetime opportunity for enterprises to refac-\ntor codebases and remove bad historical technology de-\ncisions.A cloud environment also provides several ben-\neﬁts to vendors that are not possible with on-prem de-\nployments.Foremost is that vendors can track usage\n\n28\n\nSIGMOD Record, June 2024 (Vol. 53, No.2)\n\n\ftrends for all their customers: they can monitor unex-\npected behavior, performance degradations, and usage\npatterns.Moreover, they can push incremental updates\nand code patches without disrupting service.From a business perspective, open-source DBMSs\nface the danger of becoming too popular and being mon-\netized by the major cloud providers.The public spats\nbetween Amazon and ISVs like MongoDB [153] and\nElasticsearch [101] are notable examples.3.3 Data Lakes / Lakehouses\nAnother trend that the cloud platforms fomented is the\nmovement away from monolithic, dedicated data ware-\nhouses for OLAP workloads and towards data lakes\nbacked by object stores.With legacy data warehouses,\norganizations load data into the DBMS, which the sys-\ntem stashes in managed storage with proprietary for-\nmats.Vendors viewed their DBMSs as the “gatekeepers”\nfor all things related to data in an organization.However,\nthis has not been the model of many organizations, es-\npecially technology companies, for the last decade.With a data lake architecture, applications upload ﬁles\nto a distributed object store, bypassing the traditional\nroute through the DBMS [167].Users then execute\nqueries and processing pipelines on these accumulated\nﬁles using a lakehouse (a portmanteau of data ware-\nhouse and data lake) execution engine [93].These lake-\nhouse systems provide a uniﬁed infrastructure support-\ning SQL and non-SQL workloads.The latter is crucial\nas the last decade has shown that data scientists and ML\npractitioners typically use Python-based notebooks that\nuse Panda’s DataFrame API [159] to access data instead\nof SQL.Several projects leverage DBMS methods to\noptimize DataFrame processing, including Dask [181],\nPolars [61], Modin [177], and Bodo [198].Instead of using DBMS-speciﬁc proprietary ﬁle for-\nmats or inefﬁcient text-based ﬁles (e.g., CSV, JSON),\napplications write data to data lakes using open-source,\ndisk-resident ﬁle formats [203].The two most pop-\nular formats are Twitter/Cloudera’s Parquet [55] and\nMeta’s ORC [53, 140].Both of them borrow tech-\nniques from earlier columnar storage research, such as\nPAX [90], compression [87], and nested-data (JSON)\nshredding [121, 161].Apache Arrow [11] is a similar\nbinary format for exchanging in-memory data between\nsystems.Open-source libraries for reading/writing these\nformats allow disparate applications to create data ﬁles\nthat other systems then parse and consume, thereby en-\nhancing data sharing across services and business units.Discussion: Data lakes are the successor to “Big Data”\nmovement from the early 2010s, partly led by the pop-\nularity of MR systems (Sec.2.1) and column stores\n(Sec. 3.1).At ﬁrst glance, a data lake seems like a terri-\nble idea for an organization: allowing any application to\nwrite arbitrary ﬁles into a centralized repository without\n\nany governance is a recipe for integrity, discovery, and\nversioning problems [167].Lakehouses provide much-\nneeded control over these environments to help mitigate\nmany problems with meta-data, caching, and indexing\nservices [93].Additional middleware that tracks new\ndata and supports transactional updates, such as Delta\nLake [92], Iceberg [6], and Hudi [5], make lakehouses\nlook more like a traditional data warehouse.Data lakes introduce new challenges to query opti-\nmization.DBMSs have always struggled with acquir-\ning precise statistics on data,\nleading to poor query\nplan choices [154].However, a data lake system may\ncompletely lack statistics on newly ingested data ﬁles.Consequently, incorporating adaptive query processing\nstrategies is imperative in the cloud to enable a DBMS to\ndynamically modify query plans during execution based\non observed data characteristics [97, 105, 163].All the major cloud vendors now offer some variation\nof a managed data lake service.Since data lake sys-\ntems backed by object stores are much cheaper per giga-\nbyte than proprietary data warehouses, the legacy OLAP\nvendors (e.g., Teradata, Vertica) have extended their\nDBMSs to support reading data from object stores in re-\nsponse to this pricing pressure.Several independent sys-\ntems are also in this space, including Databricks [105],\nDremio [21], PrestoDB [63], and Trino [77].3.4 NewSQL Systems\nIn the late 2000s, there were multiple distributed NoSQL\nDBMSs available designed to scale horizontally to sup-\nport online applications with large number of concurrent\nusers [110].However, many organizations could not use\nthese NoSQL systems because their applications could\nnot give up strong transactional requirements.But the\nexisting RDBMSs (especially open-source ones) were\nnot able to (natively) scale across multiple machines.In\nresponse, NewSQL systems arrived in the early 2010s\nseeking to provide the scalability of NoSQL systems for\nOLTP workloads while still supporting SQL [95, 171].In other words, these new systems sought to achieve the\nsame scalability of NoSQL DBMSs from the 2000s but\nstill keep the RM and ACID transactions of the legacy\nDBMSs from the 1990s.There were two main groups of NewSQL systems.The ﬁrst was in-memory DBMSs, including H-Store [144,\n189] (commercialized as VoltDB [83]), SingleStore [69],\nMicrosoft Hekaton [128], and HyPer [146].Other start-\nup offerings included disk-oriented, distributed DBMSs\nlike NuoDB [47] and Clustrix [17].Discussion: There has yet to be a dramatic uptake in\nNewSQL DBMS adoption [96].The reason for this lack-\nluster interest is that existing DBMSs were good enough\nfor the time, which means organizations are unwilling to\ntake on the costs and risk of migrating existing applica-\ntions to newer technologies.Companies are more risk-\n\nSIGMOD Record, June 2024 (Vol. 53, No.2)\n\n29\n\n\faverse with changing OLTP DBMSs than with OLAP.If an OLTP DBMS fails, companies cannot execute the\ntransactions they need to generate revenue.In contrast,\nan OLAP DBMS failure could be limited to temporarily\ninconveniencing an analyst or data scientist.There were other restrictions in NewSQL DBMSs,\nsuch as only supporting a subset of standard SQL or\nbad performance on multi-node transactions.Some\nNewSQL products, like Microsoft’s Hekaton, were only\navailable as an extension to a legacy DBMS, requiring\nthe faster engine to use the slower DBMS’s interfaces.NewSQL vendors also incorrectly anticipated that in-\nmemory DBMS adoption would be larger in the last\ndecade.Flash vendors drove down costs while improv-\ning storage densities, bandwidth, and latencies.Higher\nDRAM costs and the collapse of persistent memory\n(e.g., Intel Optane) means that SSDs will remain domi-\nnant for OLTP DBMSs.The aftermath of NewSQL is a new crop of distributed,\ntransactional SQL RDBMSs.These include TiDB [141],\nCockroachDB [195], PlanetScale [60] (based on the\nVitess sharding middleware [80]), and YugabyteDB [86].The major NoSQL vendors also added transactions to\ntheir systems in the last decade despite previously strong\nclaims that they were unnecessary.Notable DBMSs that\nmade the shift include MongoDB, Cassandra, and Dy-\nnamoDB.This is of course due to customer requests\nthat transactions are in fact necessary.Google said this\ncogently when they discarded eventual consistency in\nfavor of real transactions with Spanner in 2012 [119].3.5 Hardware Accelerators\nThere has been a hunt for a cost-effective hardware ac-\ncelerator for DBMSs for the last 50 years.The promise\nis obvious: specialized hardware designed for a DBMS\nshould easily outperform a conventional CPU.In the 1980s, vendors fabricated custom hardware to\naccelerate DBMSs and marketed them as database ma-\nchines [107].Britton-Lee released the ﬁrst commercial\naccelerator product (IDM/500) in 1981 [192] that con-\ntained a conventional CPU with a hardware accelerator\nthat ofﬂoaded portions of a query’s execution.This ac-\ncelerator targeted a small subset of the execution path,\nand was not cost-effective.Teradata introduced its own\ndatabase machine that provided network hardware for\nsorting in-ﬂight tuples (Y-net [1]), but it was dropped\nfor a software-only solution [85].All other custom hard-\nware DBMS acceleration during the 1980s failed.Instead of building custom hardware for DBMSs, the\nlast 20 years have been about using commodity hard-\nware (FPGAs, GPUs) to accelerate queries.This is an\nenticing idea: a vendor can get the beneﬁts of a DBMS\naccelerator without the cost of fabricating the hardware.Netezza was one of the ﬁrst FPGA-based DBMSs\nthat started in the late 1990s as a fork of PostgreSQL.It used an FPGA to accelerate searches on disk-resident\npages, but originally could not search in-memory pages.Netezza corrected this limitation in a later version [2].Swarm64 attempted to sell a FPGA accelerator for Post-\ngreSQL but switched to a software-only architecture\nwithout the FPGA before they were acquired [91].Vitesse’s\nDeepgreen DB [81] is the only remaining FPGA-enhanced\nDBMS available from an ISV.There is more activity in the GPU-accelerated DBMS\nmarket.Notable GPU DBMSs include Kinetica [35],\nSqream [35], Brytlyt [13], and HeavyDB [48].If data\ndoes not ﬁt in GPU memory, then query execution is\nbottlenecked on loading data into the device, thereby\nrendering the hardware’s parallelization beneﬁts moot.Discussion: There are several conclusions that we can\ndraw from the above analysis.First, these systems are\nall focused on the OLAP market and only for RDBMSs;\nthere are essentially no data model implications to the\ndiscussion in this section.Also, OLAP workloads will\ncontinue to move aggressively to the cloud, but special-\npurpose hardware is not likely to ﬁnd acceptance unless\nit is built by the cloud vendor.Creating custom hardware just for a DBMS is not\ncost-effective for most companies.Commodity hard-\nware avoids this problem but there is still the challenge\nof integrating the hardware into a DBMS.The reason\nwhy there are more GPU DBMSs than FPGA systems\nis because there are existing support libraries available\nfor GPUs (e.g., Nvidia CUDA [169]).But cloud CPU-\nbased compute resources are incredibly cheap due to\neconomies of scale.The success of any accelerator is\nlikely to be limited to on-prem databases, but this mar-\nket is not growing at the same rate as cloud databases.Even if one could get an accelerator to market that\nshowed orders of magnitude improvement over existing\ntechnologies, that only solves half the problem needed\nfor adoption and success.A hardware-only company\nmust ﬁnd somebody to add support for its accelerator\nin a DBMS.If the accelerator is an optional add-on to\nthe DBMS, then adoption will be low and thus a DBMS\nvendor will not want to spend engineering time on sup-\nporting it.If the accelerator is a critical component of\nthe DBMS, then no vendor would outsource the devel-\nopment of such an important part to an outside vendor.The only place that custom hardware accelerators will\nsucceed is for the large cloud vendors.They can justify\nthe $50–100m R&D cost of custom hardware at their\nmassive scale.They also control the entire stack (hard-\nware and software) and can integrate their hardware at\ncritical locations.Amazon did this already with their\nRedshift AQUA accelerators [102].Google BigQuery\nhas custom components for in-memory shufﬂes [89].In spite of the long odds, we predict that there will be\nmany attempts in this space over the next two decades.30\n\nSIGMOD Record, June 2024 (Vol. 53, No.2)\n\n\f3.6 Blockchain Databases\nAs of this writing, a waning database technology fad\nis blockchains.These are decentralized log-structured\ndatabases (i.e., ledger) that maintain incremental check-\nsums using some variation of Merkle trees.These in-\ncremental checksums are how a blockchain ensures that\nthe database’s log records are immutable: applications\nuse these checksums to verify that previous database up-\ndates have not been altered.The ideal use case for blockchain databases is peer-to-\npeer applications where one cannot trust anybody.There\nis no centralized authority that controls the ordering of\nupdates to the database.Thus, blockchain implementa-\ntions use a BFT commit protocol to determine which\ntransaction to apply to the database next.At the present time, cryptocurrencies (Bitcoin) are\nthe only use case for blockchains.In addition, there\nhave been attempts to build a usable DBMS on top of\nblockchains, notably Fluree [25], BigChainDB [12], and\nResilientDB [136].These vendors (incorrectly) promote\nthe blockchain as providing better security and auditabil-\nity that are not possible in previous DBMSs.Discussion: We are required to place trust in several en-\ntities in today’s society.When one sells a house, they\ntrust the title company to manage the transaction.The\nonly applications without real-world trust are dark web\ninteractions (e.g., money laundering).Legitimate busi-\nnesses are unwilling to pay the performance price (about\nﬁve orders of magnitude) to use a blockchain DBMS.If\norganizations trust each other, they can run a shared dis-\ntributed DBMS more efﬁciently without wasting time\nwith blockchains.To the best of our knowledge, all the\nmajor cryptocurrency exchanges run their businesses off\ntraditional RDBMSs and not blockchain systems.Blockchain proponents make additional meaningless\nclaims of achieving data resiliency through replication\nin a peer-to-peer environment.No sensible company\nwould rely on random participants on the Internet as the\nbackup solution for mission-critical databases.There is possibly a (small) market for private block-\nchain DBMSs.Amazon’s Quantum Ledger Database\n(QLDB) released in 2018 [65] provides the same im-\nmutable and veriﬁable update guarantees as a blockchain,\nbut it is not decentralized (i.e., no BFT commit protocol).Amazon built QLDB after ﬁnding no compelling use\ncase for a fully decentralized blockchain DBMS [108].3.7 Summary\nThe key takeaways from the major technological thrusts\nin database systems are as follows:\n\n•\n\n•\n\nColumnar Systems: The change to columnar stor-\nage revolutionized OLAP DBMS architectures.Cloud Databases: The cloud has upended the con-\nventional wisdom on how to build scalable DBMSs.Except for embedded DBMSs, any product not start-\ning with a cloud offering will likely fail.Data Lakes / Lakehouses: Cloud-based object stor-\nage using open-source formats will be the OLAP\nDBMS archetype for the next ten years.NewSQL Systems: They leverage new ideas but\nhave yet to have the same impact as columnar and\ncloud DBMSs.It has led to new distributed DBMSs\nthat support stronger ACID semantics as a counter\nto NoSQL’s weaker BASE guarantees.Hardware Accelerators: We do not see a use case\nfor specialized hardware outside of the major cloud\nvendors, though start-ups will continue to try.Blockchain Databases: An inefﬁcient technology\nlooking for an application.History has shown this is\nthe wrong way to approach systems development.•\n\n•\n\n•\n\n•\n\n4 Parting Comments\nOur analysis of the last two decades in databases has sev-\neral takeaways.Unfortunately, some of these are repeats\nof the warnings from the 2005 paper.Never underestimate the value of good marketing for\nbad products.The database market is highly competi-\ntive and lucrative.This competition drives vendors to\nclaim that their new technologies will solve all sorts of\nproblems and change developers’ lives for the better.Infe-\nrior DBMS products have succeeded via strong market-\ning despite the existence of better options available at\nthe time: Oracle did this in the 1980s, MySQL did this\nin the 2000s, and MongoDB did this in the 2010s.These\nsystems got enough traction early on to buy them time\nto ﬁx the engineering debt they accumulated earlier.Beware of DBMSs from large non-DBMS vendors.One interesting aspect in the last ten years of databases\nis the trend of tech companies building DBMSs in-house\nthat they then spin out as open-source projects.All these\nsystems started life as purpose-built applications for a\ntech company.The company then releases the DBMS\nas an open-source project (often pushed to the Apache\nFoundation for stewardship) in hopes to achieve “free”\ndevelopment from external users.Some times they come from large companies that can\nafford to allocate resources to developing new systems.Notable examples include Meta (Hive [197], Presto [63],\nCassandra [14], RocksDB [68]) and LinkedIn (Kafka [33],\nPinot [59], Voldemort [82]).Other systems are from\nstart-ups building a data-intensive product where they\nfelt the need to also build a DBMS.The most successful\nexamples are 10gen (MongoDB) and PowerSet (HBase),\nbut there also many failed endeavors.This trend to avoid “not invented here” software is\npartly because many companies’ promotion path favors\n\nSIGMOD Record, June 2024 (Vol.53, No. 2)\n\n31\n\n\fengineers who make new internal systems, even if ex-\nisting tools are sufﬁcient.But this perversion led many\nteams without DBMS engineering experience to under-\ntake building a new system.One should be wary of\nsuch systems when a company ﬁrst open-sources them,\nas they are almost always immature technologies.Do not ignore the out-of-box experience.One of the\nsalient selling points of many non-relational DBMSs is\na better “out-of-box” experience than RDBMSs.Most\nSQL systems require one ﬁrst to create a database and\nthen deﬁne their tables before they can load data.This\nis why data scientists use Python notebooks to analyze\ndata ﬁles quickly.Every DBMS should, therefore, make\nit easy to perform in situ processing of local and cloud-\nstorage ﬁles.DuckDB’s rising popularity is partly due\nto its ability to do this well.Vendors should also consider additional challenges\nthat customers will inevitably face with databases, in-\ncluding physical design, knob tuning, schema design,\nand query tuning.There is a crucial need for what one\nof us calls “self-driving” DBMSs [173].Developers need to query their database directly.Most OLTP applications created in the last 20 years pri-\nmarily interact with databases via an abstraction layer,\nsuch as an endpoint API (e.g., REST, GraphQL) or\nan object-relational mapper (ORM) library.Such lay-\ners translate an application’s high-level requests into\ndatabase queries.ORMs also automatically handle main-\ntenance tasks, such as schema migrations.One could\nargue that since OLTP developers never write raw SQL\nin their applications, it does not matter what data model\ntheir DBMS uses as these layers hide it.ORMs are a vital tool for rapid prototyping.But they\noften sacriﬁce the ability to push logic into the DBMS\nin exchange for interoperability with multiple DBMSs.Developers fall back to writing explicit database queries\nto override the poor auto-generated queries.This is why\nusing a RDBMS that supports SQL is the better choice.The impact of AI/ML on DBMSs will be signiﬁcant.How DBMSs should interact with modern AI/ML tools\nhas recently become a crucial question, especially with\nthe advent of LLMs (e.g., ChatGPT).Although this ﬁeld\nis moving rapidly, we offer a few initial comments.There is a resurgence in using natural languages (NLs)\nto query databases due to advancements in LLMs at\nconverting NL to query code (e.g., SQL) [133].Some\nhave even suggested that such AI-powered query inter-\nfaces will render SQL obsolete.NL interfaces are an\nold research topic that dates back to the 1970s [139],\nbut which historically has poor outcomes and thus little\nwidespread use [88].We acknowledge LLMs have im-\npressive results for this task but caution those who think\nNL will replace SQL.Nobody will write OLTP appli-\ncations using an NL, as most generate queries using\n\nORMs.For OLAP databases, NL could prove helpful\nin constructing the initial queries for exploratory anal-\nysis.However, these queries should be exposed to a\ndashboard-like reﬁnement tool since English and other\nNLs are rife with ambiguities and impreciseness.There is a reluctance to depend on current LLM tech-\nnology for decision-making inside the enterprise, espe-\ncially with ﬁnancial data.The biggest issue is that the\noutput of an LLM is not explainable to a human.Sec-\nond, LLM systems require more training data than “tra-\nditional” ML systems (e.g., random forests, Bayesian\nmodels).Companies generally cannot outsource the cre-\nation of training data for these models to unskilled peo-\nple.For these reasons, the uptake of LLMs for enter-\nprise data will be cautiously slow.Lastly, there is a considerable amount of recent re-\nsearch on using AI/ML to optimize the DBMSs [174].Examples include ML-oriented query optimizers [152,\n156], conﬁguration tuners [200, 204], and access meth-\nods [151, 193].Although such ML-assisted optimiza-\ntions are powerful tools to improve the performance of\nDBMSs, it does not obviate the need for high-quality\nsystems engineering.5 Conclusion\nWe predict that what goes around with databases will\ncontinue to come around in upcoming decades.Another\nwave of developers will claim that SQL and the RM are\ninsufﬁcient for emerging application domains.People\nwill then propose new query languages and data models\nto overcome these problems.There is tremendous value\nin exploring new ideas and concepts for DBMSs (it is\nwhere we get new features for SQL).The database re-\nsearch community and marketplace are more robust be-\ncause of it.However, we do not expect these new data\nmodels to supplant the RM.Another concern is the wasted effort of new projects\nreimplementing the same components that are not novel\nbut necessary to have a production-ready DBMS (e.g.,\nconﬁg handlers, parsers, buffer pools).To accelerate\nthe next generation of DBMSs, the community should\nfoster the development of open-source reusable compo-\nnents and services [112, 176].There are some efforts to-\nwards this goal, including for ﬁle formats (see Sec.3.3),\nquery optimization (e.g., Calcite [104], Orca [186]), and\nexecution engines (e.g., DataFusion [18], Velox [175]).We contend that the database community should strive\nfor a POSIX-like standard of DBMS internals to accel-\nerate interoperability.We caution developers to learn from history.In other\nwords, stand on the shoulders of those who came before\nand not on their toes.One of us will likely still be alive\nand out on bail in two decades, and thus fully expects to\nwrite a follow-up to this paper in 2044.32\n\nSIGMOD Record, June 2024 (Vol. 53, No.2)\n\n\fReferences\n\n[1] TeraData Forums.https://downloads.teradata.com/forum/\ndatabase/what-is-the-difference-between-a-ynet-and-\nbynet, September 2011.[2] Netezza TwinFin Architecture.https://www.iexpertify.com/\nlearn/netezza-twinfin-architecture/#.YYq5_S1h17Y,\nApril 2020.[3] Graph processing with sql server and azure sql database.https://docs.microsoft.com/en-us/sql/relational-\ndatabases/graphs/sql-graph-overview, 2021.[4] Georaster in oracle database.https://www.oracle.com/a/\n\ntech/docs/georaster-2021.pdf, mar 2021.[5] Apache Hudi. https://hudi.apache.org/, 2023.[6] Apache Iceberg. https://iceberg.apache.org/, 2023.[7] Oracle introduces integrated vector database to augment\ngenerative ai and dramatically increase developer produc-\nhttps://www.oracle.com/news/announcement/ocw-\ntivity.integrated-vector-database-augments-generative-ai-\n2023-09-19/, sep 2023.[8] Introducing vector search on rockset.https://rockset.com/\nblog/introducing-vector-search-on-rockset/, apr 2023.\nhttps://docs.aerospike.com/tools/aql,\n\n[9] Aerospike AQL.2024. [10] Apache AGE. https://age.apache.org, 2024.[11] Apache Arrow. https://arrow.apache.org, 2024.[12] BigchainDB. https://www.bigchaindb.com/, 2024.[13] Brytlyt. https://brytlyt.io/, 2024.[14] Apache Cassandra. https://cassandra.apache.org, 2024.[15] The Cassandra Query Language\n\n(CQL).https:\n\n//cassandra.apache.org/doc/latest/cassandra/cql/,\n2024.[16] ChatGPT Plugins. https://openai.com/blog/chatgpt-\n\nplugins, March 2024.[17] Clustrix. https://clustrix.com, 2024. [18] Apache Arrow DataFusion.https://arrow.apache.org/\n\nhaystack.readthedocs.io, 2024.[21] Dremio. https://dremio.com/, 2024.[22] Apache drill. https://drill.apache.org, 2024.[23] Elasticsearch. https://www.elastic.co, 2024.https://giraph.apache.org, 2024. [27] Graphlab.https://en.wikipedia.org/wiki/GraphLab, 2024.[28] Apache Hbase. https://hbase.apache.org, 2024.[29] The hdf5 library & ﬁle format.https://www.hdfgroup.org/\n\nsolutions/hdf5, 2024.[30] Apache Hive. https://hive.apache.org, 2024.[31] Informix extensions and datablade modules.https:\n\n//www.ibm.com/docs/en/informix-servers/12.10?topic=\ninformix-extensions-datablade-modules, 2024.[32] Janusgraph. https://janusgraph.org/, 2024.[33] Apache Kafka. https://kafka.apache.org/, 2024.[34] kdb+. https://kx.com/, 2024.[35] Kinetica. https://www.kinetica.com/, 2024.[36] LangChain. https://langchain.com, 2024.[37] LevelDB. https://github.com/google/leveldb, 2024.[38] Apache Lucene. https://lucene.apache.org, 2024.[39] Malloy - Experimental Language.looker-open-source/malloy, 2024.[40] Milvus. https://milvus.io/, 2024. [41] MongoDB.https://mongodb.com, 2024.\n\nhttps://github.com/\n\n[42] Mongodb – querying with sql.https://docs.mongodb.com/\n\ndatalake/admin/query-with-sql/, 2024.[43] MySQL\n\n–\n\nInnoDB Full-Text\n\nIndexes.[44] Neo4j. https://neo4j.com/, 2024. [45] Amazon Neptune.https://aws.amazon.com/neptune/, 2024.[46] Network Common Data Form (NetCDF).https://\n\nwww.unidata.ucar.edu/software/netcdf/, 2024.[47] Nuodb. https://nuodb.com, 2024.[48] Heavydb. https://www.heavy.ai, 2024.[49] openCypher. https://opencypher.org, 2024. [50] Oracle graph database.https://www.oracle.com/database/\n\ngraph/, 2024.\n\nlang.org/, 2024.[51] PGQL – Property Graph Query Language.https://pgql-\n\n[52] Oracle\n\nText.https://www.oracle.com/database/\n\ntechnologies/datawarehouse-bigdata/text.html, 2024.[53] Apache ORC. https://orc.apache.org/, 2024.[54] Paradigm4 platform overview.https://www.paradigm4.com/\n\ntechnology/scidb-platform-overview/, 2024.[55] Apache Parquet. https://parquet.apache.org/, 2024.[56] Partiql – sql-compatible access to relational, semi-structured,\n\nand nested data.https://partiql.org/, 2024. [57] Apache Phoenix.https://phoenix.apache.org, 2024.[58] Pinecone. https://www.pinecone.io/, 2024.[59] Apache Pinot. https://pinot.apache.org/, 2024.[60] PlanetScale. https://planetscale.com/, 2024.[61] Polars. https://www.pola.rs, 2024. –\n[62] PostgreSQL\n\nSearch.Text\n\nFull\n\nwww.postgresql.org/docs/current/textsearch.html,\n2024.\n\nhttps://\n\n[63] PrestoDB.https://prestodb.io/, 2024. [64] PRQL – A Proposal for a Better SQL.https://prql-\n\nlang.org/, 2024.[65] Amazon Quantum Ledger Database (QLDB).https://\n\n[67] Redis. https://redis.io/, 2024.[68] RocksDB. https://rocksdb.org, 2024.[69] Singestore. https://www.singlestore.com/, 2024.[70] Apache Solr. https://solr.apache.org/, 2024.[71] SQLite. https://www.sqlite.org, 2024.[72] Sql++ – the next-generation query language for managing json\ndata.https://www.couchbase.com/sqlplusplus, 2024.[73] Teradata – creating an array data\n\ntype.https:\n\n//docs.teradata.com/r/S0Fw2AVH8ff3MDA0wDOHlQ/\nun3kj~t3qMDO66LF4YXuiw, 2024.[74] Tigergraph. https://www.tigergraph.com/, 2024.[75] Tigergraph – gsql. https://www.tigergraph.com/gsql/,\n\n2024.[76] Tiledb. https://tiledb.com, 2024.[78] Turi. http://turi.com/, 2024.[79] Vespa. https://vespa.ai/, 2024.[80] Vitess. https://vitess.io, 2024. [81] Vitesse Deepgreen DB.products/deepgreen-db/, 2024.\n\nhttps://www.vitessedata.com/\n\n[82] Project Voldemort.https://www.project-voldemort.com,\n\n2024.[83] Voltdb. https://www.voltactivedata.com/, 2024.[84] Weaviate. https://weaviate.io, 2024.[85] Dbc 1012. https://en.wikipedia.org/wiki/DBC_1012, 2024.[86] YugabyteDB. https://www.yugabyte.com/, 2024. [87] D. J. Abadi.Query Execution in Column-Oriented Database\n\nSystems.PhD thesis, MIT, 2008.\n\ndatafusion/, 2024.[19] Microsoft DiskANN. DiskANN, 2024. [20] Django\n\nHaystack.https://github.com/microsoft/\n\nhttps://django-\n\naws.amazon.com/qldb/, 2024.[66] The\n\nraster\nrasdaman\nwww.rasdaman.org, 2024.\n\narray\n\ndatabase.http://\n\nSIGMOD Record, June 2024 (Vol. 53, No.2)\n\n33\n\n\f[88] K. Affolter, K. Stockinger, and A. Bernstein.A compara-\ntive survey of recent natural language interfaces for databases.VLDB J., 28(5):793–819, 2019. doi: 10.1007/s00778-019-\n00567-8.[89] H. Ahmadi. In-memory query execution in google bigquery.https://cloud.google.com/blog/products/bigquery/in-\nmemory-query-execution-in-google-bigquery, Aug 2016.[90] A. Ailamaki, D. J. DeWitt, M. D. Hill, and M. Skounakis.Weaving relations for cache performance.Open source postgresql on steroids: Swarm64\ndatabase acceleration software for performance improvement\nhttps://www.zdnet.com/article/open-\nand analytics.source-postgresql-on-steroids-swarm64-database-\nacceleration-software-for-performance-improvement-\nand-analytics/, apr 2023.[92] M. Armbrust, T. Das, L. Sun, B. Yavuz, S. Zhu, M. Murthy,\nJ. Torres, H. van Hovell, A. Ionescu, A. Łuszczak, et al.Delta\nlake: high-performance acid table storage over cloud object\nstores.Proceedings of the VLDB Endowment, 13(12):3411–\n3424, 2020.[93] M. Armbrust, A. Ghodsi, R. Xin, and M. Zaharia.Lakehouse:\na new generation of open platforms that unify data warehousing\nand advanced analytics.In Proceedings of CIDR, page 8, 2021.[94] N. Armenatzoglou, S. Basu, N. Bhanoori, M. Cai, N. Chainani,\nK. Chinta, V. Govindaraju, T. J.Green, M. Gupta, S. Hillig,\nE. Hotinger, Y. Leshinksy, J. Liang, M. McCreedy, F. Nagel,\nI. Pandis, P. Parchas, R. Pathak, O. Polychroniou, F. Rahman,\nG. Saxena, G. Soundararajan, S. Subramanian, and D. Terry.Amazon redshift re-invented. In Proceedings of the 2022 Inter-\nnational Conference on Management of Data, SIGMOD ’22,\npages 2205–2217, 2022. doi: 10.1145/3514221.3526045.[95] M. Aslett. How will the database incumbents respond to\n\nNoSQL and NewSQL?The 451 Group, April 2011. [96] M. Aslett.Ten years of NewSQL: Back to the future of dis-\ntributed relational databases.The 451 Group, June 2021. [97] S. Babu and P. Bizarro.Adaptive query processing in the look-\n\ning glass.In CIDR, pages 238–249, January 2005.[98] D. F. Bacon, N. Bales, N. Bruno, B. F. Cooper, A. Dickinson,\nA. Fikes, C. Fraser, A. Gubarev, M. Joshi, E. Kogan, A. Lloyd,\nS. Melnik, R. Rao, D. Shue, C. Taylor, M. van der Holst, and\nIn Pro-\nD. Woodford.Spanner: Becoming a sql system.ceedings of the 2017 ACM International Conference on Man-\nagement of Data, SIGMOD ’17, pages 331–343, 2017. doi:\n10.1145/3035918.3056103.[99] J. Baker, C. Bond, J. C. Corbett, J. Furman, A. Khorlin, J. Lar-\nson, J.-M. Leon, Y. Li, A. Lloyd, and V. Yushprakh.Megastore:\nProviding scalable, highly available storage for interactive ser-\nIn Proceedings of the Conference on Innovative Data\nvices.system Research (CIDR), pages 223–234, 2011.[100] N. Bakibayev, D. Olteanu, and J. Závodný.Fdb: A query en-\ngine for factorised relational databases. Proc.VLDB Endow., 5\n(11):1232–1243, jul 2012. doi: 10.14778/2350229.2350242. [101] S. Banon.Amazon: NOT OK - why we had to change Elas-\nhttps://www.elastic.co/blog/why-license-\n\ntic licensing.change-aws, jan 2021. [102] J. Barr.AQUA (Advanced Query Accelerator) –\nfor Your Amazon Redshift Queries.A Speed Boost\nhttps://aws.amazon.com/blogs/aws/new-aqua-advanced-\nquery-accelerator-for-amazon-redshift/, Apr 2021.[103] P. Baumann. A database array algebra for spatio-temporal data\nand beyond.In Next Generation Information Technologies and\nSystems, 4th International Workshop, NGITS’99, volume 1649\nof Lecture Notes in Computer Science, pages 76–93, 1999. doi:\n10.1007/3-540-48521-X_7.[104] E. Begoli, J. Camacho-Rodríguez, J. Hyde, M. J. Mior, and\nD. Lemire.Apache calcite: A foundational framework for\noptimized query processing over heterogeneous data sources.In Proceedings of the 2018 International Conference on Man-\nagement of Data, SIGMOD ’18, pages 221–230, 2018. doi:\n10.1145/3183713.3190662.[105] A. Behm, S. Palkar, U. Agarwal, T. Armstrong, D. Cashman,\nA. Dave, T. Greenstein, S. Hovsepian, R. Johnson, A. Sai Krish-\nnan, P. Leventis, A. Luszczak, P. Menon, M. Mokhtar, G. Pang,\nS. Paranjpye, G. Rahn, B. Samwel, T. van Bussel, H. van Hov-\nell, M. Xue, R. Xin, and M. Zaharia.Photon: A fast query\nengine for lakehouse systems.In Proceedings of the 2022 In-\nternational Conference on Management of Data, SIGMOD ’22,\npages 2326–2339, 2022. doi: 10.1145/3514221.3526054.[106] P. A. Boncz, M. Zukowski, and N. Nes.Monetdb/x100: Hyper-\n\npipelining query execution.In CIDR, pages 225–237, 2005. [107] H. Boral and D. J. DeWitt.Database machines: An idea whose\ntime passed?A critique of the future of database machines.pages 166–187, 1983. doi: 10.1007/978-3-642-69419-6\n_10.https://www.tbray.org/\nnov\n\n[108] T. Bray. AWS and Blockchain.ongoing/When/202x/2022/11/19/AWS-Blockchain,\n2019.\\\n\n[109] P. Carbone, A. Katsifodimos, S. Ewen, V. Markl, S. Haridi, and\nK. Tzoumas.Apache ﬂink: Stream and batch processing in a\nsingle engine.The Bulletin of the Technical Committee on Data\nEngineering, 38(4), 2015.[110] R. Cattell. Scalable sql and nosql data stores.SIGMOD Rec.,\n\n39:12–27, 2011. [111] F. Chang, J.Dean, S. Ghemawat, W. C. Hsieh, D. A. Wallach,\nM. Burrows, T. Chandra, A. Fikes, and R. E. Gruber.Bigtable:\nA distributed storage system for structured data.In Proceedings\nof the USENIX Symposium on Operating Systems Design and\nImplementation, OSDI ’06, pages 205–218, 2006.[112] S. Chaudhuri and G. Weikum.Rethinking database system ar-\nchitecture: Towards a self-tuning risc-style database system.In\nVLDB 2000, Proceedings of 26th International Conference on\nVery Large Data Bases, pages 1–10, 2000.[113] C. Chin. The rise and fall of the olap cube.https:\n\n//www.holistics.io/blog/the-rise-and-fall-of-the-\nolap-cube/, January 2020.[114] M. Chock, A. F. Cardenas, and A. Klinger.Database struc-\nture and manipulation capabilities of a picture database man-\nagement system (picdms).IEEE Transactions on Pattern Anal-\nysis and Machine Intelligence, PAMI-6(4):484–492, 1984. doi:\n10.1109/TPAMI.1984.4767553.[115] E. F. Codd. A relational model of data for large shared\ndata banks.Commun. ACM, 13(6):377–387, jun 1970. doi:\n10.1145/362384.362685.[116] E. F. Codd. Further normalization of the data base relational\nmodel.Research Report / RJ / IBM / San Jose, California,\nRJ909, 1971.[117] W. W. W. Consortium. Overview of sgml resources.https:\n\n//www.w3.org/MarkUp/SGML/, 2004.[118] W. W. W. Consortium. Extensible Markup Language (XML).https://www.w3.org/XML/, 2016. [119] J. C. Corbett, J.Dean, M. Epstein, A. Fikes, C. Frost, J. Furman,\nS. Ghemawat, A. Gubarev, C. Heiser, P. Hochschild, W. Hsieh,\nS. Kanthak, E. Kogan, H. Li, A. Lloyd, S. Melnik, D. Mwaura,\nD. Nagle, S. Quinlan, R. Rao, L. Rolig, M. S. Yasushi Saito,\nC. Taylor, R. Wang, and D. Woodford.Spanner: Google’s\nGlobally-Distributed Database.In OSDI, 2012. [120] A. Crotty, V. Leis, and A. Pavlo.Are you sure you want to use\nMMAP in your database management system?[121] B. Dageville, T. Cruanes, M. Zukowski, V. Antonov, A. Avanes,\nJ. Bock, J. Claybaugh, D. Engovatov, M. Hentschel, J. Huang,\nA. W. Lee, A. Motivala, A. Q. Munir, S. Pelley, P. Povinec,\nG. Rahn, S. Triantafyllis, and P. Unterbrunner.The snowﬂake\nIn Proceedings of the 2016 Inter-\nelastic data warehouse.national Conference on Management of Data, SIGMOD ’16,\npages 215–226, 2016. doi: 10.1145/2882903.2903741.[122] J. Dean and S. Ghemawat.MapReduce: Simpliﬁed data pro-\ncessing on large clusters.In 6th Symposium on Operating Sys-\ntems Design & Implementation (OSDI 04).USENIX Associa-\ntion, Dec. 2004.34\n\nSIGMOD Record, June 2024 (Vol.53, No. 2)\n\n\f[123] J. Dean and S. Ghemawat.Mapreduce: A ﬂexible data process-\n\ning tool.Commun. ACM, 53(1):72–77, Jan. 2010. [124] A. Dearmer.Storing apache hadoop data on the cloud - hdfs\nhttps://www.xplenty.com/blog/storing-apache-\n\nvs. s3.hadoop-data-cloud-hdfs-vs-s3/, November 2019.[125] G. DeCandia, D. Hastorun, M. Jampani, G. Kakulapati, A. Lak-\nshman, A. Pilchin, S. Sivasubramanian, P. Vosshall, and W. Vo-\ngels.Dynamo: Amazon’s highly available key-value store.SIGOPS Oper. Syst. Rev., 41(6):205–220, oct 2007.[126] A. Deutsch, N. Francis, A.Green, K. Hare, B. Li, L. Libkin,\nT. Lindaaker, V. Marsault, W. Martens, J. Michels, F. Murlak,\nS. Plantikow, P. Selmer, O. van Rest, H. Voigt, D. Vrgoˇc,\nM. Wu, and F. Zemke.Graph pattern matching in gql and\nIn Proceedings of the 2022 International Confer-\nsql/pgq.ence on Management of Data, SIGMOD ’22, pages 2246–2258,\n2022. doi: 10.1145/3514221.3526057.[127] D. DeWitt and J. Gray. Parallel database systems: The future\nof high performance database systems.Commun. ACM, 35(6):\n85–98, jun 1992. doi: 10.1145/129888.129894.[128] C. Diaconu, C. Freedman, E. Ismert, P. Larson, P. Mit-\ntal, R. Stonecipher, N. Verma, and M. Zwilling.Hekaton:\nIn Proceed-\nSQL server’s memory-optimized OLTP engine.ings of the ACM SIGMOD International Conference on Man-\ndoi: 10.1145/\nagement of Data, pages 1243–1254, 2013. 2463676.2463710.[129] M. Elhemali, N. Gallagher, N. Gordon, J. Idziorek, R. Krog,\nC. Lazier, E. Mo, A. Mritunjai, S. Perianayagam, T. Rath,\nS. Sivasubramanian, J. C. S. III, S. Sosothikul, D. Terry, and\nA. Vig.Amazon DynamoDB: A scalable, predictably perfor-\nmant, and fully managed NoSQL database service.In USENIX\nAnnual Technical Conference, pages 1037–1048, July 2022.[130] J. Fan, A. G. S. Raj, and J. M. Patel.The case against special-\nized graph analytics engines.In Seventh Biennial Conference\non Innovative Data Systems Research, CIDR, 2015.[131] B. Fitzpatrick. Distributed caching with memcached.Linux J.,\n\n2004(124):5, aug 2004. ISSN 1075–3583.[132] M. Freitag, M. Bandle, T. Schmidt, A. Kemper, and T. Neu-\nmann.Adopting worst-case optimal joins in relational database\nsystems. Proc.VLDB Endow., 13(12):1891–1904, jul 2020.\ndoi: 10.14778/3407790.3407797.[133] H. Fu, C. Liu, B. Wu, F. Li, J. Tan, and J. Sun.Catsql: To-\nwards real world natural language to sql applications. Proc.VLDB Endow., 16(6):1534–1547, feb 2023. doi: 10.14778/\n3583140.3583165.[134] S. Ghemawat, H. Gobioff, and S.-T. Leung.The google ﬁle\nsystem. SIGOPS Oper.Syst. Rev., 37(5):29–43, oct 2003.ISSN\n0163-5980. doi: 10.1145/1165389.945450. [135] J.Gray, A. Bosworth, A. Layman, and H. Pirahesh.Data\ncube: A relational aggregation operator generalizing group-by,\nIn Proceedings of the International\ncross-tab, and sub-total.Conference on Data Engineering, pages 152–159, 1996. doi:\n10.1109/ICDE.1996.492099.[136] S. Gupta, S. Rahnama, J. Hellings, and M. Sadoghi.Re-\nProc. silientdb: Global scale resilient blockchain fabric.10.14778/\nVLDB Endow., 13(6):868–883, 2020.3380750.3380757.\n\ndoi:\n\n[137] E. Hanson and A. Comet.Why Your Vector Database Should\nNot be a Vector Database.https://www.singlestore.com/\nblog/why-your-vector-database-should-not-be-a-\nvector-database/, April 2023.[138] G. Harrison. How WiredTiger Revolutionized MongoDB.https://www.dbta.com/Columns/MongoDB-Matters/How-\nWiredTiger-Revolutionized-MongoDB-145510.aspx,\n2021.\n\nmar\n\n[139] G. G. Hendrix, E. D. Sacerdoti, D. Sagalowicz, and J. Slocum.Developing a natural language interface to complex data. ACM\nTrans.Database Syst., 3(2):105–147, jun 1978. doi: 10.1145/\n320251.320253. [140] Y. Huai, A. Chauhan, A.Gates, G. Hagleitner, E. N. Hanson,\nO. O’Malley, J. Pandey, Y. Yuan, R. Lee, and X. Zhang.Major\ntechnical advancements in apache hive.In Proceedings of the\n2014 ACM SIGMOD international conference on Management\nof data, pages 1235–1246, 2014.[141] D. Huang, Q. Liu, Q. Cui, Z. Fang, X. Ma, F. Xu, L. Shen,\nL. Tang, Y. Zhou, M. Huang, W. Wei, C. Liu, J. Zhang,\nJ. Li, X. Wu, L. Song, R. Sun, S. Yu, L. Zhao, N. Cameron,\nL. Pei, and X. Tang.Tidb: A raft-based htap database. Proc.VLDB Endow., 13(12):3072–3084, aug 2020. doi: 10.14778/\n3415478.3415535.[142] K. E. Iverson. A Programming Language.John Wiley & Sons,\n\nInc., 1962. ISBN 0471430145.[143] A. Jindal, S. Madden, M. Castellanos, and M. Hsu.Graph ana-\nlytics using vertica relational database.In 2015 IEEE Interna-\ntional Conference on Big Data, pages 1191–1200, 2015.[144] R. Kallman, H. Kimura, J. Natkins, A. Pavlo, A. Rasin,\nS. Zdonik, E. P. C. Jones, S. Madden, M. Stonebraker, Y. Zhang,\nJ. Hugg, and D. J. Abadi.H-store: A high-performance, dis-\ntributed main memory transaction processing system.Proc. VLDB Endow., 1(2):1496–1499, aug 2008. doi: 10.14778/\n1454159.1454211.[145] A. Kane. pgvector. https://github.com/pgvector/pgvector,\n\n2024.[146] A. Kemper and T. Neumann.Hyper: A hybrid oltp&olap main\nmemory database system based on virtual memory snapshots.In Proceedings of the 27th International Conference on Data\nEngineering, pages 195–206.IEEE Computer Society, 2011.\ndoi: 10.1109/ICDE.2011.5767867.[147] T. Kersten, V. Leis, A. Kemper, T. Neumann, A. Pavlo, and\nP. Boncz.Everything you always wanted to know about com-\npiled and vectorized queries but were afraid to ask.Proc. VLDB Endow., 11(13):2209–2222, jan 2019. doi: 10.14778/\n3275366.3284966. [148] R. Kimball.The Data Warehouse Toolkit: Practical Techniques\nfor Building Dimensional Data Warehouses.John Wiley, 1996. [149] R. Kimball and K. Strehlo.Why decision support fails and how\n\nto ﬁx it.SIGMOD Rec., 24(3):92–97, 1995.[150] M. Kornacker, A. Behm, V. Bittorf, T. Bobrovytsky, C. Ching,\nA. Choi, J. Erickson, M. Grund, D. Hecht, M. Jacobs, I. Joshi,\nL. Kuff, D. Kumar, A. Leblang, N. Li, I. Pandis, H. Robinson,\nD. Rorke, S. Rus, J. Russell, D. Tsirogiannis, S. Wanderman-\nMilne, and M. Yoder.Impala: A modern, open-source sql en-\ngine for hadoop.In CIDR, 2015. [151] T. Kraska, A. Beutel, E. H. Chi, J.Dean, and N. Polyzotis. The\ncase for learned index structures.In Proceedings of the 2018\nInternational Conference on Management of Data, SIGMOD\n’18, pages 489–504, 2018. doi: 10.1145/3183713.3196909.[152] S. Krishnan, Z. Yang, K. Goldberg, J. Hellerstein, and I. Sto-\nica.Learning to optimize join queries with deep reinforcement\nlearning, 2018.URL https://arxiv.org/abs/1808.03196. [153] F. Lardinois.Aws gives open source the middle ﬁn-\nger.https://techcrunch.com/2019/01/09/aws-gives-open-\nsource-the-middle-finger/, jan 2019.[154] V. Leis, A. Gubichev, A. Mirchev, P. A. Boncz, A. Kemper,\nand T. Neumann.How good are query optimizers, really?doi: 10.14778/\nProc. VLDB Endow., 9(3):204–215, 2015.2850583.2850594. [155] D. Maier and B. Vance. A call to order.In Proceedings\nof the Twelfth ACM SIGACT-SIGMOD-SIGART Symposium\non Principles of Database Systems, pages 1–16, 1993. doi:\n10.1145/153850.153851.[156] R. Marcus, P. Negi, H. Mao, N. Tatbul, M. Alizadeh, and\nT. Kraska.Bao: Making learned query optimization practical.In Proceedings of the 2021 International Conference on Man-\nagement of Data, SIGMOD ’21, pages 1275–1288, 2021. doi:\n10.1145/3448016.3452838.[157] D. McDiarmid. Vector search with clickhouse.https://\nclickhouse.com/blog/vector-search-clickhouse-p2, May\n2023.SIGMOD Record, June 2024 (Vol.53, No. 2)\n\n35\n\n\f[158] C. McDonnell.The graph-relational database, deﬁned.https://www.edgedb.com/blog/the-graph-relational-\ndatabase-defined, March 2022.[159] W. McKinney et al. Data structures for statistical computing\nin python.In Proceedings of the 9th Python in Science Confer-\nence, volume 445, pages 51–56, 2010.[160] F. McSherry. Scalability! but at what cost?http:\n\n//www.frankmcsherry.org/graph/scalability/cost/2015/\n01/15/COST.html, January 2015.[161] S. Melnik, A. Gubarev, J. J.Long, G. Romer, S. Shivakumar,\nM. Tolton, and T. Vassilakis.Dremel: Interactive analysis of\nweb-scale datasets.Proc. VLDB Endow., 3(12):330–339, sep\n2010.ISSN 2150-8097. doi: 10.14778/1920841.1920886.[162] S. Melnik, A. Gubarev, J. J.Long, G. Romer, S. Shivakumar,\nM. Tolton, T. Vassilakis, H. Ahmadi, D. Delorey, S. Min, M. Pa-\nsumansky, and J. Shute.Dremel: A decade of interactive sql\nanalysis at web scale.Proc. VLDB Endow., 13(12):3461–3472,\naug 2020.ISSN 2150-8097. doi: 10.14778/3415478.3415568.[163] P. Menon, A. Ngom, T. C. Mowry, A. Pavlo, and L. Ma.Per-\nmutable compiled queries: Dynamically adapting compiled\nqueries without recompiling.Proc. VLDB Endow., 14(2):101–\n113, 2020. doi: 10.14778/3425879.3425882.[164] C. Metz. duce. google_caffeine_explained/, September 2010.Google search index splits with mapre-\nhttps://www.theregister.com/2010/09/09/\n\n[165] J. Michels, K. Hare, K. Kulkarni, C. Zuzarte, Z. H. Liu,\nB. Hammerschmidt, and F. Zemke.The new and improved sql:\n2016 standard.SIGMOD Rec., 47(2):51–60, dec 2018. doi:\n10.1145/3299887.3299897.[166] D. Misev and P. Baumann.Sql support for multidimen-\nsional arrays.Technical Report 34, Jacobs University, July\n2017.URL https://nbn-resolving.org/urn:nbn:de:gbv:\n579-opus-1007237.[167] F. Nargesian, E. Zhu, R. J. Miller, K. Q. Pu, and P. C. Arocena.Data lake management: Challenges and opportunities. Proc.VLDB Endow., 12(12):1986–1989, aug 2019. doi: 10.14778/\n3352063.3352116.[168] H. Q. Ngo, C. Ré, and A. Rudra.Skew strikes back: New\ndevelopments in the theory of join algorithms.SIGMOD Rec.,\n42(4):5–16, feb 2014. doi: 10.1145/2590989.2590991.[169] NVIDIA, P. Vingelmann, and F. H. Fitzek. Cuda toolkit.https:\n\n//developer.nvidia.com/cuda-toolkit, 2020.[170] M. A. Olson, K. Bostic, and M. I. Seltzer. Berkeley DB.In Pro-\nceedings of the FREENIX Track: 1999 USENIX Annual Tech-\nnical Conference, pages 183–191, 1999.[171] A. Pavlo and M. Aslett. What’s really new with newsql?SIG-\n\nMOD Record, 45(2):45–55, Sep 2016.[172] A. Pavlo, E. Paulson, A. Rasin, D. J. Abadi, D. J. DeWitt,\nS. Madden, and M. Stonebraker.A comparison of approaches\nto large-scale data analysis.In Proceedings of the ACM SIG-\nMOD International Conference on Management of Data, pages\n165–178, 2009.[173] A. Pavlo, G. Angulo, J. Arulraj, H. Lin, J. Lin, L. Ma, P. Menon,\nT. Mowry, M. Perron, I. Quah, S. Santurkar, A. Tomasic,\nS. Toor, D. V. Aken, Z. Wang, Y. Wu, R. Xian, and T. Zhang.In CIDR 2017,\nSelf-driving database management systems.Conference on Innovative Data Systems Research, 2017.[174] A. Pavlo, M. Butrovich, A. Joshi, L. Ma, P. Menon, D. V. Aken,\nL. Lee, and R. Salakhutdinov.External vs. internal: An essay\non machine learning agents for autonomous database manage-\nment systems.IEEE Data Eng. Bull., 42(2):32–46, 2019.[175] P. Pedreira, O. Erling, M. Basmanova, K. Wilfong, L. Sakka,\nK. Pai, W. He, and B. Chattopadhyay.Velox: Meta’s uniﬁed\nexecution engine. Proc.VLDB Endow., 15(12):3372–3384, aug\n2022. doi: 10.14778/3554821.3554829.[176] P. Pedreira, O. Erling, K. Karanasos, S. Schneider, W. McK-\ninney, S. R. Valluri, M. Zait, and J. Nadeau.The composable\ndata management system manifesto. Proc.VLDB Endow., 16\n(10):2679–2685, jun 2023. doi: 10.14778/3603581.3603604.[177] D. Petersohn, S. Macke, D. Xin, W. Ma, D. Lee, X. Mo,\nJ. E. Gonzalez,\nJ. M. Hellerstein, A. D. Joseph, and\nA. Parameswaran.Towards scalable dataframe systems. Proc.VLDB Endow., 13(12):2033–2046, jul 2020. doi: 10.14778/\n3407790.3407807.[178] D. Petkovic. SQL/JSON standard: Properties and deﬁciencies.doi: 10.1007/\n\nDatenbank-Spektrum, 17(3):277–287, 2017.\ns13222-017-0267-4. [179] D. Pritchett.BASE: An Acid Alternative:\n\nIn Partitioned\nDatabases, Trading Some Consistency for Availability Can\nLead to Dramatic Improvements in Scalability.ACM Queue,\n6(3):48–55, may 2008. doi: 10.1145/1394127.1394128.[180] M. Raasveldt and H. Mühleisen.Duckdb: An embeddable ana-\nlytical database.In Proceedings of the 2019 International Con-\nference on Management of Data, SIGMOD ’19, pages 1981–\n1984, 2019. doi: 10.1145/3299869.3320212.[181] M. Rocklin. Dask: Parallel computation with blocked algo-\nrithms and task scheduling.In Proceedings of the 14th Python\nin Science Conference, pages 130–136, 2015.[182] F. Rusu. Multidimensional array data management. Found.doi: 10.1561/\n\nTrends Databases, 12(2-3):69–220, 2023. 1900000069.[183] S. Sakr, A. Bonifati, H. Voigt, A. Iosup, K. Ammar, R. An-\ngles, W. Aref, M. Arenas, M. Besta, P. A. Boncz, K. Daudjee,\nE. D. Valle, S. Dumbrava, O. Hartig, B. Haslhofer, T. Hege-\nman, J. Hidders, K. Hose, A. Iamnitchi, V. Kalavri, H. Kapp,\nW. Martens, M. T. Özsu, E. Peukert, S. Plantikow, M. Ragab,\nM. R. Ripeanu, S. Salihoglu, C. Schulz, P. Selmer, J. F. Se-\nqueda, J. Shinavier, G. Szárnyas, R. Tommasini, A. Tumeo,\nA. Uta, A. L. Varbanescu, H.-Y.Wu, N. Yakovets, D. Yan, and\nE. Yoneki.The future is big graphs: A community view on\ngraph processing systems.Commun. ACM, 64(9):62–71, aug\n2021. doi: 10.1145/3434642.[184] G. Salton and M. E. Lesk.The smart automatic document re-\ntrieval systems–an illustration.Commun. ACM, 8(6):391–398,\njun 1965. doi: 10.1145/364955.364990.[185] R. Sethi, M. Traverso, D. Sundstrom, D. Phillips, W. Xie,\nY.Sun, N. Yegitbasi, H. Jin, E. Hwang, N. Shingte, and\nIn 2019 IEEE 35th\nC. Berner. Presto: Sql on everything.International Conference on Data Engineering (ICDE), pages\n1802–1813, 2019. doi: 10.1109/ICDE.2019.00196.[186] M. A. Soliman, L. Antova, V. Raghavan, A. El-Helw, Z. Gu,\nE. Shen, G. C. Caragea, C. Garcia-Alvarado, F. Rahman,\nM. Petropoulos, F. Waas, S. Narayanan, K. Krikellas, and\nR. Baldwin.Orca: a modular query optimizer architecture for\nIn Proceedings of the 2014 ACM SIGMOD Inter-\nbig data.national Conference on Management of Data, SIGMOD ’14,\npages 337–348, 2014. doi: 10.1145/2588555.2595637.[187] M. Stonebraker. The case for polystores.https://\n\nwp.sigmod.org/?p=1629, 2015.[188] M. Stonebraker and J. Hellerstein.Readings in Database Sys-\ntems, chapter What Goes Around Comes Around, pages 2–41. 4th edition, 2005.The end of an architectural era:\n(it’s time for a complete rewrite).In Proceedings of the 33rd\nInternational Conference on Very Large Data Bases, VLDB\n’07, pages 1150–1160.VLDB Endowment, 2007. [190] M. Stonebraker, D. Abadi, D. J. DeWitt, S. Madden, E. Paulson,\nA. Pavlo, and A. Rasin.Mapreduce and parallel dbmss: Friends\nor foes?Commun. ACM, 53(1):64–71, Jan. 2010.[191] M. Stonebraker, P. Brown, A. Poliakov, and S. Raman. The ar-\nchitecture of scidb.In Scientiﬁc and Statistical Database Man-\nagement - 23rd International Conference, SSDBM 2011, vol-\nume 6809 of Lecture Notes in Computer Science, pages 1–16.Springer, 2011. doi: 10.1007/978-3-642-22351-8\n\n_1. [192] L. Sullivan.Performance issues in mid-sized relational\ndatabase machines.Master’s thesis, Rochester Institute of Tech-\nnology, 1989.\\\n\n36\n\nSIGMOD Record, June 2024 (Vol.53, No. 2)\n\n\f[193] Z. Sun, X. Zhou, and G. Li.Learned index: A comprehen-\nsive experimental evaluation. Proc.VLDB Endow., 16(8):1992–\n2004, apr 2023. doi: 10.14778/3594512.3594528.Google\n\ndumps mapreduce\n\n[194] Y.\n\nSverdlik.in\nfa-\nhttps:\n\nvor of new hyper-scale\n//www.datacenterknowledge.com/archives/2014/06/\n25/google-dumps-mapreduce-favor-new-hyper-scale-\nanalytics-system, June 2014.\n\nanalytics\n\nsystem.[195] R. Taft, I. Sharif, A. Matei, N. VanBenschoten, J. Lewis,\nT. Grieger, K. Niemi, A.Woods, A. Birzin, R. Poss, P. Bardea,\nA. Ranade, B. Darnell, B. Gruneir, J. Jaffray, L. Zhang, and\nP. Mattis.Cockroachdb: The resilient geo-distributed SQL\ndatabase.In Proceedings of the 2020 International Conference\non Management of Data, SIGMOD, pages 1493–1509, 2020.\ndoi: 10.1145/3318464.3386134.[196] D. ten Wolde, T. Singh, G. Szarnyas, and P. Boncz.Duckpgq:\nEfﬁcient property graph queries in an analytical\nrdbms.In CIDR, 2023. URL https://www.cidrdb.org/cidr2023/\npapers/p66-wolde.pdf.[197] A. Thusoo, J. S. Sarma, N. Jain, Z. Shao, P. Chakka, N. Zhang,\nS. Antony, H. Liu, and R. Murthy.Hive - a petabyte scale\ndata warehouse using hadoop.In International Conference on\nData Engineering (ICDE 2010), pages 996–1005, 2010. doi:\n10.1109/ICDE.2010.5447738.[198] E. Totoni, T. A. Anderson, and T. Shpeisman.HPAT: high per-\nformance analytics with scripting ease-of-use.In Proceedings\n\nof the International Conference on Supercomputing, pages 9:1–\n9:10, 2017. doi: 10.1145/3079079.3079099.[199] T. Trautmann. database. relational-database, September 2021.Understanding the document-relational\nhttps://fauna.com/blog/what-is-a-document-\n\n[200] D. Van Aken, A. Pavlo, G. J. Gordon, and B. Zhang.Auto-\nmatic database management system tuning through large-scale\nIn Proceedings of the 2017 ACM Inter-\nmachine learning.national Conference on Management of Data, SIGMOD ’17,\npages 1009–1024, 2017. doi: 10.1145/3035918.3064029.[201] M. Zaharia, R. S. Xin, P. Wendell, T. Das, M. Armbrust,\nA. Dave, X. Meng, J. Rosen, S. Venkataraman, M. J. Franklin,\nA. Ghodsi, J. Gonzalez, S. Shenker, and I. Stoica.Apache\nspark: a uniﬁed engine for big data processing.Commun. ACM,\n59(11):56–65, oct 2016. doi: 10.1145/2934664.[202] C. Zaniolo. The database language GEM.In SIGMOD, pages\n\n207–218, 1983.[203] X. Zeng, Y. Hui, J. Shen, A. Pavlo, W. McKinney, and\nH. Zhang.An empirical evaluation of columnar storage for-\nmats.Proc. VLDB Endow., 17(2):148–161, 2023.URL https:\n//www.vldb.org/pvldb/vol17/p148-zeng.pdf.[204] X. Zhang, Z. Chang, Y. Li, H. Wu, J. Tan, F. Li, and\nB. Cui.Facilitating database tuning with hyper-parameter op-\ntimization: a comprehensive experimental evaluation.Proc. VLDB Endow., 15(9):1808–1821, may 2022. doi: 10.14778/\n3538598.3538604.SIGMOD Record, June 2024 (Vol. 53, No. 2)\n\n37",
          "time": 1034.5493474006653,
          "input_token_size": 26186,
          "output_token_size": 31,
          "original_provenance_id": 0
        }
      ],
      "metadata": {
        "question_id": "whatgoesaround-sigmodrec2024_c1e325b3",
        "created_at": 1750200182.4960866,
        "processing_time": 1043.0932281017303,
        "processing_complete": true,
        "max_provenances": 5
      },
      "source_info": {
        "selected_from": "test_outputs",
        "reason": "shorter_provenance",
        "sentence_count": 964,
        "provenance_count": 1,
        "alternatives": [
          {
            "source": "test_outputs",
            "sentence_count": 964,
            "provenance_count": 1,
            "has_answer": true
          }
        ],
        "selection_timestamp": "2025-06-17T16:48:52.935801"
      }
    }
  },
  {
    "c77cace5": {
      "question": "What change in licensing is noted for Elastic due to conflicts with AWS?",
      "answer": "Elastic changed its licensing due to conflicts with AWS.",
      "provenance": [
        {
          "provenance_id": 0,
          "input_sentence_ids": [
            482,
            483,
            484,
            485,
            486,
            487,
            488,
            489,
            490,
            491,
            492,
            493,
            494,
            495,
            496,
            497,
            498,
            499,
            500,
            501,
            502,
            503,
            504,
            505,
            506,
            507,
            508,
            509,
            510,
            511,
            512,
            513,
            514,
            515,
            516,
            517,
            518,
            519,
            520,
            521,
            522,
            523,
            524,
            525,
            526,
            527,
            528,
            529,
            530,
            531,
            532,
            533,
            534,
            535,
            536,
            537,
            538,
            539,
            540,
            541,
            542,
            543,
            544,
            545,
            546,
            547,
            548,
            549,
            550,
            551,
            552,
            553,
            554,
            555,
            556,
            557,
            558,
            559,
            560,
            561,
            562,
            563,
            564,
            565,
            566,
            567,
            568,
            569,
            570,
            571,
            572,
            573,
            574,
            575,
            576,
            577,
            578,
            579,
            580,
            581,
            582,
            583,
            584,
            585,
            586,
            587,
            588,
            589,
            590,
            591,
            592,
            593,
            594,
            595,
            596,
            597,
            598,
            599,
            600,
            601,
            602,
            603,
            604,
            605,
            606,
            607,
            608,
            609,
            610,
            611,
            612,
            613,
            614,
            615,
            616,
            617,
            618,
            619,
            620,
            621,
            622,
            623,
            624,
            625,
            626,
            627,
            628,
            629,
            630,
            631,
            632,
            633,
            634,
            635,
            636,
            637,
            638,
            639,
            640,
            641,
            642,
            643,
            644,
            645,
            646,
            647,
            648,
            649,
            650,
            651,
            652,
            653,
            654,
            655,
            656,
            657,
            658,
            659,
            660,
            661,
            662,
            663,
            664,
            665,
            666,
            667,
            668,
            669,
            670,
            671,
            672,
            673,
            674,
            675,
            676,
            677,
            678,
            679,
            680,
            681,
            682,
            683,
            684,
            685,
            686,
            687,
            688,
            689,
            690,
            691,
            692,
            693,
            694,
            695,
            696,
            697,
            698,
            699,
            700,
            701,
            702,
            703,
            704,
            705,
            706,
            707,
            708,
            709,
            710,
            711,
            712,
            713,
            714,
            715,
            716,
            717,
            718,
            719,
            720,
            721,
            722
          ],
          "provenance_ids": [
            482,
            678,
            679,
            683,
            685,
            687,
            688,
            689,
            690,
            691,
            692,
            694,
            696,
            697,
            698,
            703,
            719,
            720,
            721,
            722
          ],
          "provenance": "Notable examples include Meta (Hive [197], Presto [63],\nCassandra [14], RocksDB [68]) and LinkedIn (Kafka [33],\nPinot [59], Voldemort [82]).VLDB Endow., 5\n(11):1232–1243, jul 2012. doi: 10.14778/2350229.2350242. [101] S. Banon.Amazon: NOT OK - why we had to change Elas-\nhttps://www.elastic.co/blog/why-license-\n\ntic licensing.[103] P. Baumann. A database array algebra for spatio-temporal data\nand beyond.[104] E. Begoli, J. Camacho-Rodríguez, J. Hyde, M. J. Mior, and\nD. Lemire.In Proceedings of the 2018 International Conference on Man-\nagement of Data, SIGMOD ’18, pages 221–230, 2018. doi:\n10.1145/3183713.3190662.[105] A. Behm, S. Palkar, U. Agarwal, T. Armstrong, D. Cashman,\nA. Dave, T. Greenstein, S. Hovsepian, R. Johnson, A. Sai Krish-\nnan, P. Leventis, A. Luszczak, P. Menon, M. Mokhtar, G. Pang,\nS. Paranjpye, G. Rahn, B. Samwel, T. van Bussel, H. van Hov-\nell, M. Xue, R. Xin, and M. Zaharia.Photon: A fast query\nengine for lakehouse systems.In Proceedings of the 2022 In-\nternational Conference on Management of Data, SIGMOD ’22,\npages 2326–2339, 2022. doi: 10.1145/3514221.3526054.[106] P. A. Boncz, M. Zukowski, and N. Nes.Monetdb/x100: Hyper-\n\npipelining query execution.Database machines: An idea whose\ntime passed?pages 166–187, 1983. doi: 10.1007/978-3-642-69419-6\n_10.https://www.tbray.org/\nnov\n\n[108] T. Bray. AWS and Blockchain.ongoing/When/202x/2022/11/19/AWS-Blockchain,\n2019.SIGMOD Rec.,\n\n39:12–27, 2011. [111] F. Chang, J.[117] W. W. W. Consortium. Overview of sgml resources.https:\n\n//www.w3.org/MarkUp/SGML/, 2004.[118] W. W. W. Consortium. Extensible Markup Language (XML).https://www.w3.org/XML/, 2016. [119] J. C. Corbett, J.",
          "time": 34.299784898757935,
          "input_token_size": 30368,
          "output_token_size": 37,
          "original_provenance_id": 0
        }
      ],
      "metadata": {
        "question_id": "whatgoesaround-sigmodrec2024_c77cace5",
        "created_at": 1750200270.212619,
        "processing_time": 38.757776498794556,
        "processing_complete": true,
        "max_provenances": 5
      },
      "source_info": {
        "selected_from": "test_outputs",
        "reason": "shorter_provenance",
        "sentence_count": 241,
        "provenance_count": 1,
        "alternatives": [
          {
            "source": "test_outputs",
            "sentence_count": 241,
            "provenance_count": 1,
            "has_answer": true
          }
        ],
        "selection_timestamp": "2025-06-17T16:48:52.936802"
      }
    }
  },
  {
    "ce75eda8": {
      "question": "How have key-value stores like Amazon's Dynamo evolved according to the document?",
      "answer": "Key-value stores have evolved in the following ways:\n\n1. Many have matured into relational model systems or are only used for specific problems.\n2. Some systems that started as key-value stores have transitioned into more feature-rich record stores, replacing opaque values with semi-structured values like JSON documents (e.g., Amazon's DynamoDB).\n3. The addition of SQL-like interfaces to many NoSQL systems, including key-value stores, has blurred the lines between them and relational databases.\n4. Key-value stores are now often used as embedded storage managers for full-featured DBMSs, allowing for quicker development of new database systems.\n5. The trend indicates that key-value stores may become less distinct as relational databases continue to incorporate features that support modern applications.",
      "provenance": [],
      "metadata": {
        "question_id": "whatgoesaround-sigmodrec2024_ce75eda8",
        "created_at": 1749774361.0237172,
        "processing_complete": false,
        "max_provenances": 5
      },
      "source_info": {
        "selected_from": "test_outputs_prev1",
        "reason": "default",
        "sentence_count": 999999,
        "provenance_count": 0,
        "alternatives": [
          {
            "source": "test_outputs_prev1",
            "sentence_count": 999999,
            "provenance_count": 0,
            "has_answer": true
          }
        ],
        "selection_timestamp": "2025-06-17T16:48:52.936802"
      }
    }
  },
  {
    "d57dccec": {
      "question": "When was MapReduce initially developed according to the document?",
      "answer": "2003",
      "provenance": [
        {
          "provenance_id": 0,
          "input_sentence_ids": [
            26,
            27,
            28,
            29
          ],
          "provenance_ids": [
            29
          ],
          "provenance": "2.1 MapReduce Systems\nGoogle constructed their MapReduce (MR) framework\nin 2003 as a “point solution” for processing its periodic\ncrawl of the internet [122].",
          "time": 7.559666872024536,
          "input_token_size": 31457,
          "output_token_size": 18,
          "original_provenance_id": 0
        }
      ],
      "metadata": {
        "question_id": "whatgoesaround-sigmodrec2024_d57dccec",
        "created_at": 1749665335.2853496,
        "processing_time": 18.698147535324097,
        "processing_complete": true,
        "max_provenances": 5
      },
      "source_info": {
        "selected_from": "test_outputs_prev",
        "reason": "shorter_provenance",
        "sentence_count": 4,
        "provenance_count": 1,
        "alternatives": [
          {
            "source": "test_outputs_prev",
            "sentence_count": 4,
            "provenance_count": 1,
            "has_answer": true
          },
          {
            "source": "test_outputs_prev1",
            "sentence_count": 4,
            "provenance_count": 1,
            "has_answer": true
          }
        ],
        "selection_timestamp": "2025-06-17T16:48:52.936802"
      }
    }
  },
  {
    "dac9d1aa": {
      "question": "What type of databases are MongoDB classified under in the document?",
      "answer": "Document Databases",
      "provenance": [
        {
          "provenance_id": 0,
          "input_sentence_ids": [
            120,
            121,
            122,
            123,
            124,
            125,
            126,
            127,
            128,
            129,
            130,
            131,
            132,
            133,
            134,
            135,
            136,
            137,
            138,
            139,
            140,
            141,
            142,
            143,
            144,
            145,
            146,
            147,
            148,
            149
          ],
          "provenance_ids": [
            120,
            122,
            130,
            136,
            144,
            145,
            149
          ],
          "provenance": "2)\n\n23\n\n\fDespite strong protestations that SQL was terrible, by\nthe end of the 2010s, almost every NoSQL DBMS added\na SQL interface.The last holdout was Mon-\ngoDB, but they added SQL for their Atlas service in\n2021 [42].But the SQL standard added a JSON data\ntype and operations in 2016 [165, 178].2.4 Column-Family Databases\nThere is another category of NoSQL systems that uses\na data model called column-family (aka wide-column).Discussion: All our comments in Sec.2.3 about the\ndocument model are also applicable here.Cassandra replaced their Thrift-API with a\nSQL-like language called CQL [15], and HBase now\nrecommends the Phoenix SQL-frontend [57].",
          "time": 13.91696310043335,
          "input_token_size": 28257,
          "output_token_size": 17,
          "original_provenance_id": 0
        },
        {
          "provenance_id": 1,
          "input_sentence_ids": [
            97,
            98,
            99,
            100,
            101,
            102,
            103,
            104
          ],
          "provenance_ids": [
            100,
            101
          ],
          "provenance": "Using an existing KV store\nallows developers to write a new DBMS in less time.2.3 Document Databases\n\nThe document data model represents a database as a col-\nlection of record objects.",
          "time": 22.390746116638184,
          "input_token_size": 39217,
          "output_token_size": 48,
          "original_provenance_id": 1
        },
        {
          "provenance_id": 2,
          "input_sentence_ids": [
            18,
            19,
            20,
            21
          ],
          "provenance_ids": [
            18
          ],
          "provenance": "We\nstructure our commentary into the following areas: (1)\nMapReduce Systems, (2) Key-value Stores, (3) Docu-\nment Databases, (4) Column Family / Wide-Column,\n(5) Text Search Engines, (6) Array Databases, (7)\nVector Databases, and (8) Graph Databases.",
          "time": 28.450652837753296,
          "input_token_size": 45499,
          "output_token_size": 67,
          "original_provenance_id": 2
        },
        {
          "provenance_id": 3,
          "input_sentence_ids": [
            274,
            275,
            276,
            277
          ],
          "provenance_ids": [
            276,
            277
          ],
          "provenance": "These can generally be equaled or beaten by modern\nhigh-performance RDBMSs.Document Databases: Such NoSQL systems are on\na collision course with RDBMSs.",
          "time": 35.61692690849304,
          "input_token_size": 65072,
          "output_token_size": 95,
          "original_provenance_id": 3
        }
      ],
      "metadata": {
        "question_id": "whatgoesaround-sigmodrec2024_dac9d1aa",
        "created_at": 1749774353.829805,
        "processing_time": 42.06258797645569,
        "processing_complete": true,
        "max_provenances": 5
      },
      "source_info": {
        "selected_from": "test_outputs_prev1",
        "reason": "shorter_provenance",
        "sentence_count": 46,
        "provenance_count": 4,
        "alternatives": [
          {
            "source": "test_outputs_prev",
            "sentence_count": 137,
            "provenance_count": 4,
            "has_answer": true
          },
          {
            "source": "test_outputs_prev1",
            "sentence_count": 46,
            "provenance_count": 4,
            "has_answer": true
          }
        ],
        "selection_timestamp": "2025-06-17T16:48:52.936802"
      }
    }
  },
  {
    "dc66a027": {
      "question": "What is the primary focus of the document by Michael Stonebraker and Andrew Pavlo?",
      "answer": "The primary focus of the document by Michael Stonebraker and Andrew Pavlo is the evolution and persistence of the relational model (RM) and SQL in database management systems (DBMSs) over the past two decades, analyzing various data models and query languages, and discussing advancements in DBMS architectures.",
      "provenance": [
        {
          "provenance_id": 0,
          "input_sentence_ids": [
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            11,
            12,
            13,
            14,
            15,
            16,
            17,
            18,
            19,
            20,
            21,
            22,
            23,
            24,
            25,
            26,
            27,
            28,
            29,
            30,
            31,
            32,
            33,
            34,
            35,
            36,
            37,
            38,
            39,
            40,
            41,
            42,
            43,
            44,
            45,
            46,
            47,
            48,
            49,
            50,
            51,
            52,
            53,
            54,
            55,
            56,
            57,
            58,
            59,
            60,
            61,
            62,
            63,
            64,
            65,
            66,
            67,
            68,
            69,
            70,
            71,
            72,
            73,
            74,
            75,
            76,
            77,
            78,
            79,
            80,
            81,
            82,
            83,
            84,
            85,
            86,
            87,
            88,
            89,
            90,
            91,
            92,
            93,
            94,
            95,
            96,
            97,
            98,
            99,
            100,
            101,
            102,
            103,
            104,
            105,
            106,
            107,
            108,
            109,
            110,
            111,
            112,
            113,
            114,
            115,
            116,
            117,
            118,
            119,
            120,
            121,
            122,
            123,
            124,
            125,
            126,
            127,
            128,
            129,
            130,
            131,
            132,
            133,
            134,
            135,
            136,
            137,
            138,
            139,
            140,
            141,
            142,
            143,
            144,
            145,
            146,
            147,
            148,
            149,
            150,
            151,
            152,
            153,
            154,
            155,
            156,
            157,
            158,
            159,
            160,
            161,
            162,
            163,
            164,
            165,
            166,
            167,
            168,
            169,
            170,
            171,
            172,
            173,
            174,
            175,
            176,
            177,
            178,
            179,
            180,
            181,
            182,
            183,
            184,
            185,
            186,
            187,
            188,
            189,
            190,
            191,
            192,
            193,
            194,
            195,
            196,
            197,
            198,
            199,
            200,
            201,
            202,
            203,
            204,
            205,
            206,
            207,
            208,
            209,
            210,
            211,
            212,
            213,
            214,
            215,
            216,
            217,
            218,
            219,
            220,
            221,
            222,
            223,
            224,
            225,
            226,
            227,
            228,
            229,
            230,
            231,
            232,
            233,
            234,
            235,
            236,
            237,
            238,
            239,
            240,
            241,
            242,
            243,
            244,
            245,
            246,
            247,
            248,
            249,
            250,
            251,
            252,
            253,
            254,
            255,
            256,
            257,
            258,
            259,
            260,
            261,
            262,
            263,
            264,
            265,
            266,
            267,
            268,
            269,
            270,
            271,
            272,
            273,
            274,
            275,
            276,
            277,
            278,
            279,
            280,
            281,
            282,
            283,
            284,
            285,
            286,
            287,
            288,
            289,
            290,
            291,
            292,
            293,
            294,
            295,
            296,
            297,
            298,
            299,
            300,
            301,
            302,
            303,
            304,
            305,
            306,
            307,
            308,
            309,
            310,
            311,
            312,
            313,
            314,
            315,
            316,
            317,
            318,
            319,
            320,
            321,
            322,
            323,
            324,
            325,
            326,
            327,
            328,
            329,
            330,
            331,
            332,
            333,
            334,
            335,
            336,
            337,
            338,
            339,
            340,
            341,
            342,
            343,
            344,
            345,
            346,
            347,
            348,
            349,
            350,
            351,
            352,
            353,
            354,
            355,
            356,
            357,
            358,
            359,
            360,
            361,
            362,
            363,
            364,
            365,
            366,
            367,
            368,
            369,
            370,
            371,
            372,
            373,
            374,
            375,
            376,
            377,
            378,
            379,
            380,
            381,
            382,
            383,
            384,
            385,
            386,
            387,
            388,
            389,
            390,
            391,
            392,
            393,
            394,
            395,
            396,
            397,
            398,
            399,
            400,
            401,
            402,
            403,
            404,
            405,
            406,
            407,
            408,
            409,
            410,
            411,
            412,
            413,
            414,
            415,
            416,
            417,
            418,
            419,
            420,
            421,
            422,
            423,
            424,
            425,
            426,
            427,
            428,
            429,
            430,
            431,
            432,
            433,
            434,
            435,
            436,
            437,
            438,
            439,
            440,
            441,
            442,
            443,
            444,
            445,
            446,
            447,
            448,
            449,
            450,
            451,
            452,
            453,
            454,
            455,
            456,
            457,
            458,
            459,
            460,
            461,
            462,
            463,
            464,
            465,
            466,
            467,
            468,
            469,
            470,
            471,
            472,
            473,
            474,
            475,
            476,
            477,
            478,
            479,
            480,
            481,
            482,
            483,
            484,
            485,
            486,
            487,
            488,
            489,
            490,
            491,
            492,
            493,
            494,
            495,
            496,
            497,
            498,
            499,
            500,
            501,
            502,
            503,
            504,
            505,
            506,
            507,
            508,
            509,
            510,
            511,
            512,
            513,
            514,
            515,
            516,
            517,
            518,
            519,
            520,
            521,
            522,
            523,
            524,
            525,
            526,
            527,
            528,
            529,
            530,
            531,
            532,
            533,
            534,
            535,
            536,
            537,
            538,
            539,
            540,
            541,
            542,
            543,
            544,
            545,
            546,
            547,
            548,
            549,
            550,
            551,
            552,
            553,
            554,
            555,
            556,
            557,
            558,
            559,
            560,
            561,
            562,
            563,
            564,
            565,
            566,
            567,
            568,
            569,
            570,
            571,
            572,
            573,
            574,
            575,
            576,
            577,
            578,
            579,
            580,
            581,
            582,
            583,
            584,
            585,
            586,
            587,
            588,
            589,
            590,
            591,
            592,
            593,
            594,
            595,
            596,
            597,
            598,
            599,
            600,
            601,
            602,
            603,
            604,
            605,
            606,
            607,
            608,
            609,
            610,
            611,
            612,
            613,
            614,
            615,
            616,
            617,
            618,
            619,
            620,
            621,
            622,
            623,
            624,
            625,
            626,
            627,
            628,
            629,
            630,
            631,
            632,
            633,
            634,
            635,
            636,
            637,
            638,
            639,
            640,
            641,
            642,
            643,
            644,
            645,
            646,
            647,
            648,
            649,
            650,
            651,
            652,
            653,
            654,
            655,
            656,
            657,
            658,
            659,
            660,
            661,
            662,
            663,
            664,
            665,
            666,
            667,
            668,
            669,
            670,
            671,
            672,
            673,
            674,
            675,
            676,
            677,
            678,
            679,
            680,
            681,
            682,
            683,
            684,
            685,
            686,
            687,
            688,
            689,
            690,
            691,
            692,
            693,
            694,
            695,
            696,
            697,
            698,
            699,
            700,
            701,
            702,
            703,
            704,
            705,
            706,
            707,
            708,
            709,
            710,
            711,
            712,
            713,
            714,
            715,
            716,
            717,
            718,
            719,
            720,
            721,
            722,
            723,
            724,
            725,
            726,
            727,
            728,
            729,
            730,
            731,
            732,
            733,
            734,
            735,
            736,
            737,
            738,
            739,
            740,
            741,
            742,
            743,
            744,
            745,
            746,
            747,
            748,
            749,
            750,
            751,
            752,
            753,
            754,
            755,
            756,
            757,
            758,
            759,
            760,
            761,
            762,
            763,
            764,
            765,
            766,
            767,
            768,
            769,
            770,
            771,
            772,
            773,
            774,
            775,
            776,
            777,
            778,
            779,
            780,
            781,
            782,
            783,
            784,
            785,
            786,
            787,
            788,
            789,
            790,
            791,
            792,
            793,
            794,
            795,
            796,
            797,
            798,
            799,
            800,
            801,
            802,
            803,
            804,
            805,
            806,
            807,
            808,
            809,
            810,
            811,
            812,
            813,
            814,
            815,
            816,
            817,
            818,
            819,
            820,
            821,
            822,
            823,
            824,
            825,
            826,
            827,
            828,
            829,
            830,
            831,
            832,
            833,
            834,
            835,
            836,
            837,
            838,
            839,
            840,
            841,
            842,
            843,
            844,
            845,
            846,
            847,
            848,
            849,
            850,
            851,
            852,
            853,
            854,
            855,
            856,
            857,
            858,
            859,
            860,
            861,
            862,
            863,
            864,
            865,
            866,
            867,
            868,
            869,
            870,
            871,
            872,
            873,
            874,
            875,
            876,
            877,
            878,
            879,
            880,
            881,
            882,
            883,
            884,
            885,
            886,
            887,
            888,
            889,
            890,
            891,
            892,
            893,
            894,
            895,
            896,
            897,
            898,
            899,
            900,
            901,
            902,
            903,
            904,
            905,
            906,
            907,
            908,
            909,
            910,
            911,
            912,
            913,
            914,
            915,
            916,
            917,
            918,
            919,
            920,
            921,
            922,
            923,
            924,
            925,
            926,
            927,
            928,
            929,
            930,
            931,
            932,
            933,
            934,
            935,
            936,
            937,
            938,
            939,
            940,
            941,
            942,
            943,
            944,
            945,
            946,
            947,
            948,
            949,
            950,
            951,
            952,
            953,
            954,
            955,
            956,
            957,
            958,
            959,
            960,
            961,
            962,
            963
          ],
          "provenance_ids": [
            0,
            1,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            11,
            12,
            13,
            14,
            15,
            16,
            17,
            18,
            19,
            20,
            21,
            22,
            23,
            24,
            25,
            26,
            27,
            28,
            29,
            30,
            31,
            32,
            33,
            34,
            35,
            36,
            37,
            38,
            39,
            40,
            41,
            42,
            43,
            44,
            45,
            46,
            47,
            48,
            49,
            50,
            51,
            52,
            53,
            54,
            55,
            56,
            57,
            58,
            59,
            60,
            61,
            62,
            63,
            64,
            65,
            66,
            67,
            68,
            69,
            70,
            71,
            72,
            73,
            74,
            75,
            76,
            77,
            78,
            79,
            80,
            81,
            82,
            83,
            84,
            85,
            86,
            87,
            88,
            90,
            91,
            92,
            93,
            94,
            95,
            96,
            97,
            98,
            99,
            100,
            101,
            102,
            103,
            104,
            105,
            106,
            107,
            108,
            109,
            110,
            111,
            112,
            113,
            114,
            115,
            116,
            117,
            118,
            119,
            120,
            121,
            122,
            123,
            124,
            125,
            126,
            127,
            128,
            129,
            130,
            131,
            132,
            133,
            134,
            135,
            136,
            137,
            138,
            139,
            140,
            141,
            142,
            143,
            144,
            145,
            146,
            147,
            148,
            149,
            150,
            151,
            152,
            153,
            154,
            155,
            156,
            157,
            158,
            159,
            160,
            161,
            162,
            163,
            164,
            165,
            166,
            167,
            168,
            169,
            170,
            171,
            172,
            173,
            174,
            175,
            176,
            177,
            178,
            179,
            180,
            181,
            182,
            183,
            184,
            185,
            186,
            187,
            188,
            189,
            190,
            191,
            192,
            193,
            194,
            195,
            196,
            197,
            198,
            199,
            200,
            201,
            202,
            203,
            204,
            205,
            206,
            207,
            208,
            209,
            210,
            211,
            212,
            213,
            214,
            215,
            216,
            217,
            218,
            219,
            220,
            221,
            222,
            223,
            224,
            225,
            226,
            227,
            228,
            229,
            230,
            231,
            232,
            233,
            234,
            235,
            236,
            237,
            238,
            239,
            240,
            241,
            242,
            243,
            244,
            245,
            246,
            247,
            248,
            249,
            250,
            251,
            252,
            253,
            254,
            255,
            256,
            257,
            258,
            259,
            260,
            261,
            262,
            263,
            264,
            265,
            266,
            267,
            268,
            269,
            270,
            271,
            272,
            273,
            274,
            275,
            276,
            277,
            278,
            279,
            280,
            281,
            282,
            283,
            284,
            285,
            286,
            287,
            288,
            289,
            290,
            291,
            292,
            293,
            294,
            295,
            296,
            297,
            298,
            299,
            300,
            301,
            302,
            303,
            304,
            305,
            306,
            307,
            308,
            309,
            310,
            311,
            312,
            313,
            314,
            315,
            316,
            317,
            318,
            319,
            320,
            321,
            322,
            323,
            324,
            325,
            326,
            327,
            328,
            329,
            330,
            331,
            332,
            333,
            334,
            335,
            336,
            337,
            338,
            339,
            340,
            341,
            342,
            343,
            344,
            345,
            346,
            347,
            348,
            349,
            350,
            351,
            352,
            353,
            354,
            355,
            356,
            357,
            358,
            359,
            360,
            361,
            362,
            363,
            364,
            365,
            366,
            367,
            368,
            369,
            370,
            371,
            372,
            373,
            374,
            375,
            376,
            377,
            378,
            379,
            380,
            381,
            382,
            383,
            384,
            385,
            386,
            387,
            388,
            389,
            390,
            391,
            392,
            393,
            394,
            395,
            396,
            397,
            398,
            399,
            400,
            401,
            402,
            403,
            404,
            405,
            406,
            407,
            408,
            409,
            410,
            411,
            412,
            413,
            414,
            415,
            416,
            417,
            418,
            419,
            420,
            421,
            422,
            423,
            424,
            425,
            426,
            427,
            428,
            429,
            430,
            431,
            432,
            433,
            434,
            435,
            436,
            437,
            438,
            439,
            440,
            441,
            442,
            443,
            445,
            446,
            447,
            448,
            449,
            450,
            451,
            452,
            453,
            454,
            455,
            456,
            457,
            458,
            459,
            460,
            461,
            462,
            463,
            464,
            465,
            466,
            467,
            468,
            469,
            470,
            471,
            472,
            473,
            474,
            475,
            476,
            477,
            478,
            479,
            480,
            481,
            482,
            483,
            484,
            485,
            486,
            487,
            488,
            489,
            490,
            491,
            492,
            493,
            494,
            495,
            496,
            497,
            498,
            499,
            500,
            501,
            502,
            503,
            504,
            505,
            506,
            507,
            511,
            512,
            513,
            514,
            515,
            516,
            517,
            518,
            519,
            520,
            521,
            522,
            523,
            524,
            525,
            526,
            527,
            528,
            529,
            530,
            532,
            533,
            534,
            535,
            536,
            537,
            538,
            539,
            540,
            541,
            542,
            543,
            544,
            545,
            546,
            547,
            548,
            549,
            550,
            551,
            552,
            553,
            554,
            555,
            556,
            557,
            558,
            560,
            561,
            562,
            563,
            564,
            565,
            566,
            567,
            568,
            569,
            570,
            571,
            572,
            573,
            574,
            575,
            576,
            577,
            578,
            579,
            580,
            581,
            582,
            583,
            584,
            585,
            586,
            587,
            588,
            589,
            590,
            591,
            592,
            593,
            594,
            595,
            596,
            597,
            598,
            599,
            600,
            601,
            602,
            603,
            604,
            605,
            606,
            607,
            608,
            609,
            610,
            611,
            612,
            613,
            614,
            615,
            616,
            617,
            618,
            619,
            620,
            621,
            622,
            623,
            624,
            625,
            626,
            627,
            628,
            629,
            630,
            631,
            632,
            633,
            634,
            635,
            636,
            637,
            638,
            639,
            640,
            641,
            642,
            643,
            644,
            645,
            646,
            647,
            648,
            649,
            650,
            651,
            652,
            653,
            654,
            655,
            657,
            658,
            659,
            660,
            661,
            662,
            663,
            664,
            665,
            666,
            667,
            668,
            669,
            670,
            671,
            672,
            673,
            674,
            675,
            676,
            677,
            678,
            679,
            680,
            681,
            682,
            683,
            684,
            685,
            686,
            687,
            688,
            689,
            690,
            691,
            692,
            693,
            694,
            695,
            696,
            697,
            698,
            699,
            700,
            701,
            702,
            703,
            704,
            705,
            706,
            707,
            708,
            709,
            710,
            711,
            712,
            713,
            714,
            716,
            717,
            718,
            719,
            720,
            721,
            722,
            723,
            724,
            726,
            727,
            728,
            729,
            730,
            731,
            732,
            734,
            735,
            736,
            737,
            738,
            739,
            740,
            741,
            742,
            743,
            744,
            745,
            746,
            747,
            748,
            749,
            750,
            751,
            752,
            753,
            754,
            755,
            756,
            757,
            758,
            759,
            760,
            761,
            762,
            764,
            765,
            766,
            767,
            768,
            769,
            770,
            771,
            772,
            773,
            774,
            775,
            776,
            777,
            778,
            779,
            780,
            781,
            782,
            783,
            784,
            785,
            786,
            787,
            788,
            789,
            790,
            791,
            792,
            793,
            794,
            795,
            796,
            797,
            798,
            799,
            800,
            801,
            802,
            803,
            804,
            805,
            806,
            807,
            808,
            809,
            810,
            811,
            812,
            813,
            814,
            815,
            816,
            817,
            818,
            819,
            820,
            821,
            822,
            824,
            825,
            826,
            827,
            828,
            829,
            830,
            831,
            832,
            833,
            834,
            835,
            836,
            837,
            838,
            839,
            840,
            841,
            842,
            843,
            844,
            845,
            846,
            847,
            848,
            849,
            850,
            851,
            852,
            853,
            854,
            855,
            856,
            857,
            858,
            859,
            860,
            861,
            862,
            863,
            864,
            865,
            866,
            868,
            869,
            870,
            871,
            872,
            873,
            874,
            875,
            876,
            877,
            878,
            879,
            880,
            881,
            882,
            884,
            885,
            886,
            887,
            888,
            889,
            890,
            891,
            892,
            893,
            894,
            895,
            896,
            898,
            899,
            900,
            901,
            902,
            903,
            904,
            905,
            906,
            907,
            908,
            909,
            910,
            911,
            912,
            913,
            914,
            915,
            916,
            917,
            918,
            919,
            920,
            921,
            922,
            923,
            924,
            925,
            926,
            927,
            928,
            929,
            930,
            931,
            932,
            933,
            934,
            935,
            936,
            937,
            938,
            939,
            940,
            941,
            942,
            943,
            944,
            945,
            946,
            948,
            949,
            950,
            951,
            952,
            953,
            954,
            955,
            956,
            957,
            958,
            960,
            961,
            962,
            963
          ],
          "provenance": "What Goes Around Comes Around... And Around...\n\nMichael Stonebraker\nMassachusetts Institute of Technology\nstonebraker@csail.mit.edu\n\nAndrew Pavlo\nCarnegie Mellon University\npavlo@cs.cmu.edu\n\nABSTRACT\nTwo decades ago, one of us co-authored a paper com-\nmenting on the previous 40 years of data modelling re-\nsearch and development [188].That paper demonstrated\nthat the relational model (RM) and SQL are the prevail-\ning choice for database management systems (DBMSs),\ndespite efforts to replace either them.We revisit this issue and argue that this same evolu-\ntion has continued since 2005.Once again there have\nbeen repeated efforts to replace either SQL or the RM.But the RM continues to be the dominant data model\nand SQL has been extended to capture the good ideas\nfrom others.As such, we expect more of the same in\nthe future, namely the continued evolution of SQL and\nrelational DBMSs (RDBMSs).We also discuss DBMS\nimplementations and argue that the major advancements\nhave been in the RM systems, primarily driven by chang-\ning hardware characteristics.1 Introduction\nIn 2005, one of the authors participated in writing a\nchapter for the Red Book titled “What Goes Around\nComes Around” [188].That paper examined the major\ndata modelling movements since the 1960s:\n\nHierarchical (e.g., IMS): late 1960s and 1970s\nNetwork (e.g., CODASYL): 1970s\nRelational: 1970s and early 1980s\nEntity-Relationship: 1970s\nExtended Relational: 1980s\nSemantic: late 1970s and 1980s\nObject-Oriented: late 1980s and early 1990s\nObject-Relational: late 1980s and early 1990s\nSemi-structured (e.g., XML): late 1990s and 2000s\n\n•\n•\n•\n•\n•\n•\n•\n•\n•\n\nOur conclusion was that the relational model with an\nextendable type system (i.e., object-relational) has dom-\ninated all comers, and nothing else has succeeded in\nthe marketplace.Although many of the non-relational\nDBMSs covered in 2005 still exist today, their vendors\nhave relegated them to legacy maintenance mode and\nnobody is building new applications on them.This per-\nsistence is more of a testament to the “stickiness” of data\n\nrather than the lasting power of these systems.In other\nwords, there still are many IBM IMS databases running\ntoday because it is expensive and risky to switch them\nto use a modern DBMS.But no start-up would willingly\nchoose to build a new application on IMS.A lot has happened in the world of databases since our\n2005 survey.During this time, DBMSs have expanded\nfrom their roots in business data processing and are now\nused for almost every kind of data.This led to the “Big\nData” era of the early 2010s and the current trend of inte-\ngrating machine learning (ML) with DBMS technology.In this paper, we analyze the last 20 years of data\nmodel and query language activity in databases.We\nstructure our commentary into the following areas: (1)\nMapReduce Systems, (2) Key-value Stores, (3) Docu-\nment Databases, (4) Column Family / Wide-Column,\n(5) Text Search Engines, (6) Array Databases, (7)\nVector Databases, and (8) Graph Databases.We contend that most systems that deviated from\nSQL or the RM have not dominated the DBMS land-\nscape and often only serve niche markets.Many sys-\ntems that started out rejecting the RM with much fanfare\n(think NoSQL) now expose a SQL-like interface for RM\ndatabases.Such systems are now on a path to conver-\ngence with RDBMSs.Meanwhile, SQL incorporated\nthe best query language ideas to expand its support for\nmodern applications and remain relevant.Although there has not been much change in RM\nfundamentals, there were dramatic changes in RM sys-\ntem implementations.The second part of this paper\ndiscusses advancements in DBMS architectures that ad-\ndress modern applications and hardware: (1) Columnar\nSystems, (2) Cloud Databases, (3) Data Lakes / Lake-\nhouses, (4) NewSQL Systems, (5) Hardware Acceler-\nators, and (6) Blockchain Databases.Some of these\nare profound changes to DBMS implementations, while\nothers are merely trends based on faulty premises.We ﬁnish with a discussion of important considera-\ntions for the next generation of DBMSs and provide part-\ning comments on our hope for the future of databases in\nboth research and commercial settings.SIGMOD Record, June 2024 (Vol. 53, No.2)\n\n21\n\n\f2 Data Models & Query Languages\nFor our discussion here, we group the research and de-\nvelopment thrusts in data models and query languages\nfor database into eight categories.2.1 MapReduce Systems\nGoogle constructed their MapReduce (MR) framework\nin 2003 as a “point solution” for processing its periodic\ncrawl of the internet [122].At the time, Google had\nlittle expertise in DBMS technology, and they built MR\nto meet their crawl needs.In database terms, Map is a\nuser-deﬁned function (UDF) that performs computation\nand/or ﬁltering while Reduce is a GROUP BY operation.To a ﬁrst approximation, MR runs a single query:\n\nSELECT map() FROM crawl_table GROUP BY reduce()\n\nGoogle’s MR approach did not prescribe a speciﬁc\ndata model or query language.Rather, it was up to the\nMap and Reduce functions written in a procedural MR\nprogram to parse and decipher the contents of data ﬁles.There was a lot of interest in MR-based systems at\nother companies in the late 2000s.Yahoo! developed\nan open-source version of MR in 2005, called Hadoop.It ran on top of a distributed ﬁle system HDFS that was\na clone of the Google File System [134].Several start-\nups were formed to support Hadoop in the commercial\nmarketplace.We will use MR to refer to the Google\nimplementation and Hadoop to refer to the open-source\nversion.They are functionally similar.There was a controversy about the value of Hadoop\ncompared to RDBMSs designed for OLAP workloads.This culminated in a 2009 study that showed that data\nwarehouse DBMSs outperformed Hadoop [172].This\ngenerated dueling articles from Google and the DBMS\ncommunity [123, 190].Google argued that with care-\nful engineering, a MR system will beat DBMSs, and a\nuser does not have to load data with a schema before\nrunning queries on it.Thus, MR is better for “one shot”\ntasks, such as text processing and ETL operations.The\nDBMS community argued that MR incurs performance\nproblems due to its design that existing parallel DBMSs\nalready solved.Furthermore, the use of higher-level\nlanguages (SQL) operating over partitioned tables has\nproven to be a good programming model [127].A lot of the discussion in the two papers was on imple-\nmentation issues (e.g., indexing, parsing, push vs. pull\nquery processing, failure recovery).From reading both\npapers a reasonable conclusion would be that there is a\nplace for both kinds of systems.However, two changes\nin the technology world rendered the debate moot.The ﬁrst event was that the Hadoop technology and\nservices market cratered in the 2010s.Many enterprises\nspent a lot of money on Hadoop clusters, only to ﬁnd\nthere was little interest in this functionality.Developers\nfound it difﬁcult to shoehorn their application into the\n\nrestricted MR/Hadoop paradigm.There were consider-\nable efforts to provide a SQL and RM interface on top\nof Hadoop, most notable was Meta’s Hive [30, 197].The next event occurred eight months after the CACM\narticle when Google announced that they were moving\ntheir crawl processing from MR to BigTable [164].The\nreason was that Google needed to interactively update\nits crawl database in real time but MR was a batch sys-\ntem.Google ﬁnally announced in 2014 that MR had no\nplace in their technology stack and killed it off [194].The ﬁrst event left the three leading Hadoop vendors\n(Cloudera, Hortonworks, MapR) without a viable prod-\nuct to sell.Cloudera rebranded Hadoop to mean the\nwhole stack (application, Hadoop, HDFS).In a further\nsleight-of-hand, Cloudera built a RDBMS, Impala [150],\non top of HDFS but not using Hadoop.They realized\nthat Hadoop had no place as an internal interface in a\nSQL DBMS, and they conﬁgured it out of their stack\nwith software built directly on HDFS.In a similar vein,\nMapR built Drill [22] directly on HDFS, and Meta cre-\nated Presto [185] to replace Hive.Discussion: MR’s deﬁciencies were so signiﬁcant that\nit could not be saved despite the adoption and enthu-\nsiasm from the developer community.Hadoop died\nabout a decade ago, leaving a legacy of HDFS clusters\nin enterprises and a collection of companies dedicated\nto making money from them.At present, HDFS has\nlost its luster, as enterprises realize that there are better\ndistributed storage alternatives [124].Meanwhile, dis-\ntributed RDBMSs are thriving, especially in the cloud.Some aspects of MR system implementations related\nto scalability, elasticity, and fault tolerance are carried\nover into distributed RDBMSs.MR also brought about\nthe revival of shared-disk architectures with disaggre-\ngated storage, subsequently giving rise to open-source\nﬁle formats and data lakes (see Sec.3.3). Hadoop’s lim-\nitations opened the door for other data processing plat-\nforms, namely Spark [201] and Flink [109].Both sys-\ntems started as better implementations of MR with pro-\ncedural APIs but have since added support for SQL [105].2.2 Key/Value Stores\nThe key/value (KV) data model is the simplest model\npossible.It represents the following binary relation:\n\n(key,value)\n\nA KV DBMS represents a collection of data as an as-\nsociative array that maps a key to a value.The value is\ntypically an untyped array of bytes (i.e., a blob), and the\nDBMS is unaware of its contents.It is up to the appli-\ncation to maintain the schema and parse the value into\nits corresponding parts.Most KV DBMSs only provide\nget/set/delete operations on a single value.In the 2000s, several new Internet companies built\ntheir own shared-nothing, distributed KV stores for nar-\n\n22\n\nSIGMOD Record, June 2024 (Vol.53, No. 2)\n\n\frowly focused applications, like caching and storing ses-\nsion data.For caching, Memcached [131] is the most\nwell-known example of this approach.Redis [67] mar-\nkets itself as a Memcached replacement, offering a more\nrobust query API with checkpointing support.For more\npersistent application data, Amazon created the Dynamo\nKV store in 2007 [125].Such systems offer higher and\nmore predictable performance, compared to a RDBMS,\nin exchange for more limited functionality.The second KV DBMS category are embedded stor-\nage managers designed to run in the same address space\nas a higher-level application.One of the ﬁrst stan-\ndalone embedded KV DBMSs was BerkeleyDB from\nthe early 1990s [170].Recent notable entries include\nGoogle’s LevelDB [37], which Meta later forked as\nRocksDB [68].Discussion: Key/value stores provide a quick “out-of-\nthe-box” way for developers to store data, compared to\nthe more laborious effort required to set up a table in a\nRDBMS.Of course, it is dangerous to use a KV store\nin a complex application that requires more than just a\nbinary relation.If an application requires multiple ﬁelds\nin a record, then KV stores are probably a bad idea.Not\nonly must the application parse record ﬁelds, but also\nthere are no secondary indexes to retrieve other ﬁelds\nby value.Likewise, developers must implement joins or\nmulti-get operations in their application.Such systems replace the opaque value\nwith a semi-structured value, such as a JSON docu-\nment.Examples of this transition are Amazon’s Dy-\nnamoDB [129] and Aerospike [9].It is not trivial to re-\nengineer a KV store to make it support a complex data\nmodel, whereas RDBMSs easily emulates KV stores\nwithout any changes.If an application needs an embed-\nded DBMS, there are full-featured choices available to-\nday, including SQLite [71] and DuckDB [180].Hence,\na RDBMS may be a better choice, even for simple appli-\ncations, because they offer a path forward if the applica-\ntion’s complexity increases.One new architecture trend from the last 20 years is\nusing embedded KV stores as the underlying storage\nmanager for full-featured DBMSs.Prior to this, build-\ning a new DBMS requires engineers to build a custom\nstorage manager that is natively integrated in the DBMS.MySQL was the ﬁrst DBMS to expose an API that al-\nlowed developers to replace its default KV storage man-\nager.This API enabled Meta to build RocksDB to re-\nplace InnoDB for its massive ﬂeet of MySQL databases.Similarly, MongoDB discarded their ill-fated MMAP-\nbased storage manager in favor of WiredTiger’s KV\nstore in 2014 [120, 138].Using an existing KV store\nallows developers to write a new DBMS in less time.2.3 Document Databases\n\nThe document data model represents a database as a col-\nlection of record objects.Each document contains a hier-\narchy of ﬁeld/value pairs, where each ﬁeld is identiﬁed\nby a name and a ﬁeld’s value can be either a scalar type,\nan array of values, or another document.The following\nexample in JSON is a customer document that contain\na nested list of purchase order records with their corre-\nsponding order items.{ “name”: “First Last”,\n\n“orders”: [ { “id”: 123, “items”: [...] },\n\n{ “id”: 456, “items”: [...] }, ] }\n\nDocument data models have been an active ﬁeld of\neffort for several decades.This has given rise to data\nformats like SGML [117] and XML [118].Despite\nthe buzz with XML databases in the late 1990s, we\ncorrectly predicted in 2005 they would not supplant\nRDBMSs [188].JSON has since overtaken XML to\nbecome the standard for data exchange for web-based\napplications.JavaScript’s popularity with developers\nand the accompanying ubiquity of JSON led several\ncompanies to create document-oriented systems that na-\ntively stored JSON in the 2000s.The inability of OLTP RDBMSs to scale in the 2000s\nushered in dozens of document DBMSs that marketed\nthemselves using the catchphrase NoSQL [110].There\nwere two marketing messages for such systems that res-\nonated with developers.First, SQL and joins are slow,\nand one should use a “faster” lower-level, record-at-a-\ntime interface.Second, ACID transactions are unneces-\nsary for modern applications, so the DBMS should only\nprovide weaker notion of it (i.e., BASE [179]).Because of these two thrusts, NoSQL came to stand\nfor a DBMS that stored records or documents as JSON,\nsupported a lower-level API, and weak or non-existent\ntransactions.There are dozens of such systems, of\nwhich MongoDB [41] is the most popular.Discussion: Document DBMSs are essentially the same\nas object-oriented DBMSs from the 1980s and XML\nDBMSs from the late 1990s.Proponents of document\nDBMSs make the same argument as their OO/XML\npredecessors: storing data as documents removes the\nimpedance mismatch between how application OO code\ninteracts with data and how relational databases store\nthem.They also claim that denormalizing entries into\nnested structures is better for performance because it re-\nmoves the need to dispatch multiple queries to retrieve\ndata related to a given object (i.e., “N+1 problem” in\nORMs).The problems with denormalization/prejoining\nis an old topic that dates back to the 1970s [116]: (1)\nif the join is not one-to-many, then there will be dupli-\ncated data, (2) prejoins are not necessarily faster than\njoins, and (3) there is no data independence.SIGMOD Record, June 2024 (Vol. 53, No.2)\n\n23\n\n\fDespite strong protestations that SQL was terrible, by\nthe end of the 2010s, almost every NoSQL DBMS added\na SQL interface.Notable examples include DynamoDB\nPartiQL [56], Cassandra CQL [15], Aerospike AQL [9],\nand Couchbase SQL++ [72].The last holdout was Mon-\ngoDB, but they added SQL for their Atlas service in\n2021 [42].Instead of supporting the SQL standard for\nDDL and DML operations, NoSQL vendors claim that\nthey support their own proprietary query language de-\nrived or inspired from SQL.For most applications, these\ndistinctions are without merit.Any language differences\nbetween SQL and NoSQL derivatives are mostly due to\nJSON extensions and maintenance operations.Many of the remaining NoSQL DBMSs also added\nstrongly consistent (ACID) transactions (see Sec. 3.4).As such, the NoSQL message has morphed from “Do\nnot use SQL – it is too slow!” to “Not only SQL” (i.e.,\nSQL is ﬁne for some things).Adding SQL and ACID to a NoSQL DBMS lowers\ntheir intellectual distance from RDBMSs.The main\ndifferences between them seems to be JSON support\nand the fact that NoSQL vendors allow “schema later”\ndatabases.But the SQL standard added a JSON data\ntype and operations in 2016 [165, 178].And as RDBMSs\ncontinue to improve their “ﬁrst ﬁve minutes” experience\nfor developers, we believe that the two kinds of systems\nwill soon be effectively identical.Higher level languages are almost universally pre-\nferred to record-at-a-time notations as they require less\ncode and provide greater data independence.Although\nwe acknowledge that the ﬁrst SQL optimizers were slow\nand ineffective, they have improved immensely in the\nlast 50 years.But the optimizer remains the hardest part\nof building a DBMS.We suspect that this engineering\nburden was a contributing factor to why NoSQL systems\noriginally chose to not support SQL.2.4 Column-Family Databases\nThere is another category of NoSQL systems that uses\na data model called column-family (aka wide-column).Despite its name, column-family is not a columnar data\nmodel.Instead, it is a reduction of the document data\nmodel that only supports one level of nesting instead\nof arbitrary nesting; it is relation-like, but each record\ncan have optional attributes, and cells can contain an ar-\nray of values.The following example shows a mapping\nfrom user identiﬁer keys to JSON documents that con-\ntain each user’s varying proﬁle information:\n\nUser1000 → { “name”: “Alice”,\n\n“accounts”: [ 123, 456 ],\n“email”: \"xxx@xxx.edu” }\n\nUser1001 → { “name”: “Bob”,\n\n“email”: [ “yyy@yyy.org”, “zzz@zzz.com” ] }\n\nThe ﬁrst column-family model DBMS was Google’s\nBigTable in 2004 [111].Instead of adopting SQL and\n\nemerging columnar storage, Google used this data model\nwith procedural client APIs.Other systems adopted the\ncolumn-family model in an attempt to copy Google’s be-\nspoke implementation.Most notable are Cassandra [14]\nand HBase [28].They also copied BigTable’s limita-\ntions, including the lack of joins and secondary indexes.Discussion: All our comments in Sec.2.3 about the\ndocument model are also applicable here.In the early\n2010s, Google built RDBMSs on top of BigTable, in-\ncluding MegaStore [99] and the ﬁrst version of Span-\nner.Since then, Google rewrote Spanner to remove\nthe BigTable remnants [98], and it is now the primary\ndatabase for many of its internal applications.Several\nNoSQL DBMSs deprecated their proprietary APIs in\nfavor of SQL but still retain their non-relational archi-\ntectures.Cassandra replaced their Thrift-API with a\nSQL-like language called CQL [15], and HBase now\nrecommends the Phoenix SQL-frontend [57].Google\nstill offers BigTable as a cloud service, but the column-\nfamily model is a singular outlier with the same disad-\nvantages as NoSQL DBMSs.2.5 Text Search Engines\nText search engines have existed for a long time, begin-\nning with the seminal SMART system in the 1960s [184].SMART pioneered information retrieval and the vector\nspace model, now nearly universal in modern search\nengines, by tokenizing documents into a “bag of words”\nand then building full-text indexes (aka inverted indexes)\non those tokens to support queries on their contents.The\nsystem was also cognizant of noise words (e.g., “the”,\n“a”), synonyms (e.g., “The Big Apple” is a synonym for\n“New York City”), salient keywords, and distance (e.g.,\n“drought” often appears close to “climate change”).The leading text search systems today include Elastic-\nsearch [23] and Solr [70], which both use Lucene [38]\nas their internal search library.These systems offer\ngood support for storing and indexing text data but offer\nnone-to-limited transaction capabilities.This limitation\nmeans that a DBMS has to recover from data corruption\nby rebuilding the document index from scratch, which\nresults in signiﬁcant downtime.All the leading RDBMSs support full-text search in-\ndexes, including Oracle [52], Microsoft SQL Server [52],\nMySQL [43], and PostgreSQL [62].Their search fea-\ntures have improved recently and are generally on par\nwith the special-purpose systems above.They also have\nthe advantage of built-in transaction support.But their\nintegration of search operations in SQL is often clunky\nand differs between DBMSs.Discussion: Text data is inherently unstructured, which\nmeans that there is no data model.Instead, a DBMS\nseeks to extract structure (i.e., meta-data, indexes) from\ntext to avoid “needle in the haystack” sequential searches.24\n\nSIGMOD Record, June 2024 (Vol. 53, No.2)\n\n\fThere are three ways to manage text data in application.First, one can run multiple systems, such as Elastic-\nsearch for text and a RDBMS for operational workloads.This approach allows one to run “best of breed” systems\nbut requires additional ETL plumbing to push data from\nthe operational DBMS to the text DBMS and to rewrite\napplications to route queries to the right DBMSs based\non their needs.Alternatively, one can run a RDBMS\nwith good text-search integration capabilities but with\ndivergent APIs in SQL.This latter issue is often over-\ncome by application frameworks that hide this complex-\nity (e.g., Django Haystack [20]).The third option is\na polystore system [187] that masks the system differ-\nences via middleware that exposes a uniﬁed interface.Inverted index-centric search engines based on SMART\n\nare used for exact match searches.These methods have\nbeen supplanted in recent years by similarity search us-\ning ML-generated embeddings (see Sec.2.7). 2.6 Array Databases\nThere are many areas of computing where arrays are an\nobvious data representation.We use the term “array” to\nmean all variants of them [182]: vectors (one dimen-\nsion – see Sec.2.7), matrices (two dimensions), and\ntensors (three or more dimensions).For example, sci-\nentiﬁc surveys for geographic regions usually represent\ndata as a multi-dimensional array that stores sensor mea-\nsurements using location/time-based coordinates:\n\n(latitude, longitude, time, [vector-of-values])\n\nSeveral other data sets look like this, including ge-\nnomic sequencing and computational ﬂuid dynamics.Arrays are also the core of most ML data sets.Although array-based programming languages have\nexisted since the 1960s (APL [142]), the initial work\non array DBMSs began in the 1980s.PICDMS is con-\nsidered to be the ﬁrst DBMS implementation using the\narray data model [114].The two oldest array DBMSs\nstill being developed today are Rasdaman [66, 103] and\nkdb+ [34].Newer array DBMSs include SciDB [54,\n191] and TileDB [76].HDF5 [29] and NetCDF [46] are\npopular array ﬁle formats for scientiﬁc data.There are several system challenges with storing and\nquerying real-world array data sets.Foremost is that ar-\nray data does not always align to a regular integer grid;\nfor example, geospatial data is often split into irregular\nshapes.An application can map such grids to integer\ncoordinates via metadata describing this mapping [166].Hence, most applications maintain array and non-array\ndata together in a single database.Unlike row- or column-based DBMSs, querying array\ndata in arbitrary dimensions presents unique challenges.The difﬁculty arises from storing multi-dimensional ar-\nray data on a linear physical storage medium like a disk.To overcome these challenges, array DBMSs must em-\n\nploy indexing and data structures to support efﬁcient\ntraversal across array dimensions.Discussion: Array DBMSs are a niche market that has\nonly seen adoption in speciﬁc verticals (we discuss vec-\ntor DBMSs next).For example, they have considerable\ntraction in the genomics space.HDF5 is popular for\nsatellite imagery and other gridded scientiﬁc data.But\nbusiness applications rarely use dedicated array DBMSs,\nwhich is necessary for any product to survive.No ma-\njor cloud provider offers a hosted array DBMS service,\nmeaning they do not see a sizable market.The challenge that array DBMS vendors have al-\nways faced is that the SQL includes support for or-\ndered arrays as ﬁrst-class data types (despite this be-\ning against the original RM proposal [115]).The ﬁrst\nproposal to extend the unordered set-based RM with\nordered rasters was in 1993 [155].An early exam-\nple of this was Illustra’s temporal (one-dimensional)\ndata plugin [31].SQL:1999 introduced limited sup-\nport for single-dimension, ﬁxed-length array data types.SQL:2003 expanded to support nested arrays without a\npredeﬁned maximum cardinality.Later entrants include\nOracle Georaster [4] and Teradata [73].Data cubes are\nspecial-purpose arrays [135], but columnar RDBMSs\nhave eclipsed them for OLAP workloads because of\ntheir better ﬂexibility and lower engineering costs [113].More recently, the SQL:2023 standard includes sup-\nport for true multi-dimensional arrays (SQL/MDA) that\nis heavily inspired by Rasdaman’s RQL [166].This\nupdate allows SQL to represent arrays with arbitrary\nIn effect,\ndimensions using integer-based coordinates.this allows data cubes to exist in a SQL framework, but\ncolumnar DBMSs now dominate this market.2.7 Vector Databases\nSimilar to how the column-family model is a reduction\nof the document model, the vector data model simpliﬁes\nthe array data model to one-dimensional rasters.Given\nthat vector DBMSs are attracting the most attention\nright now from developers and investors (similar to the\nNoSQL fad), it is necessary to discuss them separately.The reason for this interest is because developers use\nthem to store single-dimension embeddings generated\nfrom AI tools.These tools use learned transformations\nto convert a record’s data (e.g., text, image) into a vec-\ntor representing its latent semantics.For example, one\ncould convert each Wikipedia article into an embedding\nusing Google BERT and store them in a vector database\nalong with additional article meta-data:\n\n(title, date, author, [embedding-vector])\n\nThe size of these embedding vectors range from 100s\nof dimensions for simple transformers to 1000s for high-\nend models; these sizes will obviously grow over time\nwith the development of more sophisticated models.SIGMOD Record, June 2024 (Vol. 53, No.2)\n\n25\n\n\fThe key difference between vector and array DBMSs\nis their query patterns.The former are designed for\nsimilarity searches that ﬁnd records whose vectors have\nthe shortest distance to a given input vector in a high-\ndimensional space.The input vector is another embed-\nding generated with the same transformer used to popu-\nlate the database.Unlike array DBMSs, applications do\nnot use vector DBMSs to search for matches at an off-\nset in a vector nor extract slices across multiple vectors.Instead, the dominant use case is this similarity search.To avoid brute force scans for ﬁnding the most sim-\nilar records, vector DBMSs build indexes to accelerate\napproximate nearest neighbor (ANN) searches.Appli-\ncations issue queries with predicates on both the em-\nbedding index and non-embedding attributes (i.e., meta-\ndata).The DBMS then chooses whether to use the non-\nembedding predicate on records before (pre-ﬁlter) or af-\nter (post-ﬁlter) the vector search.There are dozens of new DBMSs in this emerging\ncategory, with Pinecone [58], Milvus [40], and Weav-\niate [84] as the leading systems.Text search engines,\nincluding Elasticsearch [23], Solr [70], and Vespa [79],\nexpanded their APIs to support vector search.Other\nDBMSs rebranded themselves as vector databases to\njump on the bandwagon, such as Kdb+ [34].One compelling feature of vector DBMSs is that\nthey provide better integration with AI tools (e.g., Chat-\nGPT [16], LangChain [36]) than RDBMSs.These sys-\ntems natively support transforming a record’s data into\nan embedding upon insertion using these tools and then\nuses the same transformation to convert a query’s in-\nput arguments into an embedding to perform the ANN\nsearch; other DBMSs require the application to perform\nthese transformations outside of the database.Discussion: Unlike array DBMSs that require a cus-\ntomized storage manager and execution engine to sup-\nport efﬁcient operations on multi-dimensional data, vec-\ntor DBMSs are essentially document-oriented DBMSs\nwith specialized ANN indexes.Such indexes are a fea-\nture, not the foundation of a new system architecture.After LLMs became “mainstream” with ChatGPT in\nlate 2022, it took less than one year for several RDBMSs\nIn 2023,\nto add their own vector search extensions.many of the major RDBMSs added vector indexes, in-\ncluding Oracle [7], SingleStore [137], Rockset [8], and\nClickhouse [157].Contrast this with JSON support in\nRDBMSs.NoSQL systems like MongoDB and CouchDB\nbecame popular in the late 2000s and it took several\nyears for RDBMSs to add support for it.There are two likely explanations for the quick pro-\nliferation of vector indexes.The ﬁrst is that similarity\nsearch via embeddings is such a compelling use case\nthat every DBMS vendor rushed out their version and\nannounced it immediately.The second is that the en-\ngineering effort to introduce a new index data structure\n\nis small enough that it did not take that much work for\nthe DBMS vendors to add vector search.Most of them\ndid not write their vector index from scratch and instead\nintegrated an open-source library (e.g., pgVector [145],\nDiskANN [19], FAISS [24]).We anticipate that vector DBMSs will undergo the\nsame evolution as document DBMSs by adding features\nto become more relational-like (e.g., SQL, transactions,\nextensibility).Meanwhile, relational incumbents will\nhave added vector indexes to their already long list of\nfeatures and moved on to the next emerging trend.2.8 Graph Databases\nThere has been a lot of academic and industry interest\nin the last decade in graph databases [183].Many appli-\ncations use knowledge graphs to model semi-structured\ninformation.Social media applications inherently con-\ntain graph-oriented relationships (“likes”, “friend-of”).Relational design tools provide users with an entity-\nrelationship (ER) model of their database.An ER dia-\ngram is a graph; thus, this paradigm has clear use cases.The two most prevalent approaches to represent graphs\nare (1) the resource description framework (RDF) and\n(2) property graphs [126].With property graphs, the\nDBMS maintains a directed multi-graph structure that\nsupports key/value labels for nodes and edges.RDF\ndatabases (aka triplestores) only model a directed graph\nwith labeled edges.Since property graphs are more com-\nmon and are a superset of RDF, we will only discuss\nthem.We consider two use cases for graph DBMSs and\ndiscuss the problems that will limit their adoption.The ﬁrst category of systems are for operational /\nOLTP workloads: an application, for example, adds a\nfriend link in the database by updating a single record,\npresumably in a transactional manner.Neo4j [44] is the\nmost popular graph DBMS for OLTP applications.It\nsupports edges using pointers (as in CODASYL) but it\ndoes not cluster nodes with their “parent” or “offspring”.Such an architecture is advantageous for traversing long\nedge chains since it will do pointer chasing, whereas a\nRDBMS has to do this via joins.But their potential mar-\nket success comes down to whether there are enough\n“long chain” scenarios that merit forgoing a RDBMS.The second use case is analytics, which seeks to de-\nrive information from the graph.An example of this\nscenario is ﬁnding which user has the most friends un-\nder 30 years old.Notable entries like Tigergraph [74]\nand JanusGraph [32] focus on query languages and\nstorage on a graph DBMS.Other systems, such as Gi-\nraph [26] and Turi [78] (formerly Graphlab [27]) pro-\nvide a computing fabric to support parallel execution of\ngraph-oriented programs, typically written by a user.Unlike queries in relational analytics that are charac-\nterized by chains of joins, queries for graph analytics\ncontain operations like shortest path, cut set, or clique\n\n26\n\nSIGMOD Record, June 2024 (Vol.53, No. 2)\n\n\fdetermination. Algorithm choice and data representa-\ntion will determine a DBMS’s performance.This argues\nfor a computing fabric that allows developers to write\ntheir own algorithms using an abstraction that hides\nthe underlying system topology.However, previous\nresearch shows that distributed algorithms rarely out-\nperform single-node implementations because of com-\nmunication costs [160].A better strategy is to compress\na graph into a space-efﬁcient data structure that ﬁts in\nmemory on a single node and then run the query against\nthis data structure.All but the largest graph databases\nare probably best handled this way.Discussion: Regardless of whether a graph DBMS tar-\ngets OLTP or OLAP workloads, the key challenge these\nsystems have to overcome is that it is possible to simu-\nlate a graph as a collection of tables:\n\nNode (node_id, node_data)\nEdge (node_id_1, node_id_2, edge_data)\n\nThis means that RDBMSs are always an option to sup-\nport graphs.But “vanilla” SQL is not expressive enough\nfor graph queries and thus require multiple client-server\nroundtrips for traversal operations.Some RDBMSs, including MSSQL [3] and Oracle [50],\n\nprovide built-in SQL extensions that make storing and\nquerying graph data easier.Other DBMSs use a transla-\ntion layer on top of relations to support graph-oriented\nAPIs.Amazon Neptune [45] is a graph-oriented veneer\non top of Aurora MySQL.Apache AGE provides an\nOpenCypher interface on top of PostgreSQL [10].More recently, SQL:2023 introduced property graph\nqueries (SQL/PGQ) for deﬁning and traversing graphs\nin a RDBMS [196].The syntax builds on existing lan-\nguages (e.g., Neo4j’s Cypher [49], Oracle’s PGQL [51],\nand TigerGraph’s GSQL [75]), and shares aspects of the\nemerging GQL standard [126].Thus, SQL/PGQ further\nnarrows the functionality difference between RDBMSs\nand native graph DBMSs.The question is whether graph DBMS vendors can\nmake their specialized systems fast enough to over-\ncome the above disadvantages.There have been several\nperformance studies showing that graph simulation on\nRDBMSs outperform graph DBMSs [130, 143].More\nrecent work showed how SQL/PGQ in DuckDB outper-\nforms a leading graph DBMS by up to 10\n[196].This\ntrend will continue with further improvements in worst-\ncase optimal joins [132, 168] and factorized execution\nalgorithms [100] for graph queries in RDBMSs.⇥\n\n2.9 Summary\nA reasonable conclusion from the above section is that\nnon-SQL, non-relational systems are either a niche mar-\nket or are fast becoming SQL/RM systems.Speciﬁcally:\n\n•\n\nMapReduce Systems: They died years ago and are,\nat best, a legacy technology at present.•\n\n•\n\n•\n\n•\n\n•\n\n•\n\n•\n\nKey-value Stores: Many have either matured into\nRM systems or are only used for speciﬁc problems.These can generally be equaled or beaten by modern\nhigh-performance RDBMSs.Document Databases: Such NoSQL systems are on\na collision course with RDBMSs.The differences\nbetween the two kinds of systems have diminished\nover time and should become nearly indistinguish-\nable in the future.Column-Family Systems: These remain a niche\nmarket.Without Google, this paper would not be\ntalking about this category.Text Search Engines: These systems are used for\ntext ﬁelds in a polystore architecture.It would be\nvaluable if RDBMSs had a better story for search so\nthese would not have to be a separate product.Array Databases: Scientiﬁc applications will con-\ntinue to ignore RDBMSs in favor of bespoke array\nsystems.They may become more important because\nRDBMSs cannot efﬁciently store and analyze arrays\ndespite new SQL/MDA enhancements.Vector Databases: They are single-purpose DBMSs\nwith indexes to accelerate nearest-neighbor search.RM DBMSs should soon provide native support for\nthese data structures and search methods using their\nextendable type system that will render such special-\nized databases unnecessary.Graph Databases: OLTP graph applications will\nbe largely served by RDBMSs.In addition, ana-\nlytic graph applications have unique requirements\nthat are best done in main memory with specialized\ndata structures.RDBMSs will provide graph-centric\nAPIs on top of SQL or via extensions.We do not ex-\npect specialized graph DBMSs to be a large market.Beyond the above, there are also proposals to rebrand\nprevious data models as something novel.For example,\ngraph-relational [158] is the same as the semantic data\nmodel [202].Likewise, document-relational is the doc-\nument model with foreign keys [199].Others provide a\nnon-SQL veneer over a RDBMS (e.g., PRQL [64], Mal-\nloy [39]).Although these languages deal with some of\nSQL’s shortcomings, they are not compelling enough to\novercome its entrenched userbase and ecosystem.3 System Architectures\nThere have been major new ideas in DBMS architec-\ntures put forward in the last two decades that reﬂect-\ning changing application and hardware characteristics.These ideas range from terriﬁc to questionable, and we\ndiscuss them in turn.3.1 Columnar Systems\nTo understand the appeal of columnar DBMSs, we need\nto explain the origins of the data warehouse (OLAP)\nmarket.Beginning in the mid-1990s, enterprises started\n\nSIGMOD Record, June 2024 (Vol.53, No. 2)\n\n27\n\n\fcollecting their customer facing (usually sales) data.Brick-and-mortar retailers (e.g., Walmart) were at fore-\nfront of constructing historical sales databases.These\ncompanies generally found that a sales data warehouse\nwould pay for itself in better stock ordering and rota-\ntion decisions within six months.Such customer facing\ndatabases are now omnipresent in enterprises.Data warehouse applications have common proper-\n\nties that are distinct from OLTP workloads:\n1.They are historical in nature (i.e., they are loaded\n\nperiodically and then are read-only). 2.Organizations retain everything as long as they can\n\nafford the storage — think terabytes to petabytes.3. Queries typically only access a small subset of at-\ntributes from tables and are ad-hoc in nature.Ralph Kimball was an early proponent of star schema\ndata modelling for data warehouses [148, 149].The idea\nwas to construct a fact table that held item-level trans-\nactional data.The classic example is a fact table that\ncontains a record for every item purchased in a retail en-\nterprise.Then, one surrounds the fact table with dimen-\nsion tables that contain common information factored\nout from the fact table to save space.Again, in a retail\nsetting, these dimension tables would include informa-\ntion about customers, products, stores, and time.Organizing the DBMS’s storage by columns instead\nof rows has several beneﬁts [87].First, compressing\ncolumnar data is more effective than row-based data be-\ncause there is a single value type in a data block of-\nten many repeated bytes.Second, a Volcano-style en-\ngine executes operators once per row.In contrast, a\ncolumn-oriented engine has an inner loop that processes\na whole column using vectorized instructions [106, 147].Lastly, row stores have a large header for each record\n(e.g., 20 bytes) to track nulls and versioning meta-data,\nwhereas column stores have minimal storage overhead\nper record.Discussion: Over the last two decades, all vendors ac-\ntive in the data warehouse market have converted their\nofferings from a row store to a column store.This tran-\nsition brought about signiﬁcant changes in the design\nof DBMSs.In addition, several new vendors have en-\ntered the market in the last two decades with column\nstore offerings, for example Amazon’s Redshift [94] and\nGoogle’s BigQuery [162] along with offerings from in-\ndependent companies (e.g., Snowﬂake [121]).In summary, column stores are new DBMS implemen-\ntations with specialized optimizers, executors, and stor-\nage formats.They have taken over the data warehouse\nmarketplace because of their superior performance.3.2 Cloud Databases\nThe rise of cloud platforms in the late 2000s has also\ngreatly affected the implementation (and sales model) of\n\nDBMSs.Initial cloud DBMS offerings repackaged on-\nprem systems into managed VMs with direct-attached\nstorage.But over the last 20 years, networking band-\nwidth has increased much faster than disk bandwidth,\nmaking network attached storage (NAS) attractive as an\nalternative to attached storage.This has caused a pro-\nfound rethinking of DBMS architectures for the cloud.All major cloud vendors offer NAS via object stores\n(e.g., Amazon S3) with some DBMS functionality (e.g.,\nreplication, ﬁltering).Beyond better economics com-\npared to direct-attached storage, object stores have sev-\neral advantages that compensate for the cost of the\nadded network link.First, because the compute nodes\nare disconnected from the storage nodes, a system can\nprovide per-query elasticity; the DBMS can add new\ncompute nodes dynamically without having to reshufﬂe\ndata.It also allows the DBMS to use different hard-\nware for its storage nodes than compute nodes.Second,\nthe system can reassign compute nodes to other tasks\nif a DBMS is underutilized.On the other hand, in a\nshared-nothing DBMS, a node must always be online to\nhandle incoming query requests.Lastly, pushing down\ncomputation into the storage nodes is possible (and gen-\nerally advantageous).This execution strategy is known\nas “pushing the query to the data” versus “pulling the\ndata to the query” and is well understood in DBMSs.Generally, the ﬁrst two ideas are called “serverless\ncomputing”, and was introduced for cloud-native DBMSs\nby Snowﬂake [121].Other vendors have moved or\nare in the process of moving to a serverless environ-\nment for their cloud offerings.Effective utilization of\nthis model requires a hosted multi-node environment in\nwhich multiple DBMS customers are grouped onto the\nsame node(s) with a multi-tenant execution scheme.Discussion: The advent of cloud databases is another\nexample of “what goes around comes around”.Multi-\nnode shared-disk DBMSs are an old idea that histori-\ncally tended not to work out well.However, it is back in\nvogue with technology change (faster networking) and\nmoving to the cloud.In addition, time-sharing services\nwere popular in the 1970s when computers were big and\nexpensive.Cloud platforms are big time-sharing ser-\nvices, so the concept is back after a few decades.Since\nenterprises are moving everything possible to the cloud,\nwe expect this shared-disk to dominate DBMS architec-\ntures.Hence, we do not foresee shared-nothing architec-\ntures resurfacing in the future.The cloud has profoundly impacted DBMSs, causing\nthem to be completely re-architected.The movement\nof computing from on-prem to the cloud generates a\nonce-in-a-lifetime opportunity for enterprises to refac-\ntor codebases and remove bad historical technology de-\ncisions.A cloud environment also provides several ben-\neﬁts to vendors that are not possible with on-prem de-\nployments.Foremost is that vendors can track usage\n\n28\n\nSIGMOD Record, June 2024 (Vol. 53, No.2)\n\n\ftrends for all their customers: they can monitor unex-\npected behavior, performance degradations, and usage\npatterns.Moreover, they can push incremental updates\nand code patches without disrupting service.From a business perspective, open-source DBMSs\nface the danger of becoming too popular and being mon-\netized by the major cloud providers.The public spats\nbetween Amazon and ISVs like MongoDB [153] and\nElasticsearch [101] are notable examples.3.3 Data Lakes / Lakehouses\nAnother trend that the cloud platforms fomented is the\nmovement away from monolithic, dedicated data ware-\nhouses for OLAP workloads and towards data lakes\nbacked by object stores.With legacy data warehouses,\norganizations load data into the DBMS, which the sys-\ntem stashes in managed storage with proprietary for-\nmats.Vendors viewed their DBMSs as the “gatekeepers”\nfor all things related to data in an organization.However,\nthis has not been the model of many organizations, es-\npecially technology companies, for the last decade.With a data lake architecture, applications upload ﬁles\nto a distributed object store, bypassing the traditional\nroute through the DBMS [167].Users then execute\nqueries and processing pipelines on these accumulated\nﬁles using a lakehouse (a portmanteau of data ware-\nhouse and data lake) execution engine [93].These lake-\nhouse systems provide a uniﬁed infrastructure support-\ning SQL and non-SQL workloads.The latter is crucial\nas the last decade has shown that data scientists and ML\npractitioners typically use Python-based notebooks that\nuse Panda’s DataFrame API [159] to access data instead\nof SQL.Several projects leverage DBMS methods to\noptimize DataFrame processing, including Dask [181],\nPolars [61], Modin [177], and Bodo [198].Instead of using DBMS-speciﬁc proprietary ﬁle for-\nmats or inefﬁcient text-based ﬁles (e.g., CSV, JSON),\napplications write data to data lakes using open-source,\ndisk-resident ﬁle formats [203].The two most pop-\nular formats are Twitter/Cloudera’s Parquet [55] and\nMeta’s ORC [53, 140].Both of them borrow tech-\nniques from earlier columnar storage research, such as\nPAX [90], compression [87], and nested-data (JSON)\nshredding [121, 161].Apache Arrow [11] is a similar\nbinary format for exchanging in-memory data between\nsystems.Open-source libraries for reading/writing these\nformats allow disparate applications to create data ﬁles\nthat other systems then parse and consume, thereby en-\nhancing data sharing across services and business units.Discussion: Data lakes are the successor to “Big Data”\nmovement from the early 2010s, partly led by the pop-\nularity of MR systems (Sec.2.1) and column stores\n(Sec. 3.1).At ﬁrst glance, a data lake seems like a terri-\nble idea for an organization: allowing any application to\nwrite arbitrary ﬁles into a centralized repository without\n\nany governance is a recipe for integrity, discovery, and\nversioning problems [167].Lakehouses provide much-\nneeded control over these environments to help mitigate\nmany problems with meta-data, caching, and indexing\nservices [93].Additional middleware that tracks new\ndata and supports transactional updates, such as Delta\nLake [92], Iceberg [6], and Hudi [5], make lakehouses\nlook more like a traditional data warehouse.Data lakes introduce new challenges to query opti-\nmization.DBMSs have always struggled with acquir-\ning precise statistics on data,\nleading to poor query\nplan choices [154].However, a data lake system may\ncompletely lack statistics on newly ingested data ﬁles.Consequently, incorporating adaptive query processing\nstrategies is imperative in the cloud to enable a DBMS to\ndynamically modify query plans during execution based\non observed data characteristics [97, 105, 163].All the major cloud vendors now offer some variation\nof a managed data lake service.Since data lake sys-\ntems backed by object stores are much cheaper per giga-\nbyte than proprietary data warehouses, the legacy OLAP\nvendors (e.g., Teradata, Vertica) have extended their\nDBMSs to support reading data from object stores in re-\nsponse to this pricing pressure.Several independent sys-\ntems are also in this space, including Databricks [105],\nDremio [21], PrestoDB [63], and Trino [77].3.4 NewSQL Systems\nIn the late 2000s, there were multiple distributed NoSQL\nDBMSs available designed to scale horizontally to sup-\nport online applications with large number of concurrent\nusers [110].However, many organizations could not use\nthese NoSQL systems because their applications could\nnot give up strong transactional requirements.But the\nexisting RDBMSs (especially open-source ones) were\nnot able to (natively) scale across multiple machines.In\nresponse, NewSQL systems arrived in the early 2010s\nseeking to provide the scalability of NoSQL systems for\nOLTP workloads while still supporting SQL [95, 171].In other words, these new systems sought to achieve the\nsame scalability of NoSQL DBMSs from the 2000s but\nstill keep the RM and ACID transactions of the legacy\nDBMSs from the 1990s.There were two main groups of NewSQL systems.The ﬁrst was in-memory DBMSs, including H-Store [144,\n189] (commercialized as VoltDB [83]), SingleStore [69],\nMicrosoft Hekaton [128], and HyPer [146].Other start-\nup offerings included disk-oriented, distributed DBMSs\nlike NuoDB [47] and Clustrix [17].Discussion: There has yet to be a dramatic uptake in\nNewSQL DBMS adoption [96].The reason for this lack-\nluster interest is that existing DBMSs were good enough\nfor the time, which means organizations are unwilling to\ntake on the costs and risk of migrating existing applica-\ntions to newer technologies.Companies are more risk-\n\nSIGMOD Record, June 2024 (Vol. 53, No.2)\n\n29\n\n\faverse with changing OLTP DBMSs than with OLAP.If an OLTP DBMS fails, companies cannot execute the\ntransactions they need to generate revenue.In contrast,\nan OLAP DBMS failure could be limited to temporarily\ninconveniencing an analyst or data scientist.There were other restrictions in NewSQL DBMSs,\nsuch as only supporting a subset of standard SQL or\nbad performance on multi-node transactions.Some\nNewSQL products, like Microsoft’s Hekaton, were only\navailable as an extension to a legacy DBMS, requiring\nthe faster engine to use the slower DBMS’s interfaces.NewSQL vendors also incorrectly anticipated that in-\nmemory DBMS adoption would be larger in the last\ndecade.Flash vendors drove down costs while improv-\ning storage densities, bandwidth, and latencies.Higher\nDRAM costs and the collapse of persistent memory\n(e.g., Intel Optane) means that SSDs will remain domi-\nnant for OLTP DBMSs.The aftermath of NewSQL is a new crop of distributed,\ntransactional SQL RDBMSs.These include TiDB [141],\nCockroachDB [195], PlanetScale [60] (based on the\nVitess sharding middleware [80]), and YugabyteDB [86].The major NoSQL vendors also added transactions to\ntheir systems in the last decade despite previously strong\nclaims that they were unnecessary.Notable DBMSs that\nmade the shift include MongoDB, Cassandra, and Dy-\nnamoDB.This is of course due to customer requests\nthat transactions are in fact necessary.Google said this\ncogently when they discarded eventual consistency in\nfavor of real transactions with Spanner in 2012 [119].3.5 Hardware Accelerators\nThere has been a hunt for a cost-effective hardware ac-\ncelerator for DBMSs for the last 50 years.The promise\nis obvious: specialized hardware designed for a DBMS\nshould easily outperform a conventional CPU.In the 1980s, vendors fabricated custom hardware to\naccelerate DBMSs and marketed them as database ma-\nchines [107].Britton-Lee released the ﬁrst commercial\naccelerator product (IDM/500) in 1981 [192] that con-\ntained a conventional CPU with a hardware accelerator\nthat ofﬂoaded portions of a query’s execution.This ac-\ncelerator targeted a small subset of the execution path,\nand was not cost-effective.Teradata introduced its own\ndatabase machine that provided network hardware for\nsorting in-ﬂight tuples (Y-net [1]), but it was dropped\nfor a software-only solution [85].All other custom hard-\nware DBMS acceleration during the 1980s failed.Instead of building custom hardware for DBMSs, the\nlast 20 years have been about using commodity hard-\nware (FPGAs, GPUs) to accelerate queries.This is an\nenticing idea: a vendor can get the beneﬁts of a DBMS\naccelerator without the cost of fabricating the hardware.Netezza was one of the ﬁrst FPGA-based DBMSs\nthat started in the late 1990s as a fork of PostgreSQL.It used an FPGA to accelerate searches on disk-resident\npages, but originally could not search in-memory pages.Netezza corrected this limitation in a later version [2].Swarm64 attempted to sell a FPGA accelerator for Post-\ngreSQL but switched to a software-only architecture\nwithout the FPGA before they were acquired [91].Vitesse’s\nDeepgreen DB [81] is the only remaining FPGA-enhanced\nDBMS available from an ISV.There is more activity in the GPU-accelerated DBMS\nmarket.Notable GPU DBMSs include Kinetica [35],\nSqream [35], Brytlyt [13], and HeavyDB [48].If data\ndoes not ﬁt in GPU memory, then query execution is\nbottlenecked on loading data into the device, thereby\nrendering the hardware’s parallelization beneﬁts moot.Discussion: There are several conclusions that we can\ndraw from the above analysis.First, these systems are\nall focused on the OLAP market and only for RDBMSs;\nthere are essentially no data model implications to the\ndiscussion in this section.Also, OLAP workloads will\ncontinue to move aggressively to the cloud, but special-\npurpose hardware is not likely to ﬁnd acceptance unless\nit is built by the cloud vendor.Creating custom hardware just for a DBMS is not\ncost-effective for most companies.Commodity hard-\nware avoids this problem but there is still the challenge\nof integrating the hardware into a DBMS.The reason\nwhy there are more GPU DBMSs than FPGA systems\nis because there are existing support libraries available\nfor GPUs (e.g., Nvidia CUDA [169]).But cloud CPU-\nbased compute resources are incredibly cheap due to\neconomies of scale.The success of any accelerator is\nlikely to be limited to on-prem databases, but this mar-\nket is not growing at the same rate as cloud databases.Even if one could get an accelerator to market that\nshowed orders of magnitude improvement over existing\ntechnologies, that only solves half the problem needed\nfor adoption and success.A hardware-only company\nmust ﬁnd somebody to add support for its accelerator\nin a DBMS.If the accelerator is an optional add-on to\nthe DBMS, then adoption will be low and thus a DBMS\nvendor will not want to spend engineering time on sup-\nporting it.If the accelerator is a critical component of\nthe DBMS, then no vendor would outsource the devel-\nopment of such an important part to an outside vendor.The only place that custom hardware accelerators will\nsucceed is for the large cloud vendors.They can justify\nthe $50–100m R&D cost of custom hardware at their\nmassive scale.They also control the entire stack (hard-\nware and software) and can integrate their hardware at\ncritical locations.Amazon did this already with their\nRedshift AQUA accelerators [102].Google BigQuery\nhas custom components for in-memory shufﬂes [89].In spite of the long odds, we predict that there will be\nmany attempts in this space over the next two decades.30\n\nSIGMOD Record, June 2024 (Vol. 53, No.2)\n\n\f3.6 Blockchain Databases\nAs of this writing, a waning database technology fad\nis blockchains.These are decentralized log-structured\ndatabases (i.e., ledger) that maintain incremental check-\nsums using some variation of Merkle trees.These in-\ncremental checksums are how a blockchain ensures that\nthe database’s log records are immutable: applications\nuse these checksums to verify that previous database up-\ndates have not been altered.The ideal use case for blockchain databases is peer-to-\npeer applications where one cannot trust anybody.Thus, blockchain implementa-\ntions use a BFT commit protocol to determine which\ntransaction to apply to the database next.At the present time, cryptocurrencies (Bitcoin) are\nthe only use case for blockchains.In addition, there\nhave been attempts to build a usable DBMS on top of\nblockchains, notably Fluree [25], BigChainDB [12], and\nResilientDB [136].These vendors (incorrectly) promote\nthe blockchain as providing better security and auditabil-\nity that are not possible in previous DBMSs.Discussion: We are required to place trust in several en-\ntities in today’s society.When one sells a house, they\ntrust the title company to manage the transaction.The\nonly applications without real-world trust are dark web\ninteractions (e.g., money laundering).Legitimate busi-\nnesses are unwilling to pay the performance price (about\nﬁve orders of magnitude) to use a blockchain DBMS.If\norganizations trust each other, they can run a shared dis-\ntributed DBMS more efﬁciently without wasting time\nwith blockchains.To the best of our knowledge, all the\nmajor cryptocurrency exchanges run their businesses off\ntraditional RDBMSs and not blockchain systems.Blockchain proponents make additional meaningless\nclaims of achieving data resiliency through replication\nin a peer-to-peer environment.No sensible company\nwould rely on random participants on the Internet as the\nbackup solution for mission-critical databases.There is possibly a (small) market for private block-\nchain DBMSs.Amazon’s Quantum Ledger Database\n(QLDB) released in 2018 [65] provides the same im-\nmutable and veriﬁable update guarantees as a blockchain,\nbut it is not decentralized (i.e., no BFT commit protocol).Amazon built QLDB after ﬁnding no compelling use\ncase for a fully decentralized blockchain DBMS [108].3.7 Summary\nThe key takeaways from the major technological thrusts\nin database systems are as follows:\n\n•\n\n•\n\nColumnar Systems: The change to columnar stor-\nage revolutionized OLAP DBMS architectures.Cloud Databases: The cloud has upended the con-\nventional wisdom on how to build scalable DBMSs.Except for embedded DBMSs, any product not start-\ning with a cloud offering will likely fail.Data Lakes / Lakehouses: Cloud-based object stor-\nage using open-source formats will be the OLAP\nDBMS archetype for the next ten years.NewSQL Systems: They leverage new ideas but\nhave yet to have the same impact as columnar and\ncloud DBMSs.It has led to new distributed DBMSs\nthat support stronger ACID semantics as a counter\nto NoSQL’s weaker BASE guarantees.Hardware Accelerators: We do not see a use case\nfor specialized hardware outside of the major cloud\nvendors, though start-ups will continue to try.Blockchain Databases: An inefﬁcient technology\nlooking for an application.History has shown this is\nthe wrong way to approach systems development.•\n\n•\n\n•\n\n•\n\n4 Parting Comments\nOur analysis of the last two decades in databases has sev-\neral takeaways.Unfortunately, some of these are repeats\nof the warnings from the 2005 paper.Never underestimate the value of good marketing for\nbad products.The database market is highly competi-\ntive and lucrative.This competition drives vendors to\nclaim that their new technologies will solve all sorts of\nproblems and change developers’ lives for the better.Ev-\nery developer has struggled with databases before, so\nthey are especially amenable to such marketing.Infe-\nrior DBMS products have succeeded via strong market-\ning despite the existence of better options available at\nthe time: Oracle did this in the 1980s, MySQL did this\nin the 2000s, and MongoDB did this in the 2010s.These\nsystems got enough traction early on to buy them time\nto ﬁx the engineering debt they accumulated earlier.Beware of DBMSs from large non-DBMS vendors.One interesting aspect in the last ten years of databases\nis the trend of tech companies building DBMSs in-house\nthat they then spin out as open-source projects.All these\nsystems started life as purpose-built applications for a\ntech company.The company then releases the DBMS\nas an open-source project (often pushed to the Apache\nFoundation for stewardship) in hopes to achieve “free”\ndevelopment from external users.Some times they come from large companies that can\nafford to allocate resources to developing new systems.Notable examples include Meta (Hive [197], Presto [63],\nCassandra [14], RocksDB [68]) and LinkedIn (Kafka [33],\nPinot [59], Voldemort [82]).Other systems are from\nstart-ups building a data-intensive product where they\nfelt the need to also build a DBMS.The most successful\nexamples are 10gen (MongoDB) and PowerSet (HBase),\nbut there also many failed endeavors.This trend to avoid “not invented here” software is\npartly because many companies’ promotion path favors\n\nSIGMOD Record, June 2024 (Vol.53, No. 2)\n\n31\n\n\fengineers who make new internal systems, even if ex-\nisting tools are sufﬁcient.But this perversion led many\nteams without DBMS engineering experience to under-\ntake building a new system.One should be wary of\nsuch systems when a company ﬁrst open-sources them,\nas they are almost always immature technologies.Do not ignore the out-of-box experience.One of the\nsalient selling points of many non-relational DBMSs is\na better “out-of-box” experience than RDBMSs.Most\nSQL systems require one ﬁrst to create a database and\nthen deﬁne their tables before they can load data.This\nis why data scientists use Python notebooks to analyze\ndata ﬁles quickly.Every DBMS should, therefore, make\nit easy to perform in situ processing of local and cloud-\nstorage ﬁles.DuckDB’s rising popularity is partly due\nto its ability to do this well.Vendors should also consider additional challenges\nthat customers will inevitably face with databases, in-\ncluding physical design, knob tuning, schema design,\nand query tuning.There is a crucial need for what one\nof us calls “self-driving” DBMSs [173].Developers need to query their database directly.Most OLTP applications created in the last 20 years pri-\nmarily interact with databases via an abstraction layer,\nsuch as an endpoint API (e.g., REST, GraphQL) or\nan object-relational mapper (ORM) library.Such lay-\ners translate an application’s high-level requests into\ndatabase queries.ORMs also automatically handle main-\ntenance tasks, such as schema migrations.One could\nargue that since OLTP developers never write raw SQL\nin their applications, it does not matter what data model\ntheir DBMS uses as these layers hide it.ORMs are a vital tool for rapid prototyping.But they\noften sacriﬁce the ability to push logic into the DBMS\nin exchange for interoperability with multiple DBMSs.Developers fall back to writing explicit database queries\nto override the poor auto-generated queries.This is why\nusing a RDBMS that supports SQL is the better choice.The impact of AI/ML on DBMSs will be signiﬁcant.How DBMSs should interact with modern AI/ML tools\nhas recently become a crucial question, especially with\nthe advent of LLMs (e.g., ChatGPT).NL interfaces are an\nold research topic that dates back to the 1970s [139],\nbut which historically has poor outcomes and thus little\nwidespread use [88].We acknowledge LLMs have im-\npressive results for this task but caution those who think\nNL will replace SQL.Nobody will write OLTP appli-\ncations using an NL, as most generate queries using\n\nORMs.For OLAP databases, NL could prove helpful\nin constructing the initial queries for exploratory anal-\nysis.However, these queries should be exposed to a\ndashboard-like reﬁnement tool since English and other\nNLs are rife with ambiguities and impreciseness.There is a reluctance to depend on current LLM tech-\nnology for decision-making inside the enterprise, espe-\ncially with ﬁnancial data.The biggest issue is that the\noutput of an LLM is not explainable to a human.Sec-\nond, LLM systems require more training data than “tra-\nditional” ML systems (e.g., random forests, Bayesian\nmodels).Companies generally cannot outsource the cre-\nation of training data for these models to unskilled peo-\nple.For these reasons, the uptake of LLMs for enter-\nprise data will be cautiously slow.Lastly, there is a considerable amount of recent re-\nsearch on using AI/ML to optimize the DBMSs [174].Examples include ML-oriented query optimizers [152,\n156], conﬁguration tuners [200, 204], and access meth-\nods [151, 193].Although such ML-assisted optimiza-\ntions are powerful tools to improve the performance of\nDBMSs, it does not obviate the need for high-quality\nsystems engineering.5 Conclusion\nWe predict that what goes around with databases will\ncontinue to come around in upcoming decades.Another\nwave of developers will claim that SQL and the RM are\ninsufﬁcient for emerging application domains.People\nwill then propose new query languages and data models\nto overcome these problems.There is tremendous value\nin exploring new ideas and concepts for DBMSs (it is\nwhere we get new features for SQL).The database re-\nsearch community and marketplace are more robust be-\ncause of it.However, we do not expect these new data\nmodels to supplant the RM.Another concern is the wasted effort of new projects\nreimplementing the same components that are not novel\nbut necessary to have a production-ready DBMS (e.g.,\nconﬁg handlers, parsers, buffer pools).There are some efforts to-\nwards this goal, including for ﬁle formats (see Sec.3.3),\nquery optimization (e.g., Calcite [104], Orca [186]), and\nexecution engines (e.g., DataFusion [18], Velox [175]).We contend that the database community should strive\nfor a POSIX-like standard of DBMS internals to accel-\nerate interoperability.We caution developers to learn from history.In other\nwords, stand on the shoulders of those who came before\nand not on their toes.One of us will likely still be alive\nand out on bail in two decades, and thus fully expects to\nwrite a follow-up to this paper in 2044.32\n\nSIGMOD Record, June 2024 (Vol. 53, No.2)\n\n\fReferences\n\n[1] TeraData Forums.https://downloads.teradata.com/forum/\ndatabase/what-is-the-difference-between-a-ynet-and-\nbynet, September 2011.[2] Netezza TwinFin Architecture.https://www.iexpertify.com/\nlearn/netezza-twinfin-architecture/#.YYq5_S1h17Y,\nApril 2020.[3] Graph processing with sql server and azure sql database.https://docs.microsoft.com/en-us/sql/relational-\ndatabases/graphs/sql-graph-overview, 2021.[4] Georaster in oracle database.https://www.oracle.com/a/\n\ntech/docs/georaster-2021.pdf, mar 2021.[5] Apache Hudi. https://hudi.apache.org/, 2023.[6] Apache Iceberg. https://iceberg.apache.org/, 2023.[7] Oracle introduces integrated vector database to augment\ngenerative ai and dramatically increase developer produc-\nhttps://www.oracle.com/news/announcement/ocw-\ntivity.integrated-vector-database-augments-generative-ai-\n2023-09-19/, sep 2023.[8] Introducing vector search on rockset.https://rockset.com/\nblog/introducing-vector-search-on-rockset/, apr 2023.\nhttps://docs.aerospike.com/tools/aql,\n\n[9] Aerospike AQL.2024. [10] Apache AGE. https://age.apache.org, 2024.[11] Apache Arrow. https://arrow.apache.org, 2024.[12] BigchainDB. https://www.bigchaindb.com/, 2024.[13] Brytlyt. https://brytlyt.io/, 2024.[14] Apache Cassandra. https://cassandra.apache.org, 2024.[15] The Cassandra Query Language\n\n(CQL).[16] ChatGPT Plugins. https://openai.com/blog/chatgpt-\n\nplugins, March 2024.[17] Clustrix. https://clustrix.com, 2024. [18] Apache Arrow DataFusion.https://arrow.apache.org/\n\nhaystack.readthedocs.io, 2024.[21] Dremio. https://dremio.com/, 2024.[22] Apache drill. https://drill.apache.org, 2024.[23] Elasticsearch. https://www.elastic.co, 2024.[24] FAISS – Facebook AI Similarity Search.ai.facebook.com/tools/faiss/, 2024.\n\nhttps://\n\n[25] Fluree.https://flur.ee/, 2024. [26] Apache Giraph.https://giraph.apache.org, 2024. [27] Graphlab.https://en.wikipedia.org/wiki/GraphLab, 2024.[28] Apache Hbase. https://hbase.apache.org, 2024.[29] The hdf5 library & ﬁle format.https://www.hdfgroup.org/\n\nsolutions/hdf5, 2024.[30] Apache Hive. https://hive.apache.org, 2024.[31] Informix extensions and datablade modules.https:\n\n//www.ibm.com/docs/en/informix-servers/12.10?topic=\ninformix-extensions-datablade-modules, 2024.[32] Janusgraph. https://janusgraph.org/, 2024.[33] Apache Kafka. https://kafka.apache.org/, 2024.[34] kdb+. https://kx.com/, 2024.[35] Kinetica. https://www.kinetica.com/, 2024.[36] LangChain. https://langchain.com, 2024.[37] LevelDB. https://github.com/google/leveldb, 2024.[38] Apache Lucene. https://lucene.apache.org, 2024.[39] Malloy - Experimental Language.looker-open-source/malloy, 2024.[40] Milvus. https://milvus.io/, 2024. [41] MongoDB.https://mongodb.com, 2024.\n\nhttps://github.com/\n\n[42] Mongodb – querying with sql.https://docs.mongodb.com/\n\ndatalake/admin/query-with-sql/, 2024.[43] MySQL\n\n–\n\nInnoDB Full-Text\n\nIndexes.https:\n\n//dev.mysql.com/doc/refman/8.0/en/innodb-fulltext-\nindex.html, 2024.[44] Neo4j. https://neo4j.com/, 2024. [45] Amazon Neptune.https://aws.amazon.com/neptune/, 2024.[46] Network Common Data Form (NetCDF).https://\n\nwww.unidata.ucar.edu/software/netcdf/, 2024.[47] Nuodb. https://nuodb.com, 2024.[48] Heavydb. https://www.heavy.ai, 2024.[49] openCypher. https://opencypher.org, 2024. [50] Oracle graph database.https://www.oracle.com/database/\n\ngraph/, 2024.\n\nlang.org/, 2024.[51] PGQL – Property Graph Query Language.https://pgql-\n\n[52] Oracle\n\nText.https://www.oracle.com/database/\n\ntechnologies/datawarehouse-bigdata/text.html, 2024.[53] Apache ORC. https://orc.apache.org/, 2024.[54] Paradigm4 platform overview.https://www.paradigm4.com/\n\ntechnology/scidb-platform-overview/, 2024.[55] Apache Parquet. https://parquet.apache.org/, 2024.[56] Partiql – sql-compatible access to relational, semi-structured,\n\nand nested data.https://partiql.org/, 2024. [57] Apache Phoenix.https://phoenix.apache.org, 2024.[58] Pinecone. https://www.pinecone.io/, 2024.[59] Apache Pinot. https://pinot.apache.org/, 2024.[60] PlanetScale. https://planetscale.com/, 2024.[61] Polars. https://www.pola.rs, 2024. –\n[62] PostgreSQL\n\nSearch.Text\n\nFull\n\nwww.postgresql.org/docs/current/textsearch.html,\n2024.\n\nhttps://\n\n[63] PrestoDB.https://prestodb.io/, 2024. [64] PRQL – A Proposal for a Better SQL.https://prql-\n\nlang.org/, 2024.[65] Amazon Quantum Ledger Database (QLDB).https://\n\n[67] Redis. https://redis.io/, 2024.[68] RocksDB. https://rocksdb.org, 2024.[69] Singestore. https://www.singlestore.com/, 2024.[70] Apache Solr. https://solr.apache.org/, 2024.[71] SQLite. https://www.sqlite.org, 2024.[72] Sql++ – the next-generation query language for managing json\ndata.https://www.couchbase.com/sqlplusplus, 2024.[73] Teradata – creating an array data\n\ntype.https:\n\n//docs.teradata.com/r/S0Fw2AVH8ff3MDA0wDOHlQ/\nun3kj~t3qMDO66LF4YXuiw, 2024.[74] Tigergraph. https://www.tigergraph.com/, 2024.[75] Tigergraph – gsql. https://www.tigergraph.com/gsql/,\n\n2024.[76] Tiledb. https://tiledb.com, 2024.[77] Trino. https://trino.io/, 2024.[78] Turi. http://turi.com/, 2024.[79] Vespa. https://vespa.ai/, 2024.[80] Vitess. https://vitess.io, 2024. [81] Vitesse Deepgreen DB.products/deepgreen-db/, 2024.\n\nhttps://www.vitessedata.com/\n\n[82] Project Voldemort.https://www.project-voldemort.com,\n\n2024.[83] Voltdb. https://www.voltactivedata.com/, 2024.[84] Weaviate. https://weaviate.io, 2024.[85] Dbc 1012. https://en.wikipedia.org/wiki/DBC_1012, 2024.[86] YugabyteDB. https://www.yugabyte.com/, 2024. [87] D. J. Abadi.Query Execution in Column-Oriented Database\n\nSystems.PhD thesis, MIT, 2008.\n\ndatafusion/, 2024.[19] Microsoft DiskANN. DiskANN, 2024. [20] Django\n\nHaystack.https://github.com/microsoft/\n\nhttps://django-\n\naws.amazon.com/qldb/, 2024.[66] The\n\nraster\nrasdaman\nwww.rasdaman.org, 2024.\n\narray\n\ndatabase.http://\n\nSIGMOD Record, June 2024 (Vol. 53, No.2)\n\n33\n\n\f[88] K. Affolter, K. Stockinger, and A. Bernstein.A compara-\ntive survey of recent natural language interfaces for databases.VLDB J., 28(5):793–819, 2019. doi: 10.1007/s00778-019-\n00567-8.[89] H. Ahmadi. In-memory query execution in google bigquery.https://cloud.google.com/blog/products/bigquery/in-\nmemory-query-execution-in-google-bigquery, Aug 2016.[90] A. Ailamaki, D. J. DeWitt, M. D. Hill, and M. Skounakis.Weaving relations for cache performance.In VLDB, volume 1,\npages 169–180, 2001. [91] G. Anadiotis.Open source postgresql on steroids: Swarm64\ndatabase acceleration software for performance improvement\nhttps://www.zdnet.com/article/open-\nand analytics.source-postgresql-on-steroids-swarm64-database-\nacceleration-software-for-performance-improvement-\nand-analytics/, apr 2023.[92] M. Armbrust, T. Das, L. Sun, B. Yavuz, S. Zhu, M. Murthy,\nJ. Torres, H. van Hovell, A. Ionescu, A. Łuszczak, et al.Proceedings of the VLDB Endowment, 13(12):3411–\n3424, 2020.[93] M. Armbrust, A. Ghodsi, R. Xin, and M. Zaharia.Lakehouse:\na new generation of open platforms that unify data warehousing\nand advanced analytics.In Proceedings of CIDR, page 8, 2021.[94] N. Armenatzoglou, S. Basu, N. Bhanoori, M. Cai, N. Chainani,\nK. Chinta, V. Govindaraju, T. J.Green, M. Gupta, S. Hillig,\nE. Hotinger, Y. Leshinksy, J. Liang, M. McCreedy, F. Nagel,\nI. Pandis, P. Parchas, R. Pathak, O. Polychroniou, F. Rahman,\nG. Saxena, G. Soundararajan, S. Subramanian, and D. Terry.Amazon redshift re-invented. In Proceedings of the 2022 Inter-\nnational Conference on Management of Data, SIGMOD ’22,\npages 2205–2217, 2022. doi: 10.1145/3514221.3526045.[95] M. Aslett. How will the database incumbents respond to\n\nNoSQL and NewSQL?The 451 Group, April 2011. [96] M. Aslett.Ten years of NewSQL: Back to the future of dis-\ntributed relational databases.The 451 Group, June 2021. [97] S. Babu and P. Bizarro.Adaptive query processing in the look-\n\ning glass.In CIDR, pages 238–249, January 2005.[98] D. F. Bacon, N. Bales, N. Bruno, B. F. Cooper, A. Dickinson,\nA. Fikes, C. Fraser, A. Gubarev, M. Joshi, E. Kogan, A. Lloyd,\nS. Melnik, R. Rao, D. Shue, C. Taylor, M. van der Holst, and\nIn Pro-\nD. Woodford.Spanner: Becoming a sql system.ceedings of the 2017 ACM International Conference on Man-\nagement of Data, SIGMOD ’17, pages 331–343, 2017. doi:\n10.1145/3035918.3056103.[99] J. Baker, C. Bond, J. C. Corbett, J. Furman, A. Khorlin, J. Lar-\nson, J.-M. Leon, Y. Li, A. Lloyd, and V. Yushprakh.Megastore:\nProviding scalable, highly available storage for interactive ser-\nIn Proceedings of the Conference on Innovative Data\nvices.system Research (CIDR), pages 223–234, 2011.[100] N. Bakibayev, D. Olteanu, and J. Závodný.Fdb: A query en-\ngine for factorised relational databases. Proc.VLDB Endow., 5\n(11):1232–1243, jul 2012. doi: 10.14778/2350229.2350242. [101] S. Banon.Amazon: NOT OK - why we had to change Elas-\nhttps://www.elastic.co/blog/why-license-\n\ntic licensing.change-aws, jan 2021. [102] J. Barr.AQUA (Advanced Query Accelerator) –\nfor Your Amazon Redshift Queries.A Speed Boost\nhttps://aws.amazon.com/blogs/aws/new-aqua-advanced-\nquery-accelerator-for-amazon-redshift/, Apr 2021.[103] P. Baumann. A database array algebra for spatio-temporal data\nand beyond.In Next Generation Information Technologies and\nSystems, 4th International Workshop, NGITS’99, volume 1649\nof Lecture Notes in Computer Science, pages 76–93, 1999. doi:\n10.1007/3-540-48521-X_7.[104] E. Begoli, J. Camacho-Rodríguez, J. Hyde, M. J. Mior, and\nD. Lemire.Apache calcite: A foundational framework for\noptimized query processing over heterogeneous data sources.In Proceedings of the 2018 International Conference on Man-\nagement of Data, SIGMOD ’18, pages 221–230, 2018. doi:\n10.1145/3183713.3190662.[105] A. Behm, S. Palkar, U. Agarwal, T. Armstrong, D. Cashman,\nA. Dave, T. Greenstein, S. Hovsepian, R. Johnson, A. Sai Krish-\nnan, P. Leventis, A. Luszczak, P. Menon, M. Mokhtar, G. Pang,\nS. Paranjpye, G. Rahn, B. Samwel, T. van Bussel, H. van Hov-\nell, M. Xue, R. Xin, and M. Zaharia.Photon: A fast query\nengine for lakehouse systems.In Proceedings of the 2022 In-\nternational Conference on Management of Data, SIGMOD ’22,\npages 2326–2339, 2022. doi: 10.1145/3514221.3526054.[106] P. A. Boncz, M. Zukowski, and N. Nes.Monetdb/x100: Hyper-\n\npipelining query execution.In CIDR, pages 225–237, 2005. [107] H. Boral and D. J. DeWitt.Database machines: An idea whose\ntime passed?A critique of the future of database machines.pages 166–187, 1983. doi: 10.1007/978-3-642-69419-6\n_10.https://www.tbray.org/\nnov\n\n[108] T. Bray. AWS and Blockchain.ongoing/When/202x/2022/11/19/AWS-Blockchain,\n2019.\\\n\n[109] P. Carbone, A. Katsifodimos, S. Ewen, V. Markl, S. Haridi, and\nK. Tzoumas.Apache ﬂink: Stream and batch processing in a\nsingle engine.The Bulletin of the Technical Committee on Data\nEngineering, 38(4), 2015.[110] R. Cattell. Scalable sql and nosql data stores.SIGMOD Rec.,\n\n39:12–27, 2011. [111] F. Chang, J.Dean, S. Ghemawat, W. C. Hsieh, D. A. Wallach,\nM. Burrows, T. Chandra, A. Fikes, and R. E. Gruber.Bigtable:\nA distributed storage system for structured data.In Proceedings\nof the USENIX Symposium on Operating Systems Design and\nImplementation, OSDI ’06, pages 205–218, 2006.[112] S. Chaudhuri and G. Weikum.Rethinking database system ar-\nchitecture: Towards a self-tuning risc-style database system.In\nVLDB 2000, Proceedings of 26th International Conference on\nVery Large Data Bases, pages 1–10, 2000.[113] C. Chin. The rise and fall of the olap cube.https:\n\n//www.holistics.io/blog/the-rise-and-fall-of-the-\nolap-cube/, January 2020.[114] M. Chock, A. F. Cardenas, and A. Klinger.Database struc-\nture and manipulation capabilities of a picture database man-\nagement system (picdms).IEEE Transactions on Pattern Anal-\nysis and Machine Intelligence, PAMI-6(4):484–492, 1984. doi:\n10.1109/TPAMI.1984.4767553.Commun. ACM, 13(6):377–387, jun 1970. doi:\n10.1145/362384.362685.[116] E. F. Codd. Further normalization of the data base relational\nmodel.Research Report / RJ / IBM / San Jose, California,\nRJ909, 1971.[117] W. W. W. Consortium. Overview of sgml resources.https:\n\n//www.w3.org/MarkUp/SGML/, 2004.[118] W. W. W. Consortium. Extensible Markup Language (XML).https://www.w3.org/XML/, 2016. [119] J. C. Corbett, J.Dean, M. Epstein, A. Fikes, C. Frost, J. Furman,\nS. Ghemawat, A. Gubarev, C. Heiser, P. Hochschild, W. Hsieh,\nS. Kanthak, E. Kogan, H. Li, A. Lloyd, S. Melnik, D. Mwaura,\nD. Nagle, S. Quinlan, R. Rao, L. Rolig, M. S. Yasushi Saito,\nC. Taylor, R. Wang, and D. Woodford.Spanner: Google’s\nGlobally-Distributed Database.Are you sure you want to use\nMMAP in your database management system?In Conference\non Innovative Data Systems Research. www.cidrdb.org, 2022.[121] B. Dageville, T. Cruanes, M. Zukowski, V. Antonov, A. Avanes,\nJ. Bock, J. Claybaugh, D. Engovatov, M. Hentschel, J. Huang,\nA. W. Lee, A. Motivala, A. Q. Munir, S. Pelley, P. Povinec,\nG. Rahn, S. Triantafyllis, and P. Unterbrunner.The snowﬂake\nIn Proceedings of the 2016 Inter-\nelastic data warehouse.national Conference on Management of Data, SIGMOD ’16,\npages 215–226, 2016. doi: 10.1145/2882903.2903741.[122] J. Dean and S. Ghemawat.MapReduce: Simpliﬁed data pro-\ncessing on large clusters.USENIX Associa-\ntion, Dec. 2004.34\n\nSIGMOD Record, June 2024 (Vol.53, No. 2)\n\n\f[123] J. Dean and S. Ghemawat.Mapreduce: A ﬂexible data process-\n\ning tool.Commun. ACM, 53(1):72–77, Jan. 2010. [124] A. Dearmer.Storing apache hadoop data on the cloud - hdfs\nhttps://www.xplenty.com/blog/storing-apache-\n\nvs. s3.hadoop-data-cloud-hdfs-vs-s3/, November 2019.[125] G. DeCandia, D. Hastorun, M. Jampani, G. Kakulapati, A. Lak-\nshman, A. Pilchin, S. Sivasubramanian, P. Vosshall, and W. Vo-\ngels.Dynamo: Amazon’s highly available key-value store.SIGOPS Oper. Syst. Rev., 41(6):205–220, oct 2007.[126] A. Deutsch, N. Francis, A.Green, K. Hare, B. Li, L. Libkin,\nT. Lindaaker, V. Marsault, W. Martens, J. Michels, F. Murlak,\nS. Plantikow, P. Selmer, O. van Rest, H. Voigt, D. Vrgoˇc,\nM. Wu, and F. Zemke.Graph pattern matching in gql and\nIn Proceedings of the 2022 International Confer-\nsql/pgq.ence on Management of Data, SIGMOD ’22, pages 2246–2258,\n2022. doi: 10.1145/3514221.3526057.[127] D. DeWitt and J. Gray. Parallel database systems: The future\nof high performance database systems.Commun. ACM, 35(6):\n85–98, jun 1992. doi: 10.1145/129888.129894.[128] C. Diaconu, C. Freedman, E. Ismert, P. Larson, P. Mit-\ntal, R. Stonecipher, N. Verma, and M. Zwilling.Hekaton:\nIn Proceed-\nSQL server’s memory-optimized OLTP engine.ings of the ACM SIGMOD International Conference on Man-\ndoi: 10.1145/\nagement of Data, pages 1243–1254, 2013. 2463676.2463710.[129] M. Elhemali, N. Gallagher, N. Gordon, J. Idziorek, R. Krog,\nC. Lazier, E. Mo, A. Mritunjai, S. Perianayagam, T. Rath,\nS. Sivasubramanian, J. C. S. III, S. Sosothikul, D. Terry, and\nA. Vig.Amazon DynamoDB: A scalable, predictably perfor-\nmant, and fully managed NoSQL database service.In USENIX\nAnnual Technical Conference, pages 1037–1048, July 2022.[130] J. Fan, A. G. S. Raj, and J. M. Patel.The case against special-\nized graph analytics engines.In Seventh Biennial Conference\non Innovative Data Systems Research, CIDR, 2015.[131] B. Fitzpatrick. Distributed caching with memcached.Linux J.,\n\n2004(124):5, aug 2004. ISSN 1075–3583.[132] M. Freitag, M. Bandle, T. Schmidt, A. Kemper, and T. Neu-\nmann.Adopting worst-case optimal joins in relational database\nsystems. Proc.[133] H. Fu, C. Liu, B. Wu, F. Li, J. Tan, and J. Sun.Catsql: To-\nwards real world natural language to sql applications. Proc.VLDB Endow., 16(6):1534–1547, feb 2023. doi: 10.14778/\n3583140.3583165.[134] S. Ghemawat, H. Gobioff, and S.-T. Leung.The google ﬁle\nsystem. SIGOPS Oper.Syst. Rev., 37(5):29–43, oct 2003.ISSN\n0163-5980. doi: 10.1145/1165389.945450. [135] J.Gray, A. Bosworth, A. Layman, and H. Pirahesh.Data\ncube: A relational aggregation operator generalizing group-by,\nIn Proceedings of the International\ncross-tab, and sub-total.Conference on Data Engineering, pages 152–159, 1996. doi:\n10.1109/ICDE.1996.492099.[136] S. Gupta, S. Rahnama, J. Hellings, and M. Sadoghi.Re-\nProc. silientdb: Global scale resilient blockchain fabric.10.14778/\nVLDB Endow., 13(6):868–883, 2020.3380750.3380757.\n\ndoi:\n\n[137] E. Hanson and A. Comet.Why Your Vector Database Should\nNot be a Vector Database.https://www.singlestore.com/\nblog/why-your-vector-database-should-not-be-a-\nvector-database/, April 2023.[138] G. Harrison. How WiredTiger Revolutionized MongoDB.https://www.dbta.com/Columns/MongoDB-Matters/How-\nWiredTiger-Revolutionized-MongoDB-145510.aspx,\n2021.\n\nmar\n\n[139] G. G. Hendrix, E. D. Sacerdoti, D. Sagalowicz, and J. Slocum.Developing a natural language interface to complex data. ACM\nTrans.Database Syst., 3(2):105–147, jun 1978. doi: 10.1145/\n320251.320253. [140] Y. Huai, A. Chauhan, A.Gates, G. Hagleitner, E. N. Hanson,\nO. O’Malley, J. Pandey, Y. Yuan, R. Lee, and X. Zhang.Major\ntechnical advancements in apache hive.In Proceedings of the\n2014 ACM SIGMOD international conference on Management\nof data, pages 1235–1246, 2014.[141] D. Huang, Q. Liu, Q. Cui, Z. Fang, X. Ma, F. Xu, L. Shen,\nL. Tang, Y. Zhou, M. Huang, W. Wei, C. Liu, J. Zhang,\nJ. Li, X. Wu, L. Song, R. Sun, S. Yu, L. Zhao, N. Cameron,\nL. Pei, and X. Tang.Tidb: A raft-based htap database. Proc.VLDB Endow., 13(12):3072–3084, aug 2020. doi: 10.14778/\n3415478.3415535.[142] K. E. Iverson. A Programming Language.John Wiley & Sons,\n\nInc., 1962. ISBN 0471430145.[143] A. Jindal, S. Madden, M. Castellanos, and M. Hsu.Graph ana-\nlytics using vertica relational database.In 2015 IEEE Interna-\ntional Conference on Big Data, pages 1191–1200, 2015.[144] R. Kallman, H. Kimura, J. Natkins, A. Pavlo, A. Rasin,\nS. Zdonik, E. P. C. Jones, S. Madden, M. Stonebraker, Y. Zhang,\nJ. Hugg, and D. J. Abadi.H-store: A high-performance, dis-\ntributed main memory transaction processing system.Proc. VLDB Endow., 1(2):1496–1499, aug 2008. doi: 10.14778/\n1454159.1454211.[145] A. Kane. pgvector. https://github.com/pgvector/pgvector,\n\n2024.[146] A. Kemper and T. Neumann.Hyper: A hybrid oltp&olap main\nmemory database system based on virtual memory snapshots.In Proceedings of the 27th International Conference on Data\nEngineering, pages 195–206.IEEE Computer Society, 2011.\ndoi: 10.1109/ICDE.2011.5767867.[147] T. Kersten, V. Leis, A. Kemper, T. Neumann, A. Pavlo, and\nP. Boncz.Everything you always wanted to know about com-\npiled and vectorized queries but were afraid to ask.Proc. VLDB Endow., 11(13):2209–2222, jan 2019. doi: 10.14778/\n3275366.3284966. [148] R. Kimball.The Data Warehouse Toolkit: Practical Techniques\nfor Building Dimensional Data Warehouses.John Wiley, 1996. [149] R. Kimball and K. Strehlo.Why decision support fails and how\n\nto ﬁx it.SIGMOD Rec., 24(3):92–97, 1995.[150] M. Kornacker, A. Behm, V. Bittorf, T. Bobrovytsky, C. Ching,\nA. Choi, J. Erickson, M. Grund, D. Hecht, M. Jacobs, I. Joshi,\nL. Kuff, D. Kumar, A. Leblang, N. Li, I. Pandis, H. Robinson,\nD. Rorke, S. Rus, J. Russell, D. Tsirogiannis, S. Wanderman-\nMilne, and M. Yoder.Impala: A modern, open-source sql en-\ngine for hadoop.In CIDR, 2015. [151] T. Kraska, A. Beutel, E. H. Chi, J.Dean, and N. Polyzotis. The\ncase for learned index structures.In Proceedings of the 2018\nInternational Conference on Management of Data, SIGMOD\n’18, pages 489–504, 2018. doi: 10.1145/3183713.3196909.[152] S. Krishnan, Z. Yang, K. Goldberg, J. Hellerstein, and I. Sto-\nica.Learning to optimize join queries with deep reinforcement\nlearning, 2018.URL https://arxiv.org/abs/1808.03196. [153] F. Lardinois.Aws gives open source the middle ﬁn-\nger.https://techcrunch.com/2019/01/09/aws-gives-open-\nsource-the-middle-finger/, jan 2019.[154] V. Leis, A. Gubichev, A. Mirchev, P. A. Boncz, A. Kemper,\nand T. Neumann.How good are query optimizers, really?doi: 10.14778/\nProc. VLDB Endow., 9(3):204–215, 2015.In Proceedings\nof the Twelfth ACM SIGACT-SIGMOD-SIGART Symposium\non Principles of Database Systems, pages 1–16, 1993. doi:\n10.1145/153850.153851.[156] R. Marcus, P. Negi, H. Mao, N. Tatbul, M. Alizadeh, and\nT. Kraska.Bao: Making learned query optimization practical.In Proceedings of the 2021 International Conference on Man-\nagement of Data, SIGMOD ’21, pages 1275–1288, 2021. doi:\n10.1145/3448016.3452838.[157] D. McDiarmid. Vector search with clickhouse.https://\nclickhouse.com/blog/vector-search-clickhouse-p2, May\n2023.SIGMOD Record, June 2024 (Vol.53, No. 2)\n\n35\n\n\f[158] C. McDonnell.The graph-relational database, deﬁned.https://www.edgedb.com/blog/the-graph-relational-\ndatabase-defined, March 2022.[159] W. McKinney et al. Data structures for statistical computing\nin python.In Proceedings of the 9th Python in Science Confer-\nence, volume 445, pages 51–56, 2010.[160] F. McSherry. Scalability! but at what cost?http:\n\n//www.frankmcsherry.org/graph/scalability/cost/2015/\n01/15/COST.html, January 2015.[161] S. Melnik, A. Gubarev, J. J.Long, G. Romer, S. Shivakumar,\nM. Tolton, and T. Vassilakis.Dremel: Interactive analysis of\nweb-scale datasets.Proc. VLDB Endow., 3(12):330–339, sep\n2010.ISSN 2150-8097. doi: 10.14778/1920841.1920886.[162] S. Melnik, A. Gubarev, J. J.Long, G. Romer, S. Shivakumar,\nM. Tolton, T. Vassilakis, H. Ahmadi, D. Delorey, S. Min, M. Pa-\nsumansky, and J. Shute.Dremel: A decade of interactive sql\nanalysis at web scale.Proc. VLDB Endow., 13(12):3461–3472,\naug 2020.ISSN 2150-8097. doi: 10.14778/3415478.3415568.[163] P. Menon, A. Ngom, T. C. Mowry, A. Pavlo, and L. Ma.Per-\nmutable compiled queries: Dynamically adapting compiled\nqueries without recompiling.Proc. VLDB Endow., 14(2):101–\n113, 2020. doi: 10.14778/3425879.3425882.[164] C. Metz. duce. google_caffeine_explained/, September 2010.Google search index splits with mapre-\nhttps://www.theregister.com/2010/09/09/\n\n[165] J. Michels, K. Hare, K. Kulkarni, C. Zuzarte, Z. H. Liu,\nB. Hammerschmidt, and F. Zemke.The new and improved sql:\n2016 standard.SIGMOD Rec., 47(2):51–60, dec 2018. doi:\n10.1145/3299887.3299897.[166] D. Misev and P. Baumann.Sql support for multidimen-\nsional arrays.Technical Report 34, Jacobs University, July\n2017.URL https://nbn-resolving.org/urn:nbn:de:gbv:\n579-opus-1007237.[167] F. Nargesian, E. Zhu, R. J. Miller, K. Q. Pu, and P. C. Arocena.Data lake management: Challenges and opportunities. Proc.VLDB Endow., 12(12):1986–1989, aug 2019. doi: 10.14778/\n3352063.3352116.[168] H. Q. Ngo, C. Ré, and A. Rudra.Skew strikes back: New\ndevelopments in the theory of join algorithms.SIGMOD Rec.,\n42(4):5–16, feb 2014. doi: 10.1145/2590989.2590991.[169] NVIDIA, P. Vingelmann, and F. H. Fitzek. Cuda toolkit.https:\n\n//developer.nvidia.com/cuda-toolkit, 2020.In Pro-\nceedings of the FREENIX Track: 1999 USENIX Annual Tech-\nnical Conference, pages 183–191, 1999.[171] A. Pavlo and M. Aslett. What’s really new with newsql?SIG-\n\nMOD Record, 45(2):45–55, Sep 2016.[172] A. Pavlo, E. Paulson, A. Rasin, D. J. Abadi, D. J. DeWitt,\nS. Madden, and M. Stonebraker.A comparison of approaches\nto large-scale data analysis.In Proceedings of the ACM SIG-\nMOD International Conference on Management of Data, pages\n165–178, 2009.[173] A. Pavlo, G. Angulo, J. Arulraj, H. Lin, J. Lin, L. Ma, P. Menon,\nT. Mowry, M. Perron, I. Quah, S. Santurkar, A. Tomasic,\nS. Toor, D. V. Aken, Z. Wang, Y. Wu, R. Xian, and T. Zhang.In CIDR 2017,\nSelf-driving database management systems.Conference on Innovative Data Systems Research, 2017.[174] A. Pavlo, M. Butrovich, A. Joshi, L. Ma, P. Menon, D. V. Aken,\nL. Lee, and R. Salakhutdinov.External vs. internal: An essay\non machine learning agents for autonomous database manage-\nment systems.IEEE Data Eng. Bull., 42(2):32–46, 2019.[175] P. Pedreira, O. Erling, M. Basmanova, K. Wilfong, L. Sakka,\nK. Pai, W. He, and B. Chattopadhyay.Velox: Meta’s uniﬁed\nexecution engine. Proc.VLDB Endow., 15(12):3372–3384, aug\n2022. doi: 10.14778/3554821.3554829.The composable\ndata management system manifesto. Proc.VLDB Endow., 16\n(10):2679–2685, jun 2023. doi: 10.14778/3603581.3603604.[177] D. Petersohn, S. Macke, D. Xin, W. Ma, D. Lee, X. Mo,\nJ. E. Gonzalez,\nJ. M. Hellerstein, A. D. Joseph, and\nA. Parameswaran.Towards scalable dataframe systems. Proc.VLDB Endow., 13(12):2033–2046, jul 2020. doi: 10.14778/\n3407790.3407807.[178] D. Petkovic. SQL/JSON standard: Properties and deﬁciencies.doi: 10.1007/\n\nDatenbank-Spektrum, 17(3):277–287, 2017.\ns13222-017-0267-4. [179] D. Pritchett.BASE: An Acid Alternative:\n\nIn Partitioned\nDatabases, Trading Some Consistency for Availability Can\nLead to Dramatic Improvements in Scalability.ACM Queue,\n6(3):48–55, may 2008. doi: 10.1145/1394127.1394128.[180] M. Raasveldt and H. Mühleisen.Duckdb: An embeddable ana-\nlytical database.In Proceedings of the 2019 International Con-\nference on Management of Data, SIGMOD ’19, pages 1981–\n1984, 2019. doi: 10.1145/3299869.3320212.[181] M. Rocklin. Dask: Parallel computation with blocked algo-\nrithms and task scheduling.[182] F. Rusu. Multidimensional array data management. Found.doi: 10.1561/\n\nTrends Databases, 12(2-3):69–220, 2023. 1900000069.[183] S. Sakr, A. Bonifati, H. Voigt, A. Iosup, K. Ammar, R. An-\ngles, W. Aref, M. Arenas, M. Besta, P. A. Boncz, K. Daudjee,\nE. D. Valle, S. Dumbrava, O. Hartig, B. Haslhofer, T. Hege-\nman, J. Hidders, K. Hose, A. Iamnitchi, V. Kalavri, H. Kapp,\nW. Martens, M. T. Özsu, E. Peukert, S. Plantikow, M. Ragab,\nM. R. Ripeanu, S. Salihoglu, C. Schulz, P. Selmer, J. F. Se-\nqueda, J. Shinavier, G. Szárnyas, R. Tommasini, A. Tumeo,\nA. Uta, A. L. Varbanescu, H.-Y.Wu, N. Yakovets, D. Yan, and\nE. Yoneki.The future is big graphs: A community view on\ngraph processing systems.Commun. ACM, 64(9):62–71, aug\n2021. doi: 10.1145/3434642.[184] G. Salton and M. E. Lesk.The smart automatic document re-\ntrieval systems–an illustration.Commun. ACM, 8(6):391–398,\njun 1965. doi: 10.1145/364955.364990.[185] R. Sethi, M. Traverso, D. Sundstrom, D. Phillips, W. Xie,\nY.Sun, N. Yegitbasi, H. Jin, E. Hwang, N. Shingte, and\nIn 2019 IEEE 35th\nC. Berner. Presto: Sql on everything.International Conference on Data Engineering (ICDE), pages\n1802–1813, 2019. doi: 10.1109/ICDE.2019.00196.[186] M. A. Soliman, L. Antova, V. Raghavan, A. El-Helw, Z. Gu,\nE. Shen, G. C. Caragea, C. Garcia-Alvarado, F. Rahman,\nM. Petropoulos, F. Waas, S. Narayanan, K. Krikellas, and\nR. Baldwin.Orca: a modular query optimizer architecture for\nIn Proceedings of the 2014 ACM SIGMOD Inter-\nbig data.national Conference on Management of Data, SIGMOD ’14,\npages 337–348, 2014. doi: 10.1145/2588555.2595637.[187] M. Stonebraker. The case for polystores.https://\n\nwp.sigmod.org/?p=1629, 2015.[188] M. Stonebraker and J. Hellerstein.Readings in Database Sys-\ntems, chapter What Goes Around Comes Around, pages 2–41. 4th edition, 2005.[189] M. Stonebraker, S. Madden, D. J. Abadi, S. Harizopoulos,\nN. Hachem, and P. Helland.The end of an architectural era:\n(it’s time for a complete rewrite).In Proceedings of the 33rd\nInternational Conference on Very Large Data Bases, VLDB\n’07, pages 1150–1160.VLDB Endowment, 2007. [190] M. Stonebraker, D. Abadi, D. J. DeWitt, S. Madden, E. Paulson,\nA. Pavlo, and A. Rasin.Mapreduce and parallel dbmss: Friends\nor foes?Commun. ACM, 53(1):64–71, Jan. 2010.[191] M. Stonebraker, P. Brown, A. Poliakov, and S. Raman. The ar-\nchitecture of scidb.In Scientiﬁc and Statistical Database Man-\nagement - 23rd International Conference, SSDBM 2011, vol-\nume 6809 of Lecture Notes in Computer Science, pages 1–16.Springer, 2011. doi: 10.1007/978-3-642-22351-8\n\n_1. [192] L. Sullivan.Performance issues in mid-sized relational\ndatabase machines.Master’s thesis, Rochester Institute of Tech-\nnology, 1989.\\\n\n36\n\nSIGMOD Record, June 2024 (Vol.53, No. 2)\n\n\f[193] Z. Sun, X. Zhou, and G. Li.Learned index: A comprehen-\nsive experimental evaluation. Proc.VLDB Endow., 16(8):1992–\n2004, apr 2023. doi: 10.14778/3594512.3594528.Google\n\ndumps mapreduce\n\n[194] Y.\n\nSverdlik.in\nfa-\nhttps:\n\nvor of new hyper-scale\n//www.datacenterknowledge.com/archives/2014/06/\n25/google-dumps-mapreduce-favor-new-hyper-scale-\nanalytics-system, June 2014.\n\nanalytics\n\nsystem.[195] R. Taft, I. Sharif, A. Matei, N. VanBenschoten, J. Lewis,\nT. Grieger, K. Niemi, A.Woods, A. Birzin, R. Poss, P. Bardea,\nA. Ranade, B. Darnell, B. Gruneir, J. Jaffray, L. Zhang, and\nP. Mattis.Cockroachdb: The resilient geo-distributed SQL\ndatabase.In Proceedings of the 2020 International Conference\non Management of Data, SIGMOD, pages 1493–1509, 2020.\ndoi: 10.1145/3318464.3386134.[196] D. ten Wolde, T. Singh, G. Szarnyas, and P. Boncz.Duckpgq:\nEfﬁcient property graph queries in an analytical\nrdbms.In CIDR, 2023. URL https://www.cidrdb.org/cidr2023/\npapers/p66-wolde.pdf.[197] A. Thusoo, J. S. Sarma, N. Jain, Z. Shao, P. Chakka, N. Zhang,\nS. Antony, H. Liu, and R. Murthy.Hive - a petabyte scale\ndata warehouse using hadoop.In International Conference on\nData Engineering (ICDE 2010), pages 996–1005, 2010. doi:\n10.1109/ICDE.2010.5447738.[198] E. Totoni, T. A. Anderson, and T. Shpeisman.HPAT: high per-\nformance analytics with scripting ease-of-use.In Proceedings\n\nof the International Conference on Supercomputing, pages 9:1–\n9:10, 2017. doi: 10.1145/3079079.3079099.Understanding the document-relational\nhttps://fauna.com/blog/what-is-a-document-\n\n[200] D. Van Aken, A. Pavlo, G. J. Gordon, and B. Zhang.Auto-\nmatic database management system tuning through large-scale\nIn Proceedings of the 2017 ACM Inter-\nmachine learning.national Conference on Management of Data, SIGMOD ’17,\npages 1009–1024, 2017. doi: 10.1145/3035918.3064029.[201] M. Zaharia, R. S. Xin, P. Wendell, T. Das, M. Armbrust,\nA. Dave, X. Meng, J. Rosen, S. Venkataraman, M. J. Franklin,\nA. Ghodsi, J. Gonzalez, S. Shenker, and I. Stoica.Apache\nspark: a uniﬁed engine for big data processing.Commun. ACM,\n59(11):56–65, oct 2016. doi: 10.1145/2934664.[202] C. Zaniolo. The database language GEM.In SIGMOD, pages\n\n207–218, 1983.[203] X. Zeng, Y. Hui, J. Shen, A. Pavlo, W. McKinney, and\nH. Zhang.An empirical evaluation of columnar storage for-\nmats.Proc. VLDB Endow., 17(2):148–161, 2023.[204] X. Zhang, Z. Chang, Y. Li, H. Wu, J. Tan, F. Li, and\nB. Cui.Facilitating database tuning with hyper-parameter op-\ntimization: a comprehensive experimental evaluation.Proc. VLDB Endow., 15(9):1808–1821, may 2022. doi: 10.14778/\n3538598.3538604.SIGMOD Record, June 2024 (Vol. 53, No. 2)\n\n37",
          "time": 2309.61075592041,
          "input_token_size": 26196,
          "output_token_size": 71,
          "original_provenance_id": 0
        }
      ],
      "metadata": {
        "question_id": "whatgoesaround-sigmodrec2024_dc66a027",
        "created_at": 1749665320.668083,
        "processing_time": 2319.226855278015,
        "processing_complete": true,
        "max_provenances": 5
      },
      "source_info": {
        "selected_from": "test_outputs_prev",
        "reason": "shorter_provenance",
        "sentence_count": 964,
        "provenance_count": 1,
        "alternatives": [
          {
            "source": "test_outputs_prev",
            "sentence_count": 964,
            "provenance_count": 1,
            "has_answer": true
          },
          {
            "source": "test_outputs_prev1",
            "sentence_count": 999999,
            "provenance_count": 0,
            "has_answer": true
          }
        ],
        "selection_timestamp": "2025-06-17T16:48:52.939083"
      }
    }
  },
  {
    "e52ec885": {
      "question": "Compare the roles of data lakes and lakehouses as described in the document.",
      "answer": "Data Lakes: Applications upload files to a distributed object store, bypassing the traditional route through the DBMS, and allow for unstructured data storage.\n\nLakehouses: Provide a unified infrastructure supporting SQL and non-SQL workloads, offering control over data governance and optimization for processing pipelines.",
      "provenance": [],
      "metadata": {
        "question_id": "whatgoesaround-sigmodrec2024_e52ec885",
        "created_at": 1749774389.6497512,
        "processing_complete": false,
        "max_provenances": 5
      },
      "source_info": {
        "selected_from": "test_outputs_prev1",
        "reason": "default",
        "sentence_count": 999999,
        "provenance_count": 0,
        "alternatives": [
          {
            "source": "test_outputs_prev1",
            "sentence_count": 999999,
            "provenance_count": 0,
            "has_answer": true
          }
        ],
        "selection_timestamp": "2025-06-17T16:48:52.939083"
      }
    }
  },
  {
    "e5baf171": {
      "question": "Summarize the impact of columnar storage on OLAP systems as described in the document.",
      "answer": "- Columnar storage revolutionized OLAP DBMS architectures.\n- All vendors active in the data warehouse market have converted their offerings from a row store to a column store.\n- Columnar data compression is more effective than row-based data.\n- Column-oriented engines process a whole column using vectorized instructions, improving performance.\n- The transition to columnar storage has led to significant changes in the design of DBMSs.\n- New vendors have entered the market with column store offerings, such as Amazon’s Redshift and Google’s BigQuery.\n- Column stores have taken over the data warehouse marketplace due to their superior performance.",
      "provenance": [],
      "metadata": {
        "question_id": "whatgoesaround-sigmodrec2024_e5baf171",
        "created_at": 1749870264.9858685,
        "processing_complete": false,
        "max_provenances": 5
      },
      "source_info": {
        "selected_from": "test_outputs_prev1",
        "reason": "default",
        "sentence_count": 999999,
        "provenance_count": 0,
        "alternatives": [
          {
            "source": "test_outputs_prev1",
            "sentence_count": 999999,
            "provenance_count": 0,
            "has_answer": true
          }
        ],
        "selection_timestamp": "2025-06-17T16:48:52.939083"
      }
    }
  },
  {
    "e8553b89": {
      "question": "For what is blockchain technology critiqued as inefficient in the document?",
      "answer": "- Performance price (about five orders of magnitude) to use a blockchain DBMS.\n- Inefficiency in achieving data resiliency through replication in a peer-to-peer environment.\n- Lack of compelling use case for a fully decentralized blockchain DBMS.",
      "provenance": [
        {
          "provenance_id": 0,
          "input_sentence_ids": [
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            11,
            12,
            13,
            14,
            15,
            16,
            17,
            18,
            19,
            20,
            21,
            22,
            23,
            24,
            25,
            26,
            27,
            28,
            29,
            30,
            31,
            32,
            33,
            34,
            35,
            36,
            37,
            38,
            39,
            40,
            41,
            42,
            43,
            44,
            45,
            46,
            47,
            48,
            49,
            50,
            51,
            52,
            53,
            54,
            55,
            56,
            57,
            58,
            59,
            60,
            61,
            62,
            63,
            64,
            65,
            66,
            67,
            68,
            69,
            70,
            71,
            72,
            73,
            74,
            75,
            76,
            77,
            78,
            79,
            80,
            81,
            82,
            83,
            84,
            85,
            86,
            87,
            88,
            89,
            90,
            91,
            92,
            93,
            94,
            95,
            96,
            97,
            98,
            99,
            100,
            101,
            102,
            103,
            104,
            105,
            106,
            107,
            108,
            109,
            110,
            111,
            112,
            113,
            114,
            115,
            116,
            117,
            118,
            119,
            120,
            121,
            122,
            123,
            124,
            125,
            126,
            127,
            128,
            129,
            130,
            131,
            132,
            133,
            134,
            135,
            136,
            137,
            138,
            139,
            140,
            141,
            142,
            143,
            144,
            145,
            146,
            147,
            148,
            149,
            150,
            151,
            152,
            153,
            154,
            155,
            156,
            157,
            158,
            159,
            160,
            161,
            162,
            163,
            164,
            165,
            166,
            167,
            168,
            169,
            170,
            171,
            172,
            173,
            174,
            175,
            176,
            177,
            178,
            179,
            180,
            181,
            182,
            183,
            184,
            185,
            186,
            187,
            188,
            189,
            190,
            191,
            192,
            193,
            194,
            195,
            196,
            197,
            198,
            199,
            200,
            201,
            202,
            203,
            204,
            205,
            206,
            207,
            208,
            209,
            210,
            211,
            212,
            213,
            214,
            215,
            216,
            217,
            218,
            219,
            220,
            221,
            222,
            223,
            224,
            225,
            226,
            227,
            228,
            229,
            230,
            231,
            232,
            233,
            234,
            235,
            236,
            237,
            238,
            239,
            240,
            241,
            242,
            243,
            244,
            245,
            246,
            247,
            248,
            249,
            250,
            251,
            252,
            253,
            254,
            255,
            256,
            257,
            258,
            259,
            260,
            261,
            262,
            263,
            264,
            265,
            266,
            267,
            268,
            269,
            270,
            271,
            272,
            273,
            274,
            275,
            276,
            277,
            278,
            279,
            280,
            281,
            282,
            283,
            284,
            285,
            286,
            287,
            288,
            289,
            290,
            291,
            292,
            293,
            294,
            295,
            296,
            297,
            298,
            299,
            300,
            301,
            302,
            303,
            304,
            305,
            306,
            307,
            308,
            309,
            310,
            311,
            312,
            313,
            314,
            315,
            316,
            317,
            318,
            319,
            320,
            321,
            322,
            323,
            324,
            325,
            326,
            327,
            328,
            329,
            330,
            331,
            332,
            333,
            334,
            335,
            336,
            337,
            338,
            339,
            340,
            341,
            342,
            343,
            344,
            345,
            346,
            347,
            348,
            349,
            350,
            351,
            352,
            353,
            354,
            355,
            356,
            357,
            358,
            359,
            360,
            361,
            362,
            363,
            364,
            365,
            366,
            367,
            368,
            369,
            370,
            371,
            372,
            373,
            374,
            375,
            376,
            377,
            378,
            379,
            380,
            381,
            382,
            383,
            384,
            385,
            386,
            387,
            388,
            389,
            390,
            391,
            392,
            393,
            394,
            395,
            396,
            397,
            398,
            399,
            400,
            401,
            402,
            403,
            404,
            405,
            406,
            407,
            408,
            409,
            410,
            411,
            412,
            413,
            414,
            415,
            416,
            417,
            418,
            419,
            420,
            421,
            422,
            423,
            424,
            425,
            426,
            427,
            428,
            429,
            430,
            431,
            432,
            433,
            434,
            435,
            436,
            437,
            438,
            439,
            440,
            441,
            442,
            443,
            444,
            445,
            446,
            447,
            448,
            449,
            450,
            451,
            452,
            453,
            454,
            455,
            456,
            457,
            458,
            459,
            460,
            461,
            462,
            463,
            464,
            465,
            466,
            467,
            468,
            469,
            470,
            471,
            472,
            473,
            474,
            475,
            476,
            477,
            478,
            479,
            480,
            481,
            482,
            483,
            484,
            485,
            486,
            487,
            488,
            489,
            490,
            491,
            492,
            493,
            494,
            495,
            496,
            497,
            498,
            499,
            500,
            501,
            502,
            503,
            504,
            505,
            506,
            507,
            508,
            509,
            510,
            511,
            512,
            513,
            514,
            515,
            516,
            517,
            518,
            519,
            520,
            521,
            522,
            523,
            524,
            525,
            526,
            527,
            528,
            529,
            530,
            531,
            532,
            533,
            534,
            535,
            536,
            537,
            538,
            539,
            540,
            541,
            542,
            543,
            544,
            545,
            546,
            547,
            548,
            549,
            550,
            551,
            552,
            553,
            554,
            555,
            556,
            557,
            558,
            559,
            560,
            561,
            562,
            563,
            564,
            565,
            566,
            567,
            568,
            569,
            570,
            571,
            572,
            573,
            574,
            575,
            576,
            577,
            578,
            579,
            580,
            581,
            582,
            583,
            584,
            585,
            586,
            587,
            588,
            589,
            590,
            591,
            592,
            593,
            594,
            595,
            596,
            597,
            598,
            599,
            600,
            601,
            602,
            603,
            604,
            605,
            606,
            607,
            608,
            609,
            610,
            611,
            612,
            613,
            614,
            615,
            616,
            617,
            618,
            619,
            620,
            621,
            622,
            623,
            624,
            625,
            626,
            627,
            628,
            629,
            630,
            631,
            632,
            633,
            634,
            635,
            636,
            637,
            638,
            639,
            640,
            641,
            642,
            643,
            644,
            645,
            646,
            647,
            648,
            649,
            650,
            651,
            652,
            653,
            654,
            655,
            656,
            657,
            658,
            659,
            660,
            661,
            662,
            663,
            664,
            665,
            666,
            667,
            668,
            669,
            670,
            671,
            672,
            673,
            674,
            675,
            676,
            677,
            678,
            679,
            680,
            681,
            682,
            683,
            684,
            685,
            686,
            687,
            688,
            689,
            690,
            691,
            692,
            693,
            694,
            695,
            696,
            697,
            698,
            699,
            700,
            701,
            702,
            703,
            704,
            705,
            706,
            707,
            708,
            709,
            710,
            711,
            712,
            713,
            714,
            715,
            716,
            717,
            718,
            719,
            720,
            721,
            722,
            723,
            724,
            725,
            726,
            727,
            728,
            729,
            730,
            731,
            732,
            733,
            734,
            735,
            736,
            737,
            738,
            739,
            740,
            741,
            742,
            743,
            744,
            745,
            746,
            747,
            748,
            749,
            750,
            751,
            752,
            753,
            754,
            755,
            756,
            757,
            758,
            759,
            760,
            761,
            762,
            763,
            764,
            765,
            766,
            767,
            768,
            769,
            770,
            771,
            772,
            773,
            774,
            775,
            776,
            777,
            778,
            779,
            780,
            781,
            782,
            783,
            784,
            785,
            786,
            787,
            788,
            789,
            790,
            791,
            792,
            793,
            794,
            795,
            796,
            797,
            798,
            799,
            800,
            801,
            802,
            803,
            804,
            805,
            806,
            807,
            808,
            809,
            810,
            811,
            812,
            813,
            814,
            815,
            816,
            817,
            818,
            819,
            820,
            821,
            822,
            823,
            824,
            825,
            826,
            827,
            828,
            829,
            830,
            831,
            832,
            833,
            834,
            835,
            836,
            837,
            838,
            839,
            840,
            841,
            842,
            843,
            844,
            845,
            846,
            847,
            848,
            849,
            850,
            851,
            852,
            853,
            854,
            855,
            856,
            857,
            858,
            859,
            860,
            861,
            862,
            863,
            864,
            865,
            866,
            867,
            868,
            869,
            870,
            871,
            872,
            873,
            874,
            875,
            876,
            877,
            878,
            879,
            880,
            881,
            882,
            883,
            884,
            885,
            886,
            887,
            888,
            889,
            890,
            891,
            892,
            893,
            894,
            895,
            896,
            897,
            898,
            899,
            900,
            901,
            902,
            903,
            904,
            905,
            906,
            907,
            908,
            909,
            910,
            911,
            912,
            913,
            914,
            915,
            916,
            917,
            918,
            919,
            920,
            921,
            922,
            923,
            924,
            925,
            926,
            927,
            928,
            929,
            930,
            931,
            932,
            933,
            934,
            935,
            936,
            937,
            938,
            939,
            940,
            941,
            942,
            943,
            944,
            945,
            946,
            947,
            948,
            949,
            950,
            951,
            952,
            953,
            954,
            955,
            956,
            957,
            958,
            959,
            960,
            961,
            962,
            963
          ],
          "provenance_ids": [
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            11,
            12,
            13,
            14,
            15,
            16,
            17,
            18,
            19,
            20,
            21,
            22,
            23,
            24,
            25,
            26,
            27,
            28,
            29,
            30,
            31,
            32,
            33,
            34,
            35,
            36,
            37,
            38,
            39,
            40,
            41,
            42,
            43,
            44,
            45,
            46,
            47,
            48,
            49,
            50,
            51,
            52,
            53,
            54,
            55,
            56,
            57,
            58,
            59,
            60,
            61,
            62,
            63,
            64,
            65,
            66,
            67,
            68,
            69,
            70,
            71,
            72,
            73,
            74,
            75,
            76,
            77,
            78,
            79,
            80,
            81,
            82,
            83,
            84,
            85,
            86,
            87,
            88,
            89,
            90,
            91,
            92,
            93,
            94,
            95,
            96,
            97,
            98,
            99,
            100,
            101,
            102,
            103,
            104,
            105,
            106,
            107,
            108,
            109,
            110,
            111,
            112,
            113,
            114,
            115,
            116,
            117,
            118,
            119,
            120,
            121,
            122,
            123,
            124,
            125,
            126,
            127,
            128,
            129,
            130,
            131,
            132,
            133,
            134,
            135,
            136,
            137,
            138,
            139,
            140,
            141,
            142,
            143,
            144,
            145,
            146,
            147,
            148,
            149,
            150,
            151,
            152,
            153,
            154,
            155,
            156,
            157,
            158,
            159,
            160,
            161,
            162,
            163,
            164,
            165,
            166,
            167,
            168,
            169,
            170,
            171,
            172,
            173,
            174,
            175,
            176,
            177,
            178,
            179,
            180,
            181,
            182,
            183,
            184,
            185,
            186,
            187,
            188,
            189,
            190,
            191,
            192,
            193,
            194,
            195,
            196,
            197,
            198,
            199,
            200,
            201,
            202,
            203,
            204,
            205,
            206,
            207,
            208,
            209,
            210,
            211,
            212,
            213,
            214,
            215,
            216,
            217,
            218,
            219,
            220,
            221,
            222,
            223,
            224,
            225,
            226,
            227,
            228,
            229,
            230,
            231,
            232,
            233,
            234,
            235,
            236,
            237,
            238,
            239,
            240,
            241,
            242,
            243,
            244,
            245,
            246,
            247,
            248,
            249,
            250,
            251,
            252,
            253,
            254,
            255,
            256,
            257,
            258,
            259,
            260,
            261,
            262,
            263,
            264,
            265,
            266,
            267,
            268,
            269,
            270,
            271,
            272,
            273,
            274,
            275,
            276,
            277,
            278,
            279,
            280,
            281,
            282,
            283,
            284,
            285,
            286,
            287,
            288,
            289,
            290,
            291,
            292,
            293,
            294,
            295,
            296,
            297,
            298,
            299,
            300,
            301,
            302,
            303,
            304,
            305,
            306,
            307,
            308,
            309,
            310,
            311,
            312,
            313,
            314,
            315,
            316,
            317,
            318,
            319,
            320,
            321,
            322,
            323,
            324,
            325,
            326,
            327,
            328,
            329,
            330,
            331,
            332,
            333,
            334,
            335,
            336,
            337,
            338,
            339,
            340,
            341,
            342,
            343,
            344,
            345,
            346,
            347,
            348,
            349,
            350,
            351,
            352,
            353,
            354,
            355,
            356,
            357,
            358,
            359,
            360,
            361,
            362,
            363,
            364,
            365,
            366,
            367,
            368,
            369,
            370,
            371,
            372,
            373,
            374,
            375,
            376,
            377,
            378,
            379,
            380,
            381,
            382,
            383,
            384,
            385,
            386,
            387,
            388,
            389,
            390,
            391,
            392,
            393,
            394,
            395,
            396,
            397,
            398,
            399,
            400,
            401,
            402,
            403,
            404,
            405,
            406,
            407,
            408,
            409,
            410,
            411,
            412,
            413,
            414,
            415,
            416,
            417,
            418,
            419,
            420,
            421,
            422,
            423,
            424,
            425,
            426,
            427,
            428,
            429,
            430,
            431,
            432,
            433,
            434,
            435,
            436,
            437,
            438,
            439,
            440,
            441,
            442,
            443,
            444,
            445,
            446,
            447,
            448,
            449,
            450,
            451,
            452,
            453,
            454,
            455,
            456,
            457,
            458,
            459,
            460,
            461,
            462,
            463,
            464,
            465,
            466,
            467,
            468,
            469,
            470,
            471,
            472,
            473,
            474,
            475,
            476,
            477,
            478,
            479,
            480,
            481,
            482,
            483,
            484,
            485,
            486,
            487,
            488,
            489,
            490,
            491,
            492,
            493,
            494,
            495,
            496,
            497,
            498,
            499,
            500,
            501,
            502,
            503,
            504,
            505,
            506,
            507,
            508,
            509,
            510,
            511,
            512,
            513,
            514,
            515,
            516,
            517,
            518,
            519,
            520,
            521,
            522,
            523,
            524,
            525,
            526,
            527,
            528,
            529,
            530,
            531,
            532,
            533,
            534,
            535,
            536,
            537,
            538,
            539,
            540,
            541,
            542,
            543,
            544,
            545,
            546,
            547,
            549,
            550,
            551,
            552,
            553,
            554,
            555,
            556,
            557,
            558,
            559,
            560,
            561,
            562,
            563,
            564,
            565,
            566,
            567,
            568,
            569,
            570,
            571,
            572,
            573,
            574,
            575,
            576,
            577,
            578,
            579,
            580,
            581,
            582,
            583,
            584,
            585,
            586,
            587,
            588,
            589,
            590,
            591,
            592,
            593,
            594,
            595,
            596,
            597,
            598,
            599,
            600,
            601,
            602,
            603,
            604,
            605,
            606,
            607,
            608,
            609,
            610,
            611,
            612,
            613,
            614,
            615,
            616,
            617,
            618,
            619,
            620,
            621,
            622,
            623,
            624,
            625,
            626,
            627,
            628,
            629,
            630,
            631,
            632,
            633,
            634,
            635,
            636,
            637,
            638,
            639,
            640,
            641,
            642,
            643,
            644,
            645,
            646,
            647,
            648,
            649,
            650,
            651,
            652,
            653,
            654,
            655,
            656,
            657,
            658,
            659,
            660,
            661,
            662,
            663,
            664,
            665,
            666,
            667,
            668,
            669,
            670,
            671,
            672,
            673,
            674,
            675,
            676,
            677,
            678,
            679,
            680,
            681,
            682,
            683,
            684,
            685,
            686,
            687,
            688,
            689,
            690,
            691,
            692,
            693,
            694,
            695,
            696,
            697,
            698,
            699,
            700,
            701,
            702,
            703,
            705,
            706,
            707,
            708,
            709,
            710,
            711,
            712,
            713,
            714,
            715,
            716,
            717,
            718,
            719,
            720,
            721,
            722,
            723,
            724,
            725,
            726,
            727,
            728,
            729,
            730,
            731,
            732,
            733,
            734,
            735,
            736,
            737,
            738,
            739,
            740,
            741,
            742,
            743,
            744,
            745,
            746,
            747,
            748,
            749,
            750,
            751,
            752,
            753,
            754,
            755,
            756,
            757,
            758,
            759,
            760,
            761,
            762,
            763,
            764,
            765,
            766,
            767,
            768,
            769,
            770,
            771,
            772,
            773,
            774,
            775,
            776,
            777,
            778,
            779,
            780,
            781,
            782,
            783,
            784,
            785,
            786,
            787,
            788,
            789,
            790,
            791,
            792,
            793,
            794,
            795,
            796,
            797,
            798,
            799,
            800,
            801,
            802,
            803,
            804,
            805,
            806,
            807,
            808,
            809,
            810,
            811,
            812,
            813,
            814,
            815,
            816,
            817,
            818,
            819,
            820,
            821,
            822,
            823,
            824,
            825,
            826,
            827,
            828,
            829,
            830,
            831,
            832,
            833,
            834,
            835,
            836,
            837,
            838,
            839,
            840,
            841,
            842,
            843,
            844,
            845,
            846,
            847,
            848,
            849,
            850,
            851,
            852,
            853,
            854,
            855,
            856,
            857,
            858,
            859,
            860,
            861,
            862,
            863,
            864,
            865,
            866,
            867,
            868,
            869,
            870,
            871,
            872,
            873,
            874,
            875,
            876,
            877,
            878,
            879,
            880,
            881,
            882,
            883,
            884,
            885,
            886,
            887,
            888,
            889,
            890,
            891,
            892,
            893,
            894,
            895,
            896,
            897,
            898,
            899,
            900,
            901,
            902,
            903,
            904,
            905,
            906,
            907,
            908,
            909,
            910,
            911,
            912,
            913,
            914,
            915,
            916,
            917,
            918,
            919,
            920,
            921,
            922,
            923,
            924,
            925,
            926,
            927,
            928,
            929,
            930,
            931,
            932,
            933,
            934,
            935,
            936,
            937,
            938,
            939,
            940,
            941,
            942,
            943,
            944,
            945,
            946,
            947,
            948,
            949,
            950,
            951,
            952,
            953,
            954,
            955,
            956,
            957,
            958,
            959,
            960,
            961,
            962,
            963
          ],
          "provenance": "What Goes Around Comes Around... And Around...\n\nMichael Stonebraker\nMassachusetts Institute of Technology\nstonebraker@csail.mit.edu\n\nAndrew Pavlo\nCarnegie Mellon University\npavlo@cs.cmu.edu\n\nABSTRACT\nTwo decades ago, one of us co-authored a paper com-\nmenting on the previous 40 years of data modelling re-\nsearch and development [188].That paper demonstrated\nthat the relational model (RM) and SQL are the prevail-\ning choice for database management systems (DBMSs),\ndespite efforts to replace either them.Instead, SQL ab-\nsorbed the best ideas from these alternative approaches.We revisit this issue and argue that this same evolu-\ntion has continued since 2005.Once again there have\nbeen repeated efforts to replace either SQL or the RM.But the RM continues to be the dominant data model\nand SQL has been extended to capture the good ideas\nfrom others.As such, we expect more of the same in\nthe future, namely the continued evolution of SQL and\nrelational DBMSs (RDBMSs).We also discuss DBMS\nimplementations and argue that the major advancements\nhave been in the RM systems, primarily driven by chang-\ning hardware characteristics.1 Introduction\nIn 2005, one of the authors participated in writing a\nchapter for the Red Book titled “What Goes Around\nComes Around” [188].That paper examined the major\ndata modelling movements since the 1960s:\n\nHierarchical (e.g., IMS): late 1960s and 1970s\nNetwork (e.g., CODASYL): 1970s\nRelational: 1970s and early 1980s\nEntity-Relationship: 1970s\nExtended Relational: 1980s\nSemantic: late 1970s and 1980s\nObject-Oriented: late 1980s and early 1990s\nObject-Relational: late 1980s and early 1990s\nSemi-structured (e.g., XML): late 1990s and 2000s\n\n•\n•\n•\n•\n•\n•\n•\n•\n•\n\nOur conclusion was that the relational model with an\nextendable type system (i.e., object-relational) has dom-\ninated all comers, and nothing else has succeeded in\nthe marketplace.Although many of the non-relational\nDBMSs covered in 2005 still exist today, their vendors\nhave relegated them to legacy maintenance mode and\nnobody is building new applications on them.This per-\nsistence is more of a testament to the “stickiness” of data\n\nrather than the lasting power of these systems.In other\nwords, there still are many IBM IMS databases running\ntoday because it is expensive and risky to switch them\nto use a modern DBMS.But no start-up would willingly\nchoose to build a new application on IMS.A lot has happened in the world of databases since our\n2005 survey.During this time, DBMSs have expanded\nfrom their roots in business data processing and are now\nused for almost every kind of data.This led to the “Big\nData” era of the early 2010s and the current trend of inte-\ngrating machine learning (ML) with DBMS technology.In this paper, we analyze the last 20 years of data\nmodel and query language activity in databases.We\nstructure our commentary into the following areas: (1)\nMapReduce Systems, (2) Key-value Stores, (3) Docu-\nment Databases, (4) Column Family / Wide-Column,\n(5) Text Search Engines, (6) Array Databases, (7)\nVector Databases, and (8) Graph Databases.We contend that most systems that deviated from\nSQL or the RM have not dominated the DBMS land-\nscape and often only serve niche markets.Many sys-\ntems that started out rejecting the RM with much fanfare\n(think NoSQL) now expose a SQL-like interface for RM\ndatabases.Such systems are now on a path to conver-\ngence with RDBMSs.Meanwhile, SQL incorporated\nthe best query language ideas to expand its support for\nmodern applications and remain relevant.Although there has not been much change in RM\nfundamentals, there were dramatic changes in RM sys-\ntem implementations.The second part of this paper\ndiscusses advancements in DBMS architectures that ad-\ndress modern applications and hardware: (1) Columnar\nSystems, (2) Cloud Databases, (3) Data Lakes / Lake-\nhouses, (4) NewSQL Systems, (5) Hardware Acceler-\nators, and (6) Blockchain Databases.Some of these\nare profound changes to DBMS implementations, while\nothers are merely trends based on faulty premises.We ﬁnish with a discussion of important considera-\ntions for the next generation of DBMSs and provide part-\ning comments on our hope for the future of databases in\nboth research and commercial settings.SIGMOD Record, June 2024 (Vol. 53, No.2)\n\n21\n\n\f2 Data Models & Query Languages\nFor our discussion here, we group the research and de-\nvelopment thrusts in data models and query languages\nfor database into eight categories.2.1 MapReduce Systems\nGoogle constructed their MapReduce (MR) framework\nin 2003 as a “point solution” for processing its periodic\ncrawl of the internet [122].At the time, Google had\nlittle expertise in DBMS technology, and they built MR\nto meet their crawl needs.In database terms, Map is a\nuser-deﬁned function (UDF) that performs computation\nand/or ﬁltering while Reduce is a GROUP BY operation.To a ﬁrst approximation, MR runs a single query:\n\nSELECT map() FROM crawl_table GROUP BY reduce()\n\nGoogle’s MR approach did not prescribe a speciﬁc\ndata model or query language.Rather, it was up to the\nMap and Reduce functions written in a procedural MR\nprogram to parse and decipher the contents of data ﬁles.There was a lot of interest in MR-based systems at\nother companies in the late 2000s.Yahoo! developed\nan open-source version of MR in 2005, called Hadoop.It ran on top of a distributed ﬁle system HDFS that was\na clone of the Google File System [134].Several start-\nups were formed to support Hadoop in the commercial\nmarketplace.We will use MR to refer to the Google\nimplementation and Hadoop to refer to the open-source\nversion.They are functionally similar.There was a controversy about the value of Hadoop\ncompared to RDBMSs designed for OLAP workloads.This culminated in a 2009 study that showed that data\nwarehouse DBMSs outperformed Hadoop [172].This\ngenerated dueling articles from Google and the DBMS\ncommunity [123, 190].Google argued that with care-\nful engineering, a MR system will beat DBMSs, and a\nuser does not have to load data with a schema before\nrunning queries on it.Thus, MR is better for “one shot”\ntasks, such as text processing and ETL operations.The\nDBMS community argued that MR incurs performance\nproblems due to its design that existing parallel DBMSs\nalready solved.Furthermore, the use of higher-level\nlanguages (SQL) operating over partitioned tables has\nproven to be a good programming model [127].A lot of the discussion in the two papers was on imple-\nmentation issues (e.g., indexing, parsing, push vs. pull\nquery processing, failure recovery).From reading both\npapers a reasonable conclusion would be that there is a\nplace for both kinds of systems.However, two changes\nin the technology world rendered the debate moot.The ﬁrst event was that the Hadoop technology and\nservices market cratered in the 2010s.Many enterprises\nspent a lot of money on Hadoop clusters, only to ﬁnd\nthere was little interest in this functionality.Developers\nfound it difﬁcult to shoehorn their application into the\n\nrestricted MR/Hadoop paradigm.There were consider-\nable efforts to provide a SQL and RM interface on top\nof Hadoop, most notable was Meta’s Hive [30, 197].The next event occurred eight months after the CACM\narticle when Google announced that they were moving\ntheir crawl processing from MR to BigTable [164].The\nreason was that Google needed to interactively update\nits crawl database in real time but MR was a batch sys-\ntem.Google ﬁnally announced in 2014 that MR had no\nplace in their technology stack and killed it off [194].The ﬁrst event left the three leading Hadoop vendors\n(Cloudera, Hortonworks, MapR) without a viable prod-\nuct to sell.Cloudera rebranded Hadoop to mean the\nwhole stack (application, Hadoop, HDFS).In a further\nsleight-of-hand, Cloudera built a RDBMS, Impala [150],\non top of HDFS but not using Hadoop.They realized\nthat Hadoop had no place as an internal interface in a\nSQL DBMS, and they conﬁgured it out of their stack\nwith software built directly on HDFS.In a similar vein,\nMapR built Drill [22] directly on HDFS, and Meta cre-\nated Presto [185] to replace Hive.Discussion: MR’s deﬁciencies were so signiﬁcant that\nit could not be saved despite the adoption and enthu-\nsiasm from the developer community.Hadoop died\nabout a decade ago, leaving a legacy of HDFS clusters\nin enterprises and a collection of companies dedicated\nto making money from them.At present, HDFS has\nlost its luster, as enterprises realize that there are better\ndistributed storage alternatives [124].Meanwhile, dis-\ntributed RDBMSs are thriving, especially in the cloud.Some aspects of MR system implementations related\nto scalability, elasticity, and fault tolerance are carried\nover into distributed RDBMSs.MR also brought about\nthe revival of shared-disk architectures with disaggre-\ngated storage, subsequently giving rise to open-source\nﬁle formats and data lakes (see Sec.3.3). Hadoop’s lim-\nitations opened the door for other data processing plat-\nforms, namely Spark [201] and Flink [109].Both sys-\ntems started as better implementations of MR with pro-\ncedural APIs but have since added support for SQL [105].2.2 Key/Value Stores\nThe key/value (KV) data model is the simplest model\npossible.It represents the following binary relation:\n\n(key,value)\n\nA KV DBMS represents a collection of data as an as-\nsociative array that maps a key to a value.The value is\ntypically an untyped array of bytes (i.e., a blob), and the\nDBMS is unaware of its contents.It is up to the appli-\ncation to maintain the schema and parse the value into\nits corresponding parts.Most KV DBMSs only provide\nget/set/delete operations on a single value.In the 2000s, several new Internet companies built\ntheir own shared-nothing, distributed KV stores for nar-\n\n22\n\nSIGMOD Record, June 2024 (Vol.53, No. 2)\n\n\frowly focused applications, like caching and storing ses-\nsion data.For caching, Memcached [131] is the most\nwell-known example of this approach.Redis [67] mar-\nkets itself as a Memcached replacement, offering a more\nrobust query API with checkpointing support.For more\npersistent application data, Amazon created the Dynamo\nKV store in 2007 [125].Such systems offer higher and\nmore predictable performance, compared to a RDBMS,\nin exchange for more limited functionality.The second KV DBMS category are embedded stor-\nage managers designed to run in the same address space\nas a higher-level application.One of the ﬁrst stan-\ndalone embedded KV DBMSs was BerkeleyDB from\nthe early 1990s [170].Recent notable entries include\nGoogle’s LevelDB [37], which Meta later forked as\nRocksDB [68].Discussion: Key/value stores provide a quick “out-of-\nthe-box” way for developers to store data, compared to\nthe more laborious effort required to set up a table in a\nRDBMS.Of course, it is dangerous to use a KV store\nin a complex application that requires more than just a\nbinary relation.If an application requires multiple ﬁelds\nin a record, then KV stores are probably a bad idea.Not\nonly must the application parse record ﬁelds, but also\nthere are no secondary indexes to retrieve other ﬁelds\nby value.Likewise, developers must implement joins or\nmulti-get operations in their application.To deal with these issues, several systems began as\na KV store and then morphed into a more feature-rich\nrecord store.Such systems replace the opaque value\nwith a semi-structured value, such as a JSON docu-\nment.Examples of this transition are Amazon’s Dy-\nnamoDB [129] and Aerospike [9].It is not trivial to re-\nengineer a KV store to make it support a complex data\nmodel, whereas RDBMSs easily emulates KV stores\nwithout any changes.If an application needs an embed-\nded DBMS, there are full-featured choices available to-\nday, including SQLite [71] and DuckDB [180].Hence,\na RDBMS may be a better choice, even for simple appli-\ncations, because they offer a path forward if the applica-\ntion’s complexity increases.One new architecture trend from the last 20 years is\nusing embedded KV stores as the underlying storage\nmanager for full-featured DBMSs.Prior to this, build-\ning a new DBMS requires engineers to build a custom\nstorage manager that is natively integrated in the DBMS.MySQL was the ﬁrst DBMS to expose an API that al-\nlowed developers to replace its default KV storage man-\nager.This API enabled Meta to build RocksDB to re-\nplace InnoDB for its massive ﬂeet of MySQL databases.Similarly, MongoDB discarded their ill-fated MMAP-\nbased storage manager in favor of WiredTiger’s KV\nstore in 2014 [120, 138].Using an existing KV store\nallows developers to write a new DBMS in less time.2.3 Document Databases\n\nThe document data model represents a database as a col-\nlection of record objects.Each document contains a hier-\narchy of ﬁeld/value pairs, where each ﬁeld is identiﬁed\nby a name and a ﬁeld’s value can be either a scalar type,\nan array of values, or another document.The following\nexample in JSON is a customer document that contain\na nested list of purchase order records with their corre-\nsponding order items.{ “name”: “First Last”,\n\n“orders”: [ { “id”: 123, “items”: [...] },\n\n{ “id”: 456, “items”: [...] }, ] }\n\nDocument data models have been an active ﬁeld of\neffort for several decades.This has given rise to data\nformats like SGML [117] and XML [118].Despite\nthe buzz with XML databases in the late 1990s, we\ncorrectly predicted in 2005 they would not supplant\nRDBMSs [188].JSON has since overtaken XML to\nbecome the standard for data exchange for web-based\napplications.JavaScript’s popularity with developers\nand the accompanying ubiquity of JSON led several\ncompanies to create document-oriented systems that na-\ntively stored JSON in the 2000s.The inability of OLTP RDBMSs to scale in the 2000s\nushered in dozens of document DBMSs that marketed\nthemselves using the catchphrase NoSQL [110].There\nwere two marketing messages for such systems that res-\nonated with developers.First, SQL and joins are slow,\nand one should use a “faster” lower-level, record-at-a-\ntime interface.Second, ACID transactions are unneces-\nsary for modern applications, so the DBMS should only\nprovide weaker notion of it (i.e., BASE [179]).Because of these two thrusts, NoSQL came to stand\nfor a DBMS that stored records or documents as JSON,\nsupported a lower-level API, and weak or non-existent\ntransactions.There are dozens of such systems, of\nwhich MongoDB [41] is the most popular.Discussion: Document DBMSs are essentially the same\nas object-oriented DBMSs from the 1980s and XML\nDBMSs from the late 1990s.Proponents of document\nDBMSs make the same argument as their OO/XML\npredecessors: storing data as documents removes the\nimpedance mismatch between how application OO code\ninteracts with data and how relational databases store\nthem.They also claim that denormalizing entries into\nnested structures is better for performance because it re-\nmoves the need to dispatch multiple queries to retrieve\ndata related to a given object (i.e., “N+1 problem” in\nORMs).The problems with denormalization/prejoining\nis an old topic that dates back to the 1970s [116]: (1)\nif the join is not one-to-many, then there will be dupli-\ncated data, (2) prejoins are not necessarily faster than\njoins, and (3) there is no data independence.SIGMOD Record, June 2024 (Vol. 53, No.2)\n\n23\n\n\fDespite strong protestations that SQL was terrible, by\nthe end of the 2010s, almost every NoSQL DBMS added\na SQL interface.Notable examples include DynamoDB\nPartiQL [56], Cassandra CQL [15], Aerospike AQL [9],\nand Couchbase SQL++ [72].The last holdout was Mon-\ngoDB, but they added SQL for their Atlas service in\n2021 [42].Instead of supporting the SQL standard for\nDDL and DML operations, NoSQL vendors claim that\nthey support their own proprietary query language de-\nrived or inspired from SQL.For most applications, these\ndistinctions are without merit.Any language differences\nbetween SQL and NoSQL derivatives are mostly due to\nJSON extensions and maintenance operations.Many of the remaining NoSQL DBMSs also added\nstrongly consistent (ACID) transactions (see Sec. 3.4).As such, the NoSQL message has morphed from “Do\nnot use SQL – it is too slow!” to “Not only SQL” (i.e.,\nSQL is ﬁne for some things).Adding SQL and ACID to a NoSQL DBMS lowers\ntheir intellectual distance from RDBMSs.The main\ndifferences between them seems to be JSON support\nand the fact that NoSQL vendors allow “schema later”\ndatabases.But the SQL standard added a JSON data\ntype and operations in 2016 [165, 178].And as RDBMSs\ncontinue to improve their “ﬁrst ﬁve minutes” experience\nfor developers, we believe that the two kinds of systems\nwill soon be effectively identical.Higher level languages are almost universally pre-\nferred to record-at-a-time notations as they require less\ncode and provide greater data independence.Although\nwe acknowledge that the ﬁrst SQL optimizers were slow\nand ineffective, they have improved immensely in the\nlast 50 years.But the optimizer remains the hardest part\nof building a DBMS.We suspect that this engineering\nburden was a contributing factor to why NoSQL systems\noriginally chose to not support SQL.2.4 Column-Family Databases\nThere is another category of NoSQL systems that uses\na data model called column-family (aka wide-column).Despite its name, column-family is not a columnar data\nmodel.Instead, it is a reduction of the document data\nmodel that only supports one level of nesting instead\nof arbitrary nesting; it is relation-like, but each record\ncan have optional attributes, and cells can contain an ar-\nray of values.The following example shows a mapping\nfrom user identiﬁer keys to JSON documents that con-\ntain each user’s varying proﬁle information:\n\nUser1000 → { “name”: “Alice”,\n\n“accounts”: [ 123, 456 ],\n“email”: \"xxx@xxx.edu” }\n\nUser1001 → { “name”: “Bob”,\n\n“email”: [ “yyy@yyy.org”, “zzz@zzz.com” ] }\n\nThe ﬁrst column-family model DBMS was Google’s\nBigTable in 2004 [111].Instead of adopting SQL and\n\nemerging columnar storage, Google used this data model\nwith procedural client APIs.Other systems adopted the\ncolumn-family model in an attempt to copy Google’s be-\nspoke implementation.Most notable are Cassandra [14]\nand HBase [28].They also copied BigTable’s limita-\ntions, including the lack of joins and secondary indexes.Discussion: All our comments in Sec.2.3 about the\ndocument model are also applicable here.In the early\n2010s, Google built RDBMSs on top of BigTable, in-\ncluding MegaStore [99] and the ﬁrst version of Span-\nner.Since then, Google rewrote Spanner to remove\nthe BigTable remnants [98], and it is now the primary\ndatabase for many of its internal applications.Several\nNoSQL DBMSs deprecated their proprietary APIs in\nfavor of SQL but still retain their non-relational archi-\ntectures.Cassandra replaced their Thrift-API with a\nSQL-like language called CQL [15], and HBase now\nrecommends the Phoenix SQL-frontend [57].Google\nstill offers BigTable as a cloud service, but the column-\nfamily model is a singular outlier with the same disad-\nvantages as NoSQL DBMSs.2.5 Text Search Engines\nText search engines have existed for a long time, begin-\nning with the seminal SMART system in the 1960s [184].SMART pioneered information retrieval and the vector\nspace model, now nearly universal in modern search\nengines, by tokenizing documents into a “bag of words”\nand then building full-text indexes (aka inverted indexes)\non those tokens to support queries on their contents.The\nsystem was also cognizant of noise words (e.g., “the”,\n“a”), synonyms (e.g., “The Big Apple” is a synonym for\n“New York City”), salient keywords, and distance (e.g.,\n“drought” often appears close to “climate change”).The leading text search systems today include Elastic-\nsearch [23] and Solr [70], which both use Lucene [38]\nas their internal search library.These systems offer\ngood support for storing and indexing text data but offer\nnone-to-limited transaction capabilities.This limitation\nmeans that a DBMS has to recover from data corruption\nby rebuilding the document index from scratch, which\nresults in signiﬁcant downtime.All the leading RDBMSs support full-text search in-\ndexes, including Oracle [52], Microsoft SQL Server [52],\nMySQL [43], and PostgreSQL [62].Their search fea-\ntures have improved recently and are generally on par\nwith the special-purpose systems above.They also have\nthe advantage of built-in transaction support.But their\nintegration of search operations in SQL is often clunky\nand differs between DBMSs.Discussion: Text data is inherently unstructured, which\nmeans that there is no data model.Instead, a DBMS\nseeks to extract structure (i.e., meta-data, indexes) from\ntext to avoid “needle in the haystack” sequential searches.24\n\nSIGMOD Record, June 2024 (Vol. 53, No.2)\n\n\fThere are three ways to manage text data in application.First, one can run multiple systems, such as Elastic-\nsearch for text and a RDBMS for operational workloads.This approach allows one to run “best of breed” systems\nbut requires additional ETL plumbing to push data from\nthe operational DBMS to the text DBMS and to rewrite\napplications to route queries to the right DBMSs based\non their needs.Alternatively, one can run a RDBMS\nwith good text-search integration capabilities but with\ndivergent APIs in SQL.This latter issue is often over-\ncome by application frameworks that hide this complex-\nity (e.g., Django Haystack [20]).The third option is\na polystore system [187] that masks the system differ-\nences via middleware that exposes a uniﬁed interface.Inverted index-centric search engines based on SMART\n\nare used for exact match searches.These methods have\nbeen supplanted in recent years by similarity search us-\ning ML-generated embeddings (see Sec.2.7). 2.6 Array Databases\nThere are many areas of computing where arrays are an\nobvious data representation.We use the term “array” to\nmean all variants of them [182]: vectors (one dimen-\nsion – see Sec.2.7), matrices (two dimensions), and\ntensors (three or more dimensions).For example, sci-\nentiﬁc surveys for geographic regions usually represent\ndata as a multi-dimensional array that stores sensor mea-\nsurements using location/time-based coordinates:\n\n(latitude, longitude, time, [vector-of-values])\n\nSeveral other data sets look like this, including ge-\nnomic sequencing and computational ﬂuid dynamics.Arrays are also the core of most ML data sets.Although array-based programming languages have\nexisted since the 1960s (APL [142]), the initial work\non array DBMSs began in the 1980s.PICDMS is con-\nsidered to be the ﬁrst DBMS implementation using the\narray data model [114].The two oldest array DBMSs\nstill being developed today are Rasdaman [66, 103] and\nkdb+ [34].Newer array DBMSs include SciDB [54,\n191] and TileDB [76].HDF5 [29] and NetCDF [46] are\npopular array ﬁle formats for scientiﬁc data.There are several system challenges with storing and\nquerying real-world array data sets.Foremost is that ar-\nray data does not always align to a regular integer grid;\nfor example, geospatial data is often split into irregular\nshapes.An application can map such grids to integer\ncoordinates via metadata describing this mapping [166].Hence, most applications maintain array and non-array\ndata together in a single database.Unlike row- or column-based DBMSs, querying array\ndata in arbitrary dimensions presents unique challenges.The difﬁculty arises from storing multi-dimensional ar-\nray data on a linear physical storage medium like a disk.To overcome these challenges, array DBMSs must em-\n\nploy indexing and data structures to support efﬁcient\ntraversal across array dimensions.Discussion: Array DBMSs are a niche market that has\nonly seen adoption in speciﬁc verticals (we discuss vec-\ntor DBMSs next).For example, they have considerable\ntraction in the genomics space.HDF5 is popular for\nsatellite imagery and other gridded scientiﬁc data.But\nbusiness applications rarely use dedicated array DBMSs,\nwhich is necessary for any product to survive.No ma-\njor cloud provider offers a hosted array DBMS service,\nmeaning they do not see a sizable market.The challenge that array DBMS vendors have al-\nways faced is that the SQL includes support for or-\ndered arrays as ﬁrst-class data types (despite this be-\ning against the original RM proposal [115]).The ﬁrst\nproposal to extend the unordered set-based RM with\nordered rasters was in 1993 [155].An early exam-\nple of this was Illustra’s temporal (one-dimensional)\ndata plugin [31].SQL:1999 introduced limited sup-\nport for single-dimension, ﬁxed-length array data types.SQL:2003 expanded to support nested arrays without a\npredeﬁned maximum cardinality.Later entrants include\nOracle Georaster [4] and Teradata [73].Data cubes are\nspecial-purpose arrays [135], but columnar RDBMSs\nhave eclipsed them for OLAP workloads because of\ntheir better ﬂexibility and lower engineering costs [113].More recently, the SQL:2023 standard includes sup-\nport for true multi-dimensional arrays (SQL/MDA) that\nis heavily inspired by Rasdaman’s RQL [166].This\nupdate allows SQL to represent arrays with arbitrary\nIn effect,\ndimensions using integer-based coordinates.this allows data cubes to exist in a SQL framework, but\ncolumnar DBMSs now dominate this market.2.7 Vector Databases\nSimilar to how the column-family model is a reduction\nof the document model, the vector data model simpliﬁes\nthe array data model to one-dimensional rasters.Given\nthat vector DBMSs are attracting the most attention\nright now from developers and investors (similar to the\nNoSQL fad), it is necessary to discuss them separately.The reason for this interest is because developers use\nthem to store single-dimension embeddings generated\nfrom AI tools.These tools use learned transformations\nto convert a record’s data (e.g., text, image) into a vec-\ntor representing its latent semantics.For example, one\ncould convert each Wikipedia article into an embedding\nusing Google BERT and store them in a vector database\nalong with additional article meta-data:\n\n(title, date, author, [embedding-vector])\n\nThe size of these embedding vectors range from 100s\nof dimensions for simple transformers to 1000s for high-\nend models; these sizes will obviously grow over time\nwith the development of more sophisticated models.SIGMOD Record, June 2024 (Vol. 53, No.2)\n\n25\n\n\fThe key difference between vector and array DBMSs\nis their query patterns.The former are designed for\nsimilarity searches that ﬁnd records whose vectors have\nthe shortest distance to a given input vector in a high-\ndimensional space.The input vector is another embed-\nding generated with the same transformer used to popu-\nlate the database.Unlike array DBMSs, applications do\nnot use vector DBMSs to search for matches at an off-\nset in a vector nor extract slices across multiple vectors.Instead, the dominant use case is this similarity search.To avoid brute force scans for ﬁnding the most sim-\nilar records, vector DBMSs build indexes to accelerate\napproximate nearest neighbor (ANN) searches.Appli-\ncations issue queries with predicates on both the em-\nbedding index and non-embedding attributes (i.e., meta-\ndata).The DBMS then chooses whether to use the non-\nembedding predicate on records before (pre-ﬁlter) or af-\nter (post-ﬁlter) the vector search.There are dozens of new DBMSs in this emerging\ncategory, with Pinecone [58], Milvus [40], and Weav-\niate [84] as the leading systems.Text search engines,\nincluding Elasticsearch [23], Solr [70], and Vespa [79],\nexpanded their APIs to support vector search.Other\nDBMSs rebranded themselves as vector databases to\njump on the bandwagon, such as Kdb+ [34].One compelling feature of vector DBMSs is that\nthey provide better integration with AI tools (e.g., Chat-\nGPT [16], LangChain [36]) than RDBMSs.These sys-\ntems natively support transforming a record’s data into\nan embedding upon insertion using these tools and then\nuses the same transformation to convert a query’s in-\nput arguments into an embedding to perform the ANN\nsearch; other DBMSs require the application to perform\nthese transformations outside of the database.Discussion: Unlike array DBMSs that require a cus-\ntomized storage manager and execution engine to sup-\nport efﬁcient operations on multi-dimensional data, vec-\ntor DBMSs are essentially document-oriented DBMSs\nwith specialized ANN indexes.Such indexes are a fea-\nture, not the foundation of a new system architecture.After LLMs became “mainstream” with ChatGPT in\nlate 2022, it took less than one year for several RDBMSs\nIn 2023,\nto add their own vector search extensions.many of the major RDBMSs added vector indexes, in-\ncluding Oracle [7], SingleStore [137], Rockset [8], and\nClickhouse [157].Contrast this with JSON support in\nRDBMSs.NoSQL systems like MongoDB and CouchDB\nbecame popular in the late 2000s and it took several\nyears for RDBMSs to add support for it.There are two likely explanations for the quick pro-\nliferation of vector indexes.The ﬁrst is that similarity\nsearch via embeddings is such a compelling use case\nthat every DBMS vendor rushed out their version and\nannounced it immediately.The second is that the en-\ngineering effort to introduce a new index data structure\n\nis small enough that it did not take that much work for\nthe DBMS vendors to add vector search.Most of them\ndid not write their vector index from scratch and instead\nintegrated an open-source library (e.g., pgVector [145],\nDiskANN [19], FAISS [24]).We anticipate that vector DBMSs will undergo the\nsame evolution as document DBMSs by adding features\nto become more relational-like (e.g., SQL, transactions,\nextensibility).Meanwhile, relational incumbents will\nhave added vector indexes to their already long list of\nfeatures and moved on to the next emerging trend.2.8 Graph Databases\nThere has been a lot of academic and industry interest\nin the last decade in graph databases [183].Many appli-\ncations use knowledge graphs to model semi-structured\ninformation.Social media applications inherently con-\ntain graph-oriented relationships (“likes”, “friend-of”).Relational design tools provide users with an entity-\nrelationship (ER) model of their database.An ER dia-\ngram is a graph; thus, this paradigm has clear use cases.The two most prevalent approaches to represent graphs\nare (1) the resource description framework (RDF) and\n(2) property graphs [126].With property graphs, the\nDBMS maintains a directed multi-graph structure that\nsupports key/value labels for nodes and edges.RDF\ndatabases (aka triplestores) only model a directed graph\nwith labeled edges.Since property graphs are more com-\nmon and are a superset of RDF, we will only discuss\nthem.We consider two use cases for graph DBMSs and\ndiscuss the problems that will limit their adoption.The ﬁrst category of systems are for operational /\nOLTP workloads: an application, for example, adds a\nfriend link in the database by updating a single record,\npresumably in a transactional manner.Neo4j [44] is the\nmost popular graph DBMS for OLTP applications.It\nsupports edges using pointers (as in CODASYL) but it\ndoes not cluster nodes with their “parent” or “offspring”.Such an architecture is advantageous for traversing long\nedge chains since it will do pointer chasing, whereas a\nRDBMS has to do this via joins.But their potential mar-\nket success comes down to whether there are enough\n“long chain” scenarios that merit forgoing a RDBMS.The second use case is analytics, which seeks to de-\nrive information from the graph.An example of this\nscenario is ﬁnding which user has the most friends un-\nder 30 years old.Notable entries like Tigergraph [74]\nand JanusGraph [32] focus on query languages and\nstorage on a graph DBMS.Other systems, such as Gi-\nraph [26] and Turi [78] (formerly Graphlab [27]) pro-\nvide a computing fabric to support parallel execution of\ngraph-oriented programs, typically written by a user.Unlike queries in relational analytics that are charac-\nterized by chains of joins, queries for graph analytics\ncontain operations like shortest path, cut set, or clique\n\n26\n\nSIGMOD Record, June 2024 (Vol.53, No. 2)\n\n\fdetermination. Algorithm choice and data representa-\ntion will determine a DBMS’s performance.This argues\nfor a computing fabric that allows developers to write\ntheir own algorithms using an abstraction that hides\nthe underlying system topology.However, previous\nresearch shows that distributed algorithms rarely out-\nperform single-node implementations because of com-\nmunication costs [160].A better strategy is to compress\na graph into a space-efﬁcient data structure that ﬁts in\nmemory on a single node and then run the query against\nthis data structure.All but the largest graph databases\nare probably best handled this way.Discussion: Regardless of whether a graph DBMS tar-\ngets OLTP or OLAP workloads, the key challenge these\nsystems have to overcome is that it is possible to simu-\nlate a graph as a collection of tables:\n\nNode (node_id, node_data)\nEdge (node_id_1, node_id_2, edge_data)\n\nThis means that RDBMSs are always an option to sup-\nport graphs.But “vanilla” SQL is not expressive enough\nfor graph queries and thus require multiple client-server\nroundtrips for traversal operations.Some RDBMSs, including MSSQL [3] and Oracle [50],\n\nprovide built-in SQL extensions that make storing and\nquerying graph data easier.Other DBMSs use a transla-\ntion layer on top of relations to support graph-oriented\nAPIs.Amazon Neptune [45] is a graph-oriented veneer\non top of Aurora MySQL.Apache AGE provides an\nOpenCypher interface on top of PostgreSQL [10].More recently, SQL:2023 introduced property graph\nqueries (SQL/PGQ) for deﬁning and traversing graphs\nin a RDBMS [196].The syntax builds on existing lan-\nguages (e.g., Neo4j’s Cypher [49], Oracle’s PGQL [51],\nand TigerGraph’s GSQL [75]), and shares aspects of the\nemerging GQL standard [126].Thus, SQL/PGQ further\nnarrows the functionality difference between RDBMSs\nand native graph DBMSs.The question is whether graph DBMS vendors can\nmake their specialized systems fast enough to over-\ncome the above disadvantages.There have been several\nperformance studies showing that graph simulation on\nRDBMSs outperform graph DBMSs [130, 143].More\nrecent work showed how SQL/PGQ in DuckDB outper-\nforms a leading graph DBMS by up to 10\n[196].This\ntrend will continue with further improvements in worst-\ncase optimal joins [132, 168] and factorized execution\nalgorithms [100] for graph queries in RDBMSs.⇥\n\n2.9 Summary\nA reasonable conclusion from the above section is that\nnon-SQL, non-relational systems are either a niche mar-\nket or are fast becoming SQL/RM systems.Speciﬁcally:\n\n•\n\nMapReduce Systems: They died years ago and are,\nat best, a legacy technology at present.•\n\n•\n\n•\n\n•\n\n•\n\n•\n\n•\n\nKey-value Stores: Many have either matured into\nRM systems or are only used for speciﬁc problems.These can generally be equaled or beaten by modern\nhigh-performance RDBMSs.Document Databases: Such NoSQL systems are on\na collision course with RDBMSs.The differences\nbetween the two kinds of systems have diminished\nover time and should become nearly indistinguish-\nable in the future.Column-Family Systems: These remain a niche\nmarket.Without Google, this paper would not be\ntalking about this category.Text Search Engines: These systems are used for\ntext ﬁelds in a polystore architecture.It would be\nvaluable if RDBMSs had a better story for search so\nthese would not have to be a separate product.Array Databases: Scientiﬁc applications will con-\ntinue to ignore RDBMSs in favor of bespoke array\nsystems.They may become more important because\nRDBMSs cannot efﬁciently store and analyze arrays\ndespite new SQL/MDA enhancements.Vector Databases: They are single-purpose DBMSs\nwith indexes to accelerate nearest-neighbor search.RM DBMSs should soon provide native support for\nthese data structures and search methods using their\nextendable type system that will render such special-\nized databases unnecessary.Graph Databases: OLTP graph applications will\nbe largely served by RDBMSs.In addition, ana-\nlytic graph applications have unique requirements\nthat are best done in main memory with specialized\ndata structures.RDBMSs will provide graph-centric\nAPIs on top of SQL or via extensions.We do not ex-\npect specialized graph DBMSs to be a large market.Beyond the above, there are also proposals to rebrand\nprevious data models as something novel.For example,\ngraph-relational [158] is the same as the semantic data\nmodel [202].Likewise, document-relational is the doc-\nument model with foreign keys [199].Others provide a\nnon-SQL veneer over a RDBMS (e.g., PRQL [64], Mal-\nloy [39]).Although these languages deal with some of\nSQL’s shortcomings, they are not compelling enough to\novercome its entrenched userbase and ecosystem.3 System Architectures\nThere have been major new ideas in DBMS architec-\ntures put forward in the last two decades that reﬂect-\ning changing application and hardware characteristics.These ideas range from terriﬁc to questionable, and we\ndiscuss them in turn.3.1 Columnar Systems\nTo understand the appeal of columnar DBMSs, we need\nto explain the origins of the data warehouse (OLAP)\nmarket.Beginning in the mid-1990s, enterprises started\n\nSIGMOD Record, June 2024 (Vol.53, No. 2)\n\n27\n\n\fcollecting their customer facing (usually sales) data.Brick-and-mortar retailers (e.g., Walmart) were at fore-\nfront of constructing historical sales databases.These\ncompanies generally found that a sales data warehouse\nwould pay for itself in better stock ordering and rota-\ntion decisions within six months.Such customer facing\ndatabases are now omnipresent in enterprises.Data warehouse applications have common proper-\n\nties that are distinct from OLTP workloads:\n1.They are historical in nature (i.e., they are loaded\n\nperiodically and then are read-only). 2.Organizations retain everything as long as they can\n\nafford the storage — think terabytes to petabytes.3. Queries typically only access a small subset of at-\ntributes from tables and are ad-hoc in nature.Ralph Kimball was an early proponent of star schema\ndata modelling for data warehouses [148, 149].The idea\nwas to construct a fact table that held item-level trans-\nactional data.The classic example is a fact table that\ncontains a record for every item purchased in a retail en-\nterprise.Then, one surrounds the fact table with dimen-\nsion tables that contain common information factored\nout from the fact table to save space.Again, in a retail\nsetting, these dimension tables would include informa-\ntion about customers, products, stores, and time.Organizing the DBMS’s storage by columns instead\nof rows has several beneﬁts [87].First, compressing\ncolumnar data is more effective than row-based data be-\ncause there is a single value type in a data block of-\nten many repeated bytes.Second, a Volcano-style en-\ngine executes operators once per row.In contrast, a\ncolumn-oriented engine has an inner loop that processes\na whole column using vectorized instructions [106, 147].Lastly, row stores have a large header for each record\n(e.g., 20 bytes) to track nulls and versioning meta-data,\nwhereas column stores have minimal storage overhead\nper record.Discussion: Over the last two decades, all vendors ac-\ntive in the data warehouse market have converted their\nofferings from a row store to a column store.This tran-\nsition brought about signiﬁcant changes in the design\nof DBMSs.In addition, several new vendors have en-\ntered the market in the last two decades with column\nstore offerings, for example Amazon’s Redshift [94] and\nGoogle’s BigQuery [162] along with offerings from in-\ndependent companies (e.g., Snowﬂake [121]).In summary, column stores are new DBMS implemen-\ntations with specialized optimizers, executors, and stor-\nage formats.They have taken over the data warehouse\nmarketplace because of their superior performance.3.2 Cloud Databases\nThe rise of cloud platforms in the late 2000s has also\ngreatly affected the implementation (and sales model) of\n\nDBMSs.Initial cloud DBMS offerings repackaged on-\nprem systems into managed VMs with direct-attached\nstorage.But over the last 20 years, networking band-\nwidth has increased much faster than disk bandwidth,\nmaking network attached storage (NAS) attractive as an\nalternative to attached storage.This has caused a pro-\nfound rethinking of DBMS architectures for the cloud.All major cloud vendors offer NAS via object stores\n(e.g., Amazon S3) with some DBMS functionality (e.g.,\nreplication, ﬁltering).Beyond better economics com-\npared to direct-attached storage, object stores have sev-\neral advantages that compensate for the cost of the\nadded network link.First, because the compute nodes\nare disconnected from the storage nodes, a system can\nprovide per-query elasticity; the DBMS can add new\ncompute nodes dynamically without having to reshufﬂe\ndata.It also allows the DBMS to use different hard-\nware for its storage nodes than compute nodes.Second,\nthe system can reassign compute nodes to other tasks\nif a DBMS is underutilized.On the other hand, in a\nshared-nothing DBMS, a node must always be online to\nhandle incoming query requests.Lastly, pushing down\ncomputation into the storage nodes is possible (and gen-\nerally advantageous).This execution strategy is known\nas “pushing the query to the data” versus “pulling the\ndata to the query” and is well understood in DBMSs.Generally, the ﬁrst two ideas are called “serverless\ncomputing”, and was introduced for cloud-native DBMSs\nby Snowﬂake [121].Other vendors have moved or\nare in the process of moving to a serverless environ-\nment for their cloud offerings.Effective utilization of\nthis model requires a hosted multi-node environment in\nwhich multiple DBMS customers are grouped onto the\nsame node(s) with a multi-tenant execution scheme.Discussion: The advent of cloud databases is another\nexample of “what goes around comes around”.Multi-\nnode shared-disk DBMSs are an old idea that histori-\ncally tended not to work out well.However, it is back in\nvogue with technology change (faster networking) and\nmoving to the cloud.In addition, time-sharing services\nwere popular in the 1970s when computers were big and\nexpensive.Cloud platforms are big time-sharing ser-\nvices, so the concept is back after a few decades.Since\nenterprises are moving everything possible to the cloud,\nwe expect this shared-disk to dominate DBMS architec-\ntures.Hence, we do not foresee shared-nothing architec-\ntures resurfacing in the future.The cloud has profoundly impacted DBMSs, causing\nthem to be completely re-architected.The movement\nof computing from on-prem to the cloud generates a\nonce-in-a-lifetime opportunity for enterprises to refac-\ntor codebases and remove bad historical technology de-\ncisions.A cloud environment also provides several ben-\neﬁts to vendors that are not possible with on-prem de-\nployments.Foremost is that vendors can track usage\n\n28\n\nSIGMOD Record, June 2024 (Vol. 53, No.2)\n\n\ftrends for all their customers: they can monitor unex-\npected behavior, performance degradations, and usage\npatterns.Moreover, they can push incremental updates\nand code patches without disrupting service.From a business perspective, open-source DBMSs\nface the danger of becoming too popular and being mon-\netized by the major cloud providers.The public spats\nbetween Amazon and ISVs like MongoDB [153] and\nElasticsearch [101] are notable examples.3.3 Data Lakes / Lakehouses\nAnother trend that the cloud platforms fomented is the\nmovement away from monolithic, dedicated data ware-\nhouses for OLAP workloads and towards data lakes\nbacked by object stores.With legacy data warehouses,\norganizations load data into the DBMS, which the sys-\ntem stashes in managed storage with proprietary for-\nmats.Vendors viewed their DBMSs as the “gatekeepers”\nfor all things related to data in an organization.However,\nthis has not been the model of many organizations, es-\npecially technology companies, for the last decade.With a data lake architecture, applications upload ﬁles\nto a distributed object store, bypassing the traditional\nroute through the DBMS [167].Users then execute\nqueries and processing pipelines on these accumulated\nﬁles using a lakehouse (a portmanteau of data ware-\nhouse and data lake) execution engine [93].These lake-\nhouse systems provide a uniﬁed infrastructure support-\ning SQL and non-SQL workloads.The latter is crucial\nas the last decade has shown that data scientists and ML\npractitioners typically use Python-based notebooks that\nuse Panda’s DataFrame API [159] to access data instead\nof SQL.Several projects leverage DBMS methods to\noptimize DataFrame processing, including Dask [181],\nPolars [61], Modin [177], and Bodo [198].Instead of using DBMS-speciﬁc proprietary ﬁle for-\nmats or inefﬁcient text-based ﬁles (e.g., CSV, JSON),\napplications write data to data lakes using open-source,\ndisk-resident ﬁle formats [203].The two most pop-\nular formats are Twitter/Cloudera’s Parquet [55] and\nMeta’s ORC [53, 140].Both of them borrow tech-\nniques from earlier columnar storage research, such as\nPAX [90], compression [87], and nested-data (JSON)\nshredding [121, 161].Apache Arrow [11] is a similar\nbinary format for exchanging in-memory data between\nsystems.Open-source libraries for reading/writing these\nformats allow disparate applications to create data ﬁles\nthat other systems then parse and consume, thereby en-\nhancing data sharing across services and business units.Discussion: Data lakes are the successor to “Big Data”\nmovement from the early 2010s, partly led by the pop-\nularity of MR systems (Sec.2.1) and column stores\n(Sec. 3.1).At ﬁrst glance, a data lake seems like a terri-\nble idea for an organization: allowing any application to\nwrite arbitrary ﬁles into a centralized repository without\n\nany governance is a recipe for integrity, discovery, and\nversioning problems [167].Lakehouses provide much-\nneeded control over these environments to help mitigate\nmany problems with meta-data, caching, and indexing\nservices [93].Additional middleware that tracks new\ndata and supports transactional updates, such as Delta\nLake [92], Iceberg [6], and Hudi [5], make lakehouses\nlook more like a traditional data warehouse.Data lakes introduce new challenges to query opti-\nmization.DBMSs have always struggled with acquir-\ning precise statistics on data,\nleading to poor query\nplan choices [154].However, a data lake system may\ncompletely lack statistics on newly ingested data ﬁles.Consequently, incorporating adaptive query processing\nstrategies is imperative in the cloud to enable a DBMS to\ndynamically modify query plans during execution based\non observed data characteristics [97, 105, 163].All the major cloud vendors now offer some variation\nof a managed data lake service.Since data lake sys-\ntems backed by object stores are much cheaper per giga-\nbyte than proprietary data warehouses, the legacy OLAP\nvendors (e.g., Teradata, Vertica) have extended their\nDBMSs to support reading data from object stores in re-\nsponse to this pricing pressure.Several independent sys-\ntems are also in this space, including Databricks [105],\nDremio [21], PrestoDB [63], and Trino [77].3.4 NewSQL Systems\nIn the late 2000s, there were multiple distributed NoSQL\nDBMSs available designed to scale horizontally to sup-\nport online applications with large number of concurrent\nusers [110].However, many organizations could not use\nthese NoSQL systems because their applications could\nnot give up strong transactional requirements.But the\nexisting RDBMSs (especially open-source ones) were\nnot able to (natively) scale across multiple machines.In\nresponse, NewSQL systems arrived in the early 2010s\nseeking to provide the scalability of NoSQL systems for\nOLTP workloads while still supporting SQL [95, 171].In other words, these new systems sought to achieve the\nsame scalability of NoSQL DBMSs from the 2000s but\nstill keep the RM and ACID transactions of the legacy\nDBMSs from the 1990s.There were two main groups of NewSQL systems.The ﬁrst was in-memory DBMSs, including H-Store [144,\n189] (commercialized as VoltDB [83]), SingleStore [69],\nMicrosoft Hekaton [128], and HyPer [146].Other start-\nup offerings included disk-oriented, distributed DBMSs\nlike NuoDB [47] and Clustrix [17].Discussion: There has yet to be a dramatic uptake in\nNewSQL DBMS adoption [96].The reason for this lack-\nluster interest is that existing DBMSs were good enough\nfor the time, which means organizations are unwilling to\ntake on the costs and risk of migrating existing applica-\ntions to newer technologies.Companies are more risk-\n\nSIGMOD Record, June 2024 (Vol. 53, No.2)\n\n29\n\n\faverse with changing OLTP DBMSs than with OLAP.If an OLTP DBMS fails, companies cannot execute the\ntransactions they need to generate revenue.In contrast,\nan OLAP DBMS failure could be limited to temporarily\ninconveniencing an analyst or data scientist.There were other restrictions in NewSQL DBMSs,\nsuch as only supporting a subset of standard SQL or\nbad performance on multi-node transactions.Some\nNewSQL products, like Microsoft’s Hekaton, were only\navailable as an extension to a legacy DBMS, requiring\nthe faster engine to use the slower DBMS’s interfaces.NewSQL vendors also incorrectly anticipated that in-\nmemory DBMS adoption would be larger in the last\ndecade.Flash vendors drove down costs while improv-\ning storage densities, bandwidth, and latencies.Higher\nDRAM costs and the collapse of persistent memory\n(e.g., Intel Optane) means that SSDs will remain domi-\nnant for OLTP DBMSs.The aftermath of NewSQL is a new crop of distributed,\ntransactional SQL RDBMSs.These include TiDB [141],\nCockroachDB [195], PlanetScale [60] (based on the\nVitess sharding middleware [80]), and YugabyteDB [86].The major NoSQL vendors also added transactions to\ntheir systems in the last decade despite previously strong\nclaims that they were unnecessary.Notable DBMSs that\nmade the shift include MongoDB, Cassandra, and Dy-\nnamoDB.This is of course due to customer requests\nthat transactions are in fact necessary.Google said this\ncogently when they discarded eventual consistency in\nfavor of real transactions with Spanner in 2012 [119].3.5 Hardware Accelerators\nThere has been a hunt for a cost-effective hardware ac-\ncelerator for DBMSs for the last 50 years.The promise\nis obvious: specialized hardware designed for a DBMS\nshould easily outperform a conventional CPU.In the 1980s, vendors fabricated custom hardware to\naccelerate DBMSs and marketed them as database ma-\nchines [107].Britton-Lee released the ﬁrst commercial\naccelerator product (IDM/500) in 1981 [192] that con-\ntained a conventional CPU with a hardware accelerator\nthat ofﬂoaded portions of a query’s execution.This ac-\ncelerator targeted a small subset of the execution path,\nand was not cost-effective.Teradata introduced its own\ndatabase machine that provided network hardware for\nsorting in-ﬂight tuples (Y-net [1]), but it was dropped\nfor a software-only solution [85].All other custom hard-\nware DBMS acceleration during the 1980s failed.Instead of building custom hardware for DBMSs, the\nlast 20 years have been about using commodity hard-\nware (FPGAs, GPUs) to accelerate queries.This is an\nenticing idea: a vendor can get the beneﬁts of a DBMS\naccelerator without the cost of fabricating the hardware.Netezza was one of the ﬁrst FPGA-based DBMSs\nthat started in the late 1990s as a fork of PostgreSQL.It used an FPGA to accelerate searches on disk-resident\npages, but originally could not search in-memory pages.Netezza corrected this limitation in a later version [2].Swarm64 attempted to sell a FPGA accelerator for Post-\ngreSQL but switched to a software-only architecture\nwithout the FPGA before they were acquired [91].Vitesse’s\nDeepgreen DB [81] is the only remaining FPGA-enhanced\nDBMS available from an ISV.There is more activity in the GPU-accelerated DBMS\nmarket.Notable GPU DBMSs include Kinetica [35],\nSqream [35], Brytlyt [13], and HeavyDB [48].If data\ndoes not ﬁt in GPU memory, then query execution is\nbottlenecked on loading data into the device, thereby\nrendering the hardware’s parallelization beneﬁts moot.Discussion: There are several conclusions that we can\ndraw from the above analysis.First, these systems are\nall focused on the OLAP market and only for RDBMSs;\nthere are essentially no data model implications to the\ndiscussion in this section.Also, OLAP workloads will\ncontinue to move aggressively to the cloud, but special-\npurpose hardware is not likely to ﬁnd acceptance unless\nit is built by the cloud vendor.Creating custom hardware just for a DBMS is not\ncost-effective for most companies.Commodity hard-\nware avoids this problem but there is still the challenge\nof integrating the hardware into a DBMS.The reason\nwhy there are more GPU DBMSs than FPGA systems\nis because there are existing support libraries available\nfor GPUs (e.g., Nvidia CUDA [169]).But cloud CPU-\nbased compute resources are incredibly cheap due to\neconomies of scale.The success of any accelerator is\nlikely to be limited to on-prem databases, but this mar-\nket is not growing at the same rate as cloud databases.Even if one could get an accelerator to market that\nshowed orders of magnitude improvement over existing\ntechnologies, that only solves half the problem needed\nfor adoption and success.A hardware-only company\nmust ﬁnd somebody to add support for its accelerator\nin a DBMS.If the accelerator is an optional add-on to\nthe DBMS, then adoption will be low and thus a DBMS\nvendor will not want to spend engineering time on sup-\nporting it.If the accelerator is a critical component of\nthe DBMS, then no vendor would outsource the devel-\nopment of such an important part to an outside vendor.The only place that custom hardware accelerators will\nsucceed is for the large cloud vendors.They can justify\nthe $50–100m R&D cost of custom hardware at their\nmassive scale.They also control the entire stack (hard-\nware and software) and can integrate their hardware at\ncritical locations.Amazon did this already with their\nRedshift AQUA accelerators [102].Google BigQuery\nhas custom components for in-memory shufﬂes [89].In spite of the long odds, we predict that there will be\nmany attempts in this space over the next two decades.30\n\nSIGMOD Record, June 2024 (Vol. 53, No.2)\n\n\f3.6 Blockchain Databases\nAs of this writing, a waning database technology fad\nis blockchains.These are decentralized log-structured\ndatabases (i.e., ledger) that maintain incremental check-\nsums using some variation of Merkle trees.These in-\ncremental checksums are how a blockchain ensures that\nthe database’s log records are immutable: applications\nuse these checksums to verify that previous database up-\ndates have not been altered.The ideal use case for blockchain databases is peer-to-\npeer applications where one cannot trust anybody.There\nis no centralized authority that controls the ordering of\nupdates to the database.Thus, blockchain implementa-\ntions use a BFT commit protocol to determine which\ntransaction to apply to the database next.At the present time, cryptocurrencies (Bitcoin) are\nthe only use case for blockchains.In addition, there\nhave been attempts to build a usable DBMS on top of\nblockchains, notably Fluree [25], BigChainDB [12], and\nResilientDB [136].These vendors (incorrectly) promote\nthe blockchain as providing better security and auditabil-\nity that are not possible in previous DBMSs.Discussion: We are required to place trust in several en-\ntities in today’s society.When one sells a house, they\ntrust the title company to manage the transaction.The\nonly applications without real-world trust are dark web\ninteractions (e.g., money laundering).Legitimate busi-\nnesses are unwilling to pay the performance price (about\nﬁve orders of magnitude) to use a blockchain DBMS.If\norganizations trust each other, they can run a shared dis-\ntributed DBMS more efﬁciently without wasting time\nwith blockchains.To the best of our knowledge, all the\nmajor cryptocurrency exchanges run their businesses off\ntraditional RDBMSs and not blockchain systems.Blockchain proponents make additional meaningless\nclaims of achieving data resiliency through replication\nin a peer-to-peer environment.No sensible company\nwould rely on random participants on the Internet as the\nbackup solution for mission-critical databases.There is possibly a (small) market for private block-\nchain DBMSs.Amazon’s Quantum Ledger Database\n(QLDB) released in 2018 [65] provides the same im-\nmutable and veriﬁable update guarantees as a blockchain,\nbut it is not decentralized (i.e., no BFT commit protocol).Amazon built QLDB after ﬁnding no compelling use\ncase for a fully decentralized blockchain DBMS [108].3.7 Summary\nThe key takeaways from the major technological thrusts\nin database systems are as follows:\n\n•\n\n•\n\nColumnar Systems: The change to columnar stor-\nage revolutionized OLAP DBMS architectures.Cloud Databases: The cloud has upended the con-\nventional wisdom on how to build scalable DBMSs.Except for embedded DBMSs, any product not start-\ning with a cloud offering will likely fail.Data Lakes / Lakehouses: Cloud-based object stor-\nage using open-source formats will be the OLAP\nDBMS archetype for the next ten years.NewSQL Systems: They leverage new ideas but\nhave yet to have the same impact as columnar and\ncloud DBMSs.It has led to new distributed DBMSs\nthat support stronger ACID semantics as a counter\nto NoSQL’s weaker BASE guarantees.Hardware Accelerators: We do not see a use case\nfor specialized hardware outside of the major cloud\nvendors, though start-ups will continue to try.Blockchain Databases: An inefﬁcient technology\nlooking for an application.History has shown this is\nthe wrong way to approach systems development.•\n\n•\n\n•\n\n•\n\n4 Parting Comments\nOur analysis of the last two decades in databases has sev-\neral takeaways.Unfortunately, some of these are repeats\nof the warnings from the 2005 paper.Never underestimate the value of good marketing for\nbad products.The database market is highly competi-\ntive and lucrative.This competition drives vendors to\nclaim that their new technologies will solve all sorts of\nproblems and change developers’ lives for the better.Ev-\nery developer has struggled with databases before, so\nthey are especially amenable to such marketing.Infe-\nrior DBMS products have succeeded via strong market-\ning despite the existence of better options available at\nthe time: Oracle did this in the 1980s, MySQL did this\nin the 2000s, and MongoDB did this in the 2010s.These\nsystems got enough traction early on to buy them time\nto ﬁx the engineering debt they accumulated earlier.Beware of DBMSs from large non-DBMS vendors.One interesting aspect in the last ten years of databases\nis the trend of tech companies building DBMSs in-house\nthat they then spin out as open-source projects.All these\nsystems started life as purpose-built applications for a\ntech company.The company then releases the DBMS\nas an open-source project (often pushed to the Apache\nFoundation for stewardship) in hopes to achieve “free”\ndevelopment from external users.Some times they come from large companies that can\nafford to allocate resources to developing new systems.Notable examples include Meta (Hive [197], Presto [63],\nCassandra [14], RocksDB [68]) and LinkedIn (Kafka [33],\nPinot [59], Voldemort [82]).Other systems are from\nstart-ups building a data-intensive product where they\nfelt the need to also build a DBMS.The most successful\nexamples are 10gen (MongoDB) and PowerSet (HBase),\nbut there also many failed endeavors.This trend to avoid “not invented here” software is\npartly because many companies’ promotion path favors\n\nSIGMOD Record, June 2024 (Vol.53, No. 2)\n\n31\n\n\fengineers who make new internal systems, even if ex-\nisting tools are sufﬁcient.But this perversion led many\nteams without DBMS engineering experience to under-\ntake building a new system.One should be wary of\nsuch systems when a company ﬁrst open-sources them,\nas they are almost always immature technologies.Do not ignore the out-of-box experience.One of the\nsalient selling points of many non-relational DBMSs is\na better “out-of-box” experience than RDBMSs.Most\nSQL systems require one ﬁrst to create a database and\nthen deﬁne their tables before they can load data.This\nis why data scientists use Python notebooks to analyze\ndata ﬁles quickly.Every DBMS should, therefore, make\nit easy to perform in situ processing of local and cloud-\nstorage ﬁles.DuckDB’s rising popularity is partly due\nto its ability to do this well.Vendors should also consider additional challenges\nthat customers will inevitably face with databases, in-\ncluding physical design, knob tuning, schema design,\nand query tuning.There is a crucial need for what one\nof us calls “self-driving” DBMSs [173].Developers need to query their database directly.Most OLTP applications created in the last 20 years pri-\nmarily interact with databases via an abstraction layer,\nsuch as an endpoint API (e.g., REST, GraphQL) or\nan object-relational mapper (ORM) library.Such lay-\ners translate an application’s high-level requests into\ndatabase queries.ORMs also automatically handle main-\ntenance tasks, such as schema migrations.One could\nargue that since OLTP developers never write raw SQL\nin their applications, it does not matter what data model\ntheir DBMS uses as these layers hide it.ORMs are a vital tool for rapid prototyping.But they\noften sacriﬁce the ability to push logic into the DBMS\nin exchange for interoperability with multiple DBMSs.Developers fall back to writing explicit database queries\nto override the poor auto-generated queries.This is why\nusing a RDBMS that supports SQL is the better choice.The impact of AI/ML on DBMSs will be signiﬁcant.How DBMSs should interact with modern AI/ML tools\nhas recently become a crucial question, especially with\nthe advent of LLMs (e.g., ChatGPT).Although this ﬁeld\nis moving rapidly, we offer a few initial comments.There is a resurgence in using natural languages (NLs)\nto query databases due to advancements in LLMs at\nconverting NL to query code (e.g., SQL) [133].Some\nhave even suggested that such AI-powered query inter-\nfaces will render SQL obsolete.NL interfaces are an\nold research topic that dates back to the 1970s [139],\nbut which historically has poor outcomes and thus little\nwidespread use [88].We acknowledge LLMs have im-\npressive results for this task but caution those who think\nNL will replace SQL.Nobody will write OLTP appli-\ncations using an NL, as most generate queries using\n\nORMs.For OLAP databases, NL could prove helpful\nin constructing the initial queries for exploratory anal-\nysis.However, these queries should be exposed to a\ndashboard-like reﬁnement tool since English and other\nNLs are rife with ambiguities and impreciseness.There is a reluctance to depend on current LLM tech-\nnology for decision-making inside the enterprise, espe-\ncially with ﬁnancial data.The biggest issue is that the\noutput of an LLM is not explainable to a human.Sec-\nond, LLM systems require more training data than “tra-\nditional” ML systems (e.g., random forests, Bayesian\nmodels).Companies generally cannot outsource the cre-\nation of training data for these models to unskilled peo-\nple.For these reasons, the uptake of LLMs for enter-\nprise data will be cautiously slow.Lastly, there is a considerable amount of recent re-\nsearch on using AI/ML to optimize the DBMSs [174].Examples include ML-oriented query optimizers [152,\n156], conﬁguration tuners [200, 204], and access meth-\nods [151, 193].Although such ML-assisted optimiza-\ntions are powerful tools to improve the performance of\nDBMSs, it does not obviate the need for high-quality\nsystems engineering.5 Conclusion\nWe predict that what goes around with databases will\ncontinue to come around in upcoming decades.Another\nwave of developers will claim that SQL and the RM are\ninsufﬁcient for emerging application domains.People\nwill then propose new query languages and data models\nto overcome these problems.There is tremendous value\nin exploring new ideas and concepts for DBMSs (it is\nwhere we get new features for SQL).The database re-\nsearch community and marketplace are more robust be-\ncause of it.However, we do not expect these new data\nmodels to supplant the RM.Another concern is the wasted effort of new projects\nreimplementing the same components that are not novel\nbut necessary to have a production-ready DBMS (e.g.,\nconﬁg handlers, parsers, buffer pools).To accelerate\nthe next generation of DBMSs, the community should\nfoster the development of open-source reusable compo-\nnents and services [112, 176].There are some efforts to-\nwards this goal, including for ﬁle formats (see Sec.3.3),\nquery optimization (e.g., Calcite [104], Orca [186]), and\nexecution engines (e.g., DataFusion [18], Velox [175]).We contend that the database community should strive\nfor a POSIX-like standard of DBMS internals to accel-\nerate interoperability.We caution developers to learn from history.In other\nwords, stand on the shoulders of those who came before\nand not on their toes.One of us will likely still be alive\nand out on bail in two decades, and thus fully expects to\nwrite a follow-up to this paper in 2044.32\n\nSIGMOD Record, June 2024 (Vol. 53, No.2)\n\n\fReferences\n\n[1] TeraData Forums.https://downloads.teradata.com/forum/\ndatabase/what-is-the-difference-between-a-ynet-and-\nbynet, September 2011.[2] Netezza TwinFin Architecture.https://www.iexpertify.com/\nlearn/netezza-twinfin-architecture/#.YYq5_S1h17Y,\nApril 2020.[3] Graph processing with sql server and azure sql database.https://docs.microsoft.com/en-us/sql/relational-\ndatabases/graphs/sql-graph-overview, 2021.[4] Georaster in oracle database.https://www.oracle.com/a/\n\ntech/docs/georaster-2021.pdf, mar 2021.[5] Apache Hudi. https://hudi.apache.org/, 2023.[7] Oracle introduces integrated vector database to augment\ngenerative ai and dramatically increase developer produc-\nhttps://www.oracle.com/news/announcement/ocw-\ntivity.integrated-vector-database-augments-generative-ai-\n2023-09-19/, sep 2023.[8] Introducing vector search on rockset.https://rockset.com/\nblog/introducing-vector-search-on-rockset/, apr 2023.\nhttps://docs.aerospike.com/tools/aql,\n\n[9] Aerospike AQL.2024. [10] Apache AGE. https://age.apache.org, 2024.[11] Apache Arrow. https://arrow.apache.org, 2024.[12] BigchainDB. https://www.bigchaindb.com/, 2024.[13] Brytlyt. https://brytlyt.io/, 2024.[14] Apache Cassandra. https://cassandra.apache.org, 2024.[15] The Cassandra Query Language\n\n(CQL).https:\n\n//cassandra.apache.org/doc/latest/cassandra/cql/,\n2024.[16] ChatGPT Plugins. https://openai.com/blog/chatgpt-\n\nplugins, March 2024.[17] Clustrix. https://clustrix.com, 2024. [18] Apache Arrow DataFusion.https://arrow.apache.org/\n\nhaystack.readthedocs.io, 2024.[21] Dremio. https://dremio.com/, 2024.[22] Apache drill. https://drill.apache.org, 2024.[23] Elasticsearch. https://www.elastic.co, 2024.[24] FAISS – Facebook AI Similarity Search.ai.facebook.com/tools/faiss/, 2024.\n\nhttps://\n\n[25] Fluree.https://flur.ee/, 2024. [26] Apache Giraph.https://giraph.apache.org, 2024. [27] Graphlab.https://en.wikipedia.org/wiki/GraphLab, 2024.[28] Apache Hbase. https://hbase.apache.org, 2024.[29] The hdf5 library & ﬁle format.https://www.hdfgroup.org/\n\nsolutions/hdf5, 2024.[30] Apache Hive. https://hive.apache.org, 2024.[31] Informix extensions and datablade modules.https:\n\n//www.ibm.com/docs/en/informix-servers/12.10?topic=\ninformix-extensions-datablade-modules, 2024.[32] Janusgraph. https://janusgraph.org/, 2024.[33] Apache Kafka. https://kafka.apache.org/, 2024.[34] kdb+. https://kx.com/, 2024.[35] Kinetica. https://www.kinetica.com/, 2024.[36] LangChain. https://langchain.com, 2024.[37] LevelDB. https://github.com/google/leveldb, 2024.[38] Apache Lucene. https://lucene.apache.org, 2024.[39] Malloy - Experimental Language.looker-open-source/malloy, 2024.[40] Milvus. https://milvus.io/, 2024. [41] MongoDB.https://mongodb.com, 2024.\n\nhttps://github.com/\n\n[42] Mongodb – querying with sql.https://docs.mongodb.com/\n\ndatalake/admin/query-with-sql/, 2024.[43] MySQL\n\n–\n\nInnoDB Full-Text\n\nIndexes.https:\n\n//dev.mysql.com/doc/refman/8.0/en/innodb-fulltext-\nindex.html, 2024.[44] Neo4j. https://neo4j.com/, 2024. [45] Amazon Neptune.https://aws.amazon.com/neptune/, 2024.[46] Network Common Data Form (NetCDF).https://\n\nwww.unidata.ucar.edu/software/netcdf/, 2024.[47] Nuodb. https://nuodb.com, 2024.[48] Heavydb. https://www.heavy.ai, 2024.[49] openCypher. https://opencypher.org, 2024. [50] Oracle graph database.https://www.oracle.com/database/\n\ngraph/, 2024.\n\nlang.org/, 2024.[51] PGQL – Property Graph Query Language.https://pgql-\n\n[52] Oracle\n\nText.https://www.oracle.com/database/\n\ntechnologies/datawarehouse-bigdata/text.html, 2024.[53] Apache ORC. https://orc.apache.org/, 2024.[54] Paradigm4 platform overview.https://www.paradigm4.com/\n\ntechnology/scidb-platform-overview/, 2024.[55] Apache Parquet. https://parquet.apache.org/, 2024.[56] Partiql – sql-compatible access to relational, semi-structured,\n\nand nested data.https://partiql.org/, 2024. [57] Apache Phoenix.https://phoenix.apache.org, 2024.[58] Pinecone. https://www.pinecone.io/, 2024.[59] Apache Pinot. https://pinot.apache.org/, 2024.[60] PlanetScale. https://planetscale.com/, 2024.[61] Polars. https://www.pola.rs, 2024. –\n[62] PostgreSQL\n\nSearch.Text\n\nFull\n\nwww.postgresql.org/docs/current/textsearch.html,\n2024.\n\nhttps://\n\n[63] PrestoDB.https://prestodb.io/, 2024. [64] PRQL – A Proposal for a Better SQL.https://prql-\n\nlang.org/, 2024.[65] Amazon Quantum Ledger Database (QLDB).https://\n\n[67] Redis. https://redis.io/, 2024.[68] RocksDB. https://rocksdb.org, 2024.[69] Singestore. https://www.singlestore.com/, 2024.[70] Apache Solr. https://solr.apache.org/, 2024.[71] SQLite. https://www.sqlite.org, 2024.[72] Sql++ – the next-generation query language for managing json\ndata.https://www.couchbase.com/sqlplusplus, 2024.[73] Teradata – creating an array data\n\ntype.https:\n\n//docs.teradata.com/r/S0Fw2AVH8ff3MDA0wDOHlQ/\nun3kj~t3qMDO66LF4YXuiw, 2024.[74] Tigergraph. https://www.tigergraph.com/, 2024.[75] Tigergraph – gsql. https://www.tigergraph.com/gsql/,\n\n2024.[76] Tiledb. https://tiledb.com, 2024.[77] Trino. https://trino.io/, 2024.[78] Turi. http://turi.com/, 2024.[79] Vespa. https://vespa.ai/, 2024.[80] Vitess. https://vitess.io, 2024. [81] Vitesse Deepgreen DB.products/deepgreen-db/, 2024.\n\nhttps://www.vitessedata.com/\n\n[82] Project Voldemort.https://www.project-voldemort.com,\n\n2024.[83] Voltdb. https://www.voltactivedata.com/, 2024.[84] Weaviate. https://weaviate.io, 2024.[85] Dbc 1012. https://en.wikipedia.org/wiki/DBC_1012, 2024.[86] YugabyteDB. https://www.yugabyte.com/, 2024. [87] D. J. Abadi.Query Execution in Column-Oriented Database\n\nSystems.PhD thesis, MIT, 2008.\n\ndatafusion/, 2024.[19] Microsoft DiskANN. DiskANN, 2024. [20] Django\n\nHaystack.https://github.com/microsoft/\n\nhttps://django-\n\naws.amazon.com/qldb/, 2024.[66] The\n\nraster\nrasdaman\nwww.rasdaman.org, 2024.\n\narray\n\ndatabase.http://\n\nSIGMOD Record, June 2024 (Vol. 53, No.2)\n\n33\n\n\f[88] K. Affolter, K. Stockinger, and A. Bernstein.A compara-\ntive survey of recent natural language interfaces for databases.VLDB J., 28(5):793–819, 2019. doi: 10.1007/s00778-019-\n00567-8.[89] H. Ahmadi. In-memory query execution in google bigquery.https://cloud.google.com/blog/products/bigquery/in-\nmemory-query-execution-in-google-bigquery, Aug 2016.[90] A. Ailamaki, D. J. DeWitt, M. D. Hill, and M. Skounakis.Weaving relations for cache performance.In VLDB, volume 1,\npages 169–180, 2001. [91] G. Anadiotis.Open source postgresql on steroids: Swarm64\ndatabase acceleration software for performance improvement\nhttps://www.zdnet.com/article/open-\nand analytics.source-postgresql-on-steroids-swarm64-database-\nacceleration-software-for-performance-improvement-\nand-analytics/, apr 2023.[92] M. Armbrust, T. Das, L. Sun, B. Yavuz, S. Zhu, M. Murthy,\nJ. Torres, H. van Hovell, A. Ionescu, A. Łuszczak, et al.Delta\nlake: high-performance acid table storage over cloud object\nstores.Proceedings of the VLDB Endowment, 13(12):3411–\n3424, 2020.[93] M. Armbrust, A. Ghodsi, R. Xin, and M. Zaharia.Lakehouse:\na new generation of open platforms that unify data warehousing\nand advanced analytics.In Proceedings of CIDR, page 8, 2021.[94] N. Armenatzoglou, S. Basu, N. Bhanoori, M. Cai, N. Chainani,\nK. Chinta, V. Govindaraju, T. J.Green, M. Gupta, S. Hillig,\nE. Hotinger, Y. Leshinksy, J. Liang, M. McCreedy, F. Nagel,\nI. Pandis, P. Parchas, R. Pathak, O. Polychroniou, F. Rahman,\nG. Saxena, G. Soundararajan, S. Subramanian, and D. Terry.Amazon redshift re-invented. In Proceedings of the 2022 Inter-\nnational Conference on Management of Data, SIGMOD ’22,\npages 2205–2217, 2022. doi: 10.1145/3514221.3526045.[95] M. Aslett. How will the database incumbents respond to\n\nNoSQL and NewSQL?The 451 Group, April 2011. [96] M. Aslett.Ten years of NewSQL: Back to the future of dis-\ntributed relational databases.The 451 Group, June 2021. [97] S. Babu and P. Bizarro.Adaptive query processing in the look-\n\ning glass.In CIDR, pages 238–249, January 2005.[98] D. F. Bacon, N. Bales, N. Bruno, B. F. Cooper, A. Dickinson,\nA. Fikes, C. Fraser, A. Gubarev, M. Joshi, E. Kogan, A. Lloyd,\nS. Melnik, R. Rao, D. Shue, C. Taylor, M. van der Holst, and\nIn Pro-\nD. Woodford.Spanner: Becoming a sql system.ceedings of the 2017 ACM International Conference on Man-\nagement of Data, SIGMOD ’17, pages 331–343, 2017. doi:\n10.1145/3035918.3056103.[99] J. Baker, C. Bond, J. C. Corbett, J. Furman, A. Khorlin, J. Lar-\nson, J.-M. Leon, Y. Li, A. Lloyd, and V. Yushprakh.Megastore:\nProviding scalable, highly available storage for interactive ser-\nIn Proceedings of the Conference on Innovative Data\nvices.system Research (CIDR), pages 223–234, 2011.[100] N. Bakibayev, D. Olteanu, and J. Závodný.Fdb: A query en-\ngine for factorised relational databases. Proc.VLDB Endow., 5\n(11):1232–1243, jul 2012. doi: 10.14778/2350229.2350242. [101] S. Banon.Amazon: NOT OK - why we had to change Elas-\nhttps://www.elastic.co/blog/why-license-\n\ntic licensing.change-aws, jan 2021. [102] J. Barr.AQUA (Advanced Query Accelerator) –\nfor Your Amazon Redshift Queries.A Speed Boost\nhttps://aws.amazon.com/blogs/aws/new-aqua-advanced-\nquery-accelerator-for-amazon-redshift/, Apr 2021.[103] P. Baumann. A database array algebra for spatio-temporal data\nand beyond.In Next Generation Information Technologies and\nSystems, 4th International Workshop, NGITS’99, volume 1649\nof Lecture Notes in Computer Science, pages 76–93, 1999. doi:\n10.1007/3-540-48521-X_7.[104] E. Begoli, J. Camacho-Rodríguez, J. Hyde, M. J. Mior, and\nD. Lemire.Apache calcite: A foundational framework for\noptimized query processing over heterogeneous data sources.In Proceedings of the 2018 International Conference on Man-\nagement of Data, SIGMOD ’18, pages 221–230, 2018. doi:\n10.1145/3183713.3190662.[105] A. Behm, S. Palkar, U. Agarwal, T. Armstrong, D. Cashman,\nA. Dave, T. Greenstein, S. Hovsepian, R. Johnson, A. Sai Krish-\nnan, P. Leventis, A. Luszczak, P. Menon, M. Mokhtar, G. Pang,\nS. Paranjpye, G. Rahn, B. Samwel, T. van Bussel, H. van Hov-\nell, M. Xue, R. Xin, and M. Zaharia.Photon: A fast query\nengine for lakehouse systems.In Proceedings of the 2022 In-\nternational Conference on Management of Data, SIGMOD ’22,\npages 2326–2339, 2022. doi: 10.1145/3514221.3526054.[106] P. A. Boncz, M. Zukowski, and N. Nes.Monetdb/x100: Hyper-\n\npipelining query execution.In CIDR, pages 225–237, 2005. [107] H. Boral and D. J. DeWitt.Database machines: An idea whose\ntime passed?A critique of the future of database machines.pages 166–187, 1983. doi: 10.1007/978-3-642-69419-6\n_10.https://www.tbray.org/\nnov\n\n[108] T. Bray. AWS and Blockchain.ongoing/When/202x/2022/11/19/AWS-Blockchain,\n2019.\\\n\n[109] P. Carbone, A. Katsifodimos, S. Ewen, V. Markl, S. Haridi, and\nK. Tzoumas.Apache ﬂink: Stream and batch processing in a\nsingle engine.The Bulletin of the Technical Committee on Data\nEngineering, 38(4), 2015.[110] R. Cattell. Scalable sql and nosql data stores.SIGMOD Rec.,\n\n39:12–27, 2011. [111] F. Chang, J.Bigtable:\nA distributed storage system for structured data.In Proceedings\nof the USENIX Symposium on Operating Systems Design and\nImplementation, OSDI ’06, pages 205–218, 2006.[112] S. Chaudhuri and G. Weikum.Rethinking database system ar-\nchitecture: Towards a self-tuning risc-style database system.In\nVLDB 2000, Proceedings of 26th International Conference on\nVery Large Data Bases, pages 1–10, 2000.[113] C. Chin. The rise and fall of the olap cube.https:\n\n//www.holistics.io/blog/the-rise-and-fall-of-the-\nolap-cube/, January 2020.[114] M. Chock, A. F. Cardenas, and A. Klinger.Database struc-\nture and manipulation capabilities of a picture database man-\nagement system (picdms).IEEE Transactions on Pattern Anal-\nysis and Machine Intelligence, PAMI-6(4):484–492, 1984. doi:\n10.1109/TPAMI.1984.4767553.[115] E. F. Codd. A relational model of data for large shared\ndata banks.Commun. ACM, 13(6):377–387, jun 1970. doi:\n10.1145/362384.362685.[116] E. F. Codd. Further normalization of the data base relational\nmodel.Research Report / RJ / IBM / San Jose, California,\nRJ909, 1971.[117] W. W. W. Consortium. Overview of sgml resources.https:\n\n//www.w3.org/MarkUp/SGML/, 2004.[118] W. W. W. Consortium. Extensible Markup Language (XML).https://www.w3.org/XML/, 2016. [119] J. C. Corbett, J.Dean, M. Epstein, A. Fikes, C. Frost, J. Furman,\nS. Ghemawat, A. Gubarev, C. Heiser, P. Hochschild, W. Hsieh,\nS. Kanthak, E. Kogan, H. Li, A. Lloyd, S. Melnik, D. Mwaura,\nD. Nagle, S. Quinlan, R. Rao, L. Rolig, M. S. Yasushi Saito,\nC. Taylor, R. Wang, and D. Woodford.Spanner: Google’s\nGlobally-Distributed Database.In OSDI, 2012. [120] A. Crotty, V. Leis, and A. Pavlo.Are you sure you want to use\nMMAP in your database management system?In Conference\non Innovative Data Systems Research. www.cidrdb.org, 2022.[121] B. Dageville, T. Cruanes, M. Zukowski, V. Antonov, A. Avanes,\nJ. Bock, J. Claybaugh, D. Engovatov, M. Hentschel, J. Huang,\nA. W. Lee, A. Motivala, A. Q. Munir, S. Pelley, P. Povinec,\nG. Rahn, S. Triantafyllis, and P. Unterbrunner.The snowﬂake\nIn Proceedings of the 2016 Inter-\nelastic data warehouse.national Conference on Management of Data, SIGMOD ’16,\npages 215–226, 2016. doi: 10.1145/2882903.2903741.[122] J. Dean and S. Ghemawat.MapReduce: Simpliﬁed data pro-\ncessing on large clusters.In 6th Symposium on Operating Sys-\ntems Design & Implementation (OSDI 04).USENIX Associa-\ntion, Dec. 2004.34\n\nSIGMOD Record, June 2024 (Vol.53, No. 2)\n\n\f[123] J. Dean and S. Ghemawat.Mapreduce: A ﬂexible data process-\n\ning tool.Commun. ACM, 53(1):72–77, Jan. 2010. [124] A. Dearmer.Storing apache hadoop data on the cloud - hdfs\nhttps://www.xplenty.com/blog/storing-apache-\n\nvs. s3.hadoop-data-cloud-hdfs-vs-s3/, November 2019.[125] G. DeCandia, D. Hastorun, M. Jampani, G. Kakulapati, A. Lak-\nshman, A. Pilchin, S. Sivasubramanian, P. Vosshall, and W. Vo-\ngels.Dynamo: Amazon’s highly available key-value store.SIGOPS Oper. Syst. Rev., 41(6):205–220, oct 2007.[126] A. Deutsch, N. Francis, A.Green, K. Hare, B. Li, L. Libkin,\nT. Lindaaker, V. Marsault, W. Martens, J. Michels, F. Murlak,\nS. Plantikow, P. Selmer, O. van Rest, H. Voigt, D. Vrgoˇc,\nM. Wu, and F. Zemke.Graph pattern matching in gql and\nIn Proceedings of the 2022 International Confer-\nsql/pgq.ence on Management of Data, SIGMOD ’22, pages 2246–2258,\n2022. doi: 10.1145/3514221.3526057.[127] D. DeWitt and J. Gray. Parallel database systems: The future\nof high performance database systems.Commun. ACM, 35(6):\n85–98, jun 1992. doi: 10.1145/129888.129894.[128] C. Diaconu, C. Freedman, E. Ismert, P. Larson, P. Mit-\ntal, R. Stonecipher, N. Verma, and M. Zwilling.Hekaton:\nIn Proceed-\nSQL server’s memory-optimized OLTP engine.ings of the ACM SIGMOD International Conference on Man-\ndoi: 10.1145/\nagement of Data, pages 1243–1254, 2013. 2463676.2463710.[129] M. Elhemali, N. Gallagher, N. Gordon, J. Idziorek, R. Krog,\nC. Lazier, E. Mo, A. Mritunjai, S. Perianayagam, T. Rath,\nS. Sivasubramanian, J. C. S. III, S. Sosothikul, D. Terry, and\nA. Vig.Amazon DynamoDB: A scalable, predictably perfor-\nmant, and fully managed NoSQL database service.In USENIX\nAnnual Technical Conference, pages 1037–1048, July 2022.[130] J. Fan, A. G. S. Raj, and J. M. Patel.The case against special-\nized graph analytics engines.In Seventh Biennial Conference\non Innovative Data Systems Research, CIDR, 2015.[131] B. Fitzpatrick. Distributed caching with memcached.Linux J.,\n\n2004(124):5, aug 2004. ISSN 1075–3583.[132] M. Freitag, M. Bandle, T. Schmidt, A. Kemper, and T. Neu-\nmann.Adopting worst-case optimal joins in relational database\nsystems. Proc.VLDB Endow., 13(12):1891–1904, jul 2020.\ndoi: 10.14778/3407790.3407797.[133] H. Fu, C. Liu, B. Wu, F. Li, J. Tan, and J. Sun.Catsql: To-\nwards real world natural language to sql applications. Proc.VLDB Endow., 16(6):1534–1547, feb 2023. doi: 10.14778/\n3583140.3583165.[134] S. Ghemawat, H. Gobioff, and S.-T. Leung.The google ﬁle\nsystem. SIGOPS Oper.Syst. Rev., 37(5):29–43, oct 2003.ISSN\n0163-5980. doi: 10.1145/1165389.945450. [135] J.Gray, A. Bosworth, A. Layman, and H. Pirahesh.Data\ncube: A relational aggregation operator generalizing group-by,\nIn Proceedings of the International\ncross-tab, and sub-total.Conference on Data Engineering, pages 152–159, 1996. doi:\n10.1109/ICDE.1996.492099.[136] S. Gupta, S. Rahnama, J. Hellings, and M. Sadoghi.Re-\nProc. silientdb: Global scale resilient blockchain fabric.10.14778/\nVLDB Endow., 13(6):868–883, 2020.3380750.3380757.\n\ndoi:\n\n[137] E. Hanson and A. Comet.Why Your Vector Database Should\nNot be a Vector Database.https://www.singlestore.com/\nblog/why-your-vector-database-should-not-be-a-\nvector-database/, April 2023.[138] G. Harrison. How WiredTiger Revolutionized MongoDB.https://www.dbta.com/Columns/MongoDB-Matters/How-\nWiredTiger-Revolutionized-MongoDB-145510.aspx,\n2021.\n\nmar\n\n[139] G. G. Hendrix, E. D. Sacerdoti, D. Sagalowicz, and J. Slocum.Developing a natural language interface to complex data. ACM\nTrans.Database Syst., 3(2):105–147, jun 1978. doi: 10.1145/\n320251.320253. [140] Y. Huai, A. Chauhan, A.Gates, G. Hagleitner, E. N. Hanson,\nO. O’Malley, J. Pandey, Y. Yuan, R. Lee, and X. Zhang.Major\ntechnical advancements in apache hive.In Proceedings of the\n2014 ACM SIGMOD international conference on Management\nof data, pages 1235–1246, 2014.[141] D. Huang, Q. Liu, Q. Cui, Z. Fang, X. Ma, F. Xu, L. Shen,\nL. Tang, Y. Zhou, M. Huang, W. Wei, C. Liu, J. Zhang,\nJ. Li, X. Wu, L. Song, R. Sun, S. Yu, L. Zhao, N. Cameron,\nL. Pei, and X. Tang.Tidb: A raft-based htap database. Proc.VLDB Endow., 13(12):3072–3084, aug 2020. doi: 10.14778/\n3415478.3415535.[142] K. E. Iverson. A Programming Language.John Wiley & Sons,\n\nInc., 1962. ISBN 0471430145.[143] A. Jindal, S. Madden, M. Castellanos, and M. Hsu.Graph ana-\nlytics using vertica relational database.In 2015 IEEE Interna-\ntional Conference on Big Data, pages 1191–1200, 2015.[144] R. Kallman, H. Kimura, J. Natkins, A. Pavlo, A. Rasin,\nS. Zdonik, E. P. C. Jones, S. Madden, M. Stonebraker, Y. Zhang,\nJ. Hugg, and D. J. Abadi.H-store: A high-performance, dis-\ntributed main memory transaction processing system.Proc. VLDB Endow., 1(2):1496–1499, aug 2008. doi: 10.14778/\n1454159.1454211.[145] A. Kane. pgvector. https://github.com/pgvector/pgvector,\n\n2024.[146] A. Kemper and T. Neumann.Hyper: A hybrid oltp&olap main\nmemory database system based on virtual memory snapshots.In Proceedings of the 27th International Conference on Data\nEngineering, pages 195–206.IEEE Computer Society, 2011.\ndoi: 10.1109/ICDE.2011.5767867.[147] T. Kersten, V. Leis, A. Kemper, T. Neumann, A. Pavlo, and\nP. Boncz.Everything you always wanted to know about com-\npiled and vectorized queries but were afraid to ask.Proc. VLDB Endow., 11(13):2209–2222, jan 2019. doi: 10.14778/\n3275366.3284966. [148] R. Kimball.The Data Warehouse Toolkit: Practical Techniques\nfor Building Dimensional Data Warehouses.John Wiley, 1996. [149] R. Kimball and K. Strehlo.Why decision support fails and how\n\nto ﬁx it.SIGMOD Rec., 24(3):92–97, 1995.[150] M. Kornacker, A. Behm, V. Bittorf, T. Bobrovytsky, C. Ching,\nA. Choi, J. Erickson, M. Grund, D. Hecht, M. Jacobs, I. Joshi,\nL. Kuff, D. Kumar, A. Leblang, N. Li, I. Pandis, H. Robinson,\nD. Rorke, S. Rus, J. Russell, D. Tsirogiannis, S. Wanderman-\nMilne, and M. Yoder.Impala: A modern, open-source sql en-\ngine for hadoop.In CIDR, 2015. [151] T. Kraska, A. Beutel, E. H. Chi, J.Dean, and N. Polyzotis. The\ncase for learned index structures.In Proceedings of the 2018\nInternational Conference on Management of Data, SIGMOD\n’18, pages 489–504, 2018. doi: 10.1145/3183713.3196909.[152] S. Krishnan, Z. Yang, K. Goldberg, J. Hellerstein, and I. Sto-\nica.Learning to optimize join queries with deep reinforcement\nlearning, 2018.URL https://arxiv.org/abs/1808.03196. [153] F. Lardinois.Aws gives open source the middle ﬁn-\nger.https://techcrunch.com/2019/01/09/aws-gives-open-\nsource-the-middle-finger/, jan 2019.[154] V. Leis, A. Gubichev, A. Mirchev, P. A. Boncz, A. Kemper,\nand T. Neumann.How good are query optimizers, really?doi: 10.14778/\nProc. VLDB Endow., 9(3):204–215, 2015.2850583.2850594. [155] D. Maier and B. Vance. A call to order.In Proceedings\nof the Twelfth ACM SIGACT-SIGMOD-SIGART Symposium\non Principles of Database Systems, pages 1–16, 1993. doi:\n10.1145/153850.153851.[156] R. Marcus, P. Negi, H. Mao, N. Tatbul, M. Alizadeh, and\nT. Kraska.Bao: Making learned query optimization practical.In Proceedings of the 2021 International Conference on Man-\nagement of Data, SIGMOD ’21, pages 1275–1288, 2021. doi:\n10.1145/3448016.3452838.[157] D. McDiarmid. Vector search with clickhouse.https://\nclickhouse.com/blog/vector-search-clickhouse-p2, May\n2023.SIGMOD Record, June 2024 (Vol.53, No. 2)\n\n35\n\n\f[158] C. McDonnell.The graph-relational database, deﬁned.https://www.edgedb.com/blog/the-graph-relational-\ndatabase-defined, March 2022.[159] W. McKinney et al. Data structures for statistical computing\nin python.In Proceedings of the 9th Python in Science Confer-\nence, volume 445, pages 51–56, 2010.[160] F. McSherry. Scalability! but at what cost?http:\n\n//www.frankmcsherry.org/graph/scalability/cost/2015/\n01/15/COST.html, January 2015.[161] S. Melnik, A. Gubarev, J. J.Long, G. Romer, S. Shivakumar,\nM. Tolton, and T. Vassilakis.Dremel: Interactive analysis of\nweb-scale datasets.Proc. VLDB Endow., 3(12):330–339, sep\n2010.ISSN 2150-8097. doi: 10.14778/1920841.1920886.[162] S. Melnik, A. Gubarev, J. J.Long, G. Romer, S. Shivakumar,\nM. Tolton, T. Vassilakis, H. Ahmadi, D. Delorey, S. Min, M. Pa-\nsumansky, and J. Shute.Dremel: A decade of interactive sql\nanalysis at web scale.Proc. VLDB Endow., 13(12):3461–3472,\naug 2020.ISSN 2150-8097. doi: 10.14778/3415478.3415568.[163] P. Menon, A. Ngom, T. C. Mowry, A. Pavlo, and L. Ma.Per-\nmutable compiled queries: Dynamically adapting compiled\nqueries without recompiling.Proc. VLDB Endow., 14(2):101–\n113, 2020. doi: 10.14778/3425879.3425882.[164] C. Metz. duce. google_caffeine_explained/, September 2010.Google search index splits with mapre-\nhttps://www.theregister.com/2010/09/09/\n\n[165] J. Michels, K. Hare, K. Kulkarni, C. Zuzarte, Z. H. Liu,\nB. Hammerschmidt, and F. Zemke.The new and improved sql:\n2016 standard.SIGMOD Rec., 47(2):51–60, dec 2018. doi:\n10.1145/3299887.3299897.[166] D. Misev and P. Baumann.Sql support for multidimen-\nsional arrays.Technical Report 34, Jacobs University, July\n2017.URL https://nbn-resolving.org/urn:nbn:de:gbv:\n579-opus-1007237.[167] F. Nargesian, E. Zhu, R. J. Miller, K. Q. Pu, and P. C. Arocena.Data lake management: Challenges and opportunities. Proc.VLDB Endow., 12(12):1986–1989, aug 2019. doi: 10.14778/\n3352063.3352116.[168] H. Q. Ngo, C. Ré, and A. Rudra.Skew strikes back: New\ndevelopments in the theory of join algorithms.SIGMOD Rec.,\n42(4):5–16, feb 2014. doi: 10.1145/2590989.2590991.[169] NVIDIA, P. Vingelmann, and F. H. Fitzek. Cuda toolkit.https:\n\n//developer.nvidia.com/cuda-toolkit, 2020.[170] M. A. Olson, K. Bostic, and M. I. Seltzer. Berkeley DB.In Pro-\nceedings of the FREENIX Track: 1999 USENIX Annual Tech-\nnical Conference, pages 183–191, 1999.[171] A. Pavlo and M. Aslett. What’s really new with newsql?SIG-\n\nMOD Record, 45(2):45–55, Sep 2016.[172] A. Pavlo, E. Paulson, A. Rasin, D. J. Abadi, D. J. DeWitt,\nS. Madden, and M. Stonebraker.A comparison of approaches\nto large-scale data analysis.In Proceedings of the ACM SIG-\nMOD International Conference on Management of Data, pages\n165–178, 2009.[173] A. Pavlo, G. Angulo, J. Arulraj, H. Lin, J. Lin, L. Ma, P. Menon,\nT. Mowry, M. Perron, I. Quah, S. Santurkar, A. Tomasic,\nS. Toor, D. V. Aken, Z. Wang, Y. Wu, R. Xian, and T. Zhang.In CIDR 2017,\nSelf-driving database management systems.Conference on Innovative Data Systems Research, 2017.[174] A. Pavlo, M. Butrovich, A. Joshi, L. Ma, P. Menon, D. V. Aken,\nL. Lee, and R. Salakhutdinov.External vs. internal: An essay\non machine learning agents for autonomous database manage-\nment systems.IEEE Data Eng. Bull., 42(2):32–46, 2019.[175] P. Pedreira, O. Erling, M. Basmanova, K. Wilfong, L. Sakka,\nK. Pai, W. He, and B. Chattopadhyay.Velox: Meta’s uniﬁed\nexecution engine. Proc.VLDB Endow., 15(12):3372–3384, aug\n2022. doi: 10.14778/3554821.3554829.[176] P. Pedreira, O. Erling, K. Karanasos, S. Schneider, W. McK-\ninney, S. R. Valluri, M. Zait, and J. Nadeau.The composable\ndata management system manifesto. Proc.VLDB Endow., 16\n(10):2679–2685, jun 2023. doi: 10.14778/3603581.3603604.[177] D. Petersohn, S. Macke, D. Xin, W. Ma, D. Lee, X. Mo,\nJ. E. Gonzalez,\nJ. M. Hellerstein, A. D. Joseph, and\nA. Parameswaran.Towards scalable dataframe systems. Proc.VLDB Endow., 13(12):2033–2046, jul 2020. doi: 10.14778/\n3407790.3407807.[178] D. Petkovic. SQL/JSON standard: Properties and deﬁciencies.doi: 10.1007/\n\nDatenbank-Spektrum, 17(3):277–287, 2017.\ns13222-017-0267-4. [179] D. Pritchett.BASE: An Acid Alternative:\n\nIn Partitioned\nDatabases, Trading Some Consistency for Availability Can\nLead to Dramatic Improvements in Scalability.ACM Queue,\n6(3):48–55, may 2008. doi: 10.1145/1394127.1394128.[180] M. Raasveldt and H. Mühleisen.Duckdb: An embeddable ana-\nlytical database.In Proceedings of the 2019 International Con-\nference on Management of Data, SIGMOD ’19, pages 1981–\n1984, 2019. doi: 10.1145/3299869.3320212.[181] M. Rocklin. Dask: Parallel computation with blocked algo-\nrithms and task scheduling.In Proceedings of the 14th Python\nin Science Conference, pages 130–136, 2015.[182] F. Rusu. Multidimensional array data management. Found.doi: 10.1561/\n\nTrends Databases, 12(2-3):69–220, 2023. 1900000069.[183] S. Sakr, A. Bonifati, H. Voigt, A. Iosup, K. Ammar, R. An-\ngles, W. Aref, M. Arenas, M. Besta, P. A. Boncz, K. Daudjee,\nE. D. Valle, S. Dumbrava, O. Hartig, B. Haslhofer, T. Hege-\nman, J. Hidders, K. Hose, A. Iamnitchi, V. Kalavri, H. Kapp,\nW. Martens, M. T. Özsu, E. Peukert, S. Plantikow, M. Ragab,\nM. R. Ripeanu, S. Salihoglu, C. Schulz, P. Selmer, J. F. Se-\nqueda, J. Shinavier, G. Szárnyas, R. Tommasini, A. Tumeo,\nA. Uta, A. L. Varbanescu, H.-Y.Wu, N. Yakovets, D. Yan, and\nE. Yoneki.The future is big graphs: A community view on\ngraph processing systems.Commun. ACM, 64(9):62–71, aug\n2021. doi: 10.1145/3434642.[184] G. Salton and M. E. Lesk.The smart automatic document re-\ntrieval systems–an illustration.Commun. ACM, 8(6):391–398,\njun 1965. doi: 10.1145/364955.364990.[185] R. Sethi, M. Traverso, D. Sundstrom, D. Phillips, W. Xie,\nY.Sun, N. Yegitbasi, H. Jin, E. Hwang, N. Shingte, and\nIn 2019 IEEE 35th\nC. Berner. Presto: Sql on everything.International Conference on Data Engineering (ICDE), pages\n1802–1813, 2019. doi: 10.1109/ICDE.2019.00196.[186] M. A. Soliman, L. Antova, V. Raghavan, A. El-Helw, Z. Gu,\nE. Shen, G. C. Caragea, C. Garcia-Alvarado, F. Rahman,\nM. Petropoulos, F. Waas, S. Narayanan, K. Krikellas, and\nR. Baldwin.Orca: a modular query optimizer architecture for\nIn Proceedings of the 2014 ACM SIGMOD Inter-\nbig data.national Conference on Management of Data, SIGMOD ’14,\npages 337–348, 2014. doi: 10.1145/2588555.2595637.[187] M. Stonebraker. The case for polystores.https://\n\nwp.sigmod.org/?p=1629, 2015.[188] M. Stonebraker and J. Hellerstein.Readings in Database Sys-\ntems, chapter What Goes Around Comes Around, pages 2–41. 4th edition, 2005.[189] M. Stonebraker, S. Madden, D. J. Abadi, S. Harizopoulos,\nN. Hachem, and P. Helland.The end of an architectural era:\n(it’s time for a complete rewrite).In Proceedings of the 33rd\nInternational Conference on Very Large Data Bases, VLDB\n’07, pages 1150–1160.VLDB Endowment, 2007. [190] M. Stonebraker, D. Abadi, D. J. DeWitt, S. Madden, E. Paulson,\nA. Pavlo, and A. Rasin.Mapreduce and parallel dbmss: Friends\nor foes?Commun. ACM, 53(1):64–71, Jan. 2010.[191] M. Stonebraker, P. Brown, A. Poliakov, and S. Raman. The ar-\nchitecture of scidb.In Scientiﬁc and Statistical Database Man-\nagement - 23rd International Conference, SSDBM 2011, vol-\nume 6809 of Lecture Notes in Computer Science, pages 1–16.Springer, 2011. doi: 10.1007/978-3-642-22351-8\n\n_1. [192] L. Sullivan.Performance issues in mid-sized relational\ndatabase machines.Master’s thesis, Rochester Institute of Tech-\nnology, 1989.\\\n\n36\n\nSIGMOD Record, June 2024 (Vol.53, No. 2)\n\n\f[193] Z. Sun, X. Zhou, and G. Li.Learned index: A comprehen-\nsive experimental evaluation. Proc.VLDB Endow., 16(8):1992–\n2004, apr 2023. doi: 10.14778/3594512.3594528.Google\n\ndumps mapreduce\n\n[194] Y.\n\nSverdlik.in\nfa-\nhttps:\n\nvor of new hyper-scale\n//www.datacenterknowledge.com/archives/2014/06/\n25/google-dumps-mapreduce-favor-new-hyper-scale-\nanalytics-system, June 2014.\n\nanalytics\n\nsystem.[195] R. Taft, I. Sharif, A. Matei, N. VanBenschoten, J. Lewis,\nT. Grieger, K. Niemi, A.Woods, A. Birzin, R. Poss, P. Bardea,\nA. Ranade, B. Darnell, B. Gruneir, J. Jaffray, L. Zhang, and\nP. Mattis.Cockroachdb: The resilient geo-distributed SQL\ndatabase.In Proceedings of the 2020 International Conference\non Management of Data, SIGMOD, pages 1493–1509, 2020.\ndoi: 10.1145/3318464.3386134.[196] D. ten Wolde, T. Singh, G. Szarnyas, and P. Boncz.Duckpgq:\nEfﬁcient property graph queries in an analytical\nrdbms.In CIDR, 2023. URL https://www.cidrdb.org/cidr2023/\npapers/p66-wolde.pdf.[197] A. Thusoo, J. S. Sarma, N. Jain, Z. Shao, P. Chakka, N. Zhang,\nS. Antony, H. Liu, and R. Murthy.Hive - a petabyte scale\ndata warehouse using hadoop.In International Conference on\nData Engineering (ICDE 2010), pages 996–1005, 2010. doi:\n10.1109/ICDE.2010.5447738.[198] E. Totoni, T. A. Anderson, and T. Shpeisman.HPAT: high per-\nformance analytics with scripting ease-of-use.In Proceedings\n\nof the International Conference on Supercomputing, pages 9:1–\n9:10, 2017. doi: 10.1145/3079079.3079099.[199] T. Trautmann. database. relational-database, September 2021.Understanding the document-relational\nhttps://fauna.com/blog/what-is-a-document-\n\n[200] D. Van Aken, A. Pavlo, G. J. Gordon, and B. Zhang.Auto-\nmatic database management system tuning through large-scale\nIn Proceedings of the 2017 ACM Inter-\nmachine learning.national Conference on Management of Data, SIGMOD ’17,\npages 1009–1024, 2017. doi: 10.1145/3035918.3064029.[201] M. Zaharia, R. S. Xin, P. Wendell, T. Das, M. Armbrust,\nA. Dave, X. Meng, J. Rosen, S. Venkataraman, M. J. Franklin,\nA. Ghodsi, J. Gonzalez, S. Shenker, and I. Stoica.Apache\nspark: a uniﬁed engine for big data processing.Commun. ACM,\n59(11):56–65, oct 2016. doi: 10.1145/2934664.[202] C. Zaniolo. The database language GEM.In SIGMOD, pages\n\n207–218, 1983.[203] X. Zeng, Y. Hui, J. Shen, A. Pavlo, W. McKinney, and\nH. Zhang.An empirical evaluation of columnar storage for-\nmats.Proc. VLDB Endow., 17(2):148–161, 2023.URL https:\n//www.vldb.org/pvldb/vol17/p148-zeng.pdf.[204] X. Zhang, Z. Chang, Y. Li, H. Wu, J. Tan, F. Li, and\nB. Cui.Facilitating database tuning with hyper-parameter op-\ntimization: a comprehensive experimental evaluation.Proc. VLDB Endow., 15(9):1808–1821, may 2022. doi: 10.14778/\n3538598.3538604.SIGMOD Record, June 2024 (Vol. 53, No. 2)\n\n37",
          "time": 1568.8322088718414,
          "input_token_size": 26188,
          "output_token_size": 27,
          "original_provenance_id": 0
        }
      ],
      "metadata": {
        "question_id": "whatgoesaround-sigmodrec2024_e8553b89",
        "created_at": 1750200226.400764,
        "processing_time": 1573.3176641464233,
        "processing_complete": true,
        "max_provenances": 5
      },
      "source_info": {
        "selected_from": "test_outputs",
        "reason": "shorter_provenance",
        "sentence_count": 964,
        "provenance_count": 1,
        "alternatives": [
          {
            "source": "test_outputs",
            "sentence_count": 964,
            "provenance_count": 1,
            "has_answer": true
          }
        ],
        "selection_timestamp": "2025-06-17T16:48:52.939083"
      }
    }
  },
  {
    "ed008d9d": {
      "question": "What are the main factors contributing to the enduring dominance of the relational model and SQL?",
      "answer": "1. Enduring dominance of the relational model (RM).\n2. SQL's ability to absorb the best ideas from alternative approaches.\n3. Continued evolution of SQL and relational DBMSs (RDBMSs).\n4. Major advancements in RM systems driven by changing hardware characteristics.\n5. \"Stickiness\" of data leading to legacy systems remaining in use.\n6. SQL's incorporation of best query language ideas to support modern applications.\n7. RDBMSs thriving in the cloud environment.\n8. Convergence of NoSQL systems towards SQL-like interfaces.\n9. RDBMSs providing a path forward for increasing application complexity.",
      "provenance": [],
      "metadata": {
        "question_id": "whatgoesaround-sigmodrec2024_ed008d9d",
        "created_at": 1749627394.7718623,
        "processing_complete": false,
        "max_provenances": 5
      },
      "source_info": {
        "selected_from": "test_outputs_prev",
        "reason": "default",
        "sentence_count": 999999,
        "provenance_count": 0,
        "alternatives": [
          {
            "source": "test_outputs_prev",
            "sentence_count": 999999,
            "provenance_count": 0,
            "has_answer": true
          }
        ],
        "selection_timestamp": "2025-06-17T16:48:52.939083"
      }
    }
  },
  {
    "ef765a45": {
      "question": "What kind of databases are used for graph-oriented data models?",
      "answer": "Graph Databases",
      "provenance": [
        {
          "provenance_id": 0,
          "input_sentence_ids": [
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            11,
            12,
            13,
            14,
            15,
            16,
            17,
            18,
            19,
            20,
            21,
            22,
            23,
            24,
            25,
            26,
            27,
            28,
            29,
            30,
            31,
            32,
            33,
            34,
            35,
            36,
            37,
            38,
            39,
            40,
            41,
            42,
            43,
            44,
            45,
            46,
            47,
            48,
            49,
            50,
            51,
            52,
            53,
            54,
            55,
            56,
            57,
            58,
            59,
            60,
            61,
            62,
            63,
            64,
            65,
            66,
            67,
            68,
            69,
            70,
            71,
            72,
            73,
            74,
            75,
            76,
            77,
            78,
            79,
            80,
            81,
            82,
            83,
            84,
            85,
            86,
            87,
            88,
            89,
            90,
            91,
            92,
            93,
            94,
            95,
            96,
            97,
            98,
            99,
            100,
            101,
            102,
            103,
            104,
            105,
            106,
            107,
            108,
            109,
            110,
            111,
            112,
            113,
            114,
            115,
            116,
            117,
            118,
            119
          ],
          "provenance_ids": [
            18
          ],
          "provenance": "We\nstructure our commentary into the following areas: (1)\nMapReduce Systems, (2) Key-value Stores, (3) Docu-\nment Databases, (4) Column Family / Wide-Column,\n(5) Text Search Engines, (6) Array Databases, (7)\nVector Databases, and (8) Graph Databases.",
          "time": 11.618411779403687,
          "input_token_size": 38661,
          "output_token_size": 72,
          "original_provenance_id": 0
        }
      ],
      "metadata": {
        "question_id": "whatgoesaround-sigmodrec2024_ef765a45",
        "created_at": 1750200197.0349877,
        "processing_time": 19.326589345932007,
        "processing_complete": true,
        "max_provenances": 5
      },
      "source_info": {
        "selected_from": "test_outputs",
        "reason": "shorter_provenance",
        "sentence_count": 120,
        "provenance_count": 1,
        "alternatives": [
          {
            "source": "test_outputs",
            "sentence_count": 120,
            "provenance_count": 1,
            "has_answer": true
          }
        ],
        "selection_timestamp": "2025-06-17T16:48:52.939083"
      }
    }
  },
  {
    "f05c70ff": {
      "question": "What is the role of machine learning in database management as discussed in the document?",
      "answer": "1. Integrating machine learning (ML) with DBMS technology.\n2. Using ML to optimize DBMSs, including ML-oriented query optimizers, configuration tuners, and access methods.",
      "provenance": [
        {
          "provenance_id": 0,
          "input_sentence_ids": [
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            11,
            12,
            13,
            14,
            15,
            16,
            17,
            18,
            19,
            20,
            21,
            22,
            23,
            24,
            25,
            26,
            27,
            28,
            29,
            30,
            31,
            32,
            33,
            34,
            35,
            36,
            37,
            38,
            39,
            40,
            41,
            42,
            43,
            44,
            45,
            46,
            47,
            48,
            49,
            50,
            51,
            52,
            53,
            54,
            55,
            56,
            57,
            58,
            59,
            60,
            61,
            62,
            63,
            64,
            65,
            66,
            67,
            68,
            69,
            70,
            71,
            72,
            73,
            74,
            75,
            76,
            77,
            78,
            79,
            80,
            81,
            82,
            83,
            84,
            85,
            86,
            87,
            88,
            89,
            90,
            91,
            92,
            93,
            94,
            95,
            96,
            97,
            98,
            99,
            100,
            101,
            102,
            103,
            104,
            105,
            106,
            107,
            108,
            109,
            110,
            111,
            112,
            113,
            114,
            115,
            116,
            117,
            118,
            119,
            120,
            121,
            122,
            123,
            124,
            125,
            126,
            127,
            128,
            129,
            130,
            131,
            132,
            133,
            134,
            135,
            136,
            137,
            138,
            139,
            140,
            141,
            142,
            143,
            144,
            145,
            146,
            147,
            148,
            149,
            150,
            151,
            152,
            153,
            154,
            155,
            156,
            157,
            158,
            159,
            160,
            161,
            162,
            163,
            164,
            165,
            166,
            167,
            168,
            169,
            170,
            171,
            172,
            173,
            174,
            175,
            176,
            177,
            178,
            179,
            180,
            181,
            182,
            183,
            184,
            185,
            186,
            187,
            188,
            189,
            190,
            191,
            192,
            193,
            194,
            195,
            196,
            197,
            198,
            199,
            200,
            201,
            202,
            203,
            204,
            205,
            206,
            207,
            208,
            209,
            210,
            211,
            212,
            213,
            214,
            215,
            216,
            217,
            218,
            219,
            220,
            221,
            222,
            223,
            224,
            225,
            226,
            227,
            228,
            229,
            230,
            231,
            232,
            233,
            234,
            235,
            236,
            237,
            238,
            239,
            240,
            241,
            242,
            243,
            244,
            245,
            246,
            247,
            248,
            249,
            250,
            251,
            252,
            253,
            254,
            255,
            256,
            257,
            258,
            259,
            260,
            261,
            262,
            263,
            264,
            265,
            266,
            267,
            268,
            269,
            270,
            271,
            272,
            273,
            274,
            275,
            276,
            277,
            278,
            279,
            280,
            281,
            282,
            283,
            284,
            285,
            286,
            287,
            288,
            289,
            290,
            291,
            292,
            293,
            294,
            295,
            296,
            297,
            298,
            299,
            300,
            301,
            302,
            303,
            304,
            305,
            306,
            307,
            308,
            309,
            310,
            311,
            312,
            313,
            314,
            315,
            316,
            317,
            318,
            319,
            320,
            321,
            322,
            323,
            324,
            325,
            326,
            327,
            328,
            329,
            330,
            331,
            332,
            333,
            334,
            335,
            336,
            337,
            338,
            339,
            340,
            341,
            342,
            343,
            344,
            345,
            346,
            347,
            348,
            349,
            350,
            351,
            352,
            353,
            354,
            355,
            356,
            357,
            358,
            359,
            360,
            361,
            362,
            363,
            364,
            365,
            366,
            367,
            368,
            369,
            370,
            371,
            372,
            373,
            374,
            375,
            376,
            377,
            378,
            379,
            380,
            381,
            382,
            383,
            384,
            385,
            386,
            387,
            388,
            389,
            390,
            391,
            392,
            393,
            394,
            395,
            396,
            397,
            398,
            399,
            400,
            401,
            402,
            403,
            404,
            405,
            406,
            407,
            408,
            409,
            410,
            411,
            412,
            413,
            414,
            415,
            416,
            417,
            418,
            419,
            420,
            421,
            422,
            423,
            424,
            425,
            426,
            427,
            428,
            429,
            430,
            431,
            432,
            433,
            434,
            435,
            436,
            437,
            438,
            439,
            440,
            441,
            442,
            443,
            444,
            445,
            446,
            447,
            448,
            449,
            450,
            451,
            452,
            453,
            454,
            455,
            456,
            457,
            458,
            459,
            460,
            461,
            462,
            463,
            464,
            465,
            466,
            467,
            468,
            469,
            470,
            471,
            472,
            473,
            474,
            475,
            476,
            477,
            478,
            479,
            480,
            481,
            482,
            483,
            484,
            485,
            486,
            487,
            488,
            489,
            490,
            491,
            492,
            493,
            494,
            495,
            496,
            497,
            498,
            499,
            500,
            501,
            502,
            503,
            504,
            505,
            506,
            507,
            508,
            509,
            510,
            511,
            512,
            513,
            514,
            515,
            516,
            517,
            518,
            519,
            520,
            521,
            522,
            523,
            524,
            525,
            526,
            527,
            528,
            529,
            530,
            531,
            532,
            533,
            534,
            535,
            536,
            537,
            538,
            539,
            540,
            541,
            542,
            543,
            544,
            545,
            546,
            547,
            548,
            549,
            550,
            551,
            552,
            553,
            554,
            555,
            556,
            557,
            558,
            559,
            560,
            561,
            562,
            563,
            564,
            565,
            566,
            567,
            568,
            569,
            570,
            571,
            572,
            573,
            574,
            575,
            576,
            577,
            578,
            579,
            580,
            581,
            582,
            583,
            584,
            585,
            586,
            587,
            588,
            589,
            590,
            591,
            592,
            593,
            594,
            595,
            596,
            597,
            598,
            599,
            600,
            601,
            602,
            603,
            604,
            605,
            606,
            607,
            608,
            609,
            610,
            611,
            612,
            613,
            614,
            615,
            616,
            617,
            618,
            619,
            620,
            621,
            622,
            623,
            624,
            625,
            626,
            627,
            628,
            629,
            630,
            631,
            632,
            633,
            634,
            635,
            636,
            637,
            638,
            639,
            640,
            641,
            642,
            643,
            644,
            645,
            646,
            647,
            648,
            649,
            650,
            651,
            652,
            653,
            654,
            655,
            656,
            657,
            658,
            659,
            660,
            661,
            662,
            663,
            664,
            665,
            666,
            667,
            668,
            669,
            670,
            671,
            672,
            673,
            674,
            675,
            676,
            677,
            678,
            679,
            680,
            681,
            682,
            683,
            684,
            685,
            686,
            687,
            688,
            689,
            690,
            691,
            692,
            693,
            694,
            695,
            696,
            697,
            698,
            699,
            700,
            701,
            702,
            703,
            704,
            705,
            706,
            707,
            708,
            709,
            710,
            711,
            712,
            713,
            714,
            715,
            716,
            717,
            718,
            719,
            720,
            721,
            722,
            723,
            724,
            725,
            726,
            727,
            728,
            729,
            730,
            731,
            732,
            733,
            734,
            735,
            736,
            737,
            738,
            739,
            740,
            741,
            742,
            743,
            744,
            745,
            746,
            747,
            748,
            749,
            750,
            751,
            752,
            753,
            754,
            755,
            756,
            757,
            758,
            759,
            760,
            761,
            762,
            763,
            764,
            765,
            766,
            767,
            768,
            769,
            770,
            771,
            772,
            773,
            774,
            775,
            776,
            777,
            778,
            779,
            780,
            781,
            782,
            783,
            784,
            785,
            786,
            787,
            788,
            789,
            790,
            791,
            792,
            793,
            794,
            795,
            796,
            797,
            798,
            799,
            800,
            801,
            802,
            803,
            804,
            805,
            806,
            807,
            808,
            809,
            810,
            811,
            812,
            813,
            814,
            815,
            816,
            817,
            818,
            819,
            820,
            821,
            822,
            823,
            824,
            825,
            826,
            827,
            828,
            829,
            830,
            831,
            832,
            833,
            834,
            835,
            836,
            837,
            838,
            839,
            840,
            841,
            842,
            843,
            844,
            845,
            846,
            847,
            848,
            849,
            850,
            851,
            852,
            853,
            854,
            855,
            856,
            857,
            858,
            859,
            860,
            861,
            862,
            863,
            864,
            865,
            866,
            867,
            868,
            869,
            870,
            871,
            872,
            873,
            874,
            875,
            876,
            877,
            878,
            879,
            880,
            881,
            882,
            883,
            884,
            885,
            886,
            887,
            888,
            889,
            890,
            891,
            892,
            893,
            894,
            895,
            896,
            897,
            898,
            899,
            900,
            901,
            902,
            903,
            904,
            905,
            906,
            907,
            908,
            909,
            910,
            911,
            912,
            913,
            914,
            915,
            916,
            917,
            918,
            919,
            920,
            921,
            922,
            923,
            924,
            925,
            926,
            927,
            928,
            929,
            930,
            931,
            932,
            933,
            934,
            935,
            936,
            937,
            938,
            939,
            940,
            941,
            942,
            943,
            944,
            945,
            946,
            947,
            948,
            949,
            950,
            951,
            952,
            953,
            954,
            955,
            956,
            957,
            958,
            959,
            960,
            961,
            962,
            963
          ],
          "provenance_ids": [
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            11,
            12,
            13,
            14,
            15,
            16,
            17,
            22,
            24,
            25,
            26,
            27,
            31,
            39,
            43,
            44,
            46,
            51,
            56,
            57,
            58,
            66,
            67,
            69,
            70,
            71,
            73,
            74,
            75,
            76,
            80,
            81,
            82,
            83,
            84,
            88,
            89,
            91,
            92,
            96,
            97,
            98,
            100,
            102,
            103,
            104,
            105,
            106,
            107,
            111,
            113,
            114,
            115,
            116,
            117,
            119,
            120,
            121,
            122,
            123,
            124,
            129,
            130,
            131,
            132,
            133,
            135,
            136,
            137,
            139,
            140,
            141,
            142,
            143,
            144,
            145,
            146,
            148,
            149,
            150,
            151,
            152,
            156,
            157,
            158,
            159,
            160,
            161,
            162,
            163,
            164,
            165,
            167,
            168,
            169,
            170,
            171,
            172,
            173,
            174,
            176,
            177,
            180,
            181,
            182,
            184,
            185,
            186,
            190,
            191,
            192,
            193,
            195,
            196,
            197,
            198,
            199,
            200,
            201,
            202,
            203,
            204,
            205,
            206,
            207,
            208,
            209,
            210,
            211,
            212,
            214,
            216,
            218,
            219,
            220,
            221,
            222,
            223,
            224,
            225,
            226,
            227,
            228,
            229,
            230,
            232,
            233,
            234,
            235,
            236,
            237,
            238,
            240,
            241,
            242,
            243,
            244,
            245,
            247,
            248,
            249,
            250,
            251,
            252,
            253,
            254,
            255,
            256,
            257,
            258,
            259,
            260,
            261,
            262,
            264,
            265,
            266,
            267,
            268,
            269,
            270,
            271,
            272,
            274,
            275,
            276,
            277,
            278,
            279,
            280,
            281,
            282,
            283,
            284,
            285,
            286,
            287,
            288,
            289,
            290,
            291,
            292,
            293,
            294,
            295,
            296,
            297,
            298,
            299,
            300,
            301,
            302,
            303,
            304,
            305,
            306,
            307,
            308,
            309,
            310,
            312,
            313,
            314,
            315,
            316,
            317,
            318,
            319,
            320,
            328,
            329,
            331,
            332,
            333,
            334,
            335,
            336,
            337,
            338,
            339,
            340,
            341,
            342,
            343,
            344,
            345,
            346,
            347,
            348,
            349,
            350,
            351,
            352,
            353,
            354,
            355,
            356,
            357,
            358,
            359,
            361,
            362,
            363,
            364,
            365,
            366,
            367,
            368,
            369,
            370,
            371,
            372,
            373,
            374,
            375,
            376,
            377,
            379,
            380,
            381,
            382,
            383,
            384,
            385,
            386,
            387,
            388,
            389,
            391,
            392,
            393,
            394,
            395,
            396,
            397,
            398,
            399,
            400,
            401,
            402,
            403,
            404,
            405,
            406,
            408,
            409,
            410,
            411,
            412,
            413,
            414,
            415,
            416,
            417,
            418,
            419,
            420,
            421,
            422,
            423,
            424,
            425,
            426,
            427,
            428,
            429,
            430,
            431,
            432,
            433,
            434,
            435,
            436,
            437,
            438,
            439,
            440,
            441,
            442,
            443,
            444,
            445,
            446,
            447,
            448,
            449,
            450,
            451,
            452,
            453,
            454,
            455,
            456,
            457,
            458,
            459,
            460,
            461,
            462,
            463,
            464,
            465,
            466,
            467,
            468,
            469,
            470,
            471,
            472,
            473,
            474,
            475,
            477,
            478,
            479,
            480,
            481,
            482,
            483,
            484,
            485,
            486,
            487,
            488,
            489,
            490,
            491,
            492,
            493,
            494,
            495,
            496,
            497,
            498,
            499,
            500,
            501,
            502,
            503,
            504,
            505,
            506,
            507,
            509,
            510,
            511,
            512,
            513,
            514,
            515,
            516,
            517,
            518,
            519,
            520,
            521,
            522,
            523,
            524,
            525,
            526,
            530,
            532,
            533,
            534,
            535,
            536,
            538,
            543,
            544,
            546,
            547,
            548,
            549,
            553,
            554,
            555,
            556,
            557,
            558,
            559,
            560,
            561,
            562,
            563,
            564,
            565,
            566,
            570,
            571,
            575,
            576,
            577,
            578,
            579,
            595,
            596,
            597,
            599,
            600,
            602,
            603,
            607,
            608,
            609,
            610,
            611,
            613,
            614,
            615,
            623,
            624,
            625,
            626,
            627,
            628,
            630,
            631,
            632,
            640,
            641,
            642,
            643,
            644,
            645,
            646,
            647,
            648,
            649,
            650,
            651,
            652,
            653,
            654,
            655,
            656,
            657,
            660,
            661,
            663,
            664,
            665,
            666,
            667,
            668,
            669,
            670,
            672,
            674,
            675,
            676,
            677,
            683,
            694,
            695,
            696,
            697,
            698,
            699,
            701,
            702,
            703,
            704,
            705,
            706,
            707,
            708,
            709,
            710,
            711,
            712,
            713,
            723,
            724,
            725,
            728,
            729,
            730,
            731,
            732,
            733,
            734,
            735,
            736,
            737,
            740,
            741,
            742,
            743,
            744,
            745,
            750,
            751,
            755,
            756,
            757,
            759,
            760,
            764,
            765,
            767,
            768,
            769,
            770,
            771,
            772,
            773,
            775,
            776,
            778,
            779,
            781,
            782,
            783,
            784,
            785,
            786,
            787,
            788,
            790,
            793,
            794,
            795,
            796,
            797,
            799,
            800,
            801,
            803,
            804,
            805,
            806,
            809,
            810,
            811,
            812,
            813,
            815,
            816,
            817,
            818,
            819,
            820,
            821,
            822,
            823,
            824,
            825,
            826,
            827,
            828,
            829,
            830,
            832,
            833,
            834,
            835,
            836,
            837,
            839,
            840,
            841,
            842,
            843,
            844,
            845,
            846,
            847,
            848,
            849,
            850,
            851,
            852,
            856,
            857,
            858,
            859,
            861,
            862,
            863,
            864,
            865,
            866,
            867,
            868,
            869,
            870,
            871,
            872,
            875,
            876,
            877,
            878,
            879,
            880,
            881,
            882,
            883,
            884,
            885,
            886,
            887,
            889,
            890,
            891,
            892,
            893,
            894,
            895,
            896,
            897,
            898,
            899,
            900,
            901,
            905,
            906,
            907,
            908,
            909,
            910,
            911,
            912,
            914,
            915,
            916,
            917,
            919,
            920,
            921,
            922,
            923,
            924,
            925,
            926,
            927,
            928,
            929,
            930,
            931,
            932,
            933,
            934,
            935,
            936,
            937,
            938,
            939,
            940,
            941,
            942,
            944,
            945,
            946,
            947,
            949,
            950,
            960,
            961,
            963
          ],
          "provenance": "What Goes Around Comes Around... And Around...\n\nMichael Stonebraker\nMassachusetts Institute of Technology\nstonebraker@csail.mit.edu\n\nAndrew Pavlo\nCarnegie Mellon University\npavlo@cs.cmu.edu\n\nABSTRACT\nTwo decades ago, one of us co-authored a paper com-\nmenting on the previous 40 years of data modelling re-\nsearch and development [188].That paper demonstrated\nthat the relational model (RM) and SQL are the prevail-\ning choice for database management systems (DBMSs),\ndespite efforts to replace either them.Instead, SQL ab-\nsorbed the best ideas from these alternative approaches.We revisit this issue and argue that this same evolu-\ntion has continued since 2005.Once again there have\nbeen repeated efforts to replace either SQL or the RM.But the RM continues to be the dominant data model\nand SQL has been extended to capture the good ideas\nfrom others.As such, we expect more of the same in\nthe future, namely the continued evolution of SQL and\nrelational DBMSs (RDBMSs).We also discuss DBMS\nimplementations and argue that the major advancements\nhave been in the RM systems, primarily driven by chang-\ning hardware characteristics.1 Introduction\nIn 2005, one of the authors participated in writing a\nchapter for the Red Book titled “What Goes Around\nComes Around” [188].That paper examined the major\ndata modelling movements since the 1960s:\n\nHierarchical (e.g., IMS): late 1960s and 1970s\nNetwork (e.g., CODASYL): 1970s\nRelational: 1970s and early 1980s\nEntity-Relationship: 1970s\nExtended Relational: 1980s\nSemantic: late 1970s and 1980s\nObject-Oriented: late 1980s and early 1990s\nObject-Relational: late 1980s and early 1990s\nSemi-structured (e.g., XML): late 1990s and 2000s\n\n•\n•\n•\n•\n•\n•\n•\n•\n•\n\nOur conclusion was that the relational model with an\nextendable type system (i.e., object-relational) has dom-\ninated all comers, and nothing else has succeeded in\nthe marketplace.Although many of the non-relational\nDBMSs covered in 2005 still exist today, their vendors\nhave relegated them to legacy maintenance mode and\nnobody is building new applications on them.This per-\nsistence is more of a testament to the “stickiness” of data\n\nrather than the lasting power of these systems.In other\nwords, there still are many IBM IMS databases running\ntoday because it is expensive and risky to switch them\nto use a modern DBMS.But no start-up would willingly\nchoose to build a new application on IMS.A lot has happened in the world of databases since our\n2005 survey.During this time, DBMSs have expanded\nfrom their roots in business data processing and are now\nused for almost every kind of data.This led to the “Big\nData” era of the early 2010s and the current trend of inte-\ngrating machine learning (ML) with DBMS technology.In this paper, we analyze the last 20 years of data\nmodel and query language activity in databases.Meanwhile, SQL incorporated\nthe best query language ideas to expand its support for\nmodern applications and remain relevant.The second part of this paper\ndiscusses advancements in DBMS architectures that ad-\ndress modern applications and hardware: (1) Columnar\nSystems, (2) Cloud Databases, (3) Data Lakes / Lake-\nhouses, (4) NewSQL Systems, (5) Hardware Acceler-\nators, and (6) Blockchain Databases.Some of these\nare profound changes to DBMS implementations, while\nothers are merely trends based on faulty premises.We ﬁnish with a discussion of important considera-\ntions for the next generation of DBMSs and provide part-\ning comments on our hope for the future of databases in\nboth research and commercial settings.SIGMOD Record, June 2024 (Vol. 53, No.In database terms, Map is a\nuser-deﬁned function (UDF) that performs computation\nand/or ﬁltering while Reduce is a GROUP BY operation.They are functionally similar.Google argued that with care-\nful engineering, a MR system will beat DBMSs, and a\nuser does not have to load data with a schema before\nrunning queries on it.Thus, MR is better for “one shot”\ntasks, such as text processing and ETL operations.Furthermore, the use of higher-level\nlanguages (SQL) operating over partitioned tables has\nproven to be a good programming model [127].Many enterprises\nspent a lot of money on Hadoop clusters, only to ﬁnd\nthere was little interest in this functionality.Google ﬁnally announced in 2014 that MR had no\nplace in their technology stack and killed it off [194].The ﬁrst event left the three leading Hadoop vendors\n(Cloudera, Hortonworks, MapR) without a viable prod-\nuct to sell.Cloudera rebranded Hadoop to mean the\nwhole stack (application, Hadoop, HDFS).Some aspects of MR system implementations related\nto scalability, elasticity, and fault tolerance are carried\nover into distributed RDBMSs.MR also brought about\nthe revival of shared-disk architectures with disaggre-\ngated storage, subsequently giving rise to open-source\nﬁle formats and data lakes (see Sec.Both sys-\ntems started as better implementations of MR with pro-\ncedural APIs but have since added support for SQL [105].2.2 Key/Value Stores\nThe key/value (KV) data model is the simplest model\npossible.It represents the following binary relation:\n\n(key,value)\n\nA KV DBMS represents a collection of data as an as-\nsociative array that maps a key to a value.It is up to the appli-\ncation to maintain the schema and parse the value into\nits corresponding parts.Most KV DBMSs only provide\nget/set/delete operations on a single value.In the 2000s, several new Internet companies built\ntheir own shared-nothing, distributed KV stores for nar-\n\n22\n\nSIGMOD Record, June 2024 (Vol.53, No. 2)\n\n\frowly focused applications, like caching and storing ses-\nsion data.Such systems offer higher and\nmore predictable performance, compared to a RDBMS,\nin exchange for more limited functionality.The second KV DBMS category are embedded stor-\nage managers designed to run in the same address space\nas a higher-level application.One of the ﬁrst stan-\ndalone embedded KV DBMSs was BerkeleyDB from\nthe early 1990s [170].Recent notable entries include\nGoogle’s LevelDB [37], which Meta later forked as\nRocksDB [68].Discussion: Key/value stores provide a quick “out-of-\nthe-box” way for developers to store data, compared to\nthe more laborious effort required to set up a table in a\nRDBMS.Likewise, developers must implement joins or\nmulti-get operations in their application.To deal with these issues, several systems began as\na KV store and then morphed into a more feature-rich\nrecord store.Examples of this transition are Amazon’s Dy-\nnamoDB [129] and Aerospike [9].It is not trivial to re-\nengineer a KV store to make it support a complex data\nmodel, whereas RDBMSs easily emulates KV stores\nwithout any changes.Prior to this, build-\ning a new DBMS requires engineers to build a custom\nstorage manager that is natively integrated in the DBMS.MySQL was the ﬁrst DBMS to expose an API that al-\nlowed developers to replace its default KV storage man-\nager.This API enabled Meta to build RocksDB to re-\nplace InnoDB for its massive ﬂeet of MySQL databases.Using an existing KV store\nallows developers to write a new DBMS in less time.Each document contains a hier-\narchy of ﬁeld/value pairs, where each ﬁeld is identiﬁed\nby a name and a ﬁeld’s value can be either a scalar type,\nan array of values, or another document.The following\nexample in JSON is a customer document that contain\na nested list of purchase order records with their corre-\nsponding order items.{ “name”: “First Last”,\n\n“orders”: [ { “id”: 123, “items”: [...] },\n\n{ “id”: 456, “items”: [...] }, ] }\n\nDocument data models have been an active ﬁeld of\neffort for several decades.This has given rise to data\nformats like SGML [117] and XML [118].Despite\nthe buzz with XML databases in the late 1990s, we\ncorrectly predicted in 2005 they would not supplant\nRDBMSs [188].JSON has since overtaken XML to\nbecome the standard for data exchange for web-based\napplications.First, SQL and joins are slow,\nand one should use a “faster” lower-level, record-at-a-\ntime interface.Because of these two thrusts, NoSQL came to stand\nfor a DBMS that stored records or documents as JSON,\nsupported a lower-level API, and weak or non-existent\ntransactions.There are dozens of such systems, of\nwhich MongoDB [41] is the most popular.Discussion: Document DBMSs are essentially the same\nas object-oriented DBMSs from the 1980s and XML\nDBMSs from the late 1990s.Proponents of document\nDBMSs make the same argument as their OO/XML\npredecessors: storing data as documents removes the\nimpedance mismatch between how application OO code\ninteracts with data and how relational databases store\nthem.They also claim that denormalizing entries into\nnested structures is better for performance because it re-\nmoves the need to dispatch multiple queries to retrieve\ndata related to a given object (i.e., “N+1 problem” in\nORMs).SIGMOD Record, June 2024 (Vol. 53, No.2)\n\n23\n\n\fDespite strong protestations that SQL was terrible, by\nthe end of the 2010s, almost every NoSQL DBMS added\na SQL interface.Notable examples include DynamoDB\nPartiQL [56], Cassandra CQL [15], Aerospike AQL [9],\nand Couchbase SQL++ [72].The last holdout was Mon-\ngoDB, but they added SQL for their Atlas service in\n2021 [42].Instead of supporting the SQL standard for\nDDL and DML operations, NoSQL vendors claim that\nthey support their own proprietary query language de-\nrived or inspired from SQL.For most applications, these\ndistinctions are without merit.The main\ndifferences between them seems to be JSON support\nand the fact that NoSQL vendors allow “schema later”\ndatabases.But the SQL standard added a JSON data\ntype and operations in 2016 [165, 178].And as RDBMSs\ncontinue to improve their “ﬁrst ﬁve minutes” experience\nfor developers, we believe that the two kinds of systems\nwill soon be effectively identical.Higher level languages are almost universally pre-\nferred to record-at-a-time notations as they require less\ncode and provide greater data independence.Although\nwe acknowledge that the ﬁrst SQL optimizers were slow\nand ineffective, they have improved immensely in the\nlast 50 years.We suspect that this engineering\nburden was a contributing factor to why NoSQL systems\noriginally chose to not support SQL.2.4 Column-Family Databases\nThere is another category of NoSQL systems that uses\na data model called column-family (aka wide-column).Despite its name, column-family is not a columnar data\nmodel.The following example shows a mapping\nfrom user identiﬁer keys to JSON documents that con-\ntain each user’s varying proﬁle information:\n\nUser1000 → { “name”: “Alice”,\n\n“accounts”: [ 123, 456 ],\n“email”: \"xxx@xxx.edu” }\n\nUser1001 → { “name”: “Bob”,\n\n“email”: [ “yyy@yyy.org”, “zzz@zzz.com” ] }\n\nThe ﬁrst column-family model DBMS was Google’s\nBigTable in 2004 [111].Instead of adopting SQL and\n\nemerging columnar storage, Google used this data model\nwith procedural client APIs.Other systems adopted the\ncolumn-family model in an attempt to copy Google’s be-\nspoke implementation.Most notable are Cassandra [14]\nand HBase [28].They also copied BigTable’s limita-\ntions, including the lack of joins and secondary indexes.Discussion: All our comments in Sec.2.3 about the\ndocument model are also applicable here.In the early\n2010s, Google built RDBMSs on top of BigTable, in-\ncluding MegaStore [99] and the ﬁrst version of Span-\nner.Several\nNoSQL DBMSs deprecated their proprietary APIs in\nfavor of SQL but still retain their non-relational archi-\ntectures.Cassandra replaced their Thrift-API with a\nSQL-like language called CQL [15], and HBase now\nrecommends the Phoenix SQL-frontend [57].Google\nstill offers BigTable as a cloud service, but the column-\nfamily model is a singular outlier with the same disad-\nvantages as NoSQL DBMSs.2.5 Text Search Engines\nText search engines have existed for a long time, begin-\nning with the seminal SMART system in the 1960s [184].SMART pioneered information retrieval and the vector\nspace model, now nearly universal in modern search\nengines, by tokenizing documents into a “bag of words”\nand then building full-text indexes (aka inverted indexes)\non those tokens to support queries on their contents.This limitation\nmeans that a DBMS has to recover from data corruption\nby rebuilding the document index from scratch, which\nresults in signiﬁcant downtime.All the leading RDBMSs support full-text search in-\ndexes, including Oracle [52], Microsoft SQL Server [52],\nMySQL [43], and PostgreSQL [62].Their search fea-\ntures have improved recently and are generally on par\nwith the special-purpose systems above.They also have\nthe advantage of built-in transaction support.But their\nintegration of search operations in SQL is often clunky\nand differs between DBMSs.Discussion: Text data is inherently unstructured, which\nmeans that there is no data model.Instead, a DBMS\nseeks to extract structure (i.e., meta-data, indexes) from\ntext to avoid “needle in the haystack” sequential searches.24\n\nSIGMOD Record, June 2024 (Vol. 53, No.2)\n\n\fThere are three ways to manage text data in application.First, one can run multiple systems, such as Elastic-\nsearch for text and a RDBMS for operational workloads.Alternatively, one can run a RDBMS\nwith good text-search integration capabilities but with\ndivergent APIs in SQL.This latter issue is often over-\ncome by application frameworks that hide this complex-\nity (e.g., Django Haystack [20]).The third option is\na polystore system [187] that masks the system differ-\nences via middleware that exposes a uniﬁed interface.Inverted index-centric search engines based on SMART\n\nare used for exact match searches.These methods have\nbeen supplanted in recent years by similarity search us-\ning ML-generated embeddings (see Sec.2.7). 2.6 Array Databases\nThere are many areas of computing where arrays are an\nobvious data representation.We use the term “array” to\nmean all variants of them [182]: vectors (one dimen-\nsion – see Sec.2.7), matrices (two dimensions), and\ntensors (three or more dimensions).Arrays are also the core of most ML data sets.Although array-based programming languages have\nexisted since the 1960s (APL [142]), the initial work\non array DBMSs began in the 1980s.Newer array DBMSs include SciDB [54,\n191] and TileDB [76].HDF5 [29] and NetCDF [46] are\npopular array ﬁle formats for scientiﬁc data.There are several system challenges with storing and\nquerying real-world array data sets.An application can map such grids to integer\ncoordinates via metadata describing this mapping [166].Hence, most applications maintain array and non-array\ndata together in a single database.Unlike row- or column-based DBMSs, querying array\ndata in arbitrary dimensions presents unique challenges.For example, they have considerable\ntraction in the genomics space.HDF5 is popular for\nsatellite imagery and other gridded scientiﬁc data.But\nbusiness applications rarely use dedicated array DBMSs,\nwhich is necessary for any product to survive.No ma-\njor cloud provider offers a hosted array DBMS service,\nmeaning they do not see a sizable market.The ﬁrst\nproposal to extend the unordered set-based RM with\nordered rasters was in 1993 [155].An early exam-\nple of this was Illustra’s temporal (one-dimensional)\ndata plugin [31].SQL:1999 introduced limited sup-\nport for single-dimension, ﬁxed-length array data types.SQL:2003 expanded to support nested arrays without a\npredeﬁned maximum cardinality.Later entrants include\nOracle Georaster [4] and Teradata [73].Data cubes are\nspecial-purpose arrays [135], but columnar RDBMSs\nhave eclipsed them for OLAP workloads because of\ntheir better ﬂexibility and lower engineering costs [113].More recently, the SQL:2023 standard includes sup-\nport for true multi-dimensional arrays (SQL/MDA) that\nis heavily inspired by Rasdaman’s RQL [166].This\nupdate allows SQL to represent arrays with arbitrary\nIn effect,\ndimensions using integer-based coordinates.this allows data cubes to exist in a SQL framework, but\ncolumnar DBMSs now dominate this market.2.7 Vector Databases\nSimilar to how the column-family model is a reduction\nof the document model, the vector data model simpliﬁes\nthe array data model to one-dimensional rasters.Given\nthat vector DBMSs are attracting the most attention\nright now from developers and investors (similar to the\nNoSQL fad), it is necessary to discuss them separately.The reason for this interest is because developers use\nthem to store single-dimension embeddings generated\nfrom AI tools.These tools use learned transformations\nto convert a record’s data (e.g., text, image) into a vec-\ntor representing its latent semantics.For example, one\ncould convert each Wikipedia article into an embedding\nusing Google BERT and store them in a vector database\nalong with additional article meta-data:\n\n(title, date, author, [embedding-vector])\n\nThe size of these embedding vectors range from 100s\nof dimensions for simple transformers to 1000s for high-\nend models; these sizes will obviously grow over time\nwith the development of more sophisticated models.SIGMOD Record, June 2024 (Vol. 53, No.2)\n\n25\n\n\fThe key difference between vector and array DBMSs\nis their query patterns.The former are designed for\nsimilarity searches that ﬁnd records whose vectors have\nthe shortest distance to a given input vector in a high-\ndimensional space.The input vector is another embed-\nding generated with the same transformer used to popu-\nlate the database.Instead, the dominant use case is this similarity search.Appli-\ncations issue queries with predicates on both the em-\nbedding index and non-embedding attributes (i.e., meta-\ndata).There are dozens of new DBMSs in this emerging\ncategory, with Pinecone [58], Milvus [40], and Weav-\niate [84] as the leading systems.Text search engines,\nincluding Elasticsearch [23], Solr [70], and Vespa [79],\nexpanded their APIs to support vector search.Other\nDBMSs rebranded themselves as vector databases to\njump on the bandwagon, such as Kdb+ [34].One compelling feature of vector DBMSs is that\nthey provide better integration with AI tools (e.g., Chat-\nGPT [16], LangChain [36]) than RDBMSs.These sys-\ntems natively support transforming a record’s data into\nan embedding upon insertion using these tools and then\nuses the same transformation to convert a query’s in-\nput arguments into an embedding to perform the ANN\nsearch; other DBMSs require the application to perform\nthese transformations outside of the database.Discussion: Unlike array DBMSs that require a cus-\ntomized storage manager and execution engine to sup-\nport efﬁcient operations on multi-dimensional data, vec-\ntor DBMSs are essentially document-oriented DBMSs\nwith specialized ANN indexes.Such indexes are a fea-\nture, not the foundation of a new system architecture.After LLMs became “mainstream” with ChatGPT in\nlate 2022, it took less than one year for several RDBMSs\nIn 2023,\nto add their own vector search extensions.many of the major RDBMSs added vector indexes, in-\ncluding Oracle [7], SingleStore [137], Rockset [8], and\nClickhouse [157].Contrast this with JSON support in\nRDBMSs.NoSQL systems like MongoDB and CouchDB\nbecame popular in the late 2000s and it took several\nyears for RDBMSs to add support for it.There are two likely explanations for the quick pro-\nliferation of vector indexes.The ﬁrst is that similarity\nsearch via embeddings is such a compelling use case\nthat every DBMS vendor rushed out their version and\nannounced it immediately.Most of them\ndid not write their vector index from scratch and instead\nintegrated an open-source library (e.g., pgVector [145],\nDiskANN [19], FAISS [24]).We anticipate that vector DBMSs will undergo the\nsame evolution as document DBMSs by adding features\nto become more relational-like (e.g., SQL, transactions,\nextensibility).Meanwhile, relational incumbents will\nhave added vector indexes to their already long list of\nfeatures and moved on to the next emerging trend.2.8 Graph Databases\nThere has been a lot of academic and industry interest\nin the last decade in graph databases [183].Many appli-\ncations use knowledge graphs to model semi-structured\ninformation.Social media applications inherently con-\ntain graph-oriented relationships (“likes”, “friend-of”).Relational design tools provide users with an entity-\nrelationship (ER) model of their database.The two most prevalent approaches to represent graphs\nare (1) the resource description framework (RDF) and\n(2) property graphs [126].With property graphs, the\nDBMS maintains a directed multi-graph structure that\nsupports key/value labels for nodes and edges.RDF\ndatabases (aka triplestores) only model a directed graph\nwith labeled edges.Since property graphs are more com-\nmon and are a superset of RDF, we will only discuss\nthem.We consider two use cases for graph DBMSs and\ndiscuss the problems that will limit their adoption.The ﬁrst category of systems are for operational /\nOLTP workloads: an application, for example, adds a\nfriend link in the database by updating a single record,\npresumably in a transactional manner.It\nsupports edges using pointers (as in CODASYL) but it\ndoes not cluster nodes with their “parent” or “offspring”.Such an architecture is advantageous for traversing long\nedge chains since it will do pointer chasing, whereas a\nRDBMS has to do this via joins.But their potential mar-\nket success comes down to whether there are enough\n“long chain” scenarios that merit forgoing a RDBMS.The second use case is analytics, which seeks to de-\nrive information from the graph.An example of this\nscenario is ﬁnding which user has the most friends un-\nder 30 years old.Notable entries like Tigergraph [74]\nand JanusGraph [32] focus on query languages and\nstorage on a graph DBMS.Other systems, such as Gi-\nraph [26] and Turi [78] (formerly Graphlab [27]) pro-\nvide a computing fabric to support parallel execution of\ngraph-oriented programs, typically written by a user.Unlike queries in relational analytics that are charac-\nterized by chains of joins, queries for graph analytics\ncontain operations like shortest path, cut set, or clique\n\n26\n\nSIGMOD Record, June 2024 (Vol.53, No. 2)\n\n\fdetermination. Algorithm choice and data representa-\ntion will determine a DBMS’s performance.This argues\nfor a computing fabric that allows developers to write\ntheir own algorithms using an abstraction that hides\nthe underlying system topology.However, previous\nresearch shows that distributed algorithms rarely out-\nperform single-node implementations because of com-\nmunication costs [160].A better strategy is to compress\na graph into a space-efﬁcient data structure that ﬁts in\nmemory on a single node and then run the query against\nthis data structure.All but the largest graph databases\nare probably best handled this way.Discussion: Regardless of whether a graph DBMS tar-\ngets OLTP or OLAP workloads, the key challenge these\nsystems have to overcome is that it is possible to simu-\nlate a graph as a collection of tables:\n\nNode (node_id, node_data)\nEdge (node_id_1, node_id_2, edge_data)\n\nThis means that RDBMSs are always an option to sup-\nport graphs.But “vanilla” SQL is not expressive enough\nfor graph queries and thus require multiple client-server\nroundtrips for traversal operations.Some RDBMSs, including MSSQL [3] and Oracle [50],\n\nprovide built-in SQL extensions that make storing and\nquerying graph data easier.Amazon Neptune [45] is a graph-oriented veneer\non top of Aurora MySQL.Apache AGE provides an\nOpenCypher interface on top of PostgreSQL [10].More recently, SQL:2023 introduced property graph\nqueries (SQL/PGQ) for deﬁning and traversing graphs\nin a RDBMS [196].The syntax builds on existing lan-\nguages (e.g., Neo4j’s Cypher [49], Oracle’s PGQL [51],\nand TigerGraph’s GSQL [75]), and shares aspects of the\nemerging GQL standard [126].Thus, SQL/PGQ further\nnarrows the functionality difference between RDBMSs\nand native graph DBMSs.The question is whether graph DBMS vendors can\nmake their specialized systems fast enough to over-\ncome the above disadvantages.There have been several\nperformance studies showing that graph simulation on\nRDBMSs outperform graph DBMSs [130, 143].More\nrecent work showed how SQL/PGQ in DuckDB outper-\nforms a leading graph DBMS by up to 10\n[196].This\ntrend will continue with further improvements in worst-\ncase optimal joins [132, 168] and factorized execution\nalgorithms [100] for graph queries in RDBMSs.Speciﬁcally:\n\n•\n\nMapReduce Systems: They died years ago and are,\nat best, a legacy technology at present.•\n\n•\n\n•\n\n•\n\n•\n\n•\n\n•\n\nKey-value Stores: Many have either matured into\nRM systems or are only used for speciﬁc problems.These can generally be equaled or beaten by modern\nhigh-performance RDBMSs.Document Databases: Such NoSQL systems are on\na collision course with RDBMSs.The differences\nbetween the two kinds of systems have diminished\nover time and should become nearly indistinguish-\nable in the future.Column-Family Systems: These remain a niche\nmarket.Without Google, this paper would not be\ntalking about this category.Text Search Engines: These systems are used for\ntext ﬁelds in a polystore architecture.It would be\nvaluable if RDBMSs had a better story for search so\nthese would not have to be a separate product.Array Databases: Scientiﬁc applications will con-\ntinue to ignore RDBMSs in favor of bespoke array\nsystems.They may become more important because\nRDBMSs cannot efﬁciently store and analyze arrays\ndespite new SQL/MDA enhancements.Vector Databases: They are single-purpose DBMSs\nwith indexes to accelerate nearest-neighbor search.RM DBMSs should soon provide native support for\nthese data structures and search methods using their\nextendable type system that will render such special-\nized databases unnecessary.Graph Databases: OLTP graph applications will\nbe largely served by RDBMSs.In addition, ana-\nlytic graph applications have unique requirements\nthat are best done in main memory with specialized\ndata structures.RDBMSs will provide graph-centric\nAPIs on top of SQL or via extensions.We do not ex-\npect specialized graph DBMSs to be a large market.Beyond the above, there are also proposals to rebrand\nprevious data models as something novel.For example,\ngraph-relational [158] is the same as the semantic data\nmodel [202].Likewise, document-relational is the doc-\nument model with foreign keys [199].Others provide a\nnon-SQL veneer over a RDBMS (e.g., PRQL [64], Mal-\nloy [39]).Although these languages deal with some of\nSQL’s shortcomings, they are not compelling enough to\novercome its entrenched userbase and ecosystem.3 System Architectures\nThere have been major new ideas in DBMS architec-\ntures put forward in the last two decades that reﬂect-\ning changing application and hardware characteristics.These ideas range from terriﬁc to questionable, and we\ndiscuss them in turn.3.1 Columnar Systems\nTo understand the appeal of columnar DBMSs, we need\nto explain the origins of the data warehouse (OLAP)\nmarket.Beginning in the mid-1990s, enterprises started\n\nSIGMOD Record, June 2024 (Vol.53, No. 2)\n\n27\n\n\fcollecting their customer facing (usually sales) data.Brick-and-mortar retailers (e.g., Walmart) were at fore-\nfront of constructing historical sales databases.These\ncompanies generally found that a sales data warehouse\nwould pay for itself in better stock ordering and rota-\ntion decisions within six months.Such customer facing\ndatabases are now omnipresent in enterprises.Data warehouse applications have common proper-\n\nties that are distinct from OLTP workloads:\n1.They are historical in nature (i.e., they are loaded\n\nperiodically and then are read-only). 2.Organizations retain everything as long as they can\n\nafford the storage — think terabytes to petabytes.3. Queries typically only access a small subset of at-\ntributes from tables and are ad-hoc in nature.Ralph Kimball was an early proponent of star schema\ndata modelling for data warehouses [148, 149].The idea\nwas to construct a fact table that held item-level trans-\nactional data.The classic example is a fact table that\ncontains a record for every item purchased in a retail en-\nterprise.Again, in a retail\nsetting, these dimension tables would include informa-\ntion about customers, products, stores, and time.Organizing the DBMS’s storage by columns instead\nof rows has several beneﬁts [87].First, compressing\ncolumnar data is more effective than row-based data be-\ncause there is a single value type in a data block of-\nten many repeated bytes.Second, a Volcano-style en-\ngine executes operators once per row.In contrast, a\ncolumn-oriented engine has an inner loop that processes\na whole column using vectorized instructions [106, 147].Lastly, row stores have a large header for each record\n(e.g., 20 bytes) to track nulls and versioning meta-data,\nwhereas column stores have minimal storage overhead\nper record.Discussion: Over the last two decades, all vendors ac-\ntive in the data warehouse market have converted their\nofferings from a row store to a column store.This tran-\nsition brought about signiﬁcant changes in the design\nof DBMSs.In addition, several new vendors have en-\ntered the market in the last two decades with column\nstore offerings, for example Amazon’s Redshift [94] and\nGoogle’s BigQuery [162] along with offerings from in-\ndependent companies (e.g., Snowﬂake [121]).Beyond better economics com-\npared to direct-attached storage, object stores have sev-\neral advantages that compensate for the cost of the\nadded network link.First, because the compute nodes\nare disconnected from the storage nodes, a system can\nprovide per-query elasticity; the DBMS can add new\ncompute nodes dynamically without having to reshufﬂe\ndata.Second,\nthe system can reassign compute nodes to other tasks\nif a DBMS is underutilized.On the other hand, in a\nshared-nothing DBMS, a node must always be online to\nhandle incoming query requests.Lastly, pushing down\ncomputation into the storage nodes is possible (and gen-\nerally advantageous).This execution strategy is known\nas “pushing the query to the data” versus “pulling the\ndata to the query” and is well understood in DBMSs.Generally, the ﬁrst two ideas are called “serverless\ncomputing”, and was introduced for cloud-native DBMSs\nby Snowﬂake [121].Other vendors have moved or\nare in the process of moving to a serverless environ-\nment for their cloud offerings.Effective utilization of\nthis model requires a hosted multi-node environment in\nwhich multiple DBMS customers are grouped onto the\nsame node(s) with a multi-tenant execution scheme.Discussion: The advent of cloud databases is another\nexample of “what goes around comes around”.Multi-\nnode shared-disk DBMSs are an old idea that histori-\ncally tended not to work out well.However, it is back in\nvogue with technology change (faster networking) and\nmoving to the cloud.In addition, time-sharing services\nwere popular in the 1970s when computers were big and\nexpensive.Cloud platforms are big time-sharing ser-\nvices, so the concept is back after a few decades.Since\nenterprises are moving everything possible to the cloud,\nwe expect this shared-disk to dominate DBMS architec-\ntures.Hence, we do not foresee shared-nothing architec-\ntures resurfacing in the future.The cloud has profoundly impacted DBMSs, causing\nthem to be completely re-architected.The movement\nof computing from on-prem to the cloud generates a\nonce-in-a-lifetime opportunity for enterprises to refac-\ntor codebases and remove bad historical technology de-\ncisions.A cloud environment also provides several ben-\neﬁts to vendors that are not possible with on-prem de-\nployments.Foremost is that vendors can track usage\n\n28\n\nSIGMOD Record, June 2024 (Vol. 53, No.2)\n\n\ftrends for all their customers: they can monitor unex-\npected behavior, performance degradations, and usage\npatterns.Moreover, they can push incremental updates\nand code patches without disrupting service.From a business perspective, open-source DBMSs\nface the danger of becoming too popular and being mon-\netized by the major cloud providers.The public spats\nbetween Amazon and ISVs like MongoDB [153] and\nElasticsearch [101] are notable examples.3.3 Data Lakes / Lakehouses\nAnother trend that the cloud platforms fomented is the\nmovement away from monolithic, dedicated data ware-\nhouses for OLAP workloads and towards data lakes\nbacked by object stores.With legacy data warehouses,\norganizations load data into the DBMS, which the sys-\ntem stashes in managed storage with proprietary for-\nmats.Vendors viewed their DBMSs as the “gatekeepers”\nfor all things related to data in an organization.However,\nthis has not been the model of many organizations, es-\npecially technology companies, for the last decade.With a data lake architecture, applications upload ﬁles\nto a distributed object store, bypassing the traditional\nroute through the DBMS [167].Users then execute\nqueries and processing pipelines on these accumulated\nﬁles using a lakehouse (a portmanteau of data ware-\nhouse and data lake) execution engine [93].These lake-\nhouse systems provide a uniﬁed infrastructure support-\ning SQL and non-SQL workloads.Several projects leverage DBMS methods to\noptimize DataFrame processing, including Dask [181],\nPolars [61], Modin [177], and Bodo [198].Instead of using DBMS-speciﬁc proprietary ﬁle for-\nmats or inefﬁcient text-based ﬁles (e.g., CSV, JSON),\napplications write data to data lakes using open-source,\ndisk-resident ﬁle formats [203].The two most pop-\nular formats are Twitter/Cloudera’s Parquet [55] and\nMeta’s ORC [53, 140].Both of them borrow tech-\nniques from earlier columnar storage research, such as\nPAX [90], compression [87], and nested-data (JSON)\nshredding [121, 161].Apache Arrow [11] is a similar\nbinary format for exchanging in-memory data between\nsystems.Open-source libraries for reading/writing these\nformats allow disparate applications to create data ﬁles\nthat other systems then parse and consume, thereby en-\nhancing data sharing across services and business units.Discussion: Data lakes are the successor to “Big Data”\nmovement from the early 2010s, partly led by the pop-\nularity of MR systems (Sec.2.1) and column stores\n(Sec. 3.1).At ﬁrst glance, a data lake seems like a terri-\nble idea for an organization: allowing any application to\nwrite arbitrary ﬁles into a centralized repository without\n\nany governance is a recipe for integrity, discovery, and\nversioning problems [167].Lakehouses provide much-\nneeded control over these environments to help mitigate\nmany problems with meta-data, caching, and indexing\nservices [93].Additional middleware that tracks new\ndata and supports transactional updates, such as Delta\nLake [92], Iceberg [6], and Hudi [5], make lakehouses\nlook more like a traditional data warehouse.Data lakes introduce new challenges to query opti-\nmization.DBMSs have always struggled with acquir-\ning precise statistics on data,\nleading to poor query\nplan choices [154].However, a data lake system may\ncompletely lack statistics on newly ingested data ﬁles.Consequently, incorporating adaptive query processing\nstrategies is imperative in the cloud to enable a DBMS to\ndynamically modify query plans during execution based\non observed data characteristics [97, 105, 163].All the major cloud vendors now offer some variation\nof a managed data lake service.Since data lake sys-\ntems backed by object stores are much cheaper per giga-\nbyte than proprietary data warehouses, the legacy OLAP\nvendors (e.g., Teradata, Vertica) have extended their\nDBMSs to support reading data from object stores in re-\nsponse to this pricing pressure.3.4 NewSQL Systems\nIn the late 2000s, there were multiple distributed NoSQL\nDBMSs available designed to scale horizontally to sup-\nport online applications with large number of concurrent\nusers [110].However, many organizations could not use\nthese NoSQL systems because their applications could\nnot give up strong transactional requirements.But the\nexisting RDBMSs (especially open-source ones) were\nnot able to (natively) scale across multiple machines.In\nresponse, NewSQL systems arrived in the early 2010s\nseeking to provide the scalability of NoSQL systems for\nOLTP workloads while still supporting SQL [95, 171].In other words, these new systems sought to achieve the\nsame scalability of NoSQL DBMSs from the 2000s but\nstill keep the RM and ACID transactions of the legacy\nDBMSs from the 1990s.There were two main groups of NewSQL systems.The ﬁrst was in-memory DBMSs, including H-Store [144,\n189] (commercialized as VoltDB [83]), SingleStore [69],\nMicrosoft Hekaton [128], and HyPer [146].Other start-\nup offerings included disk-oriented, distributed DBMSs\nlike NuoDB [47] and Clustrix [17].Discussion: There has yet to be a dramatic uptake in\nNewSQL DBMS adoption [96].The reason for this lack-\nluster interest is that existing DBMSs were good enough\nfor the time, which means organizations are unwilling to\ntake on the costs and risk of migrating existing applica-\ntions to newer technologies.Companies are more risk-\n\nSIGMOD Record, June 2024 (Vol. 53, No.If an OLTP DBMS fails, companies cannot execute the\ntransactions they need to generate revenue.In contrast,\nan OLAP DBMS failure could be limited to temporarily\ninconveniencing an analyst or data scientist.There were other restrictions in NewSQL DBMSs,\nsuch as only supporting a subset of standard SQL or\nbad performance on multi-node transactions.Some\nNewSQL products, like Microsoft’s Hekaton, were only\navailable as an extension to a legacy DBMS, requiring\nthe faster engine to use the slower DBMS’s interfaces.NewSQL vendors also incorrectly anticipated that in-\nmemory DBMS adoption would be larger in the last\ndecade.Flash vendors drove down costs while improv-\ning storage densities, bandwidth, and latencies.Higher\nDRAM costs and the collapse of persistent memory\n(e.g., Intel Optane) means that SSDs will remain domi-\nnant for OLTP DBMSs.The aftermath of NewSQL is a new crop of distributed,\ntransactional SQL RDBMSs.These include TiDB [141],\nCockroachDB [195], PlanetScale [60] (based on the\nVitess sharding middleware [80]), and YugabyteDB [86].The major NoSQL vendors also added transactions to\ntheir systems in the last decade despite previously strong\nclaims that they were unnecessary.Notable DBMSs that\nmade the shift include MongoDB, Cassandra, and Dy-\nnamoDB.This is of course due to customer requests\nthat transactions are in fact necessary.Google said this\ncogently when they discarded eventual consistency in\nfavor of real transactions with Spanner in 2012 [119].3.5 Hardware Accelerators\nThere has been a hunt for a cost-effective hardware ac-\ncelerator for DBMSs for the last 50 years.The promise\nis obvious: specialized hardware designed for a DBMS\nshould easily outperform a conventional CPU.In the 1980s, vendors fabricated custom hardware to\naccelerate DBMSs and marketed them as database ma-\nchines [107].This ac-\ncelerator targeted a small subset of the execution path,\nand was not cost-effective.Teradata introduced its own\ndatabase machine that provided network hardware for\nsorting in-ﬂight tuples (Y-net [1]), but it was dropped\nfor a software-only solution [85].All other custom hard-\nware DBMS acceleration during the 1980s failed.Instead of building custom hardware for DBMSs, the\nlast 20 years have been about using commodity hard-\nware (FPGAs, GPUs) to accelerate queries.This is an\nenticing idea: a vendor can get the beneﬁts of a DBMS\naccelerator without the cost of fabricating the hardware.Netezza was one of the ﬁrst FPGA-based DBMSs\nthat started in the late 1990s as a fork of PostgreSQL.It used an FPGA to accelerate searches on disk-resident\npages, but originally could not search in-memory pages.Netezza corrected this limitation in a later version [2].Swarm64 attempted to sell a FPGA accelerator for Post-\ngreSQL but switched to a software-only architecture\nwithout the FPGA before they were acquired [91].Vitesse’s\nDeepgreen DB [81] is the only remaining FPGA-enhanced\nDBMS available from an ISV.There is more activity in the GPU-accelerated DBMS\nmarket.Notable GPU DBMSs include Kinetica [35],\nSqream [35], Brytlyt [13], and HeavyDB [48].If data\ndoes not ﬁt in GPU memory, then query execution is\nbottlenecked on loading data into the device, thereby\nrendering the hardware’s parallelization beneﬁts moot.Discussion: There are several conclusions that we can\ndraw from the above analysis.First, these systems are\nall focused on the OLAP market and only for RDBMSs;\nthere are essentially no data model implications to the\ndiscussion in this section.Also, OLAP workloads will\ncontinue to move aggressively to the cloud, but special-\npurpose hardware is not likely to ﬁnd acceptance unless\nit is built by the cloud vendor.Creating custom hardware just for a DBMS is not\ncost-effective for most companies.Commodity hard-\nware avoids this problem but there is still the challenge\nof integrating the hardware into a DBMS.The reason\nwhy there are more GPU DBMSs than FPGA systems\nis because there are existing support libraries available\nfor GPUs (e.g., Nvidia CUDA [169]).But cloud CPU-\nbased compute resources are incredibly cheap due to\neconomies of scale.The success of any accelerator is\nlikely to be limited to on-prem databases, but this mar-\nket is not growing at the same rate as cloud databases.Even if one could get an accelerator to market that\nshowed orders of magnitude improvement over existing\ntechnologies, that only solves half the problem needed\nfor adoption and success.A hardware-only company\nmust ﬁnd somebody to add support for its accelerator\nin a DBMS.If the accelerator is an optional add-on to\nthe DBMS, then adoption will be low and thus a DBMS\nvendor will not want to spend engineering time on sup-\nporting it.If the accelerator is a critical component of\nthe DBMS, then no vendor would outsource the devel-\nopment of such an important part to an outside vendor.The only place that custom hardware accelerators will\nsucceed is for the large cloud vendors.They can justify\nthe $50–100m R&D cost of custom hardware at their\nmassive scale.They also control the entire stack (hard-\nware and software) and can integrate their hardware at\ncritical locations.Amazon did this already with their\nRedshift AQUA accelerators [102].Google BigQuery\nhas custom components for in-memory shufﬂes [89].In spite of the long odds, we predict that there will be\nmany attempts in this space over the next two decades.30\n\nSIGMOD Record, June 2024 (Vol. 53, No.2)\n\n\f3.6 Blockchain Databases\nAs of this writing, a waning database technology fad\nis blockchains.These are decentralized log-structured\ndatabases (i.e., ledger) that maintain incremental check-\nsums using some variation of Merkle trees.These in-\ncremental checksums are how a blockchain ensures that\nthe database’s log records are immutable: applications\nuse these checksums to verify that previous database up-\ndates have not been altered.The ideal use case for blockchain databases is peer-to-\npeer applications where one cannot trust anybody.There\nis no centralized authority that controls the ordering of\nupdates to the database.Thus, blockchain implementa-\ntions use a BFT commit protocol to determine which\ntransaction to apply to the database next.At the present time, cryptocurrencies (Bitcoin) are\nthe only use case for blockchains.In addition, there\nhave been attempts to build a usable DBMS on top of\nblockchains, notably Fluree [25], BigChainDB [12], and\nResilientDB [136].These vendors (incorrectly) promote\nthe blockchain as providing better security and auditabil-\nity that are not possible in previous DBMSs.Discussion: We are required to place trust in several en-\ntities in today’s society.When one sells a house, they\ntrust the title company to manage the transaction.The\nonly applications without real-world trust are dark web\ninteractions (e.g., money laundering).Legitimate busi-\nnesses are unwilling to pay the performance price (about\nﬁve orders of magnitude) to use a blockchain DBMS.If\norganizations trust each other, they can run a shared dis-\ntributed DBMS more efﬁciently without wasting time\nwith blockchains.To the best of our knowledge, all the\nmajor cryptocurrency exchanges run their businesses off\ntraditional RDBMSs and not blockchain systems.Blockchain proponents make additional meaningless\nclaims of achieving data resiliency through replication\nin a peer-to-peer environment.No sensible company\nwould rely on random participants on the Internet as the\nbackup solution for mission-critical databases.There is possibly a (small) market for private block-\nchain DBMSs.Amazon’s Quantum Ledger Database\n(QLDB) released in 2018 [65] provides the same im-\nmutable and veriﬁable update guarantees as a blockchain,\nbut it is not decentralized (i.e., no BFT commit protocol).Amazon built QLDB after ﬁnding no compelling use\ncase for a fully decentralized blockchain DBMS [108].3.7 Summary\nThe key takeaways from the major technological thrusts\nin database systems are as follows:\n\n•\n\n•\n\nColumnar Systems: The change to columnar stor-\nage revolutionized OLAP DBMS architectures.Cloud Databases: The cloud has upended the con-\nventional wisdom on how to build scalable DBMSs.Except for embedded DBMSs, any product not start-\ning with a cloud offering will likely fail.Data Lakes / Lakehouses: Cloud-based object stor-\nage using open-source formats will be the OLAP\nDBMS archetype for the next ten years.NewSQL Systems: They leverage new ideas but\nhave yet to have the same impact as columnar and\ncloud DBMSs.It has led to new distributed DBMSs\nthat support stronger ACID semantics as a counter\nto NoSQL’s weaker BASE guarantees.Hardware Accelerators: We do not see a use case\nfor specialized hardware outside of the major cloud\nvendors, though start-ups will continue to try.Blockchain Databases: An inefﬁcient technology\nlooking for an application.History has shown this is\nthe wrong way to approach systems development.•\n\n•\n\n•\n\n•\n\n4 Parting Comments\nOur analysis of the last two decades in databases has sev-\neral takeaways.Unfortunately, some of these are repeats\nof the warnings from the 2005 paper.Never underestimate the value of good marketing for\nbad products.The database market is highly competi-\ntive and lucrative.This competition drives vendors to\nclaim that their new technologies will solve all sorts of\nproblems and change developers’ lives for the better.Ev-\nery developer has struggled with databases before, so\nthey are especially amenable to such marketing.Infe-\nrior DBMS products have succeeded via strong market-\ning despite the existence of better options available at\nthe time: Oracle did this in the 1980s, MySQL did this\nin the 2000s, and MongoDB did this in the 2010s.Beware of DBMSs from large non-DBMS vendors.One interesting aspect in the last ten years of databases\nis the trend of tech companies building DBMSs in-house\nthat they then spin out as open-source projects.All these\nsystems started life as purpose-built applications for a\ntech company.The company then releases the DBMS\nas an open-source project (often pushed to the Apache\nFoundation for stewardship) in hopes to achieve “free”\ndevelopment from external users.Some times they come from large companies that can\nafford to allocate resources to developing new systems.Notable examples include Meta (Hive [197], Presto [63],\nCassandra [14], RocksDB [68]) and LinkedIn (Kafka [33],\nPinot [59], Voldemort [82]).Other systems are from\nstart-ups building a data-intensive product where they\nfelt the need to also build a DBMS.The most successful\nexamples are 10gen (MongoDB) and PowerSet (HBase),\nbut there also many failed endeavors.This trend to avoid “not invented here” software is\npartly because many companies’ promotion path favors\n\nSIGMOD Record, June 2024 (Vol.53, No. 2)\n\n31\n\n\fengineers who make new internal systems, even if ex-\nisting tools are sufﬁcient.But this perversion led many\nteams without DBMS engineering experience to under-\ntake building a new system.One should be wary of\nsuch systems when a company ﬁrst open-sources them,\nas they are almost always immature technologies.Do not ignore the out-of-box experience.One of the\nsalient selling points of many non-relational DBMSs is\na better “out-of-box” experience than RDBMSs.Most\nSQL systems require one ﬁrst to create a database and\nthen deﬁne their tables before they can load data.This\nis why data scientists use Python notebooks to analyze\ndata ﬁles quickly.Every DBMS should, therefore, make\nit easy to perform in situ processing of local and cloud-\nstorage ﬁles.DuckDB’s rising popularity is partly due\nto its ability to do this well.Vendors should also consider additional challenges\nthat customers will inevitably face with databases, in-\ncluding physical design, knob tuning, schema design,\nand query tuning.There is a crucial need for what one\nof us calls “self-driving” DBMSs [173].Developers need to query their database directly.Most OLTP applications created in the last 20 years pri-\nmarily interact with databases via an abstraction layer,\nsuch as an endpoint API (e.g., REST, GraphQL) or\nan object-relational mapper (ORM) library.Such lay-\ners translate an application’s high-level requests into\ndatabase queries.ORMs also automatically handle main-\ntenance tasks, such as schema migrations.One could\nargue that since OLTP developers never write raw SQL\nin their applications, it does not matter what data model\ntheir DBMS uses as these layers hide it.ORMs are a vital tool for rapid prototyping.But they\noften sacriﬁce the ability to push logic into the DBMS\nin exchange for interoperability with multiple DBMSs.Developers fall back to writing explicit database queries\nto override the poor auto-generated queries.This is why\nusing a RDBMS that supports SQL is the better choice.The impact of AI/ML on DBMSs will be signiﬁcant.How DBMSs should interact with modern AI/ML tools\nhas recently become a crucial question, especially with\nthe advent of LLMs (e.g., ChatGPT).There is a resurgence in using natural languages (NLs)\nto query databases due to advancements in LLMs at\nconverting NL to query code (e.g., SQL) [133].Some\nhave even suggested that such AI-powered query inter-\nfaces will render SQL obsolete.NL interfaces are an\nold research topic that dates back to the 1970s [139],\nbut which historically has poor outcomes and thus little\nwidespread use [88].We acknowledge LLMs have im-\npressive results for this task but caution those who think\nNL will replace SQL.Nobody will write OLTP appli-\ncations using an NL, as most generate queries using\n\nORMs.For OLAP databases, NL could prove helpful\nin constructing the initial queries for exploratory anal-\nysis.However, these queries should be exposed to a\ndashboard-like reﬁnement tool since English and other\nNLs are rife with ambiguities and impreciseness.There is a reluctance to depend on current LLM tech-\nnology for decision-making inside the enterprise, espe-\ncially with ﬁnancial data.The biggest issue is that the\noutput of an LLM is not explainable to a human.Sec-\nond, LLM systems require more training data than “tra-\nditional” ML systems (e.g., random forests, Bayesian\nmodels).Companies generally cannot outsource the cre-\nation of training data for these models to unskilled peo-\nple.For these reasons, the uptake of LLMs for enter-\nprise data will be cautiously slow.Lastly, there is a considerable amount of recent re-\nsearch on using AI/ML to optimize the DBMSs [174].Examples include ML-oriented query optimizers [152,\n156], conﬁguration tuners [200, 204], and access meth-\nods [151, 193].Although such ML-assisted optimiza-\ntions are powerful tools to improve the performance of\nDBMSs, it does not obviate the need for high-quality\nsystems engineering.5 Conclusion\nWe predict that what goes around with databases will\ncontinue to come around in upcoming decades.Another\nwave of developers will claim that SQL and the RM are\ninsufﬁcient for emerging application domains.People\nwill then propose new query languages and data models\nto overcome these problems.Another concern is the wasted effort of new projects\nreimplementing the same components that are not novel\nbut necessary to have a production-ready DBMS (e.g.,\nconﬁg handlers, parsers, buffer pools).There are some efforts to-\nwards this goal, including for ﬁle formats (see Sec.3.3),\nquery optimization (e.g., Calcite [104], Orca [186]), and\nexecution engines (e.g., DataFusion [18], Velox [175]).We contend that the database community should strive\nfor a POSIX-like standard of DBMS internals to accel-\nerate interoperability.We caution developers to learn from history.In other\nwords, stand on the shoulders of those who came before\nand not on their toes.32\n\nSIGMOD Record, June 2024 (Vol. 53, No.[3] Graph processing with sql server and azure sql database.https://docs.microsoft.com/en-us/sql/relational-\ndatabases/graphs/sql-graph-overview, 2021.https://www.oracle.com/a/\n\ntech/docs/georaster-2021.pdf, mar 2021.[5] Apache Hudi. https://hudi.apache.org/, 2023.[6] Apache Iceberg. https://iceberg.apache.org/, 2023.[7] Oracle introduces integrated vector database to augment\ngenerative ai and dramatically increase developer produc-\nhttps://www.oracle.com/news/announcement/ocw-\ntivity.2024. [10] Apache AGE. https://age.apache.org, 2024.[11] Apache Arrow. https://arrow.apache.org, 2024.[12] BigchainDB. https://www.bigchaindb.com/, 2024.[13] Brytlyt. https://brytlyt.io/, 2024.[14] Apache Cassandra. https://cassandra.apache.org, 2024.[15] The Cassandra Query Language\n\n(CQL).https:\n\n//cassandra.apache.org/doc/latest/cassandra/cql/,\n2024.[16] ChatGPT Plugins. https://openai.com/blog/chatgpt-\n\nplugins, March 2024.[17] Clustrix. https://clustrix.com, 2024. [18] Apache Arrow DataFusion.https://arrow.apache.org/\n\nhaystack.readthedocs.io, 2024.[21] Dremio. https://dremio.com/, 2024.[22] Apache drill. https://drill.apache.org, 2024.[23] Elasticsearch. https://www.elastic.co, 2024.[24] FAISS – Facebook AI Similarity Search.https://en.wikipedia.org/wiki/GraphLab, 2024.[28] Apache Hbase. https://hbase.apache.org, 2024.[31] Informix extensions and datablade modules.https:\n\n//www.ibm.com/docs/en/informix-servers/12.10?topic=\ninformix-extensions-datablade-modules, 2024.[32] Janusgraph. https://janusgraph.org/, 2024.[33] Apache Kafka. https://kafka.apache.org/, 2024.[34] kdb+. https://kx.com/, 2024.[47] Nuodb. https://nuodb.com, 2024.[48] Heavydb. https://www.heavy.ai, 2024.[49] openCypher. https://opencypher.org, 2024. [50] Oracle graph database.[51] PGQL – Property Graph Query Language.https://pgql-\n\n[52] Oracle\n\nText.[53] Apache ORC. https://orc.apache.org/, 2024.[54] Paradigm4 platform overview.https://partiql.org/, 2024. [57] Apache Phoenix.https://phoenix.apache.org, 2024.[58] Pinecone. https://www.pinecone.io/, 2024.[59] Apache Pinot. https://pinot.apache.org/, 2024.[60] PlanetScale. https://planetscale.com/, 2024.Text\n\nFull\n\nwww.postgresql.org/docs/current/textsearch.html,\n2024.\n\nhttps://\n\n[63] PrestoDB.https://prestodb.io/, 2024. [64] PRQL – A Proposal for a Better SQL.https://prql-\n\nlang.org/, 2024.https://www.couchbase.com/sqlplusplus, 2024.[73] Teradata – creating an array data\n\ntype.https:\n\n//docs.teradata.com/r/S0Fw2AVH8ff3MDA0wDOHlQ/\nun3kj~t3qMDO66LF4YXuiw, 2024.[74] Tigergraph. https://www.tigergraph.com/, 2024.[75] Tigergraph – gsql. https://www.tigergraph.com/gsql/,\n\n2024.[76] Tiledb. https://tiledb.com, 2024.[78] Turi. http://turi.com/, 2024.[79] Vespa. https://vespa.ai/, 2024.[80] Vitess. https://vitess.io, 2024. [81] Vitesse Deepgreen DB.PhD thesis, MIT, 2008.\n\ndatafusion/, 2024.[19] Microsoft DiskANN. DiskANN, 2024. [20] Django\n\nHaystack.https://github.com/microsoft/\n\nhttps://django-\n\naws.amazon.com/qldb/, 2024.[66] The\n\nraster\nrasdaman\nwww.rasdaman.org, 2024.\n\narray\n\ndatabase.http://\n\nSIGMOD Record, June 2024 (Vol. 53, No.2)\n\n33\n\n\f[88] K. Affolter, K. Stockinger, and A. Bernstein.A compara-\ntive survey of recent natural language interfaces for databases.VLDB J., 28(5):793–819, 2019. doi: 10.1007/s00778-019-\n00567-8.[89] H. Ahmadi. In-memory query execution in google bigquery.https://cloud.google.com/blog/products/bigquery/in-\nmemory-query-execution-in-google-bigquery, Aug 2016.[90] A. Ailamaki, D. J. DeWitt, M. D. Hill, and M. Skounakis.Weaving relations for cache performance.In VLDB, volume 1,\npages 169–180, 2001. [91] G. Anadiotis.Open source postgresql on steroids: Swarm64\ndatabase acceleration software for performance improvement\nhttps://www.zdnet.com/article/open-\nand analytics.source-postgresql-on-steroids-swarm64-database-\nacceleration-software-for-performance-improvement-\nand-analytics/, apr 2023.[92] M. Armbrust, T. Das, L. Sun, B. Yavuz, S. Zhu, M. Murthy,\nJ. Torres, H. van Hovell, A. Ionescu, A. Łuszczak, et al.Delta\nlake: high-performance acid table storage over cloud object\nstores.Proceedings of the VLDB Endowment, 13(12):3411–\n3424, 2020.In Proceedings of CIDR, page 8, 2021.[94] N. Armenatzoglou, S. Basu, N. Bhanoori, M. Cai, N. Chainani,\nK. Chinta, V. Govindaraju, T. J.Amazon redshift re-invented. In Proceedings of the 2022 Inter-\nnational Conference on Management of Data, SIGMOD ’22,\npages 2205–2217, 2022. doi: 10.1145/3514221.3526045.[95] M. Aslett. How will the database incumbents respond to\n\nNoSQL and NewSQL?The 451 Group, April 2011. [96] M. Aslett.Ten years of NewSQL: Back to the future of dis-\ntributed relational databases.The 451 Group, June 2021. [97] S. Babu and P. Bizarro.Adaptive query processing in the look-\n\ning glass.In CIDR, pages 238–249, January 2005.[98] D. F. Bacon, N. Bales, N. Bruno, B. F. Cooper, A. Dickinson,\nA. Fikes, C. Fraser, A. Gubarev, M. Joshi, E. Kogan, A. Lloyd,\nS. Melnik, R. Rao, D. Shue, C. Taylor, M. van der Holst, and\nIn Pro-\nD. Woodford.ceedings of the 2017 ACM International Conference on Man-\nagement of Data, SIGMOD ’17, pages 331–343, 2017. doi:\n10.1145/3035918.3056103.Megastore:\nProviding scalable, highly available storage for interactive ser-\nIn Proceedings of the Conference on Innovative Data\nvices.system Research (CIDR), pages 223–234, 2011.[100] N. Bakibayev, D. Olteanu, and J. Závodný.Fdb: A query en-\ngine for factorised relational databases. Proc.[103] P. Baumann. A database array algebra for spatio-temporal data\nand beyond.Database machines: An idea whose\ntime passed?A critique of the future of database machines.pages 166–187, 1983. doi: 10.1007/978-3-642-69419-6\n_10.https://www.tbray.org/\nnov\n\n[108] T. Bray. AWS and Blockchain.ongoing/When/202x/2022/11/19/AWS-Blockchain,\n2019.\\\n\n[109] P. Carbone, A. Katsifodimos, S. Ewen, V. Markl, S. Haridi, and\nK. Tzoumas.The Bulletin of the Technical Committee on Data\nEngineering, 38(4), 2015.[110] R. Cattell. Scalable sql and nosql data stores.SIGMOD Rec.,\n\n39:12–27, 2011. [111] F. Chang, J.Dean, S. Ghemawat, W. C. Hsieh, D. A. Wallach,\nM. Burrows, T. Chandra, A. Fikes, and R. E. Gruber.Bigtable:\nA distributed storage system for structured data.In Proceedings\nof the USENIX Symposium on Operating Systems Design and\nImplementation, OSDI ’06, pages 205–218, 2006.[112] S. Chaudhuri and G. Weikum.Rethinking database system ar-\nchitecture: Towards a self-tuning risc-style database system.In\nVLDB 2000, Proceedings of 26th International Conference on\nVery Large Data Bases, pages 1–10, 2000.[113] C. Chin. The rise and fall of the olap cube.https:\n\n//www.holistics.io/blog/the-rise-and-fall-of-the-\nolap-cube/, January 2020.[114] M. Chock, A. F. Cardenas, and A. Klinger.Database struc-\nture and manipulation capabilities of a picture database man-\nagement system (picdms).Dean, M. Epstein, A. Fikes, C. Frost, J. Furman,\nS. Ghemawat, A. Gubarev, C. Heiser, P. Hochschild, W. Hsieh,\nS. Kanthak, E. Kogan, H. Li, A. Lloyd, S. Melnik, D. Mwaura,\nD. Nagle, S. Quinlan, R. Rao, L. Rolig, M. S. Yasushi Saito,\nC. Taylor, R. Wang, and D. Woodford.Spanner: Google’s\nGlobally-Distributed Database.In OSDI, 2012. [120] A. Crotty, V. Leis, and A. Pavlo.[121] B. Dageville, T. Cruanes, M. Zukowski, V. Antonov, A. Avanes,\nJ. Bock, J. Claybaugh, D. Engovatov, M. Hentschel, J. Huang,\nA. W. Lee, A. Motivala, A. Q. Munir, S. Pelley, P. Povinec,\nG. Rahn, S. Triantafyllis, and P. Unterbrunner.The snowﬂake\nIn Proceedings of the 2016 Inter-\nelastic data warehouse.national Conference on Management of Data, SIGMOD ’16,\npages 215–226, 2016. doi: 10.1145/2882903.2903741.[122] J. Dean and S. Ghemawat.MapReduce: Simpliﬁed data pro-\ncessing on large clusters.In 6th Symposium on Operating Sys-\ntems Design & Implementation (OSDI 04).USENIX Associa-\ntion, Dec. 2004.34\n\nSIGMOD Record, June 2024 (Vol.53, No. 2)\n\n\f[123] J. Dean and S. Ghemawat.Mapreduce: A ﬂexible data process-\n\ning tool.hadoop-data-cloud-hdfs-vs-s3/, November 2019.[125] G. DeCandia, D. Hastorun, M. Jampani, G. Kakulapati, A. Lak-\nshman, A. Pilchin, S. Sivasubramanian, P. Vosshall, and W. Vo-\ngels.Dynamo: Amazon’s highly available key-value store.SIGOPS Oper. Syst. Rev., 41(6):205–220, oct 2007.[126] A. Deutsch, N. Francis, A.Green, K. Hare, B. Li, L. Libkin,\nT. Lindaaker, V. Marsault, W. Martens, J. Michels, F. Murlak,\nS. Plantikow, P. Selmer, O. van Rest, H. Voigt, D. Vrgoˇc,\nM. Wu, and F. Zemke.[128] C. Diaconu, C. Freedman, E. Ismert, P. Larson, P. Mit-\ntal, R. Stonecipher, N. Verma, and M. Zwilling.Hekaton:\nIn Proceed-\nSQL server’s memory-optimized OLTP engine.In USENIX\nAnnual Technical Conference, pages 1037–1048, July 2022.[130] J. Fan, A. G. S. Raj, and J. M. Patel.The case against special-\nized graph analytics engines.[131] B. Fitzpatrick. Distributed caching with memcached.Linux J.,\n\n2004(124):5, aug 2004. ISSN 1075–3583.[133] H. Fu, C. Liu, B. Wu, F. Li, J. Tan, and J. Sun.Catsql: To-\nwards real world natural language to sql applications. Proc.[134] S. Ghemawat, H. Gobioff, and S.-T. Leung.The google ﬁle\nsystem. SIGOPS Oper.Syst. Rev., 37(5):29–43, oct 2003.ISSN\n0163-5980. doi: 10.1145/1165389.945450. [135] J.Gray, A. Bosworth, A. Layman, and H. Pirahesh.Data\ncube: A relational aggregation operator generalizing group-by,\nIn Proceedings of the International\ncross-tab, and sub-total.Conference on Data Engineering, pages 152–159, 1996. doi:\n10.1109/ICDE.1996.492099.Re-\nProc. silientdb: Global scale resilient blockchain fabric.10.14778/\nVLDB Endow., 13(6):868–883, 2020.Why Your Vector Database Should\nNot be a Vector Database.https://www.singlestore.com/\nblog/why-your-vector-database-should-not-be-a-\nvector-database/, April 2023.https://www.dbta.com/Columns/MongoDB-Matters/How-\nWiredTiger-Revolutionized-MongoDB-145510.aspx,\n2021.\n\nmar\n\n[139] G. G. Hendrix, E. D. Sacerdoti, D. Sagalowicz, and J. Slocum.Developing a natural language interface to complex data. ACM\nTrans.Database Syst., 3(2):105–147, jun 1978. doi: 10.1145/\n320251.320253. [140] Y. Huai, A. Chauhan, A.Gates, G. Hagleitner, E. N. Hanson,\nO. O’Malley, J. Pandey, Y. Yuan, R. Lee, and X. Zhang.Major\ntechnical advancements in apache hive.In Proceedings of the\n2014 ACM SIGMOD international conference on Management\nof data, pages 1235–1246, 2014.[141] D. Huang, Q. Liu, Q. Cui, Z. Fang, X. Ma, F. Xu, L. Shen,\nL. Tang, Y. Zhou, M. Huang, W. Wei, C. Liu, J. Zhang,\nJ. Li, X. Wu, L. Song, R. Sun, S. Yu, L. Zhao, N. Cameron,\nL. Pei, and X. Tang.Tidb: A raft-based htap database. Proc.[142] K. E. Iverson. A Programming Language.Graph ana-\nlytics using vertica relational database.In 2015 IEEE Interna-\ntional Conference on Big Data, pages 1191–1200, 2015.[144] R. Kallman, H. Kimura, J. Natkins, A. Pavlo, A. Rasin,\nS. Zdonik, E. P. C. Jones, S. Madden, M. Stonebraker, Y. Zhang,\nJ. Hugg, and D. J. Abadi.H-store: A high-performance, dis-\ntributed main memory transaction processing system.Proc. VLDB Endow., 1(2):1496–1499, aug 2008. doi: 10.14778/\n1454159.1454211.[146] A. Kemper and T. Neumann.Hyper: A hybrid oltp&olap main\nmemory database system based on virtual memory snapshots.In Proceedings of the 27th International Conference on Data\nEngineering, pages 195–206.[147] T. Kersten, V. Leis, A. Kemper, T. Neumann, A. Pavlo, and\nP. Boncz.Everything you always wanted to know about com-\npiled and vectorized queries but were afraid to ask.Proc. VLDB Endow., 11(13):2209–2222, jan 2019. doi: 10.14778/\n3275366.3284966. [148] R. Kimball.The Data Warehouse Toolkit: Practical Techniques\nfor Building Dimensional Data Warehouses.SIGMOD Rec., 24(3):92–97, 1995.[150] M. Kornacker, A. Behm, V. Bittorf, T. Bobrovytsky, C. Ching,\nA. Choi, J. Erickson, M. Grund, D. Hecht, M. Jacobs, I. Joshi,\nL. Kuff, D. Kumar, A. Leblang, N. Li, I. Pandis, H. Robinson,\nD. Rorke, S. Rus, J. Russell, D. Tsirogiannis, S. Wanderman-\nMilne, and M. Yoder.Impala: A modern, open-source sql en-\ngine for hadoop.In CIDR, 2015. [151] T. Kraska, A. Beutel, E. H. Chi, J.Dean, and N. Polyzotis. The\ncase for learned index structures.[152] S. Krishnan, Z. Yang, K. Goldberg, J. Hellerstein, and I. Sto-\nica.Learning to optimize join queries with deep reinforcement\nlearning, 2018.URL https://arxiv.org/abs/1808.03196. [153] F. Lardinois.Aws gives open source the middle ﬁn-\nger.https://techcrunch.com/2019/01/09/aws-gives-open-\nsource-the-middle-finger/, jan 2019.[154] V. Leis, A. Gubichev, A. Mirchev, P. A. Boncz, A. Kemper,\nand T. Neumann.How good are query optimizers, really?doi: 10.14778/\nProc. VLDB Endow., 9(3):204–215, 2015.2850583.2850594. [155] D. Maier and B. Vance. A call to order.In Proceedings\nof the Twelfth ACM SIGACT-SIGMOD-SIGART Symposium\non Principles of Database Systems, pages 1–16, 1993. doi:\n10.1145/153850.153851.[156] R. Marcus, P. Negi, H. Mao, N. Tatbul, M. Alizadeh, and\nT. Kraska.Bao: Making learned query optimization practical.In Proceedings of the 2021 International Conference on Man-\nagement of Data, SIGMOD ’21, pages 1275–1288, 2021. doi:\n10.1145/3448016.3452838.[157] D. McDiarmid. Vector search with clickhouse.https://\nclickhouse.com/blog/vector-search-clickhouse-p2, May\n2023.SIGMOD Record, June 2024 (Vol.The graph-relational database, deﬁned.https://www.edgedb.com/blog/the-graph-relational-\ndatabase-defined, March 2022.[159] W. McKinney et al. Data structures for statistical computing\nin python.In Proceedings of the 9th Python in Science Confer-\nence, volume 445, pages 51–56, 2010.[160] F. McSherry. Scalability! but at what cost?http:\n\n//www.frankmcsherry.org/graph/scalability/cost/2015/\n01/15/COST.html, January 2015.Long, G. Romer, S. Shivakumar,\nM. Tolton, and T. Vassilakis.Dremel: Interactive analysis of\nweb-scale datasets.Proc. VLDB Endow., 3(12):330–339, sep\n2010.ISSN 2150-8097. doi: 10.14778/1920841.1920886.[162] S. Melnik, A. Gubarev, J. J.Long, G. Romer, S. Shivakumar,\nM. Tolton, T. Vassilakis, H. Ahmadi, D. Delorey, S. Min, M. Pa-\nsumansky, and J. Shute.Dremel: A decade of interactive sql\nanalysis at web scale.Proc. VLDB Endow., 13(12):3461–3472,\naug 2020.ISSN 2150-8097. doi: 10.14778/3415478.3415568.[163] P. Menon, A. Ngom, T. C. Mowry, A. Pavlo, and L. Ma.Per-\nmutable compiled queries: Dynamically adapting compiled\nqueries without recompiling.Proc. VLDB Endow., 14(2):101–\n113, 2020. doi: 10.14778/3425879.3425882.[164] C. Metz. duce. google_caffeine_explained/, September 2010.Google search index splits with mapre-\nhttps://www.theregister.com/2010/09/09/\n\n[165] J. Michels, K. Hare, K. Kulkarni, C. Zuzarte, Z. H. Liu,\nB. Hammerschmidt, and F. Zemke.Sql support for multidimen-\nsional arrays.Technical Report 34, Jacobs University, July\n2017.URL https://nbn-resolving.org/urn:nbn:de:gbv:\n579-opus-1007237.[167] F. Nargesian, E. Zhu, R. J. Miller, K. Q. Pu, and P. C. Arocena.VLDB Endow., 12(12):1986–1989, aug 2019. doi: 10.14778/\n3352063.3352116.[168] H. Q. Ngo, C. Ré, and A. Rudra.Skew strikes back: New\ndevelopments in the theory of join algorithms.SIGMOD Rec.,\n42(4):5–16, feb 2014. doi: 10.1145/2590989.2590991.[169] NVIDIA, P. Vingelmann, and F. H. Fitzek. Cuda toolkit.https:\n\n//developer.nvidia.com/cuda-toolkit, 2020.[170] M. A. Olson, K. Bostic, and M. I. Seltzer. Berkeley DB.In Pro-\nceedings of the FREENIX Track: 1999 USENIX Annual Tech-\nnical Conference, pages 183–191, 1999.[171] A. Pavlo and M. Aslett. What’s really new with newsql?SIG-\n\nMOD Record, 45(2):45–55, Sep 2016.[172] A. Pavlo, E. Paulson, A. Rasin, D. J. Abadi, D. J. DeWitt,\nS. Madden, and M. Stonebraker.A comparison of approaches\nto large-scale data analysis.In CIDR 2017,\nSelf-driving database management systems.Conference on Innovative Data Systems Research, 2017.[174] A. Pavlo, M. Butrovich, A. Joshi, L. Ma, P. Menon, D. V. Aken,\nL. Lee, and R. Salakhutdinov.External vs. internal: An essay\non machine learning agents for autonomous database manage-\nment systems.IEEE Data Eng. Bull., 42(2):32–46, 2019.[175] P. Pedreira, O. Erling, M. Basmanova, K. Wilfong, L. Sakka,\nK. Pai, W. He, and B. Chattopadhyay.Velox: Meta’s uniﬁed\nexecution engine. Proc.VLDB Endow., 15(12):3372–3384, aug\n2022. doi: 10.14778/3554821.3554829.[176] P. Pedreira, O. Erling, K. Karanasos, S. Schneider, W. McK-\ninney, S. R. Valluri, M. Zait, and J. Nadeau.The composable\ndata management system manifesto. Proc.VLDB Endow., 16\n(10):2679–2685, jun 2023. doi: 10.14778/3603581.3603604.[177] D. Petersohn, S. Macke, D. Xin, W. Ma, D. Lee, X. Mo,\nJ. E. Gonzalez,\nJ. M. Hellerstein, A. D. Joseph, and\nA. Parameswaran.Towards scalable dataframe systems. Proc.[178] D. Petkovic. SQL/JSON standard: Properties and deﬁciencies.doi: 10.1007/\n\nDatenbank-Spektrum, 17(3):277–287, 2017.\ns13222-017-0267-4. [179] D. Pritchett.BASE: An Acid Alternative:\n\nIn Partitioned\nDatabases, Trading Some Consistency for Availability Can\nLead to Dramatic Improvements in Scalability.ACM Queue,\n6(3):48–55, may 2008. doi: 10.1145/1394127.1394128.[180] M. Raasveldt and H. Mühleisen.Duckdb: An embeddable ana-\nlytical database.In Proceedings of the 2019 International Con-\nference on Management of Data, SIGMOD ’19, pages 1981–\n1984, 2019. doi: 10.1145/3299869.3320212.[181] M. Rocklin. Dask: Parallel computation with blocked algo-\nrithms and task scheduling.In Proceedings of the 14th Python\nin Science Conference, pages 130–136, 2015.[182] F. Rusu. Multidimensional array data management. Found.doi: 10.1561/\n\nTrends Databases, 12(2-3):69–220, 2023. 1900000069.[183] S. Sakr, A. Bonifati, H. Voigt, A. Iosup, K. Ammar, R. An-\ngles, W. Aref, M. Arenas, M. Besta, P. A. Boncz, K. Daudjee,\nE. D. Valle, S. Dumbrava, O. Hartig, B. Haslhofer, T. Hege-\nman, J. Hidders, K. Hose, A. Iamnitchi, V. Kalavri, H. Kapp,\nW. Martens, M. T. Özsu, E. Peukert, S. Plantikow, M. Ragab,\nM. R. Ripeanu, S. Salihoglu, C. Schulz, P. Selmer, J. F. Se-\nqueda, J. Shinavier, G. Szárnyas, R. Tommasini, A. Tumeo,\nA. Uta, A. L. Varbanescu, H.-Y.Wu, N. Yakovets, D. Yan, and\nE. Yoneki.The smart automatic document re-\ntrieval systems–an illustration.Commun. ACM, 8(6):391–398,\njun 1965. doi: 10.1145/364955.364990.[185] R. Sethi, M. Traverso, D. Sundstrom, D. Phillips, W. Xie,\nY.Sun, N. Yegitbasi, H. Jin, E. Hwang, N. Shingte, and\nIn 2019 IEEE 35th\nC. Berner. Presto: Sql on everything.International Conference on Data Engineering (ICDE), pages\n1802–1813, 2019. doi: 10.1109/ICDE.2019.00196.[186] M. A. Soliman, L. Antova, V. Raghavan, A. El-Helw, Z. Gu,\nE. Shen, G. C. Caragea, C. Garcia-Alvarado, F. Rahman,\nM. Petropoulos, F. Waas, S. Narayanan, K. Krikellas, and\nR. Baldwin.Orca: a modular query optimizer architecture for\nIn Proceedings of the 2014 ACM SIGMOD Inter-\nbig data.national Conference on Management of Data, SIGMOD ’14,\npages 337–348, 2014. doi: 10.1145/2588555.2595637.https://\n\nwp.sigmod.org/?p=1629, 2015.[188] M. Stonebraker and J. Hellerstein.Readings in Database Sys-\ntems, chapter What Goes Around Comes Around, pages 2–41. 4th edition, 2005.[189] M. Stonebraker, S. Madden, D. J. Abadi, S. Harizopoulos,\nN. Hachem, and P. Helland.In Proceedings of the 33rd\nInternational Conference on Very Large Data Bases, VLDB\n’07, pages 1150–1160.VLDB Endowment, 2007. [190] M. Stonebraker, D. Abadi, D. J. DeWitt, S. Madden, E. Paulson,\nA. Pavlo, and A. Rasin.Mapreduce and parallel dbmss: Friends\nor foes?Commun. ACM, 53(1):64–71, Jan. 2010.[191] M. Stonebraker, P. Brown, A. Poliakov, and S. Raman. The ar-\nchitecture of scidb.In Scientiﬁc and Statistical Database Man-\nagement - 23rd International Conference, SSDBM 2011, vol-\nume 6809 of Lecture Notes in Computer Science, pages 1–16.Springer, 2011. doi: 10.1007/978-3-642-22351-8\n\n_1. [192] L. Sullivan.Performance issues in mid-sized relational\ndatabase machines.Master’s thesis, Rochester Institute of Tech-\nnology, 1989.\\\n\n36\n\nSIGMOD Record, June 2024 (Vol.53, No. 2)\n\n\f[193] Z. Sun, X. Zhou, and G. Li.Learned index: A comprehen-\nsive experimental evaluation. Proc.VLDB Endow., 16(8):1992–\n2004, apr 2023. doi: 10.14778/3594512.3594528.Google\n\ndumps mapreduce\n\n[194] Y.\n\nSverdlik.in\nfa-\nhttps:\n\nvor of new hyper-scale\n//www.datacenterknowledge.com/archives/2014/06/\n25/google-dumps-mapreduce-favor-new-hyper-scale-\nanalytics-system, June 2014.\n\nanalytics\n\nsystem.[195] R. Taft, I. Sharif, A. Matei, N. VanBenschoten, J. Lewis,\nT. Grieger, K. Niemi, A.Woods, A. Birzin, R. Poss, P. Bardea,\nA. Ranade, B. Darnell, B. Gruneir, J. Jaffray, L. Zhang, and\nP. Mattis.Cockroachdb: The resilient geo-distributed SQL\ndatabase.In Proceedings of the 2020 International Conference\non Management of Data, SIGMOD, pages 1493–1509, 2020.\ndoi: 10.1145/3318464.3386134.[196] D. ten Wolde, T. Singh, G. Szarnyas, and P. Boncz.Duckpgq:\nEfﬁcient property graph queries in an analytical\nrdbms.In CIDR, 2023. URL https://www.cidrdb.org/cidr2023/\npapers/p66-wolde.pdf.[197] A. Thusoo, J. S. Sarma, N. Jain, Z. Shao, P. Chakka, N. Zhang,\nS. Antony, H. Liu, and R. Murthy.Hive - a petabyte scale\ndata warehouse using hadoop.[198] E. Totoni, T. A. Anderson, and T. Shpeisman.HPAT: high per-\nformance analytics with scripting ease-of-use.In Proceedings\n\nof the International Conference on Supercomputing, pages 9:1–\n9:10, 2017. doi: 10.1145/3079079.3079099.[199] T. Trautmann. database. relational-database, September 2021.Auto-\nmatic database management system tuning through large-scale\nIn Proceedings of the 2017 ACM Inter-\nmachine learning.national Conference on Management of Data, SIGMOD ’17,\npages 1009–1024, 2017. doi: 10.1145/3035918.3064029.[204] X. Zhang, Z. Chang, Y. Li, H. Wu, J. Tan, F. Li, and\nB. Cui.Facilitating database tuning with hyper-parameter op-\ntimization: a comprehensive experimental evaluation.SIGMOD Record, June 2024 (Vol. 53, No. 2)\n\n37",
          "time": 1667.4321630001068,
          "input_token_size": 26192,
          "output_token_size": 80,
          "original_provenance_id": 0
        }
      ],
      "metadata": {
        "question_id": "whatgoesaround-sigmodrec2024_f05c70ff",
        "created_at": 1750200262.8473685,
        "processing_time": 1671.0415515899658,
        "processing_complete": true,
        "max_provenances": 5
      },
      "source_info": {
        "selected_from": "test_outputs",
        "reason": "shorter_provenance",
        "sentence_count": 964,
        "provenance_count": 1,
        "alternatives": [
          {
            "source": "test_outputs",
            "sentence_count": 964,
            "provenance_count": 1,
            "has_answer": true
          }
        ],
        "selection_timestamp": "2025-06-17T16:48:52.941088"
      }
    }
  },
  {
    "f671d1bf": {
      "question": "What university is associated with Michael Stonebraker, one of the authors?",
      "answer": "Massachusetts Institute of Technology",
      "provenance": [
        {
          "provenance_id": 0,
          "input_sentence_ids": [
            0,
            1,
            2
          ],
          "provenance_ids": [
            0
          ],
          "provenance": "What Goes Around Comes Around... And Around...\n\nMichael Stonebraker\nMassachusetts Institute of Technology\nstonebraker@csail.mit.edu\n\nAndrew Pavlo\nCarnegie Mellon University\npavlo@cs.cmu.edu\n\nABSTRACT\nTwo decades ago, one of us co-authored a paper com-\nmenting on the previous 40 years of data modelling re-\nsearch and development [188].",
          "time": 7.117476224899292,
          "input_token_size": 30046,
          "output_token_size": 43,
          "original_provenance_id": 0
        }
      ],
      "metadata": {
        "question_id": "whatgoesaround-sigmodrec2024_f671d1bf",
        "created_at": 1749870176.9795377,
        "processing_time": 16.767179489135742,
        "processing_complete": true,
        "max_provenances": 5
      },
      "source_info": {
        "selected_from": "test_outputs_prev1",
        "reason": "shorter_provenance",
        "sentence_count": 3,
        "provenance_count": 1,
        "alternatives": [
          {
            "source": "test_outputs_prev1",
            "sentence_count": 3,
            "provenance_count": 1,
            "has_answer": true
          }
        ],
        "selection_timestamp": "2025-06-17T16:48:52.941088"
      }
    }
  },
  {
    "f7869b74": {
      "question": "Why have non-relational systems like NoSQL not surpassed SQL/RM systems according to the authors?",
      "answer": "1. The relational model (RM) continues to be the dominant data model and SQL has been extended to capture the good ideas from others.\n2. Many non-relational DBMSs have been relegated to legacy maintenance mode and nobody is building new applications on them.\n3. Most systems that deviated from SQL or the RM have not dominated the DBMS landscape and often only serve niche markets.\n4. Many NoSQL systems now expose a SQL-like interface for RM databases, indicating a path to convergence with RDBMSs.\n5. The major advancements have been in RM systems, primarily driven by changing hardware characteristics.\n6. Existing DBMSs were good enough for the time, leading organizations to be unwilling to take on the costs and risks of migrating to newer technologies.\n7. NewSQL systems have yet to see dramatic uptake due to existing DBMSs being sufficient for most needs.",
      "provenance": [],
      "metadata": {
        "question_id": "whatgoesaround-sigmodrec2024_f7869b74",
        "created_at": 1749627438.2132764,
        "processing_complete": false,
        "max_provenances": 5
      },
      "source_info": {
        "selected_from": "test_outputs_prev",
        "reason": "default",
        "sentence_count": 999999,
        "provenance_count": 0,
        "alternatives": [
          {
            "source": "test_outputs_prev",
            "sentence_count": 999999,
            "provenance_count": 0,
            "has_answer": true
          }
        ],
        "selection_timestamp": "2025-06-17T16:48:52.941088"
      }
    }
  },
  {
    "f8ab3d62": {
      "question": "Which company's system inspired the creation of column-family databases?",
      "answer": "Google",
      "provenance": [
        {
          "provenance_id": 0,
          "input_sentence_ids": [
            150,
            151,
            152
          ],
          "provenance_ids": [
            150
          ],
          "provenance": "Google\nstill offers BigTable as a cloud service, but the column-\nfamily model is a singular outlier with the same disad-\nvantages as NoSQL DBMSs.",
          "time": 7.612448215484619,
          "input_token_size": 30908,
          "output_token_size": 12,
          "original_provenance_id": 0
        },
        {
          "provenance_id": 1,
          "input_sentence_ids": [
            146,
            147,
            148,
            149
          ],
          "provenance_ids": [
            147
          ],
          "provenance": "Since then, Google rewrote Spanner to remove\nthe BigTable remnants [98], and it is now the primary\ndatabase for many of its internal applications.",
          "time": 10.257698774337769,
          "input_token_size": 32720,
          "output_token_size": 16,
          "original_provenance_id": 1
        },
        {
          "provenance_id": 2,
          "input_sentence_ids": [
            138,
            139,
            140,
            141
          ],
          "provenance_ids": [
            141
          ],
          "provenance": "Other systems adopted the\ncolumn-family model in an attempt to copy Google’s be-\nspoke implementation.",
          "time": 12.46146273612976,
          "input_token_size": 33362,
          "output_token_size": 23,
          "original_provenance_id": 2
        },
        {
          "provenance_id": 3,
          "input_sentence_ids": [
            241,
            242,
            243,
            244,
            245,
            246,
            247,
            248,
            249,
            250,
            251,
            252,
            253,
            254,
            255,
            256,
            257,
            258,
            259,
            260,
            261,
            262,
            263,
            264,
            265,
            266,
            267,
            268,
            269,
            270,
            271,
            272,
            273,
            274,
            275,
            276,
            277,
            278,
            279,
            280,
            281,
            282,
            283,
            284,
            285,
            286,
            287,
            288,
            289,
            290,
            291,
            292,
            293,
            294,
            295,
            296,
            297,
            298,
            299,
            300,
            301,
            302,
            303,
            304,
            305,
            306,
            307,
            308,
            309,
            310,
            311,
            312,
            313,
            314,
            315,
            316,
            317,
            318,
            319,
            320,
            321,
            322,
            323,
            324,
            325,
            326,
            327,
            328,
            329,
            330,
            331,
            332,
            333,
            334,
            335,
            336,
            337,
            338,
            339,
            340,
            341,
            342,
            343,
            344,
            345,
            346,
            347,
            348,
            349,
            350,
            351,
            352,
            353,
            354,
            355,
            356,
            357,
            358,
            359,
            360,
            361,
            362,
            363,
            364,
            365,
            366,
            367,
            368,
            369,
            370,
            371,
            372,
            373,
            374,
            375,
            376,
            377,
            378,
            379,
            380,
            381,
            382,
            383,
            384,
            385,
            386,
            387,
            388,
            389,
            390,
            391,
            392,
            393,
            394,
            395,
            396,
            397,
            398,
            399,
            400,
            401,
            402,
            403,
            404,
            405,
            406,
            407,
            408,
            409,
            410,
            411,
            412,
            413,
            414,
            415,
            416,
            417,
            418,
            419,
            420,
            421,
            422,
            423,
            424,
            425,
            426,
            427,
            428,
            429,
            430,
            431,
            432,
            433,
            434,
            435,
            436,
            437,
            438,
            439,
            440,
            441,
            442,
            443,
            444,
            445,
            446,
            447,
            448,
            449,
            450,
            451,
            452,
            453,
            454,
            455,
            456,
            457,
            458,
            459,
            460,
            461,
            462,
            463,
            464,
            465,
            466,
            467,
            468,
            469,
            470,
            471,
            472,
            473,
            474,
            475,
            476,
            477,
            478,
            479,
            480,
            481
          ],
          "provenance_ids": [
            280,
            375,
            407,
            408,
            409,
            410,
            411,
            412,
            413,
            414,
            415,
            416,
            419,
            440,
            441,
            442,
            443,
            444,
            445,
            446,
            447,
            448,
            449,
            450,
            451,
            452,
            453,
            454,
            456,
            457,
            458,
            459,
            460,
            461,
            462,
            463,
            464,
            465,
            466,
            467,
            468,
            469,
            470,
            471,
            472,
            473,
            474,
            475,
            476,
            477,
            478,
            479,
            480,
            481
          ],
          "provenance": "Without Google, this paper would not be\ntalking about this category.Consequently, incorporating adaptive query processing\nstrategies is imperative in the cloud to enable a DBMS to\ndynamically modify query plans during execution based\non observed data characteristics [97, 105, 163].Britton-Lee released the ﬁrst commercial\naccelerator product (IDM/500) in 1981 [192] that con-\ntained a conventional CPU with a hardware accelerator\nthat ofﬂoaded portions of a query’s execution.This ac-\ncelerator targeted a small subset of the execution path,\nand was not cost-effective.Teradata introduced its own\ndatabase machine that provided network hardware for\nsorting in-ﬂight tuples (Y-net [1]), but it was dropped\nfor a software-only solution [85].All other custom hard-\nware DBMS acceleration during the 1980s failed.Instead of building custom hardware for DBMSs, the\nlast 20 years have been about using commodity hard-\nware (FPGAs, GPUs) to accelerate queries.This is an\nenticing idea: a vendor can get the beneﬁts of a DBMS\naccelerator without the cost of fabricating the hardware.Netezza was one of the ﬁrst FPGA-based DBMSs\nthat started in the late 1990s as a fork of PostgreSQL.It used an FPGA to accelerate searches on disk-resident\npages, but originally could not search in-memory pages.Netezza corrected this limitation in a later version [2].Swarm64 attempted to sell a FPGA accelerator for Post-\ngreSQL but switched to a software-only architecture\nwithout the FPGA before they were acquired [91].Notable GPU DBMSs include Kinetica [35],\nSqream [35], Brytlyt [13], and HeavyDB [48].2)\n\n\f3.6 Blockchain Databases\nAs of this writing, a waning database technology fad\nis blockchains.These are decentralized log-structured\ndatabases (i.e., ledger) that maintain incremental check-\nsums using some variation of Merkle trees.These in-\ncremental checksums are how a blockchain ensures that\nthe database’s log records are immutable: applications\nuse these checksums to verify that previous database up-\ndates have not been altered.The ideal use case for blockchain databases is peer-to-\npeer applications where one cannot trust anybody.There\nis no centralized authority that controls the ordering of\nupdates to the database.Thus, blockchain implementa-\ntions use a BFT commit protocol to determine which\ntransaction to apply to the database next.At the present time, cryptocurrencies (Bitcoin) are\nthe only use case for blockchains.In addition, there\nhave been attempts to build a usable DBMS on top of\nblockchains, notably Fluree [25], BigChainDB [12], and\nResilientDB [136].These vendors (incorrectly) promote\nthe blockchain as providing better security and auditabil-\nity that are not possible in previous DBMSs.Discussion: We are required to place trust in several en-\ntities in today’s society.When one sells a house, they\ntrust the title company to manage the transaction.The\nonly applications without real-world trust are dark web\ninteractions (e.g., money laundering).Legitimate busi-\nnesses are unwilling to pay the performance price (about\nﬁve orders of magnitude) to use a blockchain DBMS.If\norganizations trust each other, they can run a shared dis-\ntributed DBMS more efﬁciently without wasting time\nwith blockchains.To the best of our knowledge, all the\nmajor cryptocurrency exchanges run their businesses off\ntraditional RDBMSs and not blockchain systems.No sensible company\nwould rely on random participants on the Internet as the\nbackup solution for mission-critical databases.There is possibly a (small) market for private block-\nchain DBMSs.Amazon’s Quantum Ledger Database\n(QLDB) released in 2018 [65] provides the same im-\nmutable and veriﬁable update guarantees as a blockchain,\nbut it is not decentralized (i.e., no BFT commit protocol).Amazon built QLDB after ﬁnding no compelling use\ncase for a fully decentralized blockchain DBMS [108].3.7 Summary\nThe key takeaways from the major technological thrusts\nin database systems are as follows:\n\n•\n\n•\n\nColumnar Systems: The change to columnar stor-\nage revolutionized OLAP DBMS architectures.Cloud Databases: The cloud has upended the con-\nventional wisdom on how to build scalable DBMSs.Except for embedded DBMSs, any product not start-\ning with a cloud offering will likely fail.Data Lakes / Lakehouses: Cloud-based object stor-\nage using open-source formats will be the OLAP\nDBMS archetype for the next ten years.NewSQL Systems: They leverage new ideas but\nhave yet to have the same impact as columnar and\ncloud DBMSs.It has led to new distributed DBMSs\nthat support stronger ACID semantics as a counter\nto NoSQL’s weaker BASE guarantees.Hardware Accelerators: We do not see a use case\nfor specialized hardware outside of the major cloud\nvendors, though start-ups will continue to try.Blockchain Databases: An inefﬁcient technology\nlooking for an application.History has shown this is\nthe wrong way to approach systems development.•\n\n•\n\n•\n\n•\n\n4 Parting Comments\nOur analysis of the last two decades in databases has sev-\neral takeaways.Unfortunately, some of these are repeats\nof the warnings from the 2005 paper.Never underestimate the value of good marketing for\nbad products.The database market is highly competi-\ntive and lucrative.This competition drives vendors to\nclaim that their new technologies will solve all sorts of\nproblems and change developers’ lives for the better.Ev-\nery developer has struggled with databases before, so\nthey are especially amenable to such marketing.Infe-\nrior DBMS products have succeeded via strong market-\ning despite the existence of better options available at\nthe time: Oracle did this in the 1980s, MySQL did this\nin the 2000s, and MongoDB did this in the 2010s.These\nsystems got enough traction early on to buy them time\nto ﬁx the engineering debt they accumulated earlier.Beware of DBMSs from large non-DBMS vendors.One interesting aspect in the last ten years of databases\nis the trend of tech companies building DBMSs in-house\nthat they then spin out as open-source projects.All these\nsystems started life as purpose-built applications for a\ntech company.The company then releases the DBMS\nas an open-source project (often pushed to the Apache\nFoundation for stewardship) in hopes to achieve “free”\ndevelopment from external users.Some times they come from large companies that can\nafford to allocate resources to developing new systems.",
          "time": 68.35268306732178,
          "input_token_size": 50917,
          "output_token_size": 29,
          "original_provenance_id": 3
        },
        {
          "provenance_id": 4,
          "input_sentence_ids": [
            723,
            724,
            725,
            726,
            727,
            728,
            729,
            730,
            731,
            732,
            733,
            734,
            735,
            736,
            737,
            738,
            739,
            740,
            741,
            742,
            743,
            744,
            745,
            746,
            747,
            748,
            749,
            750,
            751,
            752,
            753,
            754,
            755,
            756,
            757,
            758,
            759,
            760,
            761,
            762,
            763,
            764,
            765,
            766,
            767,
            768,
            769,
            770,
            771,
            772,
            773,
            774,
            775,
            776,
            777,
            778,
            779,
            780,
            781,
            782,
            783,
            784,
            785,
            786,
            787,
            788,
            789,
            790,
            791,
            792,
            793,
            794,
            795,
            796,
            797,
            798,
            799,
            800,
            801,
            802,
            803,
            804,
            805,
            806,
            807,
            808,
            809,
            810,
            811,
            812,
            813,
            814,
            815,
            816,
            817,
            818,
            819,
            820,
            821,
            822,
            823,
            824,
            825,
            826,
            827,
            828,
            829,
            830,
            831,
            832,
            833,
            834,
            835,
            836,
            837,
            838,
            839,
            840,
            841,
            842,
            843,
            844,
            845,
            846,
            847,
            848,
            849,
            850,
            851,
            852,
            853,
            854,
            855,
            856,
            857,
            858,
            859,
            860,
            861,
            862,
            863,
            864,
            865,
            866,
            867,
            868,
            869,
            870,
            871,
            872,
            873,
            874,
            875,
            876,
            877,
            878,
            879,
            880,
            881,
            882,
            883,
            884,
            885,
            886,
            887,
            888,
            889,
            890,
            891,
            892,
            893,
            894,
            895,
            896,
            897,
            898,
            899,
            900,
            901,
            902,
            903,
            904,
            905,
            906,
            907,
            908,
            909,
            910,
            911,
            912,
            913,
            914,
            915,
            916,
            917,
            918,
            919,
            920,
            921,
            922,
            923,
            924,
            925,
            926,
            927,
            928,
            929,
            930,
            931,
            932,
            933,
            934,
            935,
            936,
            937,
            938,
            939,
            940,
            941,
            942,
            943,
            944,
            945,
            946,
            947,
            948,
            949,
            950,
            951,
            952,
            953,
            954,
            955,
            956,
            957,
            958,
            959,
            960,
            961,
            962,
            963
          ],
          "provenance_ids": [
            723,
            724,
            725,
            726
          ],
          "provenance": "Dean, M. Epstein, A. Fikes, C. Frost, J. Furman,\nS. Ghemawat, A. Gubarev, C. Heiser, P. Hochschild, W. Hsieh,\nS. Kanthak, E. Kogan, H. Li, A. Lloyd, S. Melnik, D. Mwaura,\nD. Nagle, S. Quinlan, R. Rao, L. Rolig, M. S. Yasushi Saito,\nC. Taylor, R. Wang, and D. Woodford.Spanner: Google’s\nGlobally-Distributed Database.In OSDI, 2012. [120] A. Crotty, V. Leis, and A. Pavlo.Are you sure you want to use\nMMAP in your database management system?",
          "time": 80.27981901168823,
          "input_token_size": 77049,
          "output_token_size": 33,
          "original_provenance_id": 4
        }
      ],
      "metadata": {
        "question_id": "whatgoesaround-sigmodrec2024_f8ab3d62",
        "created_at": 1750200175.1680179,
        "processing_time": 84.7129557132721,
        "processing_complete": true,
        "max_provenances": 5
      },
      "source_info": {
        "selected_from": "test_outputs",
        "reason": "shorter_provenance",
        "sentence_count": 493,
        "provenance_count": 5,
        "alternatives": [
          {
            "source": "test_outputs",
            "sentence_count": 493,
            "provenance_count": 5,
            "has_answer": true
          }
        ],
        "selection_timestamp": "2025-06-17T16:48:52.941088"
      }
    }
  }
]
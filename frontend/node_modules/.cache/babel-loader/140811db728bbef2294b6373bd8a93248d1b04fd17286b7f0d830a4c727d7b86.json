{"ast":null,"code":"var _jsxFileName = \"/Users/yashjain/Downloads/doc-provenance/frontend/src/components/InputArea.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef } from 'react';\nimport '../styles/InputArea.css';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faUpload, faArrowUp } from '@fortawesome/free-solid-svg-icons';\nimport { uploadFile, askQuestion, fetchSentences, checkProgress as apiCheckProgress, getResults as apiGetResults, checkStatus } from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst InputArea = ({\n  currentFile,\n  setCurrentFile,\n  setUploadStatus,\n  isProcessing,\n  setIsProcessing,\n  setCurrentQuestion,\n  setCurrentQuestionId,\n  setProvenanceSources,\n  setAnswer,\n  setLogs\n}) => {\n  _s();\n  const [questionText, setQuestionText] = useState('');\n  const fileInputRef = useRef(null);\n  const [pollingInterval, setPollingInterval] = useState(null);\n  const handleFileUpload = async e => {\n    const file = e.target.files[0];\n    if (!file) return;\n    const formData = new FormData();\n    formData.append('file', file);\n    setUploadStatus({\n      success: false,\n      message: `Uploading ${file.name}...`\n    });\n    try {\n      const response = await uploadFile(formData);\n      setCurrentFile(response.filename);\n      setUploadStatus({\n        success: true,\n        message: `${response.filename} uploaded successfully`\n      });\n    } catch (error) {\n      setUploadStatus({\n        success: false,\n        message: `Error: ${error.message}`\n      });\n    }\n  };\n  const handleSendQuestion = async () => {\n    if (!questionText.trim() || !currentFile || isProcessing) return;\n    setCurrentQuestion(questionText);\n    setAnswer(null);\n    setProvenanceSources([]);\n    setLogs([]);\n    setIsProcessing(true);\n    try {\n      const response = await askQuestion(questionText, currentFile);\n      setCurrentQuestionId(response.question_id);\n      startPolling(response.question_id);\n    } catch (error) {\n      setAnswer(`Error: ${error.message}`);\n      setIsProcessing(false);\n    }\n  };\n  const startPolling = questionId => {\n    // Clear any existing polling\n    if (pollingInterval) clearInterval(pollingInterval);\n\n    // Set up new polling\n    const interval = setInterval(async () => {\n      try {\n        // First check logs progress\n        const progress = await checkProgress(questionId);\n\n        // Then check if full processing is complete\n        const status = await checkStatus(questionId);\n        console.log('Processing status:', status);\n        if (status.completed) {\n          // If processing is complete, fetch final results\n          await getFullResults(questionId);\n          clearInterval(interval);\n          setIsProcessing(false);\n        }\n      } catch (error) {\n        console.error('Error checking progress:', error);\n      }\n    }, 1000);\n    setPollingInterval(interval);\n  };\n  const checkProgress = async questionId => {\n    try {\n      const data = await apiCheckProgress(questionId);\n\n      // Update logs if available\n      if (data.logs && data.logs.length > 0) {\n        setLogs(data.logs);\n      }\n\n      // If processing is done, fetch intermediate results\n      if (data.done && data.data && data.data.length > 0) {\n        updateProvenanceSources(questionId, data.data);\n\n        // If we have an answer, show it\n        await getResults(questionId);\n      }\n      return data;\n    } catch (error) {\n      console.error('Error checking progress:', error);\n      return {\n        progress: 0,\n        done: false\n      };\n    }\n  };\n  const getResults = async questionId => {\n    try {\n      const data = await apiGetResults(questionId);\n      if (data.success) {\n        if (data.answer) {\n          setAnswer(data.answer);\n        }\n      }\n    } catch (error) {\n      console.error('Error getting results:', error);\n    }\n  };\n  const getFullResults = async questionId => {\n    try {\n      const data = await apiGetResults(questionId);\n      if (data.success) {\n        if (data.answer) {\n          setAnswer(data.answer);\n        }\n        if (data.provenance && data.provenance.length > 0) {\n          // When we have the full results, fetch all sentences\n          await updateProvenanceSources(questionId, data.provenance);\n        }\n      }\n    } catch (error) {\n      console.error('Error getting full results:', error);\n    }\n  };\n  const updateProvenanceSources = async (questionId, provenance) => {\n    // Make sure provenance is an array\n    const provenanceArray = Array.isArray(provenance) ? provenance : [];\n    if (provenanceArray.length === 0) {\n      console.warn('No provenance data available');\n      return;\n    }\n    console.log('Updating provenance sources:', provenanceArray);\n\n    // Collect all unique sentence IDs from all provenance entries\n    const allSentenceIds = new Set();\n    provenanceArray.forEach(source => {\n      if (source.sentences_ids) {\n        source.sentences_ids.forEach(id => allSentenceIds.add(id));\n      }\n    });\n\n    // Fetch all sentences at once\n    let sentencesData = {};\n    if (allSentenceIds.size > 0) {\n      try {\n        console.log('Fetching all sentences:', Array.from(allSentenceIds));\n        const response = await fetchSentences(questionId, Array.from(allSentenceIds));\n        sentencesData = response.sentences || {};\n      } catch (error) {\n        console.error('Error fetching sentences:', error);\n      }\n    }\n\n    // Map sentences to each provenance entry\n    const enhancedProvenance = provenanceArray.map(source => {\n      if (!source.sentences_ids || source.sentences_ids.length === 0) {\n        return source;\n      }\n\n      // Create content array for this provenance entry\n      const content = source.sentences_ids.map(id => sentencesData[id] || `[Sentence ${id} not found]`);\n      return {\n        ...source,\n        content\n      };\n    });\n\n    // Sort by provenance_id\n    const sortedProvenance = enhancedProvenance.sort((a, b) => a.provenance_id !== undefined && b.provenance_id !== undefined ? a.provenance_id - b.provenance_id : 0);\n    console.log('Setting provenance sources:', sortedProvenance);\n    setProvenanceSources(sortedProvenance);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"input-area\",\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"file-upload\",\n      className: \"upload-btn\",\n      children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n        icon: faUpload\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      ref: fileInputRef,\n      id: \"file-upload\",\n      type: \"file\",\n      accept: \".pdf\",\n      style: {\n        display: 'none'\n      },\n      onChange: handleFileUpload\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"question-input\",\n        type: \"text\",\n        placeholder: \"When was this paper published?\",\n        value: questionText,\n        onChange: e => setQuestionText(e.target.value),\n        onKeyPress: e => e.key === 'Enter' && handleSendQuestion(),\n        disabled: !currentFile || isProcessing\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"send-btn\",\n        onClick: handleSendQuestion,\n        disabled: !currentFile || !questionText.trim() || isProcessing,\n        children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n          icon: faArrowUp\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 214,\n    columnNumber: 5\n  }, this);\n};\n_s(InputArea, \"Ep40zRmf63xQG2EO67DLCTMF3KA=\");\n_c = InputArea;\nexport default InputArea;\nvar _c;\n$RefreshReg$(_c, \"InputArea\");","map":{"version":3,"names":["React","useState","useRef","FontAwesomeIcon","faUpload","faArrowUp","uploadFile","askQuestion","fetchSentences","checkProgress","apiCheckProgress","getResults","apiGetResults","checkStatus","jsxDEV","_jsxDEV","InputArea","currentFile","setCurrentFile","setUploadStatus","isProcessing","setIsProcessing","setCurrentQuestion","setCurrentQuestionId","setProvenanceSources","setAnswer","setLogs","_s","questionText","setQuestionText","fileInputRef","pollingInterval","setPollingInterval","handleFileUpload","e","file","target","files","formData","FormData","append","success","message","name","response","filename","error","handleSendQuestion","trim","question_id","startPolling","questionId","clearInterval","interval","setInterval","progress","status","console","log","completed","getFullResults","data","logs","length","done","updateProvenanceSources","answer","provenance","provenanceArray","Array","isArray","warn","allSentenceIds","Set","forEach","source","sentences_ids","id","add","sentencesData","size","from","sentences","enhancedProvenance","map","content","sortedProvenance","sort","a","b","provenance_id","undefined","className","children","htmlFor","icon","fileName","_jsxFileName","lineNumber","columnNumber","ref","type","accept","style","display","onChange","placeholder","value","onKeyPress","key","disabled","onClick","_c","$RefreshReg$"],"sources":["/Users/yashjain/Downloads/doc-provenance/frontend/src/components/InputArea.js"],"sourcesContent":["import React, { useState, useRef } from 'react';\nimport '../styles/InputArea.css';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faUpload, faArrowUp } from '@fortawesome/free-solid-svg-icons';\nimport { uploadFile, askQuestion, fetchSentences, checkProgress as apiCheckProgress, getResults as apiGetResults, checkStatus } from '../services/api';\n\nconst InputArea = ({\n  currentFile,\n  setCurrentFile,\n  setUploadStatus,\n  isProcessing,\n  setIsProcessing,\n  setCurrentQuestion,\n  setCurrentQuestionId,\n  setProvenanceSources,\n  setAnswer,\n  setLogs\n}) => {\n  const [questionText, setQuestionText] = useState('');\n  const fileInputRef = useRef(null);\n  const [pollingInterval, setPollingInterval] = useState(null);\n\n  const handleFileUpload = async (e) => {\n    const file = e.target.files[0];\n    if (!file) return;\n\n    const formData = new FormData();\n    formData.append('file', file);\n\n    setUploadStatus({\n      success: false,\n      message: `Uploading ${file.name}...`\n    });\n\n    try {\n      const response = await uploadFile(formData);\n      setCurrentFile(response.filename);\n      setUploadStatus({\n        success: true,\n        message: `${response.filename} uploaded successfully`\n      });\n    } catch (error) {\n      setUploadStatus({\n        success: false,\n        message: `Error: ${error.message}`\n      });\n    }\n  };\n\n  const handleSendQuestion = async () => {\n    if (!questionText.trim() || !currentFile || isProcessing) return;\n\n    setCurrentQuestion(questionText);\n    setAnswer(null);\n    setProvenanceSources([]);\n    setLogs([]);\n    setIsProcessing(true);\n\n    try {\n      const response = await askQuestion(questionText, currentFile);\n      setCurrentQuestionId(response.question_id);\n      startPolling(response.question_id);\n    } catch (error) {\n      setAnswer(`Error: ${error.message}`);\n      setIsProcessing(false);\n    }\n  };\n\n  const startPolling = (questionId) => {\n    // Clear any existing polling\n    if (pollingInterval) clearInterval(pollingInterval);\n\n    // Set up new polling\n    const interval = setInterval(async () => {\n      try {\n        // First check logs progress\n        const progress = await checkProgress(questionId);\n        \n        // Then check if full processing is complete\n        const status = await checkStatus(questionId);\n        console.log('Processing status:', status);\n        \n        if (status.completed) {\n          // If processing is complete, fetch final results\n          await getFullResults(questionId);\n          clearInterval(interval);\n          setIsProcessing(false);\n        }\n      } catch (error) {\n        console.error('Error checking progress:', error);\n      }\n    }, 1000);\n\n    setPollingInterval(interval);\n  };\n\n  const checkProgress = async (questionId) => {\n    try {\n      const data = await apiCheckProgress(questionId);\n      \n      // Update logs if available\n      if (data.logs && data.logs.length > 0) {\n        setLogs(data.logs);\n      }\n      \n      // If processing is done, fetch intermediate results\n      if (data.done && data.data && data.data.length > 0) {\n        updateProvenanceSources(questionId, data.data);\n        \n        // If we have an answer, show it\n        await getResults(questionId);\n      }\n      \n      return data;\n    } catch (error) {\n      console.error('Error checking progress:', error);\n      return { progress: 0, done: false };\n    }\n  };\n\n  const getResults = async (questionId) => {\n    try {\n      const data = await apiGetResults(questionId);\n      \n      if (data.success) {\n        if (data.answer) {\n          setAnswer(data.answer);\n        }\n      }\n    } catch (error) {\n      console.error('Error getting results:', error);\n    }\n  };\n  \n  const getFullResults = async (questionId) => {\n    try {\n      const data = await apiGetResults(questionId);\n      \n      if (data.success) {\n        if (data.answer) {\n          setAnswer(data.answer);\n        }\n        \n        if (data.provenance && data.provenance.length > 0) {\n          // When we have the full results, fetch all sentences\n          await updateProvenanceSources(questionId, data.provenance);\n        }\n      }\n    } catch (error) {\n      console.error('Error getting full results:', error);\n    }\n  };\n\n  const updateProvenanceSources = async (questionId, provenance) => {\n    // Make sure provenance is an array\n    const provenanceArray = Array.isArray(provenance) ? provenance : [];\n    \n    if (provenanceArray.length === 0) {\n      console.warn('No provenance data available');\n      return;\n    }\n    \n    console.log('Updating provenance sources:', provenanceArray);\n    \n    // Collect all unique sentence IDs from all provenance entries\n    const allSentenceIds = new Set();\n    provenanceArray.forEach(source => {\n      if (source.sentences_ids) {\n        source.sentences_ids.forEach(id => allSentenceIds.add(id));\n      }\n    });\n    \n    // Fetch all sentences at once\n    let sentencesData = {};\n    if (allSentenceIds.size > 0) {\n      try {\n        console.log('Fetching all sentences:', Array.from(allSentenceIds));\n        const response = await fetchSentences(questionId, Array.from(allSentenceIds));\n        sentencesData = response.sentences || {};\n      } catch (error) {\n        console.error('Error fetching sentences:', error);\n      }\n    }\n    \n    // Map sentences to each provenance entry\n    const enhancedProvenance = provenanceArray.map(source => {\n      if (!source.sentences_ids || source.sentences_ids.length === 0) {\n        return source;\n      }\n      \n      // Create content array for this provenance entry\n      const content = source.sentences_ids.map(id => \n        sentencesData[id] || `[Sentence ${id} not found]`\n      );\n      \n      return {\n        ...source,\n        content\n      };\n    });\n    \n    // Sort by provenance_id\n    const sortedProvenance = enhancedProvenance.sort((a, b) => \n      (a.provenance_id !== undefined && b.provenance_id !== undefined) \n        ? a.provenance_id - b.provenance_id \n        : 0\n    );\n    \n    console.log('Setting provenance sources:', sortedProvenance);\n    setProvenanceSources(sortedProvenance);\n  };\n\n  return (\n    <div className=\"input-area\">\n      <label htmlFor=\"file-upload\" className=\"upload-btn\">\n        <FontAwesomeIcon icon={faUpload} />\n      </label>\n      <input\n        ref={fileInputRef}\n        id=\"file-upload\"\n        type=\"file\"\n        accept=\".pdf\"\n        style={{ display: 'none' }}\n        onChange={handleFileUpload}\n      />\n      \n      <div className=\"input-container\">\n        <input\n          className=\"question-input\"\n          type=\"text\"\n          placeholder=\"When was this paper published?\"\n          value={questionText}\n          onChange={(e) => setQuestionText(e.target.value)}\n          onKeyPress={(e) => e.key === 'Enter' && handleSendQuestion()}\n          disabled={!currentFile || isProcessing}\n        />\n        <button\n          className=\"send-btn\"\n          onClick={handleSendQuestion}\n          disabled={!currentFile || !questionText.trim() || isProcessing}\n        >\n          <FontAwesomeIcon icon={faArrowUp} />\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default InputArea; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
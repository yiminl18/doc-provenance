{"ast":null,"code":"var _jsxFileName = \"/Users/yashjain/Downloads/doc-provenance/frontend/src/components/InputArea.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef } from 'react';\nimport '../styles/InputArea.css';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faUpload, faArrowUp } from '@fortawesome/free-solid-svg-icons';\nimport { uploadFile, askQuestion, fetchSentences, checkProgress as apiCheckProgress, getResults as apiGetResults } from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst InputArea = ({\n  currentFile,\n  setCurrentFile,\n  setUploadStatus,\n  isProcessing,\n  setIsProcessing,\n  setCurrentQuestion,\n  setCurrentQuestionId,\n  setProvenanceSources,\n  setAnswer\n}) => {\n  _s();\n  const [questionText, setQuestionText] = useState('');\n  const fileInputRef = useRef(null);\n  const [pollingInterval, setPollingInterval] = useState(null);\n  const handleFileUpload = async e => {\n    const file = e.target.files[0];\n    if (!file) return;\n    const formData = new FormData();\n    formData.append('file', file);\n    setUploadStatus({\n      success: false,\n      message: `Uploading ${file.name}...`\n    });\n    try {\n      const response = await uploadFile(formData);\n      setCurrentFile(response.filename);\n      setUploadStatus({\n        success: true,\n        message: `${response.filename} uploaded successfully`\n      });\n    } catch (error) {\n      setUploadStatus({\n        success: false,\n        message: `Error: ${error.message}`\n      });\n    }\n  };\n  const handleSendQuestion = async () => {\n    if (!questionText.trim() || !currentFile || isProcessing) return;\n    setCurrentQuestion(questionText);\n    setAnswer(null);\n    setProvenanceSources([]);\n    setIsProcessing(true);\n    try {\n      const response = await askQuestion(questionText, currentFile);\n      setCurrentQuestionId(response.question_id);\n      startPolling(response.question_id);\n    } catch (error) {\n      setAnswer(`Error: ${error.message}`);\n      setIsProcessing(false);\n    }\n  };\n  const startPolling = questionId => {\n    // Clear any existing polling\n    if (pollingInterval) clearInterval(pollingInterval);\n\n    // Set up new polling\n    const interval = setInterval(async () => {\n      try {\n        const progress = await checkProgress(questionId);\n        if (progress.done) {\n          clearInterval(interval);\n          setIsProcessing(false);\n        }\n      } catch (error) {\n        console.error('Error checking progress:', error);\n      }\n    }, 1000);\n    setPollingInterval(interval);\n  };\n  const checkProgress = async questionId => {\n    try {\n      const data = await apiCheckProgress(questionId);\n      if (data.progress > 0) {\n        // We have some data, update the UI\n        updateProvenanceSources(questionId, data.data);\n\n        // If we have an answer, show it\n        await getResults(questionId);\n      }\n      return data;\n    } catch (error) {\n      console.error('Error checking progress:', error);\n      return {\n        progress: 0,\n        done: false\n      };\n    }\n  };\n  const getResults = async questionId => {\n    try {\n      const data = await apiGetResults(questionId);\n      if (data.success) {\n        if (data.answer) {\n          setAnswer(data.answer);\n        }\n        if (data.provenance && data.provenance.length > 0) {\n          updateProvenanceSources(questionId, data.provenance);\n        }\n      }\n    } catch (error) {\n      console.error('Error getting results:', error);\n    }\n  };\n  const updateProvenanceSources = async (questionId, provenance) => {\n    // Update sources with new content\n    const enhancedProvenance = await Promise.all(provenance.map(async source => {\n      if (!source.content && source.sentences_ids) {\n        try {\n          const sentenceData = await fetchSentences(questionId, source.sentences_ids);\n          return {\n            ...source,\n            content: Object.values(sentenceData.sentences)\n          };\n        } catch (error) {\n          console.error('Error fetching sentences:', error);\n          return source;\n        }\n      }\n      return source;\n    }));\n    setProvenanceSources(enhancedProvenance);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"input-area\",\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"file-upload\",\n      className: \"upload-btn\",\n      children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n        icon: faUpload\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      ref: fileInputRef,\n      id: \"file-upload\",\n      type: \"file\",\n      accept: \".pdf\",\n      style: {\n        display: 'none'\n      },\n      onChange: handleFileUpload\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"question-input\",\n        type: \"text\",\n        placeholder: \"When was this paper published?\",\n        value: questionText,\n        onChange: e => setQuestionText(e.target.value),\n        onKeyPress: e => e.key === 'Enter' && handleSendQuestion(),\n        disabled: !currentFile || isProcessing\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"send-btn\",\n        onClick: handleSendQuestion,\n        disabled: !currentFile || !questionText.trim() || isProcessing,\n        children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n          icon: faArrowUp\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 149,\n    columnNumber: 5\n  }, this);\n};\n_s(InputArea, \"Ep40zRmf63xQG2EO67DLCTMF3KA=\");\n_c = InputArea;\nexport default InputArea;\nvar _c;\n$RefreshReg$(_c, \"InputArea\");","map":{"version":3,"names":["React","useState","useRef","FontAwesomeIcon","faUpload","faArrowUp","uploadFile","askQuestion","fetchSentences","checkProgress","apiCheckProgress","getResults","apiGetResults","jsxDEV","_jsxDEV","InputArea","currentFile","setCurrentFile","setUploadStatus","isProcessing","setIsProcessing","setCurrentQuestion","setCurrentQuestionId","setProvenanceSources","setAnswer","_s","questionText","setQuestionText","fileInputRef","pollingInterval","setPollingInterval","handleFileUpload","e","file","target","files","formData","FormData","append","success","message","name","response","filename","error","handleSendQuestion","trim","question_id","startPolling","questionId","clearInterval","interval","setInterval","progress","done","console","data","updateProvenanceSources","answer","provenance","length","enhancedProvenance","Promise","all","map","source","content","sentences_ids","sentenceData","Object","values","sentences","className","children","htmlFor","icon","fileName","_jsxFileName","lineNumber","columnNumber","ref","id","type","accept","style","display","onChange","placeholder","value","onKeyPress","key","disabled","onClick","_c","$RefreshReg$"],"sources":["/Users/yashjain/Downloads/doc-provenance/frontend/src/components/InputArea.js"],"sourcesContent":["import React, { useState, useRef } from 'react';\nimport '../styles/InputArea.css';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faUpload, faArrowUp } from '@fortawesome/free-solid-svg-icons';\nimport { uploadFile, askQuestion, fetchSentences, checkProgress as apiCheckProgress, getResults as apiGetResults } from '../services/api';\n\nconst InputArea = ({\n  currentFile,\n  setCurrentFile,\n  setUploadStatus,\n  isProcessing,\n  setIsProcessing,\n  setCurrentQuestion,\n  setCurrentQuestionId,\n  setProvenanceSources,\n  setAnswer\n}) => {\n  const [questionText, setQuestionText] = useState('');\n  const fileInputRef = useRef(null);\n  const [pollingInterval, setPollingInterval] = useState(null);\n\n  const handleFileUpload = async (e) => {\n    const file = e.target.files[0];\n    if (!file) return;\n\n    const formData = new FormData();\n    formData.append('file', file);\n\n    setUploadStatus({\n      success: false,\n      message: `Uploading ${file.name}...`\n    });\n\n    try {\n      const response = await uploadFile(formData);\n      setCurrentFile(response.filename);\n      setUploadStatus({\n        success: true,\n        message: `${response.filename} uploaded successfully`\n      });\n    } catch (error) {\n      setUploadStatus({\n        success: false,\n        message: `Error: ${error.message}`\n      });\n    }\n  };\n\n  const handleSendQuestion = async () => {\n    if (!questionText.trim() || !currentFile || isProcessing) return;\n\n    setCurrentQuestion(questionText);\n    setAnswer(null);\n    setProvenanceSources([]);\n    setIsProcessing(true);\n\n    try {\n      const response = await askQuestion(questionText, currentFile);\n      setCurrentQuestionId(response.question_id);\n      startPolling(response.question_id);\n    } catch (error) {\n      setAnswer(`Error: ${error.message}`);\n      setIsProcessing(false);\n    }\n  };\n\n  const startPolling = (questionId) => {\n    // Clear any existing polling\n    if (pollingInterval) clearInterval(pollingInterval);\n\n    // Set up new polling\n    const interval = setInterval(async () => {\n      try {\n        const progress = await checkProgress(questionId);\n        \n        if (progress.done) {\n          clearInterval(interval);\n          setIsProcessing(false);\n        }\n      } catch (error) {\n        console.error('Error checking progress:', error);\n      }\n    }, 1000);\n\n    setPollingInterval(interval);\n  };\n\n  const checkProgress = async (questionId) => {\n    try {\n      const data = await apiCheckProgress(questionId);\n      \n      if (data.progress > 0) {\n        // We have some data, update the UI\n        updateProvenanceSources(questionId, data.data);\n        \n        // If we have an answer, show it\n        await getResults(questionId);\n      }\n      \n      return data;\n    } catch (error) {\n      console.error('Error checking progress:', error);\n      return { progress: 0, done: false };\n    }\n  };\n\n  const getResults = async (questionId) => {\n    try {\n      const data = await apiGetResults(questionId);\n      \n      if (data.success) {\n        if (data.answer) {\n          setAnswer(data.answer);\n        }\n        \n        if (data.provenance && data.provenance.length > 0) {\n          updateProvenanceSources(questionId, data.provenance);\n        }\n      }\n    } catch (error) {\n      console.error('Error getting results:', error);\n    }\n  };\n\n  const updateProvenanceSources = async (questionId, provenance) => {\n    // Update sources with new content\n    const enhancedProvenance = await Promise.all(\n      provenance.map(async (source) => {\n        if (!source.content && source.sentences_ids) {\n          try {\n            const sentenceData = await fetchSentences(questionId, source.sentences_ids);\n            return {\n              ...source,\n              content: Object.values(sentenceData.sentences)\n            };\n          } catch (error) {\n            console.error('Error fetching sentences:', error);\n            return source;\n          }\n        }\n        return source;\n      })\n    );\n    \n    setProvenanceSources(enhancedProvenance);\n  };\n\n  return (\n    <div className=\"input-area\">\n      <label htmlFor=\"file-upload\" className=\"upload-btn\">\n        <FontAwesomeIcon icon={faUpload} />\n      </label>\n      <input\n        ref={fileInputRef}\n        id=\"file-upload\"\n        type=\"file\"\n        accept=\".pdf\"\n        style={{ display: 'none' }}\n        onChange={handleFileUpload}\n      />\n      \n      <div className=\"input-container\">\n        <input\n          className=\"question-input\"\n          type=\"text\"\n          placeholder=\"When was this paper published?\"\n          value={questionText}\n          onChange={(e) => setQuestionText(e.target.value)}\n          onKeyPress={(e) => e.key === 'Enter' && handleSendQuestion()}\n          disabled={!currentFile || isProcessing}\n        />\n        <button\n          className=\"send-btn\"\n          onClick={handleSendQuestion}\n          disabled={!currentFile || !questionText.trim() || isProcessing}\n        >\n          <FontAwesomeIcon icon={faArrowUp} />\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default InputArea; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
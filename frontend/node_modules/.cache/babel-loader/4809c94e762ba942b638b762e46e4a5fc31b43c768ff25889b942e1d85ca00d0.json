{"ast":null,"code":"import axios from 'axios';\n\n// Base URL for API requests\nconst API_URL = '/api'; // Using the /api prefix for all API calls\n\n// Upload a PDF file\nexport const uploadFile = async formData => {\n  try {\n    const response = await axios.post(`${API_URL}/upload`, formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response.data;\n  } catch (error) {\n    var _error$response, _error$response$data;\n    console.error('Error uploading file:', error);\n    throw new Error(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.error) || error.message);\n  }\n};\n\n// Ask a question about a document\nexport const askQuestion = async (question, filename) => {\n  try {\n    const response = await axios.post(`${API_URL}/ask`, {\n      question,\n      filename\n    });\n    return response.data;\n  } catch (error) {\n    var _error$response2, _error$response2$data;\n    console.error('Error asking question:', error);\n    throw new Error(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.error) || error.message);\n  }\n};\n\n// Check processing progress\nexport const checkProgress = async questionId => {\n  try {\n    const response = await axios.get(`${API_URL}/check-progress/${questionId}`);\n    return response.data;\n  } catch (error) {\n    var _error$response3, _error$response3$data;\n    console.error('Error checking progress:', error);\n    throw new Error(((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.error) || error.message);\n  }\n};\n\n// Get final results\nexport const getResults = async questionId => {\n  try {\n    const response = await axios.get(`${API_URL}/results/${questionId}`);\n    return response.data;\n  } catch (error) {\n    var _error$response4, _error$response4$data;\n    console.error('Error getting results:', error);\n    throw new Error(((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.error) || error.message);\n  }\n};\n\n// Fetch sentences\nexport const fetchSentences = async (questionId, sentenceIds) => {\n  try {\n    const response = await axios.get(`${API_URL}/sentences/${questionId}?ids=${sentenceIds.join(',')}`);\n    return response.data;\n  } catch (error) {\n    var _error$response5, _error$response5$data;\n    console.error('Error fetching sentences:', error);\n    throw new Error(((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : (_error$response5$data = _error$response5.data) === null || _error$response5$data === void 0 ? void 0 : _error$response5$data.error) || error.message);\n  }\n};\n\n// Check processing status\nexport const checkStatus = async questionId => {\n  try {\n    const response = await axios.get(`${API_URL}/status/${questionId}`);\n    return response.data;\n  } catch (error) {\n    var _error$response6, _error$response6$data;\n    console.error('Error checking status:', error);\n    throw new Error(((_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : (_error$response6$data = _error$response6.data) === null || _error$response6$data === void 0 ? void 0 : _error$response6$data.error) || error.message);\n  }\n};","map":{"version":3,"names":["axios","API_URL","uploadFile","formData","response","post","headers","data","error","_error$response","_error$response$data","console","Error","message","askQuestion","question","filename","_error$response2","_error$response2$data","checkProgress","questionId","get","_error$response3","_error$response3$data","getResults","_error$response4","_error$response4$data","fetchSentences","sentenceIds","join","_error$response5","_error$response5$data","checkStatus","_error$response6","_error$response6$data"],"sources":["/Users/yashjain/Downloads/doc-provenance/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\n// Base URL for API requests\nconst API_URL = '/api';  // Using the /api prefix for all API calls\n\n// Upload a PDF file\nexport const uploadFile = async (formData) => {\n  try {\n    const response = await axios.post(`${API_URL}/upload`, formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error uploading file:', error);\n    throw new Error(error.response?.data?.error || error.message);\n  }\n};\n\n// Ask a question about a document\nexport const askQuestion = async (question, filename) => {\n  try {\n    const response = await axios.post(`${API_URL}/ask`, {\n      question,\n      filename\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error asking question:', error);\n    throw new Error(error.response?.data?.error || error.message);\n  }\n};\n\n// Check processing progress\nexport const checkProgress = async (questionId) => {\n  try {\n    const response = await axios.get(`${API_URL}/check-progress/${questionId}`);\n    return response.data;\n  } catch (error) {\n    console.error('Error checking progress:', error);\n    throw new Error(error.response?.data?.error || error.message);\n  }\n};\n\n// Get final results\nexport const getResults = async (questionId) => {\n  try {\n    const response = await axios.get(`${API_URL}/results/${questionId}`);\n    return response.data;\n  } catch (error) {\n    console.error('Error getting results:', error);\n    throw new Error(error.response?.data?.error || error.message);\n  }\n};\n\n// Fetch sentences\nexport const fetchSentences = async (questionId, sentenceIds) => {\n  try {\n    const response = await axios.get(`${API_URL}/sentences/${questionId}?ids=${sentenceIds.join(',')}`);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching sentences:', error);\n    throw new Error(error.response?.data?.error || error.message);\n  }\n};\n\n// Check processing status\nexport const checkStatus = async (questionId) => {\n  try {\n    const response = await axios.get(`${API_URL}/status/${questionId}`);\n    return response.data;\n  } catch (error) {\n    console.error('Error checking status:', error);\n    throw new Error(error.response?.data?.error || error.message);\n  }\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
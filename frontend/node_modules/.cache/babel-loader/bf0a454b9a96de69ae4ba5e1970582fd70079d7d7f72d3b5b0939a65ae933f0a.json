{"ast":null,"code":"import axios from'axios';// Base URL for API requests\nconst API_URL='/api';// Using the /api prefix for all API calls\n// Upload a PDF file\nexport const uploadFile=async formData=>{try{const response=await axios.post(`${API_URL}/upload`,formData,{headers:{'Content-Type':'multipart/form-data'}});return response.data;}catch(error){var _error$response,_error$response$data;console.error('Error uploading file:',error);throw new Error(((_error$response=error.response)===null||_error$response===void 0?void 0:(_error$response$data=_error$response.data)===null||_error$response$data===void 0?void 0:_error$response$data.error)||error.message);}};// Ask a question about a document\nexport const askQuestion=async(question,filename)=>{try{const response=await axios.post(`${API_URL}/ask`,{question,filename});return response.data;}catch(error){var _error$response2,_error$response2$data;console.error('Error asking question:',error);throw new Error(((_error$response2=error.response)===null||_error$response2===void 0?void 0:(_error$response2$data=_error$response2.data)===null||_error$response2$data===void 0?void 0:_error$response2$data.error)||error.message);}};// Check processing progress\nexport const checkProgress=async questionId=>{try{const response=await axios.get(`${API_URL}/check-progress/${questionId}`);return response.data;}catch(error){var _error$response3,_error$response3$data;console.error('Error checking progress:',error);throw new Error(((_error$response3=error.response)===null||_error$response3===void 0?void 0:(_error$response3$data=_error$response3.data)===null||_error$response3$data===void 0?void 0:_error$response3$data.error)||error.message);}};// Get final results\nexport const getResults=async questionId=>{try{const response=await axios.get(`${API_URL}/results/${questionId}`);return response.data;}catch(error){var _error$response4,_error$response4$data;console.error('Error getting results:',error);throw new Error(((_error$response4=error.response)===null||_error$response4===void 0?void 0:(_error$response4$data=_error$response4.data)===null||_error$response4$data===void 0?void 0:_error$response4$data.error)||error.message);}};// Fetch sentences\nexport const fetchSentences=async(questionId,sentenceIds)=>{try{const response=await axios.get(`${API_URL}/sentences/${questionId}?ids=${sentenceIds.join(',')}`);return response.data;}catch(error){var _error$response5,_error$response5$data;console.error('Error fetching sentences:',error);throw new Error(((_error$response5=error.response)===null||_error$response5===void 0?void 0:(_error$response5$data=_error$response5.data)===null||_error$response5$data===void 0?void 0:_error$response5$data.error)||error.message);}};","map":{"version":3,"names":["axios","API_URL","uploadFile","formData","response","post","headers","data","error","_error$response","_error$response$data","console","Error","message","askQuestion","question","filename","_error$response2","_error$response2$data","checkProgress","questionId","get","_error$response3","_error$response3$data","getResults","_error$response4","_error$response4$data","fetchSentences","sentenceIds","join","_error$response5","_error$response5$data"],"sources":["/Users/yashjain/Downloads/doc-provenance/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\n// Base URL for API requests\nconst API_URL = '/api';  // Using the /api prefix for all API calls\n\n// Upload a PDF file\nexport const uploadFile = async (formData) => {\n  try {\n    const response = await axios.post(`${API_URL}/upload`, formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error uploading file:', error);\n    throw new Error(error.response?.data?.error || error.message);\n  }\n};\n\n// Ask a question about a document\nexport const askQuestion = async (question, filename) => {\n  try {\n    const response = await axios.post(`${API_URL}/ask`, {\n      question,\n      filename\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error asking question:', error);\n    throw new Error(error.response?.data?.error || error.message);\n  }\n};\n\n// Check processing progress\nexport const checkProgress = async (questionId) => {\n  try {\n    const response = await axios.get(`${API_URL}/check-progress/${questionId}`);\n    return response.data;\n  } catch (error) {\n    console.error('Error checking progress:', error);\n    throw new Error(error.response?.data?.error || error.message);\n  }\n};\n\n// Get final results\nexport const getResults = async (questionId) => {\n  try {\n    const response = await axios.get(`${API_URL}/results/${questionId}`);\n    return response.data;\n  } catch (error) {\n    console.error('Error getting results:', error);\n    throw new Error(error.response?.data?.error || error.message);\n  }\n};\n\n// Fetch sentences\nexport const fetchSentences = async (questionId, sentenceIds) => {\n  try {\n    const response = await axios.get(`${API_URL}/sentences/${questionId}?ids=${sentenceIds.join(',')}`);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching sentences:', error);\n    throw new Error(error.response?.data?.error || error.message);\n  }\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import React,{useState,useRef}from'react';import'../styles/InputArea.css';import{FontAwesomeIcon}from'@fortawesome/react-fontawesome';import{faUpload,faArrowUp}from'@fortawesome/free-solid-svg-icons';import{uploadFile,askQuestion,fetchSentences,checkProgress as apiCheckProgress,getResults as apiGetResults}from'../services/api';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const InputArea=_ref=>{let{currentFile,setCurrentFile,setUploadStatus,isProcessing,setIsProcessing,setCurrentQuestion,setCurrentQuestionId,setProvenanceSources,setAnswer}=_ref;const[questionText,setQuestionText]=useState('');const fileInputRef=useRef(null);const[pollingInterval,setPollingInterval]=useState(null);const handleFileUpload=async e=>{const file=e.target.files[0];if(!file)return;const formData=new FormData();formData.append('file',file);setUploadStatus({success:false,message:`Uploading ${file.name}...`});try{const response=await uploadFile(formData);setCurrentFile(response.filename);setUploadStatus({success:true,message:`${response.filename} uploaded successfully`});}catch(error){setUploadStatus({success:false,message:`Error: ${error.message}`});}};const handleSendQuestion=async()=>{if(!questionText.trim()||!currentFile||isProcessing)return;setCurrentQuestion(questionText);setAnswer(null);setProvenanceSources([]);setIsProcessing(true);try{const response=await askQuestion(questionText,currentFile);setCurrentQuestionId(response.question_id);startPolling(response.question_id);}catch(error){setAnswer(`Error: ${error.message}`);setIsProcessing(false);}};const startPolling=questionId=>{// Clear any existing polling\nif(pollingInterval)clearInterval(pollingInterval);// Set up new polling\nconst interval=setInterval(async()=>{try{const progress=await checkProgress(questionId);if(progress.done){clearInterval(interval);setIsProcessing(false);}}catch(error){console.error('Error checking progress:',error);}},1000);setPollingInterval(interval);};const checkProgress=async questionId=>{try{const data=await apiCheckProgress(questionId);if(data.progress>0){// We have some data, update the UI\nupdateProvenanceSources(questionId,data.data);// If we have an answer, show it\nawait getResults(questionId);}return data;}catch(error){console.error('Error checking progress:',error);return{progress:0,done:false};}};const getResults=async questionId=>{try{const data=await apiGetResults(questionId);if(data.success){if(data.answer){setAnswer(data.answer);}if(data.provenance&&data.provenance.length>0){updateProvenanceSources(questionId,data.provenance);}}}catch(error){console.error('Error getting results:',error);}};const updateProvenanceSources=async(questionId,provenance)=>{// Update sources with new content\nconst enhancedProvenance=await Promise.all(provenance.map(async source=>{if(!source.content&&source.sentences_ids){try{const sentenceData=await fetchSentences(questionId,source.sentences_ids);return{...source,content:Object.values(sentenceData.sentences)};}catch(error){console.error('Error fetching sentences:',error);return source;}}return source;}));setProvenanceSources(enhancedProvenance);};return/*#__PURE__*/_jsxs(\"div\",{className:\"input-area\",children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"file-upload\",className:\"upload-btn\",children:/*#__PURE__*/_jsx(FontAwesomeIcon,{icon:faUpload})}),/*#__PURE__*/_jsx(\"input\",{ref:fileInputRef,id:\"file-upload\",type:\"file\",accept:\".pdf\",style:{display:'none'},onChange:handleFileUpload}),/*#__PURE__*/_jsxs(\"div\",{className:\"input-container\",children:[/*#__PURE__*/_jsx(\"input\",{className:\"question-input\",type:\"text\",placeholder:\"When was this paper published?\",value:questionText,onChange:e=>setQuestionText(e.target.value),onKeyPress:e=>e.key==='Enter'&&handleSendQuestion(),disabled:!currentFile||isProcessing}),/*#__PURE__*/_jsx(\"button\",{className:\"send-btn\",onClick:handleSendQuestion,disabled:!currentFile||!questionText.trim()||isProcessing,children:/*#__PURE__*/_jsx(FontAwesomeIcon,{icon:faArrowUp})})]})]});};export default InputArea;","map":{"version":3,"names":["React","useState","useRef","FontAwesomeIcon","faUpload","faArrowUp","uploadFile","askQuestion","fetchSentences","checkProgress","apiCheckProgress","getResults","apiGetResults","jsx","_jsx","jsxs","_jsxs","InputArea","_ref","currentFile","setCurrentFile","setUploadStatus","isProcessing","setIsProcessing","setCurrentQuestion","setCurrentQuestionId","setProvenanceSources","setAnswer","questionText","setQuestionText","fileInputRef","pollingInterval","setPollingInterval","handleFileUpload","e","file","target","files","formData","FormData","append","success","message","name","response","filename","error","handleSendQuestion","trim","question_id","startPolling","questionId","clearInterval","interval","setInterval","progress","done","console","data","updateProvenanceSources","answer","provenance","length","enhancedProvenance","Promise","all","map","source","content","sentences_ids","sentenceData","Object","values","sentences","className","children","htmlFor","icon","ref","id","type","accept","style","display","onChange","placeholder","value","onKeyPress","key","disabled","onClick"],"sources":["/Users/yashjain/Downloads/doc-provenance/frontend/src/components/InputArea.js"],"sourcesContent":["import React, { useState, useRef } from 'react';\nimport '../styles/InputArea.css';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faUpload, faArrowUp } from '@fortawesome/free-solid-svg-icons';\nimport { uploadFile, askQuestion, fetchSentences, checkProgress as apiCheckProgress, getResults as apiGetResults } from '../services/api';\n\nconst InputArea = ({\n  currentFile,\n  setCurrentFile,\n  setUploadStatus,\n  isProcessing,\n  setIsProcessing,\n  setCurrentQuestion,\n  setCurrentQuestionId,\n  setProvenanceSources,\n  setAnswer\n}) => {\n  const [questionText, setQuestionText] = useState('');\n  const fileInputRef = useRef(null);\n  const [pollingInterval, setPollingInterval] = useState(null);\n\n  const handleFileUpload = async (e) => {\n    const file = e.target.files[0];\n    if (!file) return;\n\n    const formData = new FormData();\n    formData.append('file', file);\n\n    setUploadStatus({\n      success: false,\n      message: `Uploading ${file.name}...`\n    });\n\n    try {\n      const response = await uploadFile(formData);\n      setCurrentFile(response.filename);\n      setUploadStatus({\n        success: true,\n        message: `${response.filename} uploaded successfully`\n      });\n    } catch (error) {\n      setUploadStatus({\n        success: false,\n        message: `Error: ${error.message}`\n      });\n    }\n  };\n\n  const handleSendQuestion = async () => {\n    if (!questionText.trim() || !currentFile || isProcessing) return;\n\n    setCurrentQuestion(questionText);\n    setAnswer(null);\n    setProvenanceSources([]);\n    setIsProcessing(true);\n\n    try {\n      const response = await askQuestion(questionText, currentFile);\n      setCurrentQuestionId(response.question_id);\n      startPolling(response.question_id);\n    } catch (error) {\n      setAnswer(`Error: ${error.message}`);\n      setIsProcessing(false);\n    }\n  };\n\n  const startPolling = (questionId) => {\n    // Clear any existing polling\n    if (pollingInterval) clearInterval(pollingInterval);\n\n    // Set up new polling\n    const interval = setInterval(async () => {\n      try {\n        const progress = await checkProgress(questionId);\n        \n        if (progress.done) {\n          clearInterval(interval);\n          setIsProcessing(false);\n        }\n      } catch (error) {\n        console.error('Error checking progress:', error);\n      }\n    }, 1000);\n\n    setPollingInterval(interval);\n  };\n\n  const checkProgress = async (questionId) => {\n    try {\n      const data = await apiCheckProgress(questionId);\n      \n      if (data.progress > 0) {\n        // We have some data, update the UI\n        updateProvenanceSources(questionId, data.data);\n        \n        // If we have an answer, show it\n        await getResults(questionId);\n      }\n      \n      return data;\n    } catch (error) {\n      console.error('Error checking progress:', error);\n      return { progress: 0, done: false };\n    }\n  };\n\n  const getResults = async (questionId) => {\n    try {\n      const data = await apiGetResults(questionId);\n      \n      if (data.success) {\n        if (data.answer) {\n          setAnswer(data.answer);\n        }\n        \n        if (data.provenance && data.provenance.length > 0) {\n          updateProvenanceSources(questionId, data.provenance);\n        }\n      }\n    } catch (error) {\n      console.error('Error getting results:', error);\n    }\n  };\n\n  const updateProvenanceSources = async (questionId, provenance) => {\n    // Update sources with new content\n    const enhancedProvenance = await Promise.all(\n      provenance.map(async (source) => {\n        if (!source.content && source.sentences_ids) {\n          try {\n            const sentenceData = await fetchSentences(questionId, source.sentences_ids);\n            return {\n              ...source,\n              content: Object.values(sentenceData.sentences)\n            };\n          } catch (error) {\n            console.error('Error fetching sentences:', error);\n            return source;\n          }\n        }\n        return source;\n      })\n    );\n    \n    setProvenanceSources(enhancedProvenance);\n  };\n\n  return (\n    <div className=\"input-area\">\n      <label htmlFor=\"file-upload\" className=\"upload-btn\">\n        <FontAwesomeIcon icon={faUpload} />\n      </label>\n      <input\n        ref={fileInputRef}\n        id=\"file-upload\"\n        type=\"file\"\n        accept=\".pdf\"\n        style={{ display: 'none' }}\n        onChange={handleFileUpload}\n      />\n      \n      <div className=\"input-container\">\n        <input\n          className=\"question-input\"\n          type=\"text\"\n          placeholder=\"When was this paper published?\"\n          value={questionText}\n          onChange={(e) => setQuestionText(e.target.value)}\n          onKeyPress={(e) => e.key === 'Enter' && handleSendQuestion()}\n          disabled={!currentFile || isProcessing}\n        />\n        <button\n          className=\"send-btn\"\n          onClick={handleSendQuestion}\n          disabled={!currentFile || !questionText.trim() || isProcessing}\n        >\n          <FontAwesomeIcon icon={faArrowUp} />\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default InputArea; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}